<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\mmal\mmal_picture.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcm_host.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interface/mmal/mmal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interface/mmal/util/mmal_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interface/mmal/util/mmal_default_components.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interface/vmcs_host/vcgencmd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interface/vcsm/user-vcsm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmal_cma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmal_picture.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>hw_mmal_vzc_subpicture_chromas</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>VLC_CODEC_RGBA</name></expr>, <expr><name>VLC_CODEC_BGRA</name></expr>, <expr><name>VLC_CODEC_ARGB</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_SIZE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((s) + sizeof(uint64_t) - 1)/sizeof(uint64_t))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_range</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>buf</name><index>[<expr><call><name>UINT64_SIZE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>vcsm_user_clean_invalid2_s</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vcsm_user_clean_invalid2_block_s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vcsm_user_clean_invalid2_s</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>b</name> <init>= <expr><operator>(</operator>struct <name>vcsm_user_clean_invalid2_s</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <operator>(</operator>struct <name>vcsm_user_clean_invalid2_s</name><operator>)</operator><block>{

<expr><operator>.</operator><name>op_count</name> <operator>=</operator> <literal type="number">1</literal></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vcsm_user_clean_invalid2_block_s</name><operator>)</operator><block>{

<expr><operator>.</operator><name>invalidate_mode</name> <operator>=</operator> <literal type="number">3</literal></expr>, 

<expr><operator>.</operator><name>block_count</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>start_address</name> <operator>=</operator> <name>start</name></expr>, 

<expr><operator>.</operator><name>block_size</name> <operator>=</operator> <name>len</name></expr>,

<expr><operator>.</operator><name>inter_block_stride</name> <operator>=</operator> <literal type="number">0</literal></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vcsm_clean_invalid2</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>MMAL_FOURCC_T</name></type> <name>vlc_to_mmal_color_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_color_space_t</name></type> <name>vlc_cs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>vlc_cs</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>COLOR_SPACE_BT601</name></expr>:</case>

<return>return <expr><name>MMAL_COLOR_SPACE_ITUR_BT601</name></expr>;</return>

<case>case <expr><name>COLOR_SPACE_BT709</name></expr>:</case>

<return>return <expr><name>MMAL_COLOR_SPACE_ITUR_BT709</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>MMAL_COLOR_SPACE_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MMAL_FOURCC_T</name></type> <name>vlc_to_mmal_video_fourcc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_frame_format_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>vf_vlc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>r</name> <init>= <expr><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_rmask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>g</name> <init>= <expr><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_gmask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b</name> <init>= <expr><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_bmask</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xff0000</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0xff00</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MMAL_ENCODING_BGRA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0xff00</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0xff0000</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MMAL_ENCODING_RGBA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xff000000</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0xff0000</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0xff00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MMAL_ENCODING_ABGR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xff00</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0xff0000</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0xff000000</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MMAL_ENCODING_ARGB</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>r</name> <init>= <expr><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_rmask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>g</name> <init>= <expr><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_gmask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b</name> <init>= <expr><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_bmask</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0xf800</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0x7e0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0x1f</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MMAL_ENCODING_RGB16</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>

<return>return <expr><name>MMAL_ENCODING_I420</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_RGBA</name></expr>:</case>

<return>return <expr><name>MMAL_ENCODING_RGBA</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case>

<return>return <expr><name>MMAL_ENCODING_BGRA</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_ARGB</name></expr>:</case>

<return>return <expr><name>MMAL_ENCODING_ARGB</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_MMAL_OPAQUE</name></expr>:</case>

<return>return <expr><name>MMAL_ENCODING_OPAQUE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_fmt_to_video_format</name><parameter_list>(<parameter><decl><type><name>MMAL_VIDEO_FORMAT_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vf_mmal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_frame_format_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>vf_vlc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>wmask</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I420</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">31</literal></expr> </then><else>: <expr><literal type="number">15</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_width</name></name> <operator>+</operator> <name>wmask</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>wmask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>vf_vlc</name><operator>-&gt;</operator><name>i_x_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>vf_vlc</name><operator>-&gt;</operator><name>i_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>vf_vlc</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>vf_vlc</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vf_vlc</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>vf_vlc</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>par</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>par</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>par</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>vf_vlc</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>par</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>vf_vlc</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>vf_vlc</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>vf_vlc</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vf_mmal</name><operator>-&gt;</operator><name>color_space</name></name> <operator>=</operator> <call><name>vlc_to_mmal_color_space</name><argument_list>(<argument><expr><name><name>vf_vlc</name><operator>-&gt;</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hw_mmal_vlc_fmt_to_mmal_fmt</name><parameter_list>(<parameter><decl><type><name>MMAL_ES_FORMAT_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>es_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_frame_format_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>vf_vlc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_fmt_to_video_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>es_fmt</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>video</name></name></expr></argument>, <argument><expr><name>vf_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hw_mmal_vlc_pic_to_mmal_fmt_update</name><parameter_list>(<parameter><decl><type><name>MMAL_ES_FORMAT_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>es_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMAL_VIDEO_FORMAT_T</name></type> <name>vf_new_ss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_VIDEO_FORMAT_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vf_old</name> <init>= <expr><operator>&amp;</operator><name><name>es_fmt</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_VIDEO_FORMAT_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vf_new</name> <init>= <expr><operator>&amp;</operator><name>vf_new_ss</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_fmt_to_video_format</name><argument_list>(<argument><expr><name>vf_new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(

<expr><name><name>vf_new</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>vf_old</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>vf_new</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>vf_old</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>

<name><name>vf_new</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <name><name>vf_old</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>x</name></name> <operator>||</operator>

<name><name>vf_new</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>y</name></name> <operator>!=</operator> <name><name>vf_old</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>y</name></name> <operator>||</operator>

<name><name>vf_new</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>vf_old</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name> <operator>||</operator>

<name><name>vf_new</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name><name>vf_old</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name> <operator>||</operator>

<name><name>vf_new</name><operator>-&gt;</operator><name>par</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name><name>vf_old</name><operator>-&gt;</operator><name>par</name><operator>.</operator><name>num</name></name> <operator>||</operator>

<name><name>vf_new</name><operator>-&gt;</operator><name>par</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <name><name>vf_old</name><operator>-&gt;</operator><name>par</name><operator>.</operator><name>den</name></name> <operator>||</operator>

<name><name>vf_new</name><operator>-&gt;</operator><name>color_space</name></name> <operator>!=</operator> <name><name>vf_old</name><operator>-&gt;</operator><name>color_space</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vf_old</name> <operator>=</operator> <operator>*</operator><name>vf_new</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>mmal_port_pool_ref_s</name>

<block>{

<decl_stmt><decl><type><name>atomic_uint</name></type> <name>refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_POOL_T</name> <modifier>*</modifier></type> <name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_PORT_T</name> <modifier>*</modifier></type> <name>port</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>hw_mmal_port_pool_ref_t</name> <modifier>*</modifier></type> <name>hw_mmal_port_pool_ref_create</name><parameter_list>(<parameter><decl><type><name>MMAL_PORT_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>port</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>headers</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>payload_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hw_mmal_port_pool_ref_t</name> <modifier>*</modifier></type> <name>ppr</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hw_mmal_port_pool_ref_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ppr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ppr</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>mmal_port_pool_create</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>payload_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ppr</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ppr</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ppr</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_detached</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>dothread</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dothread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name>dothread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>kill_ppr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hw_mmal_port_pool_ref_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ppr</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ppr</name><operator>-&gt;</operator><name>port</name><operator>-&gt;</operator><name>is_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mmal_port_disable</name><argument_list>(<argument><expr><name><name>ppr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>mmal_port_pool_destroy</name><argument_list>(<argument><expr><name><name>ppr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>ppr</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hw_mmal_port_pool_ref_release</name><parameter_list>(<parameter><decl><type><name>hw_mmal_port_pool_ref_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ppr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>in_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ppr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ppr</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_cb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_detached</name><argument_list>(<argument><expr><name>kill_ppr</name></expr></argument>, <argument><expr><name>ppr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>kill_ppr</name><argument_list>(<argument><expr><name>ppr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hw_mmal_port_pool_ref_recycle</name><parameter_list>(<parameter><decl><type><name>hw_mmal_port_pool_ref_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ppr</name></decl></parameter>, <parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mmal_buffer_header_reset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mmal_port_send_buffer</name><argument_list>(<argument><expr><name><name>ppr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MMAL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mmal_buffer_header_release</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MMAL_STATUS_T</name></type> <name>hw_mmal_port_pool_ref_fill</name><parameter_list>(<parameter><decl><type><name>hw_mmal_port_pool_ref_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ppr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_STATUS_T</name></type> <name>err</name> <init>= <expr><name>MMAL_SUCCESS</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>mmal_queue_get</name><argument_list>(<argument><expr><name><name>ppr</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mmal_port_send_buffer</name><argument_list>(<argument><expr><name><name>ppr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>MMAL_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mmal_queue_put_back</name><argument_list>(<argument><expr><name><name>ppr</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MMAL_STATUS_T</name></type> <name>hw_mmal_opaque_output</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>obj</name></decl></parameter>,

<parameter><decl><type><name>hw_mmal_port_pool_ref_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>pppr</name></decl></parameter>,

<parameter><decl><type><name>MMAL_PORT_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>port</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>extra_buffers</name></decl></parameter>, <parameter><decl><type><name>MMAL_PORT_BH_CB_T</name></type> <name>callback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMAL_STATUS_T</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>userdata</name></name> <operator>=</operator> <operator>(</operator>struct <name>MMAL_PORT_USERDATA_T</name> <operator>*</operator><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>port_parameter_set_uint32</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>MMAL_PARAMETER_EXTRA_BUFFERS</name></expr></argument>, <argument><expr><name>extra_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>MMAL_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Failed to set MMAL_PARAMETER_EXTRA_BUFFERS on output port (status=%"</literal><name>PRIx32</name><literal type="string">" %s)"</literal></expr></argument>,

<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>mmal_status_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>port_parameter_set_bool</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>MMAL_PARAMETER_ZERO_COPY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>MMAL_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Failed to set zero copy on port %s (status=%"</literal><name>PRIx32</name><literal type="string">" %s)"</literal></expr></argument>,

<argument><expr><name><name>port</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>mmal_status_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>MMAL_ENCODING_OPAQUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>format</name><operator>-&gt;</operator><name>encoding_variant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>mmal_port_format_commit</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>MMAL_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Failed to commit format on port %s (status=%"</literal><name>PRIx32</name><literal type="string">" %s)"</literal></expr></argument>,

<argument><expr><name><name>port</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>mmal_status_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>buffer_num</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>buffer_size_recommended</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pppr</name> <operator>=</operator> <call><name>hw_mmal_port_pool_ref_create</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>buffer_num</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Failed to create output pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>mmal_port_enable</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>MMAL_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hw_mmal_port_pool_ref_release</name><argument_list>(<argument><expr><operator>*</operator><name>pppr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pppr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Failed to enable output port %s (status=%"</literal><name>PRIx32</name><literal type="string">" %s)"</literal></expr></argument>,

<argument><expr><name><name>port</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>mmal_status_to_string</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>MMAL_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX_BUFS_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>pic_ctx_mmal_s</name> <block>{

<decl_stmt><decl><type><name>picture_context_t</name></type> <name>cmn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>cma_buf_t</name> <modifier>*</modifier></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type> <name><name>bufs</name><index>[<expr><name>CTX_BUFS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>pic_ctx_mmal_t</name>;</typedef>

<function><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type> <name>hw_mmal_pic_sub_buf_get</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>sub_no</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pic_ctx_mmal_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>pic_ctx_mmal_t</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>sub_no</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_count</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>sub_no</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hw_mmal_pic_ctx_destroy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type> <name>pic_ctx_cmn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pic_ctx_mmal_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>pic_ctx_mmal_t</name> <operator>*</operator><operator>)</operator><name>pic_ctx_cmn</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mmal_buffer_header_release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>cma_buf_unref</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_context_t</name> <modifier>*</modifier></type> <name>hw_mmal_pic_ctx_copy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type> <name>pic_ctx_cmn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>pic_ctx_mmal_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>src_ctx</name> <init>= <expr><operator>(</operator><name>pic_ctx_mmal_t</name> <operator>*</operator><operator>)</operator><name>pic_ctx_cmn</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pic_ctx_mmal_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst_ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>cmn</name></name> <operator>=</operator> <name><name>src_ctx</name><operator>-&gt;</operator><name>cmn</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <call><name>cma_buf_ref</name><argument_list>(<argument><expr><name><name>src_ctx</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>buf_count</name></name> <operator>=</operator> <name><name>src_ctx</name><operator>-&gt;</operator><name>buf_count</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name><name>src_ctx</name><operator>-&gt;</operator><name>buf_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src_ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mmal_buffer_header_acquire</name><argument_list>(<argument><expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>&amp;</operator><name><name>dst_ctx</name><operator>-&gt;</operator><name>cmn</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MMAL_BOOL_T</name></type>

<name>buf_pre_release_cb</name><parameter_list>(<parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hw_mmal_port_pool_ref_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ppr</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mmal_buffer_header_pre_release_cb_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>MMAL_BH_PRE_RELEASE_CB_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mmal_buffer_header_acquire</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>hw_mmal_port_pool_ref_recycle</name><argument_list>(<argument><expr><name>ppr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hw_mmal_port_pool_ref_release</name><argument_list>(<argument><expr><name>ppr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>MMAL_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_context_t</name> <modifier>*</modifier></type>

<name>hw_mmal_gen_context</name><parameter_list>(<parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>hw_mmal_port_pool_ref_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ppr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pic_ctx_mmal_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pic_ctx_mmal_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ppr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ppr</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mmal_buffer_header_pre_release_cb_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_pre_release_cb</name></expr></argument>, <argument><expr><name>ppr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cmn</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <name>hw_mmal_pic_ctx_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cmn</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>hw_mmal_pic_ctx_destroy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cmn</name></name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> <name>piccpy_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>piccpy_10_to_8_c</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>d</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type> <name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_copy_2d</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>d_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>d_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>s_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>s_stride</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>line_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_stride</name> <operator>==</operator> <name>d_stride</name> <operator>&amp;&amp;</operator> <name>d_stride</name> <operator>&lt;</operator> <name>line_len</name> <operator>+</operator> <literal type="number">32</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d_ptr</name></expr></argument>, <argument><expr><name>s_ptr</name></expr></argument>, <argument><expr><name>d_stride</name> <operator>*</operator> <name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><name>lines</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d_ptr</name></expr></argument>, <argument><expr><name>s_ptr</name></expr></argument>, <argument><expr><name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d_ptr</name> <operator>+=</operator> <name>d_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_ptr</name> <operator>+=</operator> <name>s_stride</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_copy_2d_10_to_8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>d_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>d_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>s_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>s_stride</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>line_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>piccpy_fn</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>docpy</name> <init>= <expr><name>piccpy_10_to_8_c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s_stride</name> <operator>==</operator> <name>d_stride</name> <operator>*</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>d_stride</name> <operator>&lt;</operator> <name>line_len</name> <operator>+</operator> <literal type="number">32</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>docpy</name><argument_list>(<argument><expr><name>d_ptr</name></expr></argument>, <argument><expr><name>s_ptr</name></expr></argument>, <argument><expr><name>d_stride</name> <operator>*</operator> <name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><name>lines</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>docpy</name><argument_list>(<argument><expr><name>d_ptr</name></expr></argument>, <argument><expr><name>s_ptr</name></expr></argument>, <argument><expr><name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d_ptr</name> <operator>+=</operator> <name>d_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_ptr</name> <operator>+=</operator> <name>s_stride</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>hw_mmal_copy_pic_to_buf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf_data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pLength</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>MMAL_ES_FORMAT_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pic</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_cma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MMAL_VIDEO_FORMAT_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>video</name> <init>= <expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dest</name> <init>= <expr><name>buf_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>MMAL_ENCODING_I420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>y_size</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>video</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mem_copy_2d</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mem_copy_2d</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>y_size</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mem_copy_2d</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>y_size</name> <operator>+</operator> <name>y_size</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>y_size</name> <operator>+</operator> <name>y_size</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_CODEC_I420_10L</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>y_size</name> <init>= <expr><name><name>video</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>video</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mem_copy_2d_10_to_8</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mem_copy_2d_10_to_8</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>y_size</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mem_copy_2d_10_to_8</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>y_size</name> <operator>+</operator> <name>y_size</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>video</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>y_size</name> <operator>+</operator> <name>y_size</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>pLength</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EBADVAR</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_cma</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>flush_range</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pLength</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pLength</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MMAL_BOOL_T</name></type> <name>rep_buf_free_cb</name><parameter_list>(<parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cma_buf_unref</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MMAL_FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pic_to_buf_copy_props</name><parameter_list>(<parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MMAL_BUFFER_HEADER_VIDEO_FLAG_INTERLACED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>MMAL_BUFFER_HEADER_VIDEO_FLAG_INTERLACED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MMAL_BUFFER_HEADER_VIDEO_FLAG_INTERLACED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MMAL_BUFFER_HEADER_VIDEO_FLAG_INTERLACED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MMAL_BUFFER_HEADER_VIDEO_FLAG_TOP_FIELD_FIRST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>MMAL_BUFFER_HEADER_VIDEO_FLAG_TOP_FIELD_FIRST</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MMAL_BUFFER_HEADER_VIDEO_FLAG_TOP_FIELD_FIRST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MMAL_BUFFER_HEADER_VIDEO_FLAG_TOP_FIELD_FIRST</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>pic</name><operator>-&gt;</operator><name>date</name></name></expr> </then><else>: <expr><name>MMAL_TIME_UNKNOWN</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cma_buf_buf_attach</name><parameter_list>(<parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uintptr_t</name></type> <name>vc_h</name> <init>= <expr><call><name>cma_buf_vc_handle</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vc_h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mmal_buffer_header_reset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>vc_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>=</operator> <call><name>cma_buf_size</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>alloc_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mmal_buffer_header_pre_release_cb_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rep_buf_free_cb</name></expr></argument>, <argument><expr><call><name>cma_buf_ref</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type> <name>hw_mmal_pic_buf_copied</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pic</name></decl></parameter>,

<parameter><decl><type><name>MMAL_POOL_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>rep_pool</name></decl></parameter>,

<parameter><decl><type><name>MMAL_PORT_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>port</name></decl></parameter>,

<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cbp</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_cma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name> <init>= <expr><call><name>mmal_queue_wait</name><argument_list>(<argument><expr><name><name>rep_pool</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail0</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name> <init>= <expr><call><name>cma_buf_pool_alloc_buf</name><argument_list>(<argument><expr><name>cbp</name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cma_buf_buf_attach</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pic_to_buf_copy_props</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hw_mmal_copy_pic_to_buf</name><argument_list>(<argument><expr><call><name>cma_buf_addr</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>is_cma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>MMAL_BUFFER_HEADER_FLAG_FRAME_END</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cma_buf_unref</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

<label><name>fail2</name>:</label>

<expr_stmt><expr><call><name>cma_buf_unref</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail1</name>:</label>

<expr_stmt><expr><call><name>mmal_buffer_header_release</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail0</name>:</label>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type> <name>hw_mmal_pic_buf_replicated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pic</name></decl></parameter>, <parameter><decl><type><name>MMAL_POOL_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>rep_pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pic_ctx_mmal_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>pic_ctx_mmal_t</name> <operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rep_buf</name> <init>= <expr><call><name>mmal_queue_wait</name><argument_list>(<argument><expr><name><name>rep_pool</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rep_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mmal_buffer_header_replicate</name><argument_list>(<argument><expr><name>rep_buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MMAL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cma_buf_buf_attach</name><argument_list>(<argument><expr><name>rep_buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>pic_to_buf_copy_props</name><argument_list>(<argument><expr><name>rep_buf</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rep_buf</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>mmal_buffer_header_release</name><argument_list>(<argument><expr><name>rep_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>hw_mmal_get_gpu_mem</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stashed_val</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VCHI_INSTANCE_T</name></type> <name>vchi_instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VCHI_CONNECTION_T</name> <modifier>*</modifier></type><name>vchi_connection</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>rbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stashed_val</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>stashed_val</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vchi_initialise</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vchi_instance</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail0</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vchi_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vchi_instance</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail0</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vc_vchi_gencmd_init</name><argument_list>(<argument><expr><name>vchi_instance</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vchi_connection</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vc_gencmd_send</name><argument_list>(<argument><expr><literal type="string">"get_mem gpu"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vc_gencmd_read_response</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><literal type="string">"gpu="</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>m</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>rbuf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'M'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stashed_val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>stashed_val</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>m</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vc_gencmd_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vchi_disconnect</name><argument_list>(<argument><expr><name>vchi_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stashed_val</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vc_gencmd_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vchi_disconnect</name><argument_list>(<argument><expr><name>vchi_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail0</name>:</label>

<expr_stmt><expr><name>stashed_val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<typedef>typedef <type><struct>struct <name>pool_ent_s</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>pool_ent_s</name></name> <modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pool_ent_s</name></name> <modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_int</name></type> <name>ref_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vcsm_hdl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vc_hdl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_FOURCC_T</name></type> <name>enc_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>pic</name></decl>;</decl_stmt>

}</block></struct></type> <name>pool_ent_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ent_list_hdr_s</name>

<block>{

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>ents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

}</block></struct></type> <name>ent_list_hdr_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENT_LIST_HDR_INIT</name></cpp:macro> <cpp:value>(ent_list_hdr_t){ .ents = NULL, .tail = NULL, .n = 0 }</cpp:value></cpp:define>

<struct>struct <name>vzc_pool_ctl_s</name>

<block>{

<decl_stmt><decl><type><name>atomic_int</name></type> <name>ref_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ent_list_hdr_t</name></type> <name>ent_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ent_list_hdr_t</name></type> <name>ents_cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ent_list_hdr_t</name></type> <name>ents_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_POOL_T</name> <modifier>*</modifier></type> <name>buf_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_cma</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>vzc_subbuf_ent_s</name>

<block>{

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_RECT_T</name></type> <name>pic_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_RECT_T</name></type> <name>orig_dest_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_DISPLAYREGION_T</name></type> <name>dreg</name></decl>;</decl_stmt>

}</block></struct></type> <name>vzc_subbuf_ent_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>pool_ent_t</name> <modifier>*</modifier></type> <name>ent_extract</name><parameter_list>(<parameter><decl><type><name>ent_list_hdr_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>elh</name></decl></parameter>, <parameter><decl><type><name>pool_ent_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>elh</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>elh</name><operator>-&gt;</operator><name>ents</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>elh</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>

<return>return <expr><name>ent</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pool_ent_t</name> <modifier>*</modifier></type> <name>ent_extract_tail</name><parameter_list>(<parameter><decl><type><name>ent_list_hdr_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>elh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ent_extract</name><argument_list>(<argument><expr><name>elh</name></expr></argument>, <argument><expr><name><name>elh</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ent_add_head</name><parameter_list>(<parameter><decl><type><name>ent_list_hdr_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>elh</name></decl></parameter>, <parameter><decl><type><name>pool_ent_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>elh</name><operator>-&gt;</operator><name>ents</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>elh</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elh</name><operator>-&gt;</operator><name>ents</name></name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>elh</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ent_free</name><parameter_list>(<parameter><decl><type><name>pool_ent_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>pic</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vcsm_unlock_hdl</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>vcsm_hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vcsm_free</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>vcsm_hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ent_free_list</name><parameter_list>(<parameter><decl><type><name>ent_list_hdr_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>elh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>ent</name> <init>= <expr><name><name>elh</name><operator>-&gt;</operator><name>ents</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>elh</name> <operator>=</operator> <name>ENT_LIST_HDR_INIT</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>t</name> <init>= <expr><name>ent</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ent_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ent_list_move</name><parameter_list>(<parameter><decl><type><name>ent_list_hdr_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>ent_list_hdr_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>ENT_LIST_HDR_INIT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pool_ent_t</name> <modifier>*</modifier></type> <name>ent_list_extract_pic_ent</name><parameter_list>(<parameter><decl><type><name>ent_list_hdr_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>elh</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><name><name>elh</name><operator>-&gt;</operator><name>tail</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>pic</name></name> <operator>==</operator> <name>pic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ent_extract</name><argument_list>(<argument><expr><name>elh</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_ENT_ALLOC_BLOCK</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>pool_ent_t</name> <modifier>*</modifier></type> <name>pool_ent_alloc_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>req_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>ent</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>alloc_size</name> <init>= <expr><operator>(</operator><name>req_size</name> <operator>+</operator> <name>POOL_ENT_ALLOC_BLOCK</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>POOL_ENT_ALLOC_BLOCK</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>vcsm_hdl</name></name> <operator>=</operator> <call><name>vcsm_malloc_cache</name><argument_list>(<argument><expr><name>alloc_size</name></expr></argument>, <argument><expr><name>VCSM_CACHE_TYPE_HOST</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"vlc-subpic"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>vc_hdl</name></name> <operator>=</operator> <call><name>vcsm_vc_hdl_from_hdl</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>vcsm_hdl</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>vcsm_lock</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>vcsm_hdl</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>alloc_size</name></expr>;</expr_stmt>

<return>return <expr><name>ent</name></expr>;</return>

<label><name>fail2</name>:</label>

<expr_stmt><expr><call><name>vcsm_free</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>vcsm_hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail1</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pool_ent_t</name> <modifier>*</modifier></type> <name>pool_ent_ref</name><parameter_list>(<parameter><decl><type><name>pool_ent_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ent</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pool_recycle</name><parameter_list>(<parameter><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>pool_ent_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>xs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>pic</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>ent_pool</name><operator>.</operator><name>n</name></name> <operator>&gt;=</operator> <name><name>pc</name><operator>-&gt;</operator><name>max_n</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xs</name> <operator>=</operator> <call><name>ent_extract_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ent_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ent_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ent_pool</name></name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ent_free</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pool_recycle_list</name><parameter_list>(<parameter><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>ent_list_hdr_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>elh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>ent</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ent</name> <operator>=</operator> <call><name>ent_extract_tail</name><argument_list>(<argument><expr><name>elh</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pool_recycle</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pool_ent_t</name> <modifier>*</modifier></type> <name>pool_best_fit</name><parameter_list>(<parameter><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>req_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>best</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>ent</name> <init>= <expr><name><name>pc</name><operator>-&gt;</operator><name>ent_pool</name><operator>.</operator><name>ents</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>req_size</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name>req_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>POOL_ENT_ALLOC_BLOCK</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>best</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>best</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>ent</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ent_extract</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ent_pool</name></name></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>best</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>best</name> <operator>=</operator> <call><name>pool_ent_alloc_new</name><argument_list>(<argument><expr><name>req_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>best</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <operator>++</operator><name><name>pc</name><operator>-&gt;</operator><name>seq</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>best</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <operator>++</operator><name><name>pc</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>best</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>best</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hw_mmal_vzc_buf_set_format</name><parameter_list>(<parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>MMAL_ES_FORMAT_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>es_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>pool_ent_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ent</name> <init>= <expr><operator>(</operator><operator>(</operator><name>vzc_subbuf_ent_t</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>user_data</name></name><operator>)</operator><operator>-&gt;</operator><name>ent</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMAL_VIDEO_FORMAT_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>v_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>es_fmt</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MMAL_ES_TYPE_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>enc_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_fmt</name><operator>-&gt;</operator><name>encoding_variant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_fmt</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_fmt</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_fmt</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_fmt</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_fmt</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_fmt</name><operator>-&gt;</operator><name>crop</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MMAL_DISPLAYREGION_T</name> <modifier>*</modifier></type> <name>hw_mmal_vzc_buf_region</name><parameter_list>(<parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vzc_subbuf_ent_t</name> <modifier>*</modifier></type> <name>sb</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>dreg</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rescale_x</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mul</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>div</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>div</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>x</name> <operator>*</operator> <name>mul</name></expr> </then><else>: <expr><operator>(</operator><name>x</name> <operator>*</operator> <name>mul</name> <operator>+</operator> <name>div</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>div</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rescale_rect</name><parameter_list>(<parameter><decl><type><name>MMAL_RECT_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MMAL_RECT_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MMAL_RECT_T</name> <modifier>*</modifier></type> <name>mul_rect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MMAL_RECT_T</name> <modifier>*</modifier></type> <name>div_rect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>rescale_x</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>div_rect</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mul_rect</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>div_rect</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>mul_rect</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>rescale_x</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>div_rect</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>mul_rect</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>div_rect</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>mul_rect</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>rescale_x</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>mul_rect</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>div_rect</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>rescale_x</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>mul_rect</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>div_rect</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hw_mmal_vzc_buf_scale_dest_rect</name><parameter_list>(<parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MMAL_RECT_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>scale_rect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vzc_subbuf_ent_t</name> <modifier>*</modifier></type> <name>sb</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scale_rect</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>dreg</name><operator>.</operator><name>dest_rect</name></name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>orig_dest_rect</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>rescale_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>dreg</name><operator>.</operator><name>dest_rect</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>orig_dest_rect</name></name></expr></argument>,

<argument><expr><name>scale_rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>pic_rect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>hw_mmal_vzc_buf_seq</name><parameter_list>(<parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vzc_subbuf_ent_t</name> <modifier>*</modifier></type> <name>sb</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>sb</name><operator>-&gt;</operator><name>ent</name><operator>-&gt;</operator><name>seq</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type> <name>hw_mmal_vzc_buf_from_pic</name><parameter_list>(<parameter><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>MMAL_RECT_T</name></type> <name>dst_pic_rect</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x_offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y_offset</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>alpha</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_first</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name> <init>= <expr><call><name>mmal_queue_get</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buf_pool</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vzc_subbuf_ent_t</name> <modifier>*</modifier></type> <name>sb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sb</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_first</name> <operator>||</operator> <name><name>pc</name><operator>-&gt;</operator><name>ents_cur</name><operator>.</operator><name>n</name></name> <operator>&gt;=</operator> <name>CTX_BUFS_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pool_recycle_list</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ents_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ent_list_move</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ents_prev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ents_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>dreg</name><operator>.</operator><name>hdr</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>MMAL_PARAMETER_DISPLAYREGION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>dreg</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>dreg</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>bpp</name> <init>= <expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>xl</name> <init>= <expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>xr</name> <init>= <expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dst_stride</name> <init>= <expr><operator>(</operator><name>xr</name> <operator>-</operator> <name>xl</name><operator>)</operator> <operator>*</operator> <name>bpp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dst_lines</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dst_size</name> <init>= <expr><name>dst_stride</name> <operator>*</operator> <name>dst_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pool_ent_t</name> <modifier>*</modifier></type> <name>ent</name> <init>= <expr><call><name>ent_list_extract_pic_ent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ents_prev</name></name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>needs_copy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>ent_list_extract_pic_ent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ents_cur</name></name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>needs_copy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ent</name> <operator>=</operator> <call><name>pool_best_fit</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>dst_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>enc_type</name></name> <operator>=</operator> <call><name>vlc_to_mmal_video_fourcc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ent_add_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ents_cur</name></name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>ent</name></name> <operator>=</operator> <call><name>pool_ent_ref</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hw_mmal_vzc_pool_ref</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ent</name><operator>-&gt;</operator><name>vc_hdl</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>dst_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>MMAL_BUFFER_HEADER_FLAG_FRAME_END</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>pic</name><operator>-&gt;</operator><name>date</name></name></expr> </then><else>: <expr><name>MMAL_TIME_UNKNOWN</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>video</name></name> <operator>=</operator> <operator>(</operator><name>MMAL_BUFFER_HEADER_VIDEO_SPECIFIC_T</name><operator>)</operator><block>{

<expr><operator>.</operator><name>planes</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>pitch</name> <operator>=</operator> <block>{ <expr><name>dst_stride</name></expr> }</block></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>dreg</name><operator>.</operator><name>set</name></name> <operator>=</operator> <name>MMAL_DISPLAY_SET_SRC_RECT</name> <operator>|</operator>

<name>MMAL_DISPLAY_SET_DEST_RECT</name> <operator>|</operator>

<name>MMAL_DISPLAY_SET_FULLSCREEN</name> <operator>|</operator>

<name>MMAL_DISPLAY_SET_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>dreg</name><operator>.</operator><name>fullscreen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>dreg</name><operator>.</operator><name>dest_rect</name></name> <operator>=</operator> <operator>(</operator><name>MMAL_RECT_T</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>dreg</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>alpha</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <name>MMAL_DISPLAY_ALPHA_FLAGS_MIX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>dreg</name><operator>.</operator><name>src_rect</name></name> <operator>=</operator> <operator>(</operator><name>MMAL_RECT_T</name><operator>)</operator><block>{

<expr><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>-</operator> <name>xl</name><operator>)</operator></expr>,

<expr><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>pic_rect</name></name> <operator>=</operator> <name>dst_pic_rect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>orig_dest_rect</name></name> <operator>=</operator> <operator>(</operator><name>MMAL_RECT_T</name><operator>)</operator><block>{

<expr><operator>.</operator><name>x</name> <operator>=</operator> <name>x_offset</name></expr>,

<expr><operator>.</operator><name>y</name> <operator>=</operator> <name>y_offset</name></expr>,

<expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_copy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>dst_stride</name> <operator>/</operator> <name>bpp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>dst_lines</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>ent</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name>xl</name> <operator>*</operator> <name>bpp</name> <operator>+</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mem_copy_2d</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pc</name><operator>-&gt;</operator><name>is_cma</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>flush_range</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>dst_stride</name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>buf</name></expr>;</return>

<label><name>fail2</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail1</name>:</label>

<expr_stmt><expr><call><name>mmal_buffer_header_release</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hw_mmal_vzc_pool_flush</name><parameter_list>(<parameter><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pool_recycle_list</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ents_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pool_recycle_list</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ents_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hw_mmal_vzc_pool_delete</name><parameter_list>(<parameter><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>hw_mmal_vzc_pool_flush</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ent_free_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ent_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>buf_pool</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mmal_pool_destroy</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buf_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hw_mmal_vzc_pool_release</name><parameter_list>(<parameter><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hw_mmal_vzc_pool_delete</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>hw_mmal_vzc_pool_ref</name><parameter_list>(<parameter><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MMAL_BOOL_T</name></type> <name>vcz_pool_release_cb</name><parameter_list>(<parameter><decl><type><name>MMAL_POOL_T</name> <modifier>*</modifier></type> <name>buf_pool</name></decl></parameter>, <parameter><decl><type><name>MMAL_BUFFER_HEADER_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vzc_subbuf_ent_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>sb</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>buf_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pool_recycle</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hw_mmal_vzc_pool_release</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>MMAL_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier></type> <name>hw_mmal_vzc_pool_new</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_cma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vzc_pool_ctl_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pc</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>is_cma</name></name> <operator>=</operator> <name>is_cma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>max_n</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>buf_pool</name></name> <operator>=</operator> <call><name>mmal_pool_create</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>hw_mmal_vzc_pool_delete</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mmal_pool_callback_set</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buf_pool</name></name></expr></argument>, <argument><expr><name>vcz_pool_release_cb</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>rpi_is_model_pi4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>bcm_host_is_model_pi4</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
