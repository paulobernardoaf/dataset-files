<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\nvdec\chroma.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvdec_fmt.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenCUDAToCPU</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"CUDA converter"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"CUDA/NVDEC Chroma Converter filter"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VFILTER</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>OpenCUDAToCPU</argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_CUDA</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CudaCheckErr(VLC_OBJECT(p_filter), devsys-&gt;cudaFunctions, devsys-&gt;cudaFunctions-&gt;func(__VA_ARGS__), #func)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type> <name>FilterCUDAToCPU</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pic_context_nvdec_t</name> <modifier>*</modifier></type><name>srcpic</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>pic_context_nvdec_t</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_dev</name> <init>= <expr><call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_device_nvdec_t</name> <modifier>*</modifier></type><name>devsys</name> <init>= <expr><call><name>GetNVDECOpaqueDevice</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><name><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sync_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>srcY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>plane_t</name></type> <name>plane</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVA</name> <operator>&amp;&amp;</operator> <name>i_plane</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>plane</name><operator>.</operator><name>p_pixels</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name><name>plane</name><operator>.</operator><name>i_pitch</name></name> <operator>*</operator> <name><name>plane</name><operator>.</operator><name>i_visible_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CUDA_MEMCPY2D</name></type> <name>cu_cpy</name> <init>= <expr><block>{

<expr><operator>.</operator><name>srcMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_DEVICE</name></expr>,

<expr><operator>.</operator><name>srcDevice</name> <operator>=</operator> <name><name>srcpic</name><operator>-&gt;</operator><name>devicePtr</name></name></expr>,

<expr><operator>.</operator><name>srcY</name> <operator>=</operator> <name>srcY</name></expr>,

<expr><operator>.</operator><name>srcPitch</name> <operator>=</operator> <name><name>srcpic</name><operator>-&gt;</operator><name>bufferPitch</name></name></expr>,

<expr><operator>.</operator><name>dstMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_HOST</name></expr>,

<expr><operator>.</operator><name>dstHost</name> <operator>=</operator> <name><name>plane</name><operator>.</operator><name>p_pixels</name></name></expr>,

<expr><operator>.</operator><name>dstPitch</name> <operator>=</operator> <name><name>plane</name><operator>.</operator><name>i_pitch</name></name></expr>,

<expr><operator>.</operator><name>WidthInBytes</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>srcpic</name><operator>-&gt;</operator><name>bufferPitch</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>Height</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>srcpic</name><operator>-&gt;</operator><name>bufferHeight</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>plane</name><operator>.</operator><name>i_visible_lines</name></name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuMemcpy2DAsync</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu_cpy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>srcY</name> <operator>+=</operator> <name><name>srcpic</name><operator>-&gt;</operator><name>bufferHeight</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><name>sync_result</name> <operator>=</operator> <call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuStreamSynchronize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><name>sync_result</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALL_CUDA</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCUDAToCPU</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_in</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<call><name>vlc_video_context_GetType</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_VIDEO_CONTEXT_NVDEC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NV12</name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_10B</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_P010</name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_16B</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_P016</name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_444</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I444</name> <operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVA</name><operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_444_16B</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I444_16L</name> <operator>)</operator>

<operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>FilterCUDAToCPU</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
