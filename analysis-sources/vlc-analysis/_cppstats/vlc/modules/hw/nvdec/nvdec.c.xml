<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\nvdec\nvdec.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_messages.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_pool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_atomic.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFNV_LOG_FUNC</name><parameter_list>(<parameter><type><name>logctx</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>msg_Err((vlc_object_t*)logctx, msg, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFNV_DEBUG_LOG_FUNC</name><parameter_list>(<parameter><type><name>logctx</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>msg_Dbg((vlc_object_t*)logctx, msg, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffnvcodec/dynlink_loader.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/hxxx_helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvdec_fmt.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecoderContextOpen</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINTERLACE_MODULE_TEXT</name></cpp:macro> <cpp:value>N_("Integrated deinterlacing")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINTERLACE_MODULE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Specify the deinterlace mode to use." )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_deinterlace_type</name><index>[]</index></name> <init>=

<expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Disable"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bob"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Adaptive"</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ppsi_deinterlace_type</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>cudaVideoDeinterlaceMode_Weave</name></expr>,

<expr><name>cudaVideoDeinterlaceMode_Bob</name></expr>,

<expr><name>cudaVideoDeinterlaceMode_Adaptive</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"NVDEC video decoder"</literal>)</argument>)</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"nvdec"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">60</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_VCODEC</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"nvdec-deint"</literal></argument>, <argument>cudaVideoDeinterlaceMode_Bob</argument>,

<argument>DEINTERLACE_MODULE_TEXT</argument>, <argument>DEINTERLACE_MODULE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>ppsi_deinterlace_type</argument>, <argument>ppsz_deinterlace_type</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>OpenDecoder</argument>, <argument>CloseDecoder</argument>)</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_callback_dec_device</name><argument_list>(<argument>DecoderContextOpen</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"nvdec"</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HXXX_SURFACES</name></cpp:macro> <cpp:value>(16 + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVDEC_DISPLAY_SURFACES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POOL_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_WIDTH_ALIGN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>nvdec_pool_t</name> <block>{

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_device_nvdec_t</name> <modifier>*</modifier></type><name>nvdec_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUdeviceptr</name></type> <name><name>outputDevicePtr</name><index>[<expr><name>MAX_POOL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>picture_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_atomic_rc_t</name></type> <name>rc</name></decl>;</decl_stmt>

}</block></struct></type> <name>nvdec_pool_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>pic_pool_context_nvdec_t</name> <block>{

<decl_stmt><decl><type><name>pic_context_nvdec_t</name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nvdec_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

}</block></struct></type> <name>pic_pool_context_nvdec_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>nvdec_ctx</name> <block>{

<decl_stmt><decl><type><name>decoder_device_nvdec_t</name> <modifier>*</modifier></type><name>devsys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CuvidFunctions</name> <modifier>*</modifier></type><name>cuvidFunctions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDDECODECAPS</name></type> <name>selectedDecoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUvideodecoder</name></type> <name>cudecoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUvideoparser</name></type> <name>cuparser</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_helper</name></name></type> <name>hh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vc1_header_offset</name></decl>;</decl_stmt>

}</block>;</union>

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_hxxx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_surface</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_xps_pushed</name></decl>;</decl_stmt> 

<function_decl><type><name>block_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>process_block</name>)<parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>cudaVideoDeinterlaceMode</name></type> <name>deintMode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_nvparser_success</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>decoderHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>outputPitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nvdec_pool_t</name> <modifier>*</modifier></type><name>out_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_out</name></decl>;</decl_stmt>

}</block></struct></type> <name>nvdec_ctx_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_CUDA_DEC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CudaCheckErr(VLC_OBJECT(p_dec), p_sys-&gt;devsys-&gt;cudaFunctions, p_sys-&gt;devsys-&gt;cudaFunctions-&gt;func(__VA_ARGS__), #func)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_CUDA_DEV</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CudaCheckErr(VLC_OBJECT(device), p_sys-&gt;cudaFunctions, p_sys-&gt;cudaFunctions-&gt;func(__VA_ARGS__), #func)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_CUVID</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CudaCheckErr(VLC_OBJECT(p_dec), p_sys-&gt;devsys-&gt;cudaFunctions, p_sys-&gt;cuvidFunctions-&gt;func(__VA_ARGS__), #func)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_CUDA_POOL</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pool-&gt;nvdec_dev-&gt;cudaFunctions-&gt;func(__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVDEC_PICPOOLCTX_FROM_PICCTX</name><parameter_list>(<parameter><type><name>pic_ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of(NVDEC_PICCONTEXT_FROM_PICCTX(pic_ctx), pic_pool_context_nvdec_t, ctx)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nvdec_pool_Destroy</name><parameter_list>(<parameter><decl><type><name>nvdec_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CALL_CUDA_POOL</name><argument_list>(<argument><expr><name>cuMemFree</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>picture_pool_Release</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>picture_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nvdec_pool_AddRef</name><parameter_list>(<parameter><decl><type><name>nvdec_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_atomic_rc_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nvdec_pool_Release</name><parameter_list>(<parameter><decl><type><name>nvdec_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_atomic_rc_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nvdec_pool_Destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nvdec_pool_t</name><modifier>*</modifier></type> <name>nvdec_pool_Create</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>buffer_pitch</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>buffer_height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_dev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nvdec_pool_t</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dec_dev</name> <operator>=</operator> <call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_dev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>nvdec_dev</name></name> <operator>=</operator> <call><name>GetNVDECOpaqueDevice</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>nvdec_dev</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CALL_CUDA_POOL</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>nvdec_dev</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CUDA_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pics</name><index>[<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CALL_CUDA_POOL</name><argument_list>(<argument><expr><name>cuMemAlloc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>buffer_pitch</name> <operator>*</operator> <name>buffer_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CUDA_SUCCESS</name> <operator>||</operator> <name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_pool</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>res</name> <init>= <expr><block>{

<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>picture_NewFromResource</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pics</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_pool</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>picture_pool</name></name> <operator>=</operator> <call><name>picture_pool_New</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>picture_pool</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_pool</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CALL_CUDA_POOL</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>vctx</name></name> <operator>=</operator> <name>vctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_atomic_rc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pool</name></expr>;</return>

<label><name>free_pool</name>:</label>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CALL_CUDA_POOL</name><argument_list>(<argument><expr><name>cuMemFree</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>outputDevicePtr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CALL_CUDA_POOL</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>dec_dev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nvdec_picture_CtxDestroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>picctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pic_pool_context_nvdec_t</name> <modifier>*</modifier></type><name>srcpic</name> <init>= <expr><call><name>NVDEC_PICPOOLCTX_FROM_PICCTX</name><argument_list>(<argument><expr><name>picctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>nvdec_pool_Release</name><argument_list>(<argument><expr><name><name>srcpic</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>srcpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>nvdec_picture_CtxClone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>srcctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pic_pool_context_nvdec_t</name> <modifier>*</modifier></type><name>clonectx</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>clonectx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>clonectx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>pic_pool_context_nvdec_t</name> <modifier>*</modifier></type><name>srcpic</name> <init>= <expr><call><name>NVDEC_PICPOOLCTX_FROM_PICCTX</name><argument_list>(<argument><expr><name>srcctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>clonectx</name> <operator>=</operator> <operator>*</operator><name>srcpic</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>clonectx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name><operator>.</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nvdec_pool_AddRef</name><argument_list>(<argument><expr><name><name>clonectx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>clonectx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>nvdec_pool_Wait</name><parameter_list>(<parameter><decl><type><name>nvdec_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_pool_Wait</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>picture_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>pic_pool_context_nvdec_t</name> <modifier>*</modifier></type><name>picctx</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>picctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>picctx</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>picctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{

<expr><name>nvdec_picture_CtxDestroy</name></expr>,

<expr><name>nvdec_picture_CtxClone</name></expr>,

<expr><name><name>pool</name><operator>-&gt;</operator><name>vctx</name></name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>picctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name><operator>.</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picctx</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nvdec_pool_AddRef</name><argument_list>(<argument><expr><name><name>picctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>picctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ctx</name></name></expr>;</expr_stmt>

<return>return <expr><name>pic</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>MapSurfaceChroma</name><parameter_list>(<parameter><decl><type><name>cudaVideoChromaFormat</name></type> <name>chroma</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bitDepth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>cudaVideoChromaFormat_420</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bitDepth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_NV12</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitDepth</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_P010</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_CODEC_P016</name></expr>;</return>

<case>case <expr><name>cudaVideoChromaFormat_444</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bitDepth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_I444</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_CODEC_I444_16L</name></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cudaVideoSurfaceFormat</name></type> <name>MapSurfaceFmt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_vlc_fourcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>i_vlc_fourcc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_10B</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_16B</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_P010</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_P016</name></expr>:</case>

<return>return <expr><name>cudaVideoSurfaceFormat_P016</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_NV12</name></expr>:</case>

<return>return <expr><name>cudaVideoSurfaceFormat_NV12</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_444</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I444</name></expr>:</case>

<return>return <expr><name>cudaVideoSurfaceFormat_YUV444</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_444_16B</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I444_16L</name></expr>:</case>

<return>return <expr><name>cudaVideoSurfaceFormat_YUV444_16Bit</name></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CUtoFMT</name><parameter_list>(<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CUVIDEOFORMAT</name> <modifier>*</modifier></type><name>p_format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bpp</name> <init>= <expr><name><name>p_format</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_nvdec_opaque</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <call><name>MapSurfaceChroma</name><argument_list>(<argument><expr><name><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name></expr></argument>, <argument><expr><name>i_bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_chroma</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>i_chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>display_area</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>display_area</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>display_area</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>p_format</name><operator>-&gt;</operator><name>display_area</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>display_area</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>p_format</name><operator>-&gt;</operator><name>display_area</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>numerator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>denominator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <name>i_bpp</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>CUDAAPI</name></type> <name>HandleVideoSequence</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>, <parameter><decl><type><name>CUVIDEOFORMAT</name> <modifier>*</modifier></type><name>p_format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>is_nvdec_opaque</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>out_pool</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>nvdec_pool_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out_pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CUtoFMT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>p_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unsupported Chroma %d + BitDepth %d"</literal></expr></argument>, <argument><expr><name><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name></expr></argument>, <argument><expr><name><name>p_format</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidDestroyDecoder</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CUVIDDECODECREATEINFO</name></type> <name>dparams</name> <init>= <expr><block>{

<expr><operator>.</operator><name>ulWidth</name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>coded_width</name></name></expr>,

<expr><operator>.</operator><name>ulHeight</name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>coded_height</name></name></expr>,

<expr><operator>.</operator><name>ulTargetWidth</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>,

<expr><operator>.</operator><name>ulTargetHeight</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>,

<expr><operator>.</operator><name>bitDepthMinus8</name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name></expr>,

<expr><operator>.</operator><name>OutputFormat</name> <operator>=</operator> <call><name>MapSurfaceFmt</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>CodecType</name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>codec</name></name></expr>,

<expr><operator>.</operator><name>ChromaFormat</name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name></expr>,

<expr><operator>.</operator><name>ulNumDecodeSurfaces</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_surface</name></name></expr>,

<expr><operator>.</operator><name>ulNumOutputSurfaces</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>DeinterlaceMode</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>deintMode</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidCreateDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cuda_error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>is_nvdec_opaque</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CUdeviceptr</name></type> <name>frameDevicePtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDPROCPARAMS</name></type> <name>params</name> <init>= <expr><block>{

<expr><operator>.</operator><name>progressive_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>top_field_first</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CALL_CUVID</name><argument_list>( <argument><expr><name>cuvidMapVideoFrame</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>frameDevicePtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>outputPitch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cuda_error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidUnmapVideoFrame</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>, <argument><expr><name>frameDevicePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ByteWidth</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>outputPitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>Height</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>dparams</name><operator>.</operator><name>OutputFormat</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>cudaVideoSurfaceFormat_YUV444</name></expr>:</case>

<case>case <expr><name>cudaVideoSurfaceFormat_YUV444_16Bit</name></expr>:</case>

<expr_stmt><expr><name>Height</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>Height</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>cudaVideoSurfaceFormat_NV12</name></expr>:</case>

<case>case <expr><name>cudaVideoSurfaceFormat_P016</name></expr>:</case>

<expr_stmt><expr><name>Height</name> <operator>+=</operator> <name>Height</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out_pool</name></name> <operator>=</operator> <call><name>nvdec_pool_Create</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>,

<argument><expr><name>ByteWidth</name></expr></argument>,

<argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>out_pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cuda_error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>decoderHeight</name></name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decoder_UpdateVideoOutput</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</return>

<label><name>cuda_error</name>:</label>

<expr_stmt><expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_nvparser_success</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>CUDAAPI</name></type> <name>HandlePictureDecode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>, <parameter><decl><type><name>CUVIDPICPARAMS</name> <modifier>*</modifier></type><name>p_picparams</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidDecodePicture</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>, <argument><expr><name>p_picparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>CUDAAPI</name></type> <name>HandlePictureDisplay</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>, <parameter><decl><type><name>CUVIDPARSERDISPINFO</name> <modifier>*</modifier></type><name>p_dispinfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUdeviceptr</name></type> <name>frameDevicePtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDPROCPARAMS</name></type> <name>params</name> <init>= <expr><block>{

<expr><operator>.</operator><name>progressive_frame</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>deintMode</name></name> <operator>==</operator> <name>cudaVideoDeinterlaceMode_Weave</name> <operator>?</operator> <literal type="number">1</literal> <operator>:</operator> <name><name>p_dispinfo</name><operator>-&gt;</operator><name>progressive_frame</name></name></expr>,

<expr><operator>.</operator><name>top_field_first</name> <operator>=</operator> <name><name>p_dispinfo</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>,

<expr><operator>.</operator><name>second_field</name> <operator>=</operator> <name><name>p_dispinfo</name><operator>-&gt;</operator><name>repeat_first_field</name></name> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>unpaired_field</name> <operator>=</operator> <name><name>p_dispinfo</name><operator>-&gt;</operator><name>repeat_first_field</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>is_nvdec_opaque</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>nvdec_pool_Wait</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_pic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>pic_context_nvdec_t</name> <modifier>*</modifier></type><name>picctx</name> <init>= <expr><call><name>NVDEC_PICCONTEXT_FROM_PICCTX</name><argument_list>(<argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_pitch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUVID</name><argument_list>( <argument><expr><name>cuvidMapVideoFrame</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>, <argument><expr><name><name>p_dispinfo</name><operator>-&gt;</operator><name>picture_index</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>frameDevicePtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pitch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>picctx</name><operator>-&gt;</operator><name>devicePtr</name></name> <operator>=</operator> <operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picctx</name><operator>-&gt;</operator><name>bufferPitch</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>outputPitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picctx</name><operator>-&gt;</operator><name>bufferHeight</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>decoderHeight</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>srcY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dstY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_444</name> <operator>||</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_444_16B</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CUDA_MEMCPY2D</name></type> <name>cu_cpy</name> <init>= <expr><block>{

<expr><operator>.</operator><name>srcMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_DEVICE</name></expr>,

<expr><operator>.</operator><name>srcDevice</name> <operator>=</operator> <name>frameDevicePtr</name></expr>,

<expr><operator>.</operator><name>srcY</name> <operator>=</operator> <name>srcY</name></expr>,

<expr><operator>.</operator><name>srcPitch</name> <operator>=</operator> <name>i_pitch</name></expr>,

<expr><operator>.</operator><name>dstMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_DEVICE</name></expr>,

<expr><operator>.</operator><name>dstDevice</name> <operator>=</operator> <name><name>picctx</name><operator>-&gt;</operator><name>devicePtr</name></name></expr>,

<expr><operator>.</operator><name>dstPitch</name> <operator>=</operator> <name><name>picctx</name><operator>-&gt;</operator><name>bufferPitch</name></name></expr>,

<expr><operator>.</operator><name>dstY</name> <operator>=</operator> <name>dstY</name></expr>,

<expr><operator>.</operator><name>WidthInBytes</name> <operator>=</operator> <name>i_pitch</name></expr>,

<expr><operator>.</operator><name>Height</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>picctx</name><operator>-&gt;</operator><name>bufferHeight</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuMemcpy2DAsync</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu_cpy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>srcY</name> <operator>+=</operator> <name><name>picctx</name><operator>-&gt;</operator><name>bufferHeight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstY</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>decoderHeight</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CUDA_MEMCPY2D</name></type> <name>cu_cpy</name> <init>= <expr><block>{

<expr><operator>.</operator><name>srcMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_DEVICE</name></expr>,

<expr><operator>.</operator><name>srcDevice</name> <operator>=</operator> <name>frameDevicePtr</name></expr>,

<expr><operator>.</operator><name>srcY</name> <operator>=</operator> <name>srcY</name></expr>,

<expr><operator>.</operator><name>srcPitch</name> <operator>=</operator> <name>i_pitch</name></expr>,

<expr><operator>.</operator><name>dstMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_DEVICE</name></expr>,

<expr><operator>.</operator><name>dstDevice</name> <operator>=</operator> <name><name>picctx</name><operator>-&gt;</operator><name>devicePtr</name></name></expr>,

<expr><operator>.</operator><name>dstPitch</name> <operator>=</operator> <name><name>picctx</name><operator>-&gt;</operator><name>bufferPitch</name></name></expr>,

<expr><operator>.</operator><name>dstY</name> <operator>=</operator> <name>dstY</name></expr>,

<expr><operator>.</operator><name>WidthInBytes</name> <operator>=</operator> <name>i_pitch</name></expr>,

<expr><operator>.</operator><name>Height</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>picctx</name><operator>-&gt;</operator><name>bufferHeight</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_plane</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cu_cpy</name><operator>.</operator><name>Height</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuMemcpy2DAsync</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu_cpy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>srcY</name> <operator>+=</operator> <name><name>picctx</name><operator>-&gt;</operator><name>bufferHeight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstY</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>decoderHeight</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_pic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_pitch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUVID</name><argument_list>( <argument><expr><name>cuvidMapVideoFrame</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>, <argument><expr><name><name>p_dispinfo</name><operator>-&gt;</operator><name>picture_index</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>frameDevicePtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pitch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>srcY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>plane_t</name></type> <name>plane</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUDA_MEMCPY2D</name></type> <name>cu_cpy</name> <init>= <expr><block>{

<expr><operator>.</operator><name>srcMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_DEVICE</name></expr>,

<expr><operator>.</operator><name>srcDevice</name> <operator>=</operator> <name>frameDevicePtr</name></expr>,

<expr><operator>.</operator><name>srcY</name> <operator>=</operator> <name>srcY</name></expr>,

<expr><operator>.</operator><name>srcPitch</name> <operator>=</operator> <name>i_pitch</name></expr>,

<expr><operator>.</operator><name>dstMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_HOST</name></expr>,

<expr><operator>.</operator><name>dstHost</name> <operator>=</operator> <name><name>plane</name><operator>.</operator><name>p_pixels</name></name></expr>,

<expr><operator>.</operator><name>dstPitch</name> <operator>=</operator> <name><name>plane</name><operator>.</operator><name>i_pitch</name></name></expr>,

<expr><operator>.</operator><name>WidthInBytes</name> <operator>=</operator> <name>i_pitch</name></expr>,

<expr><operator>.</operator><name>Height</name> <operator>=</operator> <name><name>plane</name><operator>.</operator><name>i_visible_lines</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuMemcpy2DAsync</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu_cpy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>srcY</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>decoderHeight</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuStreamSynchronize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidUnmapVideoFrame</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>, <argument><expr><name>frameDevicePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>deintMode</name></name> <operator>==</operator> <name>cudaVideoDeinterlaceMode_Weave</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <name><name>p_dispinfo</name><operator>-&gt;</operator><name>progressive_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name> <operator>=</operator> <name><name>p_dispinfo</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>p_dispinfo</name><operator>-&gt;</operator><name>repeat_first_field</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name><name>p_dispinfo</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>frameDevicePtr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuStreamSynchronize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidUnmapVideoFrame</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>, <argument><expr><name>frameDevicePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CuvidPushRawBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDSOURCEDATAPACKET</name></type> <name>cupacket</name> <init>= <expr><block>{

<expr><operator>.</operator><name>payload_size</name> <operator>=</operator> <name>bufsize</name></expr>,

<expr><operator>.</operator><name>payload</name> <operator>=</operator> <name>buf</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidParseVideoData</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuparser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cupacket</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CuvidPushBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDSOURCEDATAPACKET</name></type> <name>cupacket</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cupacket</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>CUVID_PKT_TIMESTAMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cupacket</name><operator>.</operator><name>payload_size</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cupacket</name><operator>.</operator><name>payload</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cupacket</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr> </then><else>: <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidParseVideoData</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuparser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cupacket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>HXXXProcessBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>b_is_xvcC</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_xps_pushed</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_xps_blocks</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_xps_blocks</name> <operator>=</operator> <call><name>h264_helper_get_annexb_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_HEVC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_xps_blocks</name> <operator>=</operator> <call><name>hevc_helper_get_annexb_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_b</name> <init>= <expr><name>p_xps_blocks</name></expr></init></decl>;</init> <condition><expr><name>p_b</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_b</name> <operator>=</operator> <name><name>p_b</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>CuvidPushRawBlock</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_xps_pushed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name><operator>.</operator><name>pf_process_block</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>ProcessVC1Block</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_xps_pushed</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CuvidPushRawBlock</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vc1_header_offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>vc1_header_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_xps_pushed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0d</literal></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CuvidPushEOS</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDSOURCEDATAPACKET</name></type> <name>cupacket</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cupacket</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>CUVID_PKT_ENDOFSTREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cupacket</name><operator>.</operator><name>payload_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cupacket</name><operator>.</operator><name>payload</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cupacket</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidParseVideoData</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuparser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cupacket</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_nvparser_success</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLCDEC_ECRITICAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>CuvidPushEOS</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>process_block</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>process_block</name></name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>CuvidPushBlock</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MapCodecID</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i_vlc_fourcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>i_vlc_fourcc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_H264</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_HEVC</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_VC1</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_VC1</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_WMV3</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_VC1</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_MP1V</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_MPEG1</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_MP2V</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_MPEG2</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_MPEG2</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_MPEG4</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_VP8</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_VP9</name></expr>:</case> <return>return <expr><name>cudaVideoCodec_VP9</name></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cudaVideoChromaFormat</name></type> <name>MapChomaIDC</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>chroma_idc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>chroma_idc</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><name>cudaVideoChromaFormat_Monochrome</name></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>cudaVideoChromaFormat_420</name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><name>cudaVideoChromaFormat_422</name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><name>cudaVideoChromaFormat_444</name></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProbeDecoder</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bitDepth</name></decl></parameter>, <parameter><decl><type><name>cudaVideoChromaFormat</name></type> <name>chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>eCodecType</name></name> <operator>=</operator> <call><name>MapCodecID</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>eChromaFormat</name></name> <operator>=</operator> <name>chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>nBitDepthMinus8</name></name> <operator>=</operator> <name>bitDepth</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidGetDecoderCaps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>bIsSupported</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Codec %d Chroma %d not supported!"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>eCodecType</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>eChromaFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"No hardware for Codec %d Chroma %d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>eCodecType</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>eChromaFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_is_hxxx</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_surface</name></name> <operator>=</operator> <name>MAX_HXXX_SURFACES</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hxxx_helper_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hxxx_helper_set_extra</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hxxx_helper_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>process_block</name></name> <operator>=</operator> <name>HXXXProcessBlock</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_VC1</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WMV3</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>vc1_start_code</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vc1_header_offset</name></name> <operator>&lt;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>-</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><operator>++</operator><name><name>p_sys</name><operator>-&gt;</operator><name>vc1_header_offset</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vc1_header_offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>vc1_start_code</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vc1_header_offset</name></name> <operator>&lt;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>process_block</name></name> <operator>=</operator> <name>ProcessVC1Block</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_surface</name></name> <operator>=</operator> <name>MAX_HXXX_SURFACES</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_MP1V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP2V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_surface</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_VP9</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_profile</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_profile</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unsupported VP9 profile %d"</literal></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_surface</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><call><name>decoder_GetDecoderDevice</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_device</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOOBJ</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>devsys</name></name> <operator>=</operator> <call><name>GetNVDECOpaqueDevice</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>devsys</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOOBJ</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator> <call><name>vlc_video_context_Create</name><argument_list>( <argument><expr><name>dec_device</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_NVDEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to create a video context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOOBJ</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cuvid_load_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cuvidFunctions</name></name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_is_hxxx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hxxx_helper_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CUVIDPARSERPARAMS</name></type> <name>pparams</name> <init>= <expr><block>{

<expr><operator>.</operator><name>CodecType</name> <operator>=</operator> <call><name>MapCodecID</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>ulClockRate</name> <operator>=</operator> <name>CLOCK_FREQ</name></expr>,

<expr><operator>.</operator><name>ulMaxDisplayDelay</name> <operator>=</operator> <name>NVDEC_DISPLAY_SURFACES</name></expr>,

<expr><operator>.</operator><name>ulMaxNumDecodeSurfaces</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_surface</name></name></expr>,

<expr><operator>.</operator><name>pUserData</name> <operator>=</operator> <name>p_dec</name></expr>,

<expr><operator>.</operator><name>pfnSequenceCallback</name> <operator>=</operator> <name>HandleVideoSequence</name></expr>,

<expr><operator>.</operator><name>pfnDecodePicture</name> <operator>=</operator> <name>HandlePictureDecode</name></expr>,

<expr><operator>.</operator><name>pfnDisplayPicture</name> <operator>=</operator> <name>HandlePictureDisplay</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidCreateVideoParser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cuparser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unable to create NVDEC video parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_depth_luma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cudaVideoChromaFormat</name></type> <name>cudaChroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sar_num</name></decl>, <decl><type ref="prev"/><name>i_sar_den</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_is_hxxx</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_chroma_idc</name></decl>, <decl><type ref="prev"/><name>i_depth_chroma</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hxxx_helper_get_chroma_chroma</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_chroma_idc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_depth_luma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_depth_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_is_hxxx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hxxx_helper_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cudaChroma</name> <operator>=</operator> <call><name>MapChomaIDC</name><argument_list>(<argument><expr><name>i_chroma_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_w</name></decl>, <decl><type ref="prev"/><name>i_h</name></decl>, <decl><type ref="prev"/><name>i_vw</name></decl>, <decl><type ref="prev"/><name>i_vh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hxxx_helper_get_current_picture_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_vh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>video_color_primaries_t</name></type> <name>primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_transfer_func_t</name></type> <name>transfer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_color_space_t</name></type> <name>colorspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_color_range_t</name></type> <name>full_range</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hxxx_helper_get_colorimetry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>primaries</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>transfer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>colorspace</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>full_range</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>primaries</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>transfer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>colorspace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>full_range</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>(<argument><expr><name>i_w</name></expr></argument>, <argument><expr><name>OUTPUT_WIDTH_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name>i_h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name>i_vw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name>i_vh</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VLC_SUCCESS</name> <operator>!=</operator>

<call><name>hxxx_helper_get_current_sar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sar_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sar_den</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_sar_den</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name>OUTPUT_WIDTH_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cudaChroma</name> <operator>=</operator> <name>cudaVideoChromaFormat_420</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_depth_luma</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_VP9</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_profile</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name>i_depth_luma</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name>i_depth_luma</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"VP9 with unknown profile not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_sar_num</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sar_den</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_sar_den</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_sar_num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sar_den</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name>i_sar_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name>i_sar_den</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ALIGN</name></cpp:undef>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <name>i_depth_luma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ProbeDecoder</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_depth_luma</name></expr></argument>, <argument><expr><name>cudaChroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>nMinWidth</name></name> <operator>||</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>nMinHeight</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"dimensions too small: needed %dx%d, got %dx%d"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>nMinWidth</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>nMinHeight</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>nMaxWidth</name></name> <operator>||</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>nMaxHeight</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"dimensions too big: max %dx%d, got %dx%d"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>nMaxWidth</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>selectedDecoder</name><operator>.</operator><name>nMaxHeight</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name><name>output_chromas</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>chroma_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cudaChroma</name> <operator>==</operator> <name>cudaVideoChromaFormat_420</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_depth_luma</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output_chromas</name><index>[<expr><name>chroma_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VLC_CODEC_NVDEC_OPAQUE_16B</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i_depth_luma</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output_chromas</name><index>[<expr><name>chroma_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VLC_CODEC_NVDEC_OPAQUE_10B</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output_chromas</name><index>[<expr><name>chroma_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VLC_CODEC_NVDEC_OPAQUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>cudaChroma</name> <operator>==</operator> <name>cudaVideoChromaFormat_444</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_depth_luma</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output_chromas</name><index>[<expr><name>chroma_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VLC_CODEC_NVDEC_OPAQUE_444_16B</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output_chromas</name><index>[<expr><name>chroma_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VLC_CODEC_NVDEC_OPAQUE_444</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>output_chromas</name><index>[<expr><name>chroma_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>MapSurfaceChroma</name><argument_list>(<argument><expr><name>cudaChroma</name></expr></argument>, <argument><expr><name>i_depth_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_chromas</name><index>[<expr><name>chroma_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>chroma_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>output_chromas</name><index>[<expr><name>chroma_idx</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>chroma_idx</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>output_chromas</name><index>[<expr><name>chroma_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>decoder_UpdateVideoOutput</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using chroma %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Failed to use output chroma %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deinterlace_mode</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"nvdec-deint"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>deinterlace_mode</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>deintMode</name></name> <operator>=</operator> <name>cudaVideoDeinterlaceMode_Weave</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>deinterlace_mode</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>deintMode</name></name> <operator>=</operator> <name>cudaVideoDeinterlaceMode_Bob</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>deintMode</name></name> <operator>=</operator> <name>cudaVideoDeinterlaceMode_Adaptive</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_nvparser_success</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>CloseDecoder</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nvdec_ctx_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPushCurrent</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>devsys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALL_CUDA_DEC</name><argument_list>(<argument><expr><name>cuCtxPopCurrent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>out_pool</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nvdec_pool_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>out_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidDestroyDecoder</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudecoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuparser</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CALL_CUVID</name><argument_list>(<argument><expr><name>cuvidDestroyVideoParser</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuparser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx_out</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cuvid_free_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cuvidFunctions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_is_hxxx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hxxx_helper_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderContextClose</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_device_nvdec_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>GetNVDECOpaqueDevice</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CALL_CUDA_DEV</name><argument_list>(<argument><expr><name>cuCtxDestroy</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cuda_free_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cudaFunctions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_decoder_device_operations</name></name></type> <name>dev_ops</name> <init>= <expr><block>{

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>DecoderContextClose</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>DecoderContextOpen</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>decoder_device_nvdec_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>dev_ops</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>VLC_DECODER_DEVICE_NVDEC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cudaFunctions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>cuda_load_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cudaFunctions</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA_DEV</name><argument_list>(<argument><expr><name>cuInit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DecoderContextClose</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CALL_CUDA_DEV</name><argument_list>(<argument><expr><name>cuCtxCreate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cuCtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DecoderContextClose</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
