<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\nvdec\nvdec_fmt.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffnvcodec/dynlink_loader.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cudaFunctions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>cuCtx</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_device_nvdec_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>decoder_device_nvdec_t</name> <modifier>*</modifier></type><name>GetNVDECOpaqueDevice</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>device</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VLC_DECODER_DEVICE_NVDEC</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>device</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>CudaCheckErr</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cudaFunctions</name></decl></parameter>, <parameter><decl><type><name>CUresult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>CUDA_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_err</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_err_str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>cudaFunctions</name><operator>-&gt;</operator><name>cuGetErrorName</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cudaFunctions</name><operator>-&gt;</operator><name>cuGetErrorString</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_err_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s failed: %s (%s)"</literal></expr></argument>, <argument><expr><name>psz_func</name></expr></argument>, <argument><expr><name>psz_err_str</name></expr></argument>, <argument><expr><name>psz_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>is_nvdec_opaque</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE</name> <operator>||</operator>

<name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_10B</name> <operator>||</operator>

<name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_16B</name> <operator>||</operator>

<name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_444</name> <operator>||</operator>

<name>fourcc</name> <operator>==</operator> <name>VLC_CODEC_NVDEC_OPAQUE_444_16B</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>picture_context_t</name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUdeviceptr</name></type> <name>devicePtr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bufferPitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bufferHeight</name></decl>;</decl_stmt>

}</block></struct></type> <name>pic_context_nvdec_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVDEC_PICCONTEXT_FROM_PICCTX</name><parameter_list>(<parameter><type><name>pic_ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of(pic_ctx, pic_context_nvdec_t, ctx)</cpp:value></cpp:define>

</unit>
