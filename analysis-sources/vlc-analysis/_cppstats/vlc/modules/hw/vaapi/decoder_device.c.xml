<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\vaapi\decoder_device.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_vaapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_drmcommon.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_WL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_wayland.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_x11.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_DRM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_drm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vaapi_native_destroy_cb</name>)<parameter_list>(<parameter><decl><type><name>VANativeDisplay</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct_decl>struct <name>vaapi_instance</name>;</struct_decl>

<struct>struct <name>vaapi_instance</name>

<block>{

<decl_stmt><decl><type><name>VADisplay</name></type> <name>dpy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VANativeDisplay</name></type> <name>native</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vaapi_native_destroy_cb</name></type> <name>native_destroy_cb</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vaapi_instance</name></name> <modifier>*</modifier></type>

<name>vaapi_InitializeInstance</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name></type> <name>dpy</name></decl></parameter>,

<parameter><decl><type><name>VANativeDisplay</name></type> <name>native</name></decl></parameter>,

<parameter><decl><type><name>vaapi_native_destroy_cb</name></type> <name>native_destroy_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>major</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>s</name> <init>= <expr><call><name>vaInitialize</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"vaInitialize: %s"</literal></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vaapi_instance</name></name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>inst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>inst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>dpy</name></name> <operator>=</operator> <name>dpy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>native</name></name> <operator>=</operator> <name>native</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst</name><operator>-&gt;</operator><name>native_destroy_cb</name></name> <operator>=</operator> <name>native_destroy_cb</name></expr>;</expr_stmt>

<return>return <expr><name>inst</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vaTerminate</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>native</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>native_destroy_cb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>native_destroy_cb</name><argument_list>(<argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vaapi_DestroyInstance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vaapi_instance</name></name> <modifier>*</modifier></type><name>inst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vaTerminate</name><argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>native</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>inst</name><operator>-&gt;</operator><name>native_destroy_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>inst</name><operator>-&gt;</operator><name>native_destroy_cb</name></name><argument_list>(<argument><expr><name><name>inst</name><operator>-&gt;</operator><name>native</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>x11_native_destroy_cb</name><parameter_list>(<parameter><decl><type><name>VANativeDisplay</name></type> <name>native</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vaapi_instance</name></name> <modifier>*</modifier></type>

<name>x11_init_vaapi_instance</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,

<parameter><decl><type><name>VADisplay</name> <modifier>*</modifier></type><name>vadpyp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_xlib_init</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11dpy</name> <init>= <expr><call><name>XOpenDisplay</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>x11</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x11dpy</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VADisplay</name></type> <name>vadpy</name> <init>= <expr><operator>*</operator><name>vadpyp</name> <operator>=</operator> <call><name>vaGetDisplay</name><argument_list>(<argument><expr><name>x11dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vadpy</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>x11_native_destroy_cb</name><argument_list>(<argument><expr><name>x11dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vaapi_InitializeInstance</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vadpy</name></expr></argument>,

<argument><expr><name>x11dpy</name></expr></argument>, <argument><expr><name>x11_native_destroy_cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_DRM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>native_drm_destroy_cb</name><parameter_list>(<parameter><decl><type><name>VANativeDisplay</name></type> <name>native</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vaapi_instance</name></name> <modifier>*</modifier></type>

<name>vaapi_InitializeInstanceDRM</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><function_decl><type><name>VADisplay</name></type> (<modifier>*</modifier><name>pf_getDisplayDRM</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>VADisplay</name> <modifier>*</modifier></type><name>pdpy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>default_drm_device_paths</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"/dev/dri/renderD128"</literal></expr>,

<expr><literal type="string">"/dev/dri/card0"</literal></expr>,

<expr><literal type="string">"/dev/dri/renderD129"</literal></expr>,

<expr><literal type="string">"/dev/dri/card1"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>user_drm_device_paths</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>device</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>drm_device_paths</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>drm_device_paths_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>drm_device_paths</name> <operator>=</operator> <name>user_drm_device_paths</name></expr>;</expr_stmt>

<expr_stmt><expr><name>drm_device_paths_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>drm_device_paths</name> <operator>=</operator> <name>default_drm_device_paths</name></expr>;</expr_stmt>

<expr_stmt><expr><name>drm_device_paths_count</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>default_drm_device_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>drm_device_paths_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>drm_fd</name> <init>= <expr><call><name>vlc_open</name><argument_list>(<argument><expr><name><name>drm_device_paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>drm_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VADisplay</name></type> <name>dpy</name> <init>= <expr><call><name>pf_getDisplayDRM</name><argument_list>(<argument><expr><name>drm_fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dpy</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vaapi_instance</name></name> <modifier>*</modifier></type><name>va_inst</name> <init>=

<expr><call><name>vaapi_InitializeInstance</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>,

<argument><expr><operator>(</operator><name>VANativeDisplay</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>drm_fd</name></expr></argument>,

<argument><expr><name>native_drm_destroy_cb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>va_inst</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pdpy</name> <operator>=</operator> <name>dpy</name></expr>;</expr_stmt>

<return>return <expr><name>va_inst</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>(<argument><expr><name>drm_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>vaapi_instance</name></name> <modifier>*</modifier></type>

<name>drm_init_vaapi_instance</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>VADisplay</name> <modifier>*</modifier></type><name>vadpyp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vaapi_InitializeInstanceDRM</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vaGetDisplayDRM</name></expr></argument>,

<argument><expr><name>vadpyp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_WL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>vaapi_instance</name></name> <modifier>*</modifier></type>

<name>wl_init_vaapi_instance</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,

<parameter><decl><type><name>VADisplay</name> <modifier>*</modifier></type><name>vadpyp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VADisplay</name></type> <name>vadpy</name> <init>= <expr><operator>*</operator><name>vadpyp</name> <operator>=</operator> <call><name>vaGetDisplayWl</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>wl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vadpy</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vaapi_InitializeInstance</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vadpy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vaapi_DestroyInstance</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_decoder_device_operations</name></name></type> <name>ops</name> <init>= <expr><block>{

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>Close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VADisplay</name></type> <name>vadpy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vaapi_instance</name></name> <modifier>*</modifier></type><name>vainst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_VA_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VOUT_WINDOW_TYPE_XID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vainst</name> <operator>=</operator> <call><name>x11_init_vaapi_instance</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vadpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_WL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name>window</name> <operator>&amp;&amp;</operator> <name><name>window</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VOUT_WINDOW_TYPE_WAYLAND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vainst</name> <operator>=</operator> <call><name>wl_init_vaapi_instance</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vadpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_VA_DRM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>window</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vainst</name> <operator>=</operator> <call><name>drm_init_vaapi_instance</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vadpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> need X11/WL/DRM support</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vainst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vadpy</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>vainst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>VLC_DECODER_DEVICE_VAAPI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>vadpy</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_VA_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIORITY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORTCUT</name></cpp:macro> <cpp:value>"vaapi_x11"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESCRIPTION_SUFFIX</name></cpp:macro> <cpp:value>"X11"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_WL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIORITY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORTCUT</name></cpp:macro> <cpp:value>"vaapi_wl"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESCRIPTION_SUFFIX</name></cpp:macro> <cpp:value>"Wayland"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_VA_DRM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIORITY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORTCUT</name></cpp:macro> <cpp:value>"vaapi_drm"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESCRIPTION_SUFFIX</name></cpp:macro> <cpp:value>"DRM"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument><literal type="string">"VA-API decoder device for "</literal> DESCRIPTION_SUFFIX</argument>)</argument_list></macro>

<macro><name>set_callback_dec_device</name><argument_list>(<argument>Open</argument>, <argument>PRIORITY</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"vaapi"</literal></argument>, <argument>SHORTCUT</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
