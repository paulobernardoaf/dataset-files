<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\d3d9\dxva2_deinterlace.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d9.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxva2api.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/d3d9_fmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_filter/deinterlace/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d9_filters.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hdecoder_dll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirectXVideoProcessor</name> <modifier>*</modifier></type><name>processor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>hw_surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVA2_VideoProcessorCaps</name></type> <name>decoder_caps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SHORT</name></type> <name>Brightness</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SHORT</name></type> <name>Contrast</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SHORT</name></type> <name>Hue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SHORT</name></type> <name>Saturation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>deinterlace_ctx</name></name></type> <name>context</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<struct>struct <name>filter_mode_t</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>i_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>deinterlace_algo</name></type> <name>settings</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>filter_mode_t</name></name></type> <name><name>filter_mode</name> <index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"blend"</literal></expr>, <expr><name>DXVA2_DeinterlaceTech_BOBLineReplicate</name></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bob"</literal></expr>, <expr><name>DXVA2_DeinterlaceTech_BOBVerticalStretch</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><name>DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ivtc"</literal></expr>, <expr><name>DXVA2_DeinterlaceTech_InverseTelecine</name></expr>,

<expr><block>{ <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"yadif2x"</literal></expr>, <expr><name>DXVA2_DeinterlaceTech_PixelAdaptive</name></expr>,

<expr><block>{ <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FlushDeinterlacing</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillExtendedFormat</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,

<parameter><decl><type><name>DXVA2_ExtendedFormat</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>NominalRange</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr> ?</condition><then>

<expr><name>DXVA2_NominalRange_0_255</name></expr> </then><else>: <expr><name>DXVA2_NominalRange_16_235</name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>COLOR_SPACE_BT601</name></expr>:</case>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoTransferMatrix</name></name> <operator>=</operator> <name>DXVA2_VideoTransferMatrix_BT601</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COLOR_SPACE_BT709</name></expr>:</case>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoTransferMatrix</name></name> <operator>=</operator> <name>DXVA2_VideoTransferMatrix_BT709</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoTransferMatrix</name></name> <operator>=</operator> <name>DXVA2_VideoTransferMatrix_Unknown</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoLighting</name></name> <operator>=</operator> <name>DXVA2_VideoLighting_Unknown</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>primaries</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>COLOR_PRIMARIES_BT709</name></expr>:</case>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoPrimaries</name></name> <operator>=</operator> <name>DXVA2_VideoPrimaries_BT709</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COLOR_PRIMARIES_BT470_BG</name></expr>:</case>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoPrimaries</name></name> <operator>=</operator> <name>DXVA2_VideoPrimaries_BT470_2_SysBG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COLOR_PRIMARIES_SMTPE_170</name></expr>:</case>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoPrimaries</name></name> <operator>=</operator> <name>DXVA2_VideoPrimaries_SMPTE170M</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoPrimaries</name></name> <operator>=</operator> <name>DXVA2_VideoPrimaries_Unknown</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>transfer</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>TRANSFER_FUNC_BT709</name></expr>:</case>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoTransferFunction</name></name> <operator>=</operator> <name>DXVA2_VideoTransFunc_709</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TRANSFER_FUNC_SMPTE_240</name></expr>:</case>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoTransferFunction</name></name> <operator>=</operator> <name>DXVA2_VideoTransFunc_240M</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TRANSFER_FUNC_SRGB</name></expr>:</case>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoTransferFunction</name></name> <operator>=</operator> <name>DXVA2_VideoTransFunc_sRGB</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoTransferFunction</name></name> <operator>=</operator> <name>DXVA2_VideoTransFunc_Unknown</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>VideoLighting</name></name> <operator>=</operator> <name>DXVA2_VideoLighting_dim</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillSample</name><parameter_list>( <parameter><decl><type><name>DXVA2_VideoSample</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>deinterlace_ctx</name></name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>p_area</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_field</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_sys_src</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>SrcSurface</name></name> <operator>=</operator> <name><name>p_sys_src</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>SampleFormat</name><operator>.</operator><name>SampleFormat</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr> ?</condition><then>

<expr><name>DXVA2_SampleFieldInterleavedEvenFirst</name></expr> </then><else>:

<expr><name>DXVA2_SampleFieldInterleavedOddFirst</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillExtendedFormat</name><argument_list>(<argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sample</name><operator>-&gt;</operator><name>SampleFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>Start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>End</name></name> <operator>=</operator> <call><name>MSFTIME_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>GetFieldDuration</name><argument_list>(<argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>SampleData</name></name> <operator>=</operator> <name>DXVA2_SampleData_RFF_TFF_Present</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i_field</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>SampleData</name></name> <operator>|=</operator> <name>DXVA2_SampleData_TFF</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>SampleData</name></name> <operator>|=</operator> <name>DXVA2_SampleData_RFF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>DstRect</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>SrcRect</name></name> <operator>=</operator> <operator>*</operator><name>p_area</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sample</name><operator>-&gt;</operator><name>PlanarAlpha</name></name> <operator>=</operator> <call><name>DXVA2_Fixed32OpaqueAlpha</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillBlitParams</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>,

<parameter><decl><type><name>DXVA2_VideoProcessBltParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>area</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>DXVA2_VideoSample</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>TargetFrame</name></name> <operator>=</operator> <operator>(</operator><name><name>samples</name><operator>-&gt;</operator><name>End</name></name> <operator>-</operator> <name><name>samples</name><operator>-&gt;</operator><name>Start</name></name><operator>)</operator> <operator>*</operator> <name>order</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>TargetRect</name></name> <operator>=</operator> <operator>*</operator><name>area</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>DestData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>Alpha</name></name> <operator>=</operator> <call><name>DXVA2_Fixed32OpaqueAlpha</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>DestFormat</name><operator>.</operator><name>SampleFormat</name></name> <operator>=</operator> <name>DXVA2_SampleProgressiveFrame</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillExtendedFormat</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>DestFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>BackgroundColor</name><operator>.</operator><name>Alpha</name></name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ConstrictionSize</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>TargetRect</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ConstrictionSize</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>TargetRect</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ProcAmpValues</name><operator>.</operator><name>Brightness</name><operator>.</operator><name>Value</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>Brightness</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ProcAmpValues</name><operator>.</operator><name>Contrast</name><operator>.</operator><name>Value</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>Contrast</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ProcAmpValues</name><operator>.</operator><name>Hue</name><operator>.</operator><name>Value</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>Hue</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ProcAmpValues</name><operator>.</operator><name>Saturation</name><operator>.</operator><name>Value</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>Saturation</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RenderPic</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_field</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_out_sys</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>p_outpic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_samples</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_caps</name><operator>.</operator><name>NumBackwardRefSamples</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<name><name>sys</name><operator>-&gt;</operator><name>decoder_caps</name><operator>.</operator><name>NumForwardRefSamples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVA2_VideoProcessBltParams</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVA2_VideoSample</name></type> <name><name>samples</name><index>[<expr><name>i_samples</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pictures</name><index>[<expr><name>i_samples</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DSURFACE_DESC</name></type> <name>srcDesc</name></decl>, <decl><type ref="prev"/><name>dstDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_prev</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_cur</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>p_sys_src</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DSurface9_GetDesc</name><argument_list>( <argument><expr><name><name>p_sys_src</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcDesc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DSurface9_GetDesc</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstDesc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>area</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>area</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>srcDesc</name><operator>.</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>dstDesc</name><operator>.</operator><name>Height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>srcDesc</name><operator>.</operator><name>Width</name></name></expr></argument>, <argument><expr><name><name>dstDesc</name><operator>.</operator><name>Width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>i_samples</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_next</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pictures</name><index>[<expr><name>idx</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_cur</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pictures</name><index>[<expr><name>idx</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>p_cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_prev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pictures</name><index>[<expr><name>idx</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>p_prev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pictures</name><index>[<expr><name>idx</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pictures</name><index>[<expr><name>idx</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name>i_samples</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pictures</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillSample</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>samples</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>pictures</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>i_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>FillSample</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>samples</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>i_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>SampleFormat</name><operator>.</operator><name>SampleFormat</name></name> <operator>=</operator> <name>DXVA2_SampleUnknown</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FillBlitParams</name><argument_list>( <argument><expr><name>sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessor_VideoProcessBlt</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>,

<argument><expr><name>samples</name></expr></argument>,

<argument><expr><name>i_samples</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_decoder</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_StretchRect</name><argument_list>( <argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>p_out_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>D3DTEXF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RenderSinglePic</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RenderPic</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Deinterlace</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>DoDeinterlacing</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_mode_t</name></name> <modifier>*</modifier></type><name>GetFilterMode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>mode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"x"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>filter_mode</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>filter_mode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_mode</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>filter_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>AllocPicture</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d9_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_ctx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_decoder</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d9_video_context_t</name> <modifier>*</modifier></type><name>vctx_sys</name> <init>= <expr><call><name>GetD3D9ContextPrivate</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3DDevice9_CreateOffscreenPlainSurface</name><argument_list>(<argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,

<argument><expr><name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>surface</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AcquireD3D9PictureSys</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{

<expr><name>d3d9_pic_context_destroy</name></expr>, <expr><name>d3d9_pic_context_copy</name></expr>,

<expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>

<return>return <expr><name>pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>D3D9OpenDeinterlace</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hdecoder_dll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name> <modifier>*</modifier></type><name>processorGUIDs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name> <modifier>*</modifier></type><name>processorGUID</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirectXVideoProcessorService</name> <modifier>*</modifier></type><name>processor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE</name>

<operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>GetD3D9ContextPrivate</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>video_format_IsSimilar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hdecoder_dll</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"DXVA2.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdecoder_dll</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_video_context_t</name> <modifier>*</modifier></type><name>vtcx_sys</name> <init>= <expr><call><name>GetD3D9ContextPrivate</name><argument_list>( <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_decoder</name> <init>= <expr><call><name>GetD3D9OpaqueContext</name><argument_list>( <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CreateVideoService</name>)<parameter_list>(<parameter><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppService</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>CreateVideoService</name> <operator>=</operator>

<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hdecoder_dll</name></expr></argument>, <argument><expr><literal type="string">"DXVA2CreateVideoService"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CreateVideoService</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CreateVideoService</name><argument_list>( <argument><expr><name><name>d3d9_decoder</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDirectXVideoProcessorService</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DXVA2_VideoDesc</name></type> <name>dsc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dsc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>SampleWidth</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>SampleHeight</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name><name>vtcx_sys</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name><operator>.</operator><name>Numerator</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name><operator>.</operator><name>Denominator</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name><operator>.</operator><name>Numerator</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name><operator>.</operator><name>Denominator</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>OutputFrameFreq</name></name> <operator>=</operator> <name><name>dsc</name><operator>.</operator><name>InputSampleFreq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc</name><operator>.</operator><name>SampleFormat</name><operator>.</operator><name>SampleFormat</name></name> <operator>=</operator> <name>DXVA2_SampleFieldInterleavedEvenFirst</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillExtendedFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsc</name><operator>.</operator><name>SampleFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetVideoProcessorDeviceGuids</name><argument_list>( <argument><expr><name>processor</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>processorGUIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mode</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>filter_mode_t</name></name> <modifier>*</modifier></type><name>p_mode</name> <init>= <expr><call><name>GetFilterMode</name><argument_list>(<argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_mode</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"unknown mode %s, trying blend"</literal></expr></argument>, <argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_mode</name> <operator>=</operator> <call><name>GetFilterMode</name><argument_list>(<argument><expr><literal type="string">"blend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_mode</name><operator>-&gt;</operator><name>psz_mode</name></name></expr></argument>, <argument><expr><name>psz_mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"using %s deinterlacing mode"</literal></expr></argument>, <argument><expr><name><name>p_mode</name><operator>-&gt;</operator><name>psz_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DXVA2_VideoProcessorCaps</name></type> <name>caps</name></decl>, <decl><type ref="prev"/><name>best_caps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>UINT</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetVideoProcessorCaps</name><argument_list>( <argument><expr><name>processor</name></expr></argument>,

<argument><expr><name>processorGUIDs</name><operator>+</operator><name>i</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,

<argument><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>caps</name><operator>.</operator><name>DeinterlaceTechnology</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>score</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>caps</name><operator>.</operator><name>DeinterlaceTechnology</name></name> <operator>&amp;</operator> <name><name>p_mode</name><operator>-&gt;</operator><name>i_mode</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>best_score</name> <operator>&lt;</operator> <name>score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_caps</name> <operator>=</operator> <name>caps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>processorGUID</name> <operator>=</operator> <name>processorGUIDs</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>processorGUID</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"Could not find a filter to output the required format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_CreateVideoProcessor</name><argument_list>( <argument><expr><name>processor</name></expr></argument>,

<argument><expr><name>processorGUID</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,

<argument><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>processor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_CreateSurface</name><argument_list>( <argument><expr><name>processor</name></expr></argument>,

<argument><expr><name><name>dsc</name><operator>.</operator><name>SampleWidth</name></name></expr></argument>,

<argument><expr><name><name>dsc</name><operator>.</operator><name>SampleHeight</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>,

<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>DXVA2_VideoProcessorRenderTarget</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DXVA2_ValueRange</name></type> <name>Range</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetProcAmpRange</name><argument_list>( <argument><expr><name>processor</name></expr></argument>, <argument><expr><name>processorGUID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,

<argument><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name>DXVA2_ProcAmp_Brightness</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>Range</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>Brightness</name></name> <operator>=</operator> <name><name>Range</name><operator>.</operator><name>DefaultValue</name><operator>.</operator><name>Value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetProcAmpRange</name><argument_list>( <argument><expr><name>processor</name></expr></argument>, <argument><expr><name>processorGUID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,

<argument><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name>DXVA2_ProcAmp_Contrast</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>Range</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>Contrast</name></name> <operator>=</operator> <name><name>Range</name><operator>.</operator><name>DefaultValue</name><operator>.</operator><name>Value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetProcAmpRange</name><argument_list>( <argument><expr><name>processor</name></expr></argument>, <argument><expr><name>processorGUID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,

<argument><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name>DXVA2_ProcAmp_Hue</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>Range</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>Hue</name></name> <operator>=</operator> <name><name>Range</name><operator>.</operator><name>DefaultValue</name><operator>.</operator><name>Value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoProcessorService_GetProcAmpRange</name><argument_list>( <argument><expr><name>processor</name></expr></argument>, <argument><expr><name>processorGUID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument>,

<argument><expr><name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name>DXVA2_ProcAmp_Saturation</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>Range</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>Saturation</name></name> <operator>=</operator> <name><name>Range</name><operator>.</operator><name>DefaultValue</name><operator>.</operator><name>Value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hdecoder_dll</name></name> <operator>=</operator> <name>hdecoder_dll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>decoder_caps</name></name> <operator>=</operator> <name>best_caps</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitDeinterlacingContext</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name></name> <operator>=</operator> <name><name>p_mode</name><operator>-&gt;</operator><name>settings</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name><operator>.</operator><name>b_use_frame_history</name></name> <operator>=</operator> <name><name>best_caps</name><operator>.</operator><name>NumBackwardRefSamples</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>best_caps</name><operator>.</operator><name>NumForwardRefSamples</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name><operator>.</operator><name>b_use_frame_history</name></name> <operator>!=</operator> <name><name>p_mode</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_use_frame_history</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"deinterlacing not using frame history as requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>settings</name><operator>.</operator><name>b_double_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pf_render_ordered</name></name> <operator>=</operator> <name>RenderPic</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pf_render_single_pic</name></name> <operator>=</operator> <name>RenderSinglePic</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>out_fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDeinterlacingOutput</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name> <operator>&amp;&amp;</operator>

<name><name>out_fmt</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>processorGUIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirectXVideoProcessorService_Release</name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name>out_fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator> <call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Deinterlace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>processorGUIDs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>processorGUIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sys</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>processor</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDirectXVideoProcessor_Release</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>processor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDirectXVideoProcessorService_Release</name><argument_list>(<argument><expr><name>processor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hdecoder_dll</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hdecoder_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D9CloseDeinterlace</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hw_surface</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirectXVideoProcessor_Release</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdecoder_dll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
