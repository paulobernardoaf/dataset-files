<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\vdpau\avcodec.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/mem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/vdpau.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fourcc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_vdpau.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/avcodec/va.h"</cpp:file></cpp:include>

<struct>struct <name>vlc_va_sys_t</name>

<block>{

<decl_stmt><decl><type><name>VdpChromaType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwaccel_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_vdp_video_field_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>GetVDPAUContextPrivate</name><parameter_list>(<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>vlc_vdp_video_field_t</name> <operator>*</operator><operator>*</operator><operator>)</operator>

<call><name>vlc_video_context_GetPrivate</name><argument_list>( <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_VDPAU</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>CreateSurface</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_decoder</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name>surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_surface_create</name><argument_list>(<argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"%s creation failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"video surface"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>vlc_vdp_video_create</name><argument_list>(<argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>field</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vdp_video_surface_destroy</name><argument_list>(<argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>field</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>GetSurface</name><parameter_list>(<parameter><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>GetVDPAUContextPrivate</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>f</name> <operator>=</operator> <name><name>pool</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>expected</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expected</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>vlc_vdp_video_copy</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>field</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>Get</name><parameter_list>(<parameter><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tries</name> <init>= <expr><operator>(</operator><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>VOUT_OUTMEM_SLEEP</name><operator>)</operator> <operator>/</operator> <name>VOUT_OUTMEM_SLEEP</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>field</name> <operator>=</operator> <call><name>GetSurface</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>tries</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>VOUT_OUTMEM_SLEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>field</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Lock</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>Get</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <name>VideoSurfaceCloneWithContext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>vctx</name></name> <operator>=</operator> <call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>field</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_va_operations</name></name></type> <name>ops</name> <init>= <expr><block>{ <expr><name>Lock</name></expr>, <expr><name>Close</name></expr>, }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyVDPAUVideoContext</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pool</name> <init>= <expr><name>private</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pool</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_vdp_video_destroy</name><argument_list>(<argument><expr><name><name>pool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name></type> <name>vdpau_vctx_ops</name> <init>= <expr><block>{

<expr><name>DestroyVDPAUVideoContext</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>hwfmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_in</name></decl></parameter>, <parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier><modifier>*</modifier></type><name>vtcx_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>hwfmt</name> <operator>!=</operator> <name>AV_PIX_FMT_VDPAU</name> <operator>||</operator> <call><name>GetVDPAUOpaqueDevice</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>fmt_in</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>desc</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpChromaType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_vdpau_get_surface_parameters</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VDP_CHROMA_TYPE_420</name></expr>:</case>

<expr_stmt><expr><name><name>fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_VDPAU_VIDEO_420</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VDP_CHROMA_TYPE_422</name></expr>:</case>

<expr_stmt><expr><name><name>fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_VDPAU_VIDEO_422</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VDP_CHROMA_TYPE_444</name></expr>:</case>

<expr_stmt><expr><name><name>fmt_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_VDPAU_VIDEO_444</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"unsupported chroma type %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_xlib_init</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Xlib is required for VDPAU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>codec_refs</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<expr_stmt><expr><name>codec_refs</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_VP9</name></expr>:</case>

<expr_stmt><expr><name>codec_refs</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>codec_refs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>refs</name> <init>= <expr><name>codec_refs</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_va_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name> <operator>=</operator> <call><name>vlc_video_context_Create</name><argument_list>( <argument><expr><name>dec_device</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_VDPAU</name></expr></argument>,

<argument><expr><operator>(</operator><name>refs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>vlc_vdp_video_field_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>vdpau_vctx_ops</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>GetVDPAUContextPrivate</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hwaccel_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_decoder</name> <init>= <expr><call><name>GetVDPAUOpaqueDevice</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_get_proc_address</name><argument_list>(<argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>VDP_FUNC_ID_GET_PROC_ADDRESS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_vdpau_bind_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hwaccel_context</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>refs</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pool</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CreateSurface</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>vdpau_decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pool</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>pool</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>refs</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"not enough video RAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>infos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vdp_get_information_string</name><argument_list>(<argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"Using %s"</literal></expr></argument>, <argument><expr><name>infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>vtcx_out</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"VDPAU video decoder"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_VCODEC</argument>)</argument_list></macro>

<macro><name>set_va_callback</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"vdpau"</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

</unit>
