<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\vdpau\picture.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_pool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_vdpau.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>visibility</name> <name>push</name><name>(</name><name>default</name><name>)</name></cpp:pragma>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>offsetof</name> <argument_list>(<argument><expr><name>vlc_vdp_video_field_t</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="string">"Cast assumption failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VideoSurfaceDestroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>vlc_vdp_video_field_t</name></expr></argument>,

<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_vdp_video_frame_t</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>field</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_surface_destroy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"video surface destruction failure: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vdp_release_x11</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_context_t</name> <modifier>*</modifier></type><name>VideoSurfaceCopy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>fold</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>vlc_vdp_video_field_t</name></expr></argument>,

<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>fnew</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>fnew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>fnew</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fnew</name> <operator>=</operator> <operator>*</operator><name>fold</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fold</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>fnew</name><operator>-&gt;</operator><name>context</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VdpProcamp</name></type> <name>procamp_default</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>struct_version</name> <operator>=</operator> <name>VDP_PROCAMP_VERSION</name></expr>,

<expr><operator>.</operator><name>brightness</name> <operator>=</operator> <literal type="number">0.f</literal></expr>,

<expr><operator>.</operator><name>contrast</name> <operator>=</operator> <literal type="number">1.f</literal></expr>,

<expr><operator>.</operator><name>saturation</name> <operator>=</operator> <literal type="number">1.f</literal></expr>,

<expr><operator>.</operator><name>hue</name> <operator>=</operator> <literal type="number">0.f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>vlc_vdp_video_create</name><parameter_list>(<parameter><decl><type><name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>,

<parameter><decl><type><name>VdpVideoSurface</name></type> <name>surface</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>field</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_vdp_video_frame_t</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>field</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>frame</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{

<expr><name>VideoSurfaceDestroy</name></expr>, <expr><name>VideoSurfaceCopy</name></expr>,

<expr><name>NULL</name></expr> 

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>structure</name></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_PICTURE_STRUCTURE_FRAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>procamp</name></name> <operator>=</operator> <name>procamp_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>sharpen</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name>surface</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>vdp</name></name> <operator>=</operator> <call><name>vdp_hold_x11</name><argument_list>(<argument><expr><name>vdp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>field</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_context_t</name> <modifier>*</modifier></type><name>VideoSurfaceCloneWithContext</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>src_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>dst_ctx</name> <init>= <expr><call><name>VideoSurfaceCopy</name><argument_list>(<argument><expr><name>src_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dst_ctx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dst_ctx</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VdpStatus</name></type> <name>vlc_vdp_video_attach</name><parameter_list>(<parameter><decl><type><name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl></parameter>, <parameter><decl><type><name>VdpVideoSurface</name></type> <name>surface</name></decl></parameter>,

<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>vlc_vdp_video_create</name><argument_list>(<argument><expr><name>vdp</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>field</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VDP_STATUS_RESOURCES</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>destroy</name></name> <operator>=</operator> <name>VideoSurfaceDestroy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <name>VideoSurfaceCloneWithContext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>vctx</name></name> <operator>=</operator> <call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_VDPAU_VIDEO_420</name>

<operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_VDPAU_VIDEO_422</name>

<operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_VDPAU_VIDEO_444</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

<return>return <expr><name>VDP_STATUS_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_vdp_output_surface_destroy</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_output_surface_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vdp_output_surface_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vdp_release_x11</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier>

<name>picture_t</name> <modifier>*</modifier></type><name>vlc_vdp_output_surface_create</name><parameter_list>(<parameter><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_dev</name></decl></parameter>,

<parameter><decl><type><name>VdpRGBAFormat</name></type> <name>rgb_fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_output_surface_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name> <operator>=</operator> <call><name>vdp_hold_x11</name><argument_list>(<argument><expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>gl_nv_surface</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name> <init>= <expr><call><name>vdp_output_surface_create</name><argument_list>(<argument><expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>rgb_fmt</name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vdp_release_x11</name><argument_list>(<argument><expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>res</name> <init>= <expr><block>{

<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>sys</name></expr>,

<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>vlc_vdp_output_surface_destroy</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_NewFromResource</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vdp_output_surface_destroy</name><argument_list>(<argument><expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>vlc_vdp_output_pool_create</name><parameter_list>(<parameter><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_dev</name></decl></parameter>,

<parameter><decl><type><name>VdpRGBAFormat</name></type> <name>rgb_fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>requested_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pics</name><index>[<expr><name>requested_count</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>requested_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pics</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_vdp_output_surface_create</name><argument_list>(<argument><expr><name>vdpau_dev</name></expr></argument>, <argument><expr><name>rgb_fmt</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pics</name><index>[<expr><name>count</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>picture_pool_New</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>pics</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pool</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>pics</name><index>[<expr><operator>--</operator><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<return>return <expr><name>pool</name></expr>;</return>

</block_content>}</block></function>

</unit>
