<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\vdpau\chroma.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_pool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_vdpau.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PAST</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FUTURE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpDevice</name></type> <name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpChromaType</name></type> <name>chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpYCbCrFormat</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>history</name><index>[<expr><name>MAX_PAST</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>MAX_FUTURE</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name>brightness</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>contrast</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>saturation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>hue</name></decl>;</decl_stmt>

}</block> <decl><name>procamp</name></decl>;</struct>

}</block></struct></type> <name>vlc_vdp_mixer_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>VdpStatus</name></type> <name>MixerSetupColors</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VdpProcamp</name> <modifier>*</modifier></type><name>procamp</name></decl></parameter>,

<parameter><decl><type><name>VdpCSCMatrix</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>csc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_mixer_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpColorStandard</name></type> <name>std</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>COLOR_SPACE_BT601</name></expr>:</case>

<expr_stmt><expr><name>std</name> <operator>=</operator> <name>VDP_COLOR_STANDARD_ITUR_BT_601</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COLOR_SPACE_BT709</name></expr>:</case>

<expr_stmt><expr><name>std</name> <operator>=</operator> <name>VDP_COLOR_STANDARD_ITUR_BT_709</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&gt;=</operator> <literal type="number">720</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>std</name> <operator>=</operator> <name>VDP_COLOR_STANDARD_ITUR_BT_709</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>std</name> <operator>=</operator> <name>VDP_COLOR_STANDARD_ITUR_BT_601</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_generate_csc_matrix</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>procamp</name></expr></argument>, <argument><expr><name>std</name></expr></argument>, <argument><expr><name>csc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"color space matrix"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>procamp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>brightness</name></name> <operator>=</operator> <name><name>procamp</name><operator>-&gt;</operator><name>brightness</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>contrast</name></name> <operator>=</operator> <name><name>procamp</name><operator>-&gt;</operator><name>contrast</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>saturation</name></name> <operator>=</operator> <name><name>procamp</name><operator>-&gt;</operator><name>saturation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>hue</name></name> <operator>=</operator> <name><name>procamp</name><operator>-&gt;</operator><name>hue</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>brightness</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>contrast</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>saturation</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>hue</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VDP_STATUS_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VdpVideoMixer</name></type> <name>MixerCreate</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>import</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_mixer_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoMixer</name></type> <name>mixer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpBool</name></type> <name>ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoMixerFeature</name></type> <name><name>featv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>featc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>algo</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"vdpau-deinterlace"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ivtc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>algo</name> <operator>==</operator> <name>VDP_VIDEO_MIXER_FEATURE_DEINTERLACE_TEMPORAL_SPATIAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_query_feature_support</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>algo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>VDP_STATUS_OK</name> <operator>&amp;&amp;</operator> <name>ok</name> <operator>==</operator> <name>VDP_TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"using video mixer %s feature"</literal></expr></argument>,

<argument><expr><literal type="string">"temporal-spatial deinterlace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>algo</name> <operator>=</operator> <name>VDP_VIDEO_MIXER_FEATURE_DEINTERLACE_TEMPORAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algo</name> <operator>==</operator> <name>VDP_VIDEO_MIXER_FEATURE_DEINTERLACE_TEMPORAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_query_feature_support</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>algo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>VDP_STATUS_OK</name> <operator>&amp;&amp;</operator> <name>ok</name> <operator>==</operator> <name>VDP_TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"using video mixer %s feature"</literal></expr></argument>,

<argument><expr><literal type="string">"temporal deinterlace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>algo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algo</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>featv</name><index>[<expr><name>featc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>algo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ivtc</name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"vdpau-ivtc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ivtc</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_query_feature_support</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>VDP_VIDEO_MIXER_FEATURE_INVERSE_TELECINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>VDP_STATUS_OK</name> <operator>&amp;&amp;</operator> <name>ok</name> <operator>==</operator> <name>VDP_TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"using video mixer %s feature"</literal></expr></argument>,

<argument><expr><literal type="string">"inverse telecine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>featv</name><index>[<expr><name>featc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_FEATURE_INVERSE_TELECINE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>noise</name> <init>= <expr><call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"vdpau-noise-reduction"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>noise</name> <operator>&gt;</operator> <literal type="number">0.f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_query_feature_support</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>VDP_VIDEO_MIXER_FEATURE_NOISE_REDUCTION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>VDP_STATUS_OK</name> <operator>&amp;&amp;</operator> <name>ok</name> <operator>==</operator> <name>VDP_TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"using video mixer %s feature"</literal></expr></argument>, <argument><expr><literal type="string">"noise reduction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>featv</name><index>[<expr><name>featc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_FEATURE_NOISE_REDUCTION</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_query_feature_support</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>VDP_VIDEO_MIXER_FEATURE_SHARPNESS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>VDP_STATUS_OK</name> <operator>&amp;&amp;</operator> <name>ok</name> <operator>==</operator> <name>VDP_TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"using video mixer %s feature"</literal></expr></argument>, <argument><expr><literal type="string">"sharpness"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>featv</name><index>[<expr><name>featc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_FEATURE_SHARPNESS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset</name> <init>= <expr><name>VDP_VIDEO_MIXER_FEATURE_HIGH_QUALITY_SCALING_L1</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>level</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"vdpau-scaling"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_query_feature_support</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>offset</name> <operator>+</operator> <name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>VDP_STATUS_OK</name> <operator>&amp;&amp;</operator> <name>ok</name> <operator>==</operator> <name>VDP_TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"using video mixer high quality scaling L%u"</literal></expr></argument>,

<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>featv</name><index>[<expr><name>featc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>level</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt> 

</block_content>}</block></while>

<decl_stmt><decl><type><name>VdpVideoMixerParameter</name></type> <name><name>parms</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>VDP_VIDEO_MIXER_PARAMETER_VIDEO_SURFACE_WIDTH</name></expr>,

<expr><name>VDP_VIDEO_MIXER_PARAMETER_VIDEO_SURFACE_HEIGHT</name></expr>,

<expr><name>VDP_VIDEO_MIXER_PARAMETER_CHROMA_TYPE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><name>import</name></expr> ?</condition><then> <expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>

</then><else>: <expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>width</name></expr>, <expr><operator>&amp;</operator><name>height</name></expr>, <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>chroma</name></name></expr>, }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_create</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>featc</name></expr></argument>, <argument><expr><name>featv</name></expr></argument>,

<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>parms</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"mixer"</literal></expr></argument>, <argument><expr><literal type="string">"creation"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VDP_INVALID_HANDLE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"using video mixer %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>mixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VdpVideoMixerAttribute</name></type> <name><name>attrv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>valv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>attrc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpCSCMatrix</name></type> <name>csc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>chroma_skip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>featc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MixerSetupColors</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>attrv</name><index>[<expr><name>attrc</name></expr>]</index></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_ATTRIBUTE_CSC_MATRIX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>valv</name><index>[<expr><name>attrc</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>csc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attrc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>algo</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>featv</name><index>[<expr><name>featc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>algo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ivtc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>featv</name><index>[<expr><name>featc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_FEATURE_INVERSE_TELECINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chroma_skip</name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"vdpau-chroma-skip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrv</name><index>[<expr><name>attrc</name></expr>]</index></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_ATTRIBUTE_SKIP_CHROMA_DEINTERLACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>valv</name><index>[<expr><name>attrc</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>chroma_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attrc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>noise</name> <operator>&gt;</operator> <literal type="number">0.f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>featv</name><index>[<expr><name>featc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_FEATURE_NOISE_REDUCTION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrv</name><index>[<expr><name>attrc</name></expr>]</index></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_ATTRIBUTE_NOISE_REDUCTION_LEVEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>valv</name><index>[<expr><name>attrc</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>noise</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attrc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>featv</name><index>[<expr><name>featc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>featc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>VdpBool</name></type> <name><name>enablev</name><index>[<expr><name>featc</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>featc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>enablev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>VDP_TRUE</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_set_feature_enables</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>mixer</name></expr></argument>,

<argument><expr><name>featc</name></expr></argument>, <argument><expr><name>featv</name></expr></argument>, <argument><expr><name>enablev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"mixer"</literal></expr></argument>, <argument><expr><literal type="string">"features"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attrc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_set_attribute_values</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>mixer</name></expr></argument>,

<argument><expr><name>attrc</name></expr></argument>, <argument><expr><name>attrv</name></expr></argument>, <argument><expr><name>valv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"mixer"</literal></expr></argument>, <argument><expr><literal type="string">"attributes"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>mixer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_mixer_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PAST</name> <operator>+</operator> <name>MAX_FUTURE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>VideoExport</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>VdpYCbCrFormat</name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>VDPAU_FIELD_FROM_PICCTX</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name>surface</name> <init>= <expr><name><name>field</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>surface</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>planes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pitches</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_decoder</name> <init>=

<expr><call><name>GetVDPAUOpaqueContext</name><argument_list>(<argument><expr><call><name>picture_GetVideoContext</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pitches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I420</name>

<operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I422</name>

<operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I444</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>planes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>planes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pitches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pitches</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_surface_get_bits_y_cb_cr</name><argument_list>(<argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>format</name></expr></argument>,

<argument><expr><name>planes</name></expr></argument>, <argument><expr><name>pitches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"surface"</literal></expr></argument>, <argument><expr><literal type="string">"export"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>VideoImport</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_mixer_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name>surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_surface_create</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chroma</name></name></expr></argument>,

<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,

<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"surface"</literal></expr></argument>, <argument><expr><literal type="string">"creation"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>drop</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>planes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pitches</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name>

<operator>+</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pitches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I420</name>

<operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I422</name>

<operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I444</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>planes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>planes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pitches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pitches</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I420</name>

<operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YV12</name>

<operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NV12</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator>

<operator>+</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_surface_put_bits_y_cb_cr</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name>planes</name></expr></argument>, <argument><expr><name>pitches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"surface"</literal></expr></argument>, <argument><expr><literal type="string">"import"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>chroma</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VDP_CHROMA_TYPE_420</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_VDPAU_VIDEO_420</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VDP_CHROMA_TYPE_422</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_VDPAU_VIDEO_422</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VDP_CHROMA_TYPE_444</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_VDPAU_VIDEO_444</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>picture_NewFromFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vlc_vdp_video_attach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dst</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vdp_video_surface_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>drop</name>:</label>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OutputSurfaceDestroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>picture_context_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_context_t</name> <modifier>*</modifier></type><name>OutputSurfaceClone</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>dts_ctx</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dts_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dts_ctx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dts_ctx</name> <operator>=</operator> <operator>*</operator><name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>dts_ctx</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dts_ctx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Render</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>import</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_mixer_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"corrupt VDPAU video surface %p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>MAX_PAST</name> <operator>+</operator> <name>MAX_FUTURE</name></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic_f</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>MAX_PAST</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>MAX_PAST</name> <operator>+</operator> <name>MAX_FUTURE</name></expr>]</index></name> <operator>||</operator>

<operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>MAX_PAST</name> <operator>+</operator> <name>MAX_FUTURE</name></expr>]</index></name><operator>-&gt;</operator><name>b_force</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>MAX_PAST</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pic_f</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAX_PAST</name> <operator>+</operator> <name>MAX_FUTURE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>MAX_PAST</name> <operator>+</operator> <name>MAX_FUTURE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>pic_f</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>MAX_PAST</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>picture_pool_Get</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <operator>(</operator><name>picture_context_t</name><operator>)</operator> <block>{

<expr><name>OutputSurfaceDestroy</name></expr>, <expr><name>OutputSurfaceClone</name></expr>,

<macro><name>vlc_video_context_Hold</name><argument_list>(<argument>filter-&gt;vctx_out</argument>)</argument_list></macro>

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_vdp_output_surface_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_sys</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>vdp</name></name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name><name>pic_f</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>b_force</name></name> <operator>=</operator> <name><name>pic_f</name><operator>-&gt;</operator><name>b_force</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_vdp_video_field_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>VDPAU_FIELD_FROM_PICCTX</name><argument_list>(<argument><expr><name><name>pic_f</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VdpVideoMixerFeature</name></type> <name><name>features</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VDP_VIDEO_MIXER_FEATURE_SHARPNESS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VdpBool</name></type> <name><name>enables</name><index>[]</index></name> <init>= <expr><block>{

<expr><name><name>f</name><operator>-&gt;</operator><name>sharpen</name></name> <operator>!=</operator> <literal type="number">0.f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_set_feature_enables</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mixer</name></name></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>features</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>features</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>features</name></expr></argument>, <argument><expr><name>enables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"mixer"</literal></expr></argument>, <argument><expr><literal type="string">"features"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VdpVideoMixerAttribute</name></type> <name><name>attrs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>VDP_VIDEO_MIXER_ATTRIBUTE_SHARPNESS_LEVEL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>sharpen</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpCSCMatrix</name></type> <name>csc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>brightness</name></name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>brightness</name></name>

<operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>contrast</name></name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>contrast</name></name>

<operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>saturation</name></name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>saturation</name></name>

<operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>hue</name></name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>hue</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>MixerSetupColors</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>procamp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VDP_STATUS_OK</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>attrs</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>VDP_VIDEO_MIXER_ATTRIBUTE_CSC_MATRIX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>csc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_set_attribute_values</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mixer</name></name></expr></argument>,

<argument><expr><name>count</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"mixer"</literal></expr></argument>, <argument><expr><literal type="string">"attributes"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>swap</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hflip</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>vflip</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>!=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>ORIENT_TOP_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>swap</name> <operator>=</operator> <call><name>ORIENT_IS_SWAP</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ORIENT_TOP_LEFT</name></expr>:</case>

<case>case <expr><name>ORIENT_RIGHT_TOP</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ORIENT_TOP_RIGHT</name></expr>:</case>

<case>case <expr><name>ORIENT_RIGHT_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>hflip</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_BOTTOM_LEFT</name></expr>:</case>

<case>case <expr><name>ORIENT_LEFT_TOP</name></expr>:</case>

<expr_stmt><expr><name>vflip</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_BOTTOM_RIGHT</name></expr>:</case>

<case>case <expr><name>ORIENT_LEFT_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>vflip</name> <operator>=</operator> <name>hflip</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VdpOutputSurface</name></type> <name>output</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>VdpRGBAFormat</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_output_surface_get_parameters</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"output %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"surface"</literal></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_output_surface_create</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"output %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"surface"</literal></expr></argument>, <argument><expr><literal type="string">"creation"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>VdpVideoMixerPictureStructure</name></type> <name>structure</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>structure</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name><name>past</name><index>[<expr><name>MAX_PAST</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name>surface</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>surface</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name><name>future</name><index>[<expr><name>MAX_FUTURE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpRect</name></type> <name>src_rect</name> <init>= <expr><block>{

<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name></expr>, <expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name></expr>,

<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name></expr>, <expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>import</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>y0</name></name> <operator>=</operator> <name><name>src_rect</name><operator>.</operator><name>y1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hflip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>x0</name></name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>x1</name></name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vflip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>y0</name></name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src_rect</name><operator>.</operator><name>y1</name></name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>VdpRect</name></type> <name>dst_rect</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name>swap</name> <operator>?</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name>

<operator>:</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><name>swap</name> <operator>?</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name>

<operator>:</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>pic_f</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><operator>(</operator><name>MAX_PAST</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>past</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pic_f</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>VDPAU_FIELD_FROM_PICCTX</name><argument_list>(<argument><expr><name><name>pic_f</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>frame</name><operator>-&gt;</operator><name>surface</name></name></expr> </then><else>: <expr><name>VDP_INVALID_HANDLE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FUTURE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>pic_f</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><operator>(</operator><name>MAX_PAST</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>future</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pic_f</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>VDPAU_FIELD_FROM_PICCTX</name><argument_list>(<argument><expr><name><name>pic_f</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>frame</name><operator>-&gt;</operator><name>surface</name></name></expr> </then><else>: <expr><name>VDP_INVALID_HANDLE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_video_mixer_render</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mixer</name></name></expr></argument>, <argument><expr><name>VDP_INVALID_HANDLE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>structure</name></expr></argument>,

<argument><expr><name>MAX_PAST</name></expr></argument>, <argument><expr><name>past</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>MAX_FUTURE</name></expr></argument>, <argument><expr><name>future</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>src_rect</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"video %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"mixer"</literal></expr></argument>, <argument><expr><literal type="string">"rendering"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>swap</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vdp_output_surface_render_output_surface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>VDP_OUTPUT_SURFACE_RENDER_ROTATE_90</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vdp_output_surface_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"output %s %s failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"surface"</literal></expr></argument>, <argument><expr><literal type="string">"render"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>skip</name>:</label>

<expr_stmt><expr><name>pic_f</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, 

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAX_PAST</name> <operator>+</operator> <name>MAX_FUTURE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>VideoRender</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>Render</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>YCbCrRender</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>VideoImport</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>Render</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OutputCheckFormat</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_dev</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>VdpRGBAFormat</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>rgb_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VdpRGBAFormat</name></type> <name><name>rgb_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VDP_RGBA_FORMAT_R10G10B10A2</name></expr>, <expr><name>VDP_RGBA_FORMAT_B10G10R10A2</name></expr>,

<expr><name>VDP_RGBA_FORMAT_B8G8R8A8</name></expr>, <expr><name>VDP_RGBA_FORMAT_R8G8B8A8</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>rgb_fmts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpBool</name></type> <name>ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpStatus</name></type> <name>err</name> <init>= <expr><call><name>vdp_output_surface_query_capabilities</name><argument_list>(<argument><expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>,

<argument><expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,

<argument><expr><name><name>rgb_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s capabilities query failure: %s"</literal></expr></argument>, <argument><expr><literal type="string">"output surface"</literal></expr></argument>,

<argument><expr><call><name>vdp_get_error_string</name><argument_list>(<argument><expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>||</operator> <name>w</name> <operator>&lt;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>||</operator> <name>h</name> <operator>&lt;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>rgb_fmt</name> <operator>=</operator> <name><name>rgb_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using RGBA format %u"</literal></expr></argument>, <argument><expr><operator>*</operator><name>rgb_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"no supported output surface format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_pool_t</name> <modifier>*</modifier></type><name>OutputPoolAlloc</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_dev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VdpRGBAFormat</name></type> <name>rgb_fmt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OutputCheckFormat</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>vdpau_dev</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rgb_fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_vdp_output_pool_create</name><argument_list>(<argument><expr><name>vdpau_dev</name></expr></argument>, <argument><expr><name>rgb_fmt</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name></type> <name>vdpau_vctx_ops</name> <init>= <expr><block>{

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OutputOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_VDPAU_OUTPUT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>ORIENT_TOP_LEFT</name>

<operator>||</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><call><name>filter_HoldDecoderDeviceType</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>VLC_DECODER_DEVICE_VDPAU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_device</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_vdp_mixer_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<function_decl><type><name>picture_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>video_filter</name>)<parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>VideoRender</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_VDPAU_VIDEO_444</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chroma</name></name> <operator>=</operator> <name>VDP_CHROMA_TYPE_444</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>VDP_YCBCR_FORMAT_NV12</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_VDPAU_VIDEO_422</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chroma</name></name> <operator>=</operator> <name>VDP_CHROMA_TYPE_422</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>VDP_YCBCR_FORMAT_UYVY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_VDPAU_VIDEO_420</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chroma</name></name> <operator>=</operator> <name>VDP_CHROMA_TYPE_420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>VDP_YCBCR_FORMAT_NV12</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><call><name>vlc_fourcc_to_vdp_ycc</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>chroma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>video_filter</name> <operator>=</operator> <name>YCbCrRender</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_decoder</name> <init>= <expr><call><name>GetVDPAUOpaqueDevice</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name> <operator>=</operator> <name><name>vdpau_decoder</name><operator>-&gt;</operator><name>vdp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name><name>vdpau_decoder</name><operator>-&gt;</operator><name>device</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator> <call><name>vlc_video_context_Create</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>, <argument><expr><name>VLC_VIDEO_CONTEXT_VDPAU</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdpau_vctx_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>OutputPoolAlloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>vdpau_decoder</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mixer</name></name> <operator>=</operator> <call><name>MixerCreate</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>video_filter</name> <operator>==</operator> <name>YCbCrRender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>mixer</name></name> <operator>==</operator> <name>VDP_INVALID_HANDLE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_pool_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PAST</name> <operator>+</operator> <name>MAX_FUTURE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>brightness</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>contrast</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>saturation</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>procamp</name><operator>.</operator><name>hue</name></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>video_filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OutputClose</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_vdp_mixer_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Flush</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vdp_video_mixer_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>mixer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_pool_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Release</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>vctx_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>VdpYCbCrFormat</name></type> <name>format</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_vdp_yuv_getter_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>VideoExport_Filter</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_vdp_yuv_getter_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"corrupt VDPAU video surface %p"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>VideoExport</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ChromaMatches</name><parameter_list>(<parameter><decl><type><name>VdpChromaType</name></type> <name>vdp_type</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>vlc_chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>vlc_chroma</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_VDPAU_VIDEO_420</name></expr>:</case>

<return>return <expr><name>vdp_type</name> <operator>==</operator> <name>VDP_CHROMA_TYPE_420</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_VDPAU_VIDEO_422</name></expr>:</case>

<return>return <expr><name>vdp_type</name> <operator>==</operator> <name>VDP_CHROMA_TYPE_422</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_VDPAU_VIDEO_444</name></expr>:</case>

<return>return <expr><name>vdp_type</name> <operator>==</operator> <name>VDP_CHROMA_TYPE_444</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>YCbCrOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpChromaType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpYCbCrFormat</name></type> <name>format</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_fourcc_to_vdp_ycc</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>ChromaMatches</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name>

<operator>!=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name>

<operator>||</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name>

<operator>!=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name>

<operator>||</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>!=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name>

<operator>||</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>!=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name>

<operator>||</operator> <operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name>

<operator>!=</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_vdp_yuv_getter_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>VideoExport_Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>algo_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><name>VDP_VIDEO_MIXER_FEATURE_DEINTERLACE_TEMPORAL</name></expr>,

<expr><name>VDP_VIDEO_MIXER_FEATURE_DEINTERLACE_TEMPORAL_SPATIAL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>algo_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bob"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Temporal"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Temporal-spatial"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"VDPAU"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"VDPAU surface conversions"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VFILTER</argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>OutputOpen</argument>, <argument>OutputClose</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"vdpau-deinterlace"</literal></argument>,

<argument>VDP_VIDEO_MIXER_FEATURE_DEINTERLACE_TEMPORAL_SPATIAL</argument>,

<argument>N_(<literal type="string">"Deinterlace"</literal>)</argument>, <argument>N_(<literal type="string">"Deinterlacing algorithm"</literal>)</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>algo_values</argument>, <argument>algo_names</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"vdpau-ivtc"</literal></argument>, <argument>false</argument>,

<argument>N_(<literal type="string">"Inverse telecine"</literal>)</argument>, <argument>N_(<literal type="string">"Inverse telecine"</literal>)</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"vdpau-chroma-skip"</literal></argument>, <argument>false</argument>,

<argument>N_(<literal type="string">"Deinterlace chroma skip"</literal>)</argument>,

<argument>N_(<literal type="string">"Whether temporal deinterlacing applies to luma only"</literal>)</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"vdpau-noise-reduction"</literal></argument>, <argument><literal type="number">0.</literal></argument>, <argument><literal type="number">0.</literal></argument>, <argument><literal type="number">1.</literal></argument>,

<argument>N_(<literal type="string">"Noise reduction level"</literal>)</argument>, <argument>N_(<literal type="string">"Noise reduction level"</literal>)</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>(<argument><literal type="string">"vdpau-scaling"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">9</literal></argument>,

<argument>N_(<literal type="string">"Scaling quality"</literal>)</argument>, <argument>N_(<literal type="string">"High quality scaling level"</literal>)</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>YCbCrOpen</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

</unit>
