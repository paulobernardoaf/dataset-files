<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\arib\aribsub.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARIBB24</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"substext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb24/parser.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb24/decoder.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_RUBY_TEXT</name></cpp:macro> <cpp:value>N_("Ignore ruby (furigana)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_RUBY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Ignore ruby (furigana) in the subtitle.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CORETEXT_TEXT</name></cpp:macro> <cpp:value>N_("Use Core Text renderer")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CORETEXT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use Core Text renderer in the subtitle.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARIBSUB_CFG_PREFIX</name></cpp:macro> <cpp:value>"aribsub-"</cpp:value></cpp:define>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"ARIB subtitles decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"ARIB subtitles"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>ARIBSUB_CFG_PREFIX <literal type="string">"ignore-ruby"</literal></argument>, <argument>false</argument>, <argument>IGNORE_RUBY_TEXT</argument>, <argument>IGNORE_RUBY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>ARIBSUB_CFG_PREFIX <literal type="string">"use-coretext"</literal></argument>, <argument>false</argument>, <argument>USE_CORETEXT_TEXT</argument>, <argument>USE_CORETEXT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_a_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ignore_ruby</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_use_coretext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ignore_position_adjustment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arib_instance_t</name> <modifier>*</modifier></type><name>p_arib_instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_arib_base_dir</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>render</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>arib_parser_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>arib_decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>get_arib_base_dir</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>messages_callback_handler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_message</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_ARIB_A</name> <operator>&amp;&amp;</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_ARIB_C</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <operator>(</operator><name>decoder_sys_t</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_arib_instance</name></name> <operator>=</operator> <call><name>arib_instance_new</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_arib_instance</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_a_profile</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_ARIB_A</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_ruby</name></name> <operator>=</operator>

<call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>ARIBSUB_CFG_PREFIX</name> <literal type="string">"ignore-ruby"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_coretext</name></name> <operator>=</operator>

<call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>ARIBSUB_CFG_PREFIX</name> <literal type="string">"use-coretext"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_position_adjustment</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_use_coretext</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_arib_instance</name><operator>-&gt;</operator><name>b_use_private_conv</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_use_coretext</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_arib_instance</name><operator>-&gt;</operator><name>b_replace_ellipsis</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_use_coretext</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_basedir</name> <init>= <expr><call><name>get_arib_base_dir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>arib_set_base_path</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_arib_instance</name></name></expr></argument>, <argument><expr><name>psz_basedir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_basedir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arib_register_messages_callback</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_arib_instance</name></name></expr></argument>,

<argument><expr><name>messages_callback_handler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>arib_instance_destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_arib_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_arib_base_dir</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>ARIBSUB_CFG_PREFIX</name> <literal type="string">"ignore-ruby"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>ARIBSUB_CFG_PREFIX</name> <literal type="string">"use-coretext"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>arib_parser_t</name> <modifier>*</modifier></type><name>p_parser</name> <init>= <expr><call><name>arib_get_parser</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_arib_instance</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arib_decoder_t</name> <modifier>*</modifier></type><name>p_decoder</name> <init>= <expr><call><name>arib_get_decoder</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_arib_instance</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_parser</name> <operator>&amp;&amp;</operator> <name>p_decoder</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>arib_parse_pes</name><argument_list>( <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><call><name>render</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>p_decoder</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_spu</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>messages_callback_handler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_message</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator> <name>decoder_t</name> <operator>*</operator> <operator>)</operator> <name>p_opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>get_arib_base_dir</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_data_dir</name> <init>= <expr><call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_USERDATA_DIR</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_data_dir</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_arib_base_dir</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_arib_base_dir</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>DIR_SEP</name><literal type="string">"arib"</literal></expr></argument>, <argument><expr><name>psz_data_dir</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_arib_base_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_data_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_arib_base_dir</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>render</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>arib_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>,

<parameter><decl><type><name>arib_decoder_t</name> <modifier>*</modifier></type><name>p_arib_decoder</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psz_data</name> <init>= <expr><call><name>arib_parser_get_data</name><argument_list>( <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_data</name> <operator>||</operator> <operator>!</operator><name>i_data_size</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_subtitle_size</name> <init>= <expr><name>i_data_size</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_subtitle_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>psz_subtitle</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_subtitle</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_a_profile</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arib_initialize_decoder_a_profile</name><argument_list>( <argument><expr><name>p_arib_decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arib_initialize_decoder_c_profile</name><argument_list>( <argument><expr><name>p_arib_decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i_subtitle_size</name> <operator>=</operator> <call><name>arib_decode_buffer</name><argument_list>( <argument><expr><name>p_arib_decoder</name></expr></argument>,

<argument><expr><name>psz_data</name></expr></argument>,

<argument><expr><name>i_data_size</name></expr></argument>,

<argument><expr><name>psz_subtitle</name></expr></argument>,

<argument><expr><name>i_subtitle_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_ARIBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"psz_subtitle [%s]"</literal></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><name>psz_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>end</name> <init>= <expr><name>psz_data</name> <operator>+</operator> <name>i_data_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_subtitle_data_hex</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(

<argument><expr><name>i_data_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_subtitle_data_hex_idx</name> <init>= <expr><name>psz_subtitle_data_hex</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz_subtitle_data_hex_idx</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><operator>*</operator><name>start</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_subtitle_data_hex_idx</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"psz_subtitle_data [%s]"</literal></expr></argument>, <argument><expr><name>psz_subtitle_data_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_subtitle_data_hex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpictureText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_spu</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>decoder_NewSubpictureText_failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <call><name>VLC_TICK_FROM_US</name><argument_list>(<argument><expr><call><name>arib_decoder_get_time</name><argument_list>( <argument><expr><name>p_arib_decoder</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <operator>(</operator><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>==</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>arib_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arib_text_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator>

<operator>(</operator><name>arib_text_region_t</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>arib_text_region_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_region</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>malloc_failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>arib_buf_region_t</name> <modifier>*</modifier></type><name>p_buf_region</name> <init>= <expr><call><name>arib_decoder_get_regions</name><argument_list>( <argument><expr><name>p_arib_decoder</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>

<condition><expr><name>p_buf_region</name></expr>;</condition> <incr><expr><name>p_buf_region</name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_ruby</name></name> <operator>&amp;&amp;</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_fontheight</name></name> <operator>==</operator> <literal type="number">18</literal></expr> )</condition>

<block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><name><name>p_buf_region</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>p_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_text</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>malloc_failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name><name>p_buf_region</name><operator>-&gt;</operator><name>p_start</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_text</name><index>[<expr><name>i_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_ARIBSUB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"psz_text [%s]"</literal></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_foreground_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_planewidth</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_planewidth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_planeheight</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_planeheight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_fontwidth</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_fontwidth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_fontheight</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_fontheight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_verint</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_verint</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_horint</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_horint</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_charleft</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_charleft</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_charbottom</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_charbottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_charleft_adj</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_charbottom_adj</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_position_adjustment</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_charleft_adj</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_horadj</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_charbottom_adj</name></name> <operator>=</operator> <name><name>p_buf_region</name><operator>-&gt;</operator><name>i_veradj</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_buf_region</name><operator>-&gt;</operator><name>p_next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator>

<operator>(</operator><name>arib_text_region_t</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>arib_text_region_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_region</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>malloc_failed</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>decoder_NewSubpictureText_failed</name>:</label>

<label><name>malloc_failed</name>:</label>

<expr_stmt><expr><call><name>arib_finalize_decoder</name><argument_list>( <argument><expr><name>p_arib_decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>

</block_content>}</block></function>

</unit>
