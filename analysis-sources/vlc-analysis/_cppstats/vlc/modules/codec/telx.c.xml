<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\telx.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TELX_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>msg_Dbg a</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(void) 0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERRIDE_PAGE_TEXT</name></cpp:macro> <cpp:value>N_("Override page")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERRIDE_PAGE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Override the indicated page, try this if " "your subtitles don't appear (-1 = autodetect from TS, " "0 = autodetect from teletext, " "&gt;0 = actual page number, usually 888 or 889).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_SUB_FLAG_TEXT</name></cpp:macro> <cpp:value>N_("Ignore subtitle flag")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_SUB_FLAG_LONGTEXT</name></cpp:macro> <cpp:value>N_("Ignore the subtitle flag, try this if " "your subtitles don't appear.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRENCH_WORKAROUND_TEXT</name></cpp:macro> <cpp:value>N_("Workaround for France")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRENCH_WORKAROUND_LONGTEXT</name></cpp:macro> <cpp:value>N_("Some French channels do not flag " "their subtitling pages correctly due to a historical " "interpretation mistake. Try using this wrong interpretation if " "your subtitles don't appear.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Teletext subtitles decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"Teletext"</literal></argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"telx-override-page"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>OVERRIDE_PAGE_TEXT</argument>, <argument>OVERRIDE_PAGE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"telx-ignore-subtitle-flag"</literal></argument>, <argument>false</argument>,

<argument>IGNORE_SUB_FLAG_TEXT</argument>, <argument>IGNORE_SUB_FLAG_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"telx-french-workaround"</literal></argument>, <argument>false</argument>,

<argument>FRENCH_WORKAROUND_TEXT</argument>, <argument>FRENCH_WORKAROUND_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>b_is_subtitle</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ppsz_lines</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_prev_text</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>prev_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>i_page</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>b_erase</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type> <name><name>pi_active_national_set</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_wanted_page</name></decl>, <name>i_wanted_magazine</name>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ignore_sub_flag</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>ppi_national_subsets</name><index>[]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="number">0x00a3</literal></expr>, <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">0x0040</literal></expr>, <expr><literal type="number">0x00ab</literal></expr>, <expr><literal type="number">0x00bd</literal></expr>, <expr><literal type="number">0x00bb</literal></expr>, <expr><literal type="number">0x005e</literal></expr>, <expr><literal type="number">0x0023</literal></expr>,

<expr><literal type="number">0x002d</literal></expr>, <expr><literal type="number">0x00bc</literal></expr>, <expr><literal type="number">0x00a6</literal></expr>, <expr><literal type="number">0x00be</literal></expr>, <expr><literal type="number">0x00f7</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x00e9</literal></expr>, <expr><literal type="number">0x00ef</literal></expr>, <expr><literal type="number">0x00e0</literal></expr>, <expr><literal type="number">0x00eb</literal></expr>, <expr><literal type="number">0x00ea</literal></expr>, <expr><literal type="number">0x00f9</literal></expr>, <expr><literal type="number">0x00ee</literal></expr>, <expr><literal type="number">0x0023</literal></expr>,

<expr><literal type="number">0x00e8</literal></expr>, <expr><literal type="number">0x00e2</literal></expr>, <expr><literal type="number">0x00f4</literal></expr>, <expr><literal type="number">0x00fb</literal></expr>, <expr><literal type="number">0x00e7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x00eb</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x00ef</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x00a4</literal></expr>, <expr><literal type="number">0x00c9</literal></expr>, <expr><literal type="number">0x00c4</literal></expr>, <expr><literal type="number">0x00d6</literal></expr>, <expr><literal type="number">0x00c5</literal></expr>, <expr><literal type="number">0x00dc</literal></expr>, <expr><literal type="number">0x005f</literal></expr>,

<expr><literal type="number">0x00e9</literal></expr>, <expr><literal type="number">0x00e4</literal></expr>, <expr><literal type="number">0x00f6</literal></expr>, <expr><literal type="number">0x00e5</literal></expr>, <expr><literal type="number">0x00fc</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x016f</literal></expr>, <expr><literal type="number">0x010d</literal></expr>, <expr><literal type="number">0x0165</literal></expr>, <expr><literal type="number">0x017e</literal></expr>, <expr><literal type="number">0x00fd</literal></expr>, <expr><literal type="number">0x00ed</literal></expr>, <expr><literal type="number">0x0159</literal></expr>,

<expr><literal type="number">0x00e9</literal></expr>, <expr><literal type="number">0x00e1</literal></expr>, <expr><literal type="number">0x011b</literal></expr>, <expr><literal type="number">0x00fa</literal></expr>, <expr><literal type="number">0x0161</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">0x00a7</literal></expr>, <expr><literal type="number">0x00c4</literal></expr>, <expr><literal type="number">0x00d6</literal></expr>, <expr><literal type="number">0x00dc</literal></expr>, <expr><literal type="number">0x005e</literal></expr>, <expr><literal type="number">0x005f</literal></expr>,

<expr><literal type="number">0x00b0</literal></expr>, <expr><literal type="number">0x00e4</literal></expr>, <expr><literal type="number">0x00f6</literal></expr>, <expr><literal type="number">0x00fc</literal></expr>, <expr><literal type="number">0x00df</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x00e7</literal></expr>, <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">0x00a1</literal></expr>, <expr><literal type="number">0x00e1</literal></expr>, <expr><literal type="number">0x00e9</literal></expr>, <expr><literal type="number">0x00ed</literal></expr>, <expr><literal type="number">0x00f3</literal></expr>, <expr><literal type="number">0x00fa</literal></expr>,

<expr><literal type="number">0x00bf</literal></expr>, <expr><literal type="number">0x00fc</literal></expr>, <expr><literal type="number">0x00f1</literal></expr>, <expr><literal type="number">0x00e8</literal></expr>, <expr><literal type="number">0x00e0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x00a3</literal></expr>, <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">0x00e9</literal></expr>, <expr><literal type="number">0x00b0</literal></expr>, <expr><literal type="number">0x00e7</literal></expr>, <expr><literal type="number">0x00bb</literal></expr>, <expr><literal type="number">0x005e</literal></expr>, <expr><literal type="number">0x0023</literal></expr>,

<expr><literal type="number">0x00f9</literal></expr>, <expr><literal type="number">0x00e0</literal></expr>, <expr><literal type="number">0x00f2</literal></expr>, <expr><literal type="number">0x00e8</literal></expr>, <expr><literal type="number">0x00ec</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x00a4</literal></expr>, <expr><literal type="number">0x0162</literal></expr>, <expr><literal type="number">0x00c2</literal></expr>, <expr><literal type="number">0x015e</literal></expr>, <expr><literal type="number">0x0102</literal></expr>, <expr><literal type="number">0x00ce</literal></expr>, <expr><literal type="number">0x0131</literal></expr>,

<expr><literal type="number">0x0163</literal></expr>, <expr><literal type="number">0x00e2</literal></expr>, <expr><literal type="number">0x015f</literal></expr>, <expr><literal type="number">0x0103</literal></expr>, <expr><literal type="number">0x00ee</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">0x0160</literal></expr>, <expr><literal type="number">0x0117</literal></expr>, <expr><literal type="number">0x0119</literal></expr>, <expr><literal type="number">0x017d</literal></expr>, <expr><literal type="number">0x010d</literal></expr>, <expr><literal type="number">0x016b</literal></expr>,

<expr><literal type="number">0x0161</literal></expr>, <expr><literal type="number">0x0105</literal></expr>, <expr><literal type="number">0x0173</literal></expr>, <expr><literal type="number">0x017e</literal></expr>, <expr><literal type="number">0x012f</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x0144</literal></expr>, <expr><literal type="number">0x0105</literal></expr>, <expr><literal type="number">0x005a</literal></expr>, <expr><literal type="number">0x015a</literal></expr>, <expr><literal type="number">0x0141</literal></expr>, <expr><literal type="number">0x0107</literal></expr>, <expr><literal type="number">0x00f3</literal></expr>,

<expr><literal type="number">0x0119</literal></expr>, <expr><literal type="number">0x017c</literal></expr>, <expr><literal type="number">0x015b</literal></expr>, <expr><literal type="number">0x0142</literal></expr>, <expr><literal type="number">0x017a</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x00cb</literal></expr>, <expr><literal type="number">0x010c</literal></expr>, <expr><literal type="number">0x0106</literal></expr>, <expr><literal type="number">0x017d</literal></expr>, <expr><literal type="number">0x0110</literal></expr>, <expr><literal type="number">0x0160</literal></expr>, <expr><literal type="number">0x00eb</literal></expr>,

<expr><literal type="number">0x010d</literal></expr>, <expr><literal type="number">0x0107</literal></expr>, <expr><literal type="number">0x017e</literal></expr>, <expr><literal type="number">0x0111</literal></expr>, <expr><literal type="number">0x0161</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x00f5</literal></expr>, <expr><literal type="number">0x0160</literal></expr>, <expr><literal type="number">0x00c4</literal></expr>, <expr><literal type="number">0x00d6</literal></expr>, <expr><literal type="number">0x017e</literal></expr>, <expr><literal type="number">0x00dc</literal></expr>, <expr><literal type="number">0x00d5</literal></expr>,

<expr><literal type="number">0x0161</literal></expr>, <expr><literal type="number">0x00e4</literal></expr>, <expr><literal type="number">0x00f6</literal></expr>, <expr><literal type="number">0x017e</literal></expr>, <expr><literal type="number">0x00fc</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0054</literal></expr>, <expr><literal type="number">0x011f</literal></expr>, <expr><literal type="number">0x0130</literal></expr>, <expr><literal type="number">0x015e</literal></expr>, <expr><literal type="number">0x00d6</literal></expr>, <expr><literal type="number">0x00c7</literal></expr>, <expr><literal type="number">0x00dc</literal></expr>, <expr><literal type="number">0x011e</literal></expr>,

<expr><literal type="number">0x0131</literal></expr>, <expr><literal type="number">0x015f</literal></expr>, <expr><literal type="number">0x00f6</literal></expr>, <expr><literal type="number">0x00e7</literal></expr>, <expr><literal type="number">0x00fc</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>FLAG_ERASE_PAGE</name> <init>= <expr><literal type="number">0x000080</literal></expr></init></decl>,

<decl><name>FLAG_NEWSFLASH</name> <init>= <expr><literal type="number">0x004000</literal></expr></init></decl>,

<decl><name>FLAG_SUBTITLE</name> <init>= <expr><literal type="number">0x008000</literal></expr></init></decl>,

<decl><name>FLAG_SUPPRESS_HEADER</name> <init>= <expr><literal type="number">0x010000</literal></expr></init></decl>,

<decl><name>FLAG_UPDATE</name> <init>= <expr><literal type="number">0x020000</literal></expr></init></decl>,

<decl><name>FLAG_INTERRUPTED</name> <init>= <expr><literal type="number">0x040000</literal></expr></init></decl>,

<decl><name>FLAG_INHIBIT_DISPLAY</name> <init>= <expr><literal type="number">0x080000</literal></expr></init></decl>,

<decl><name>FLAG_MAGAZINE_SERIAL</name> <init>= <expr><literal type="number">0x100000</literal></expr></init></decl>,

<decl><name>FLAG_FRAGMENT</name> <init>= <expr><literal type="number">0x200000</literal></expr></init></decl>,

<decl><name>FLAG_PARTIAL_PAGE</name> <init>= <expr><literal type="number">0x400000</literal></expr></init></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_val</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_TELETEXT</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ppi_national_subsets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"telx-override-page"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_magazine</name></name> <operator>&lt;</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_magazine</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_page</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_magazine</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_magazine</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_page</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_val</name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"telx-french-workaround"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>&lt;</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>b_val</name> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator>

<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_magazine</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_magazine</name></name> <operator>=</operator> <name>i_val</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>i_val</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>

<operator>|</operator><operator>(</operator><operator>(</operator><name>i_val</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_sub_flag</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>,

<argument><expr><literal type="string">"telx-ignore-subtitle-flag"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"starting telx on magazine %d page %02x flag %d"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_magazine</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_sub_flag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>bytereverse</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xaa</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xcc</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hamming_8_4</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xA8</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="number">0x0B</literal></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="number">0x26</literal></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><literal type="number">0x85</literal></expr>:</case>

<return>return <expr><literal type="number">3</literal></expr>;</return>

<case>case <expr><literal type="number">0x92</literal></expr>:</case>

<return>return <expr><literal type="number">4</literal></expr>;</return>

<case>case <expr><literal type="number">0x31</literal></expr>:</case>

<return>return <expr><literal type="number">5</literal></expr>;</return>

<case>case <expr><literal type="number">0x1C</literal></expr>:</case>

<return>return <expr><literal type="number">6</literal></expr>;</return>

<case>case <expr><literal type="number">0xBF</literal></expr>:</case>

<return>return <expr><literal type="number">7</literal></expr>;</return>

<case>case <expr><literal type="number">0x40</literal></expr>:</case>

<return>return <expr><literal type="number">8</literal></expr>;</return>

<case>case <expr><literal type="number">0xE3</literal></expr>:</case>

<return>return <expr><literal type="number">9</literal></expr>;</return>

<case>case <expr><literal type="number">0xCE</literal></expr>:</case>

<return>return <expr><literal type="number">10</literal></expr>;</return>

<case>case <expr><literal type="number">0x6D</literal></expr>:</case>

<return>return <expr><literal type="number">11</literal></expr>;</return>

<case>case <expr><literal type="number">0x7A</literal></expr>:</case>

<return>return <expr><literal type="number">12</literal></expr>;</return>

<case>case <expr><literal type="number">0xD9</literal></expr>:</case>

<return>return <expr><literal type="number">13</literal></expr>;</return>

<case>case <expr><literal type="number">0xF4</literal></expr>:</case>

<return>return <expr><literal type="number">14</literal></expr>;</return>

<case>case <expr><literal type="number">0x57</literal></expr>:</case>

<return>return <expr><literal type="number">15</literal></expr>;</return>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>to_utf8</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>ch</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0x800</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xE0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xC0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_string</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>,

<parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magazine</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>packet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>utf8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>pt</name> <init>= <expr><name>res</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in</name> <init>= <expr><call><name>bytereverse</name><argument_list>( <argument><expr><name><name>packet</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>out</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name>in</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x23</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x24</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x40</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x5b</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x5c</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x5d</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x5e</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x5f</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x60</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x7b</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x7c</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x7d</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x7e</literal></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case>

<while>while <condition>( <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>bytereverse</name><argument_list>( <argument><expr><name><name>packet</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x0b</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>( <expr><name>in</name> <operator>&gt;=</operator> <literal type="number">0x08</literal> <operator>&amp;&amp;</operator> <name>in</name> <operator>&lt;=</operator> <literal type="number">0x0f</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index><index>[<expr><literal type="number">13</literal> <operator>+</operator> <name>in</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>in</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>in</name> <operator>&lt;</operator> <literal type="number">0x7f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>( <expr><name>out</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>to_utf8</name><argument_list>( <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>utf8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>pt</name> <operator>+</operator> <name>l</name> <operator>&lt;</operator> <name>res</name> <operator>+</operator> <name>res_len</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pt</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pt</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>DecodePageHeaderPacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>magazine</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_line</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>flag</name> <operator>|=</operator> <operator>(</operator><literal type="number">0xF</literal> <operator>&amp;</operator> <operator>(</operator><call><name>bytereverse</name><argument_list>( <argument><expr><call><name>hamming_8_4</name><argument_list>(<argument><expr><name><name>packet</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator>

<operator>&lt;&lt;</operator> <operator>(</operator><name>a</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_page</name><index>[<expr><name>magazine</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0xF0</literal> <operator>&amp;</operator> <call><name>bytereverse</name><argument_list>( <argument><expr><call><name>hamming_8_4</name><argument_list>(<argument><expr><name><name>packet</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call><operator>)</operator> <operator>|</operator> 

<operator>(</operator><literal type="number">0x0F</literal> <operator>&amp;</operator> <operator>(</operator><call><name>bytereverse</name><argument_list>( <argument><expr><call><name>hamming_8_4</name><argument_list>(<argument><expr><name><name>packet</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>decode_string</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>magazine</name></expr></argument>,

<argument><expr><name>packet</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">40</literal> <operator>-</operator> <literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"mag %d flags %x page %x character set %d subtitles %d %s"</literal><operator>,</operator> <name>magazine</name><operator>,</operator> <name>flag</name><operator>,</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_page</name><index>[<expr><name>magazine</name></expr>]</index></name><operator>,</operator>

<literal type="number">7</literal> <operator>&amp;</operator> <name>flag</name><operator>&gt;&gt;</operator><literal type="number">21</literal><operator>,</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_SUBTITLE</name><operator>)</operator><operator>,</operator> <name>psz_line</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_active_national_set</name><index>[<expr><name>magazine</name></expr>]</index></name> <operator>=</operator>

<name><name>ppi_national_subsets</name><index>[<expr><literal type="number">7</literal> <operator>&amp;</operator> <operator>(</operator><name>flag</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subtitlesflags</name> <init>= <expr><name>FLAG_SUBTITLE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_sub_flag</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_magazine</name></name> <operator>!=</operator> <literal type="number">0x07</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>subtitlesflags</name> <operator>|=</operator> <name>FLAG_SUPPRESS_HEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_is_subtitle</name><index>[<expr><name>magazine</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>subtitlesflags</name><operator>)</operator> <operator>!=</operator> <name>subtitlesflags</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator> <name>p_dec</name><operator>,</operator> <literal type="string">"FLAGS%s%s%s%s%s%s%s mag_ser %d"</literal><operator>,</operator>

<ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_ERASE_PAGE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" erase"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>,</operator>

<ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_NEWSFLASH</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" news"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>,</operator>

<ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_SUBTITLE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" subtitle"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>,</operator>

<ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_SUPPRESS_HEADER</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">" suppressed_head"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>,</operator>

<ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_UPDATE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" update"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>,</operator>

<ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_INTERRUPTED</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" interrupt"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>,</operator>

<ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_INHIBIT_DISPLAY</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">" inhibit"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>,</operator>

<operator>!</operator><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_MAGAZINE_SERIAL</name><operator>)</operator> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_page</name><index>[<expr><name>magazine</name></expr>]</index></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name><operator>)</operator>

<operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_is_subtitle</name><index>[<expr><name>magazine</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_erase</name><index>[<expr><name>magazine</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FLAG_ERASE_PAGE</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( 

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_erase</name><index>[<expr><name>magazine</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"ERASE !"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_erase</name><index>[<expr><name>magazine</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>DecodePacketX1_X23</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>magazine</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_line</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_page</name><index>[<expr><name>magazine</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x99</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode_string</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>magazine</name></expr></argument>,

<argument><expr><name>packet</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>psz_line</name></expr>;</expr_stmt>

<while>while <condition>( <expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><name>row</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><name>row</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><name>row</name></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>prev_pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"%d %d : "</literal><operator>,</operator> <name>magazine</name><operator>,</operator> <name>row</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name>t</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TELX_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>dbg</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dbg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in</name> <init>= <expr><call><name>bytereverse</name><argument_list>(<argument><expr><name><name>packet</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>dbg</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name>dbg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>decode_string</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>magazine</name></expr></argument>,

<argument><expr><name>packet</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>( <argument><expr><name>dbg</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name>dbg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>b_update</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>DecodePacketX25</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>magazine</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_line</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_string</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>magazine</name></expr></argument>,

<argument><expr><name>packet</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>DecodeNormalPacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>magazine</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_page</name><index>[<expr><name>magazine</name></expr>]</index></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name><operator>)</operator>

<operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_is_subtitle</name><index>[<expr><name>magazine</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>row</name> <operator>&lt;</operator> <literal type="number">24</literal></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>DecodePacketX1_X23</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>magazine</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>pts</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>row</name> <operator>==</operator> <literal type="number">25</literal></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>DecodePacketX25</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>magazine</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

int i_wanted_magazine = i_conf_wanted_page / 100;

int i_wanted_page = 0x10 * ((i_conf_wanted_page % 100) / 10)

| (i_conf_wanted_page % 10);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>bool</name></type> <name>b_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_text</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pt</name> <init>= <expr><name>psz_text</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>( <init><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>offset</name> <operator>+</operator> <literal type="number">46</literal> <operator>&lt;=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <literal type="number">46</literal></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mpag</name> <init>= <expr><operator>(</operator><call><name>hamming_8_4</name><argument_list>( <argument><expr><name><name>packet</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <call><name>hamming_8_4</name><argument_list>( <argument><expr><name><name>packet</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>magazine</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>mpag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"mpag hamming error"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0xFF</literal> <operator>&amp;</operator> <call><name>bytereverse</name><argument_list>(<argument><expr><name>mpag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>magazine</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">7</literal> <operator>&amp;</operator> <name>row</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">7</literal> <operator>&amp;</operator> <name>row</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_page</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>magazine</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_wanted_magazine</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>row</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>b_update</name> <operator>|=</operator> <call><name>DecodePageHeaderPacket</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>magazine</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_update</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"%ld --&gt; %ld"</literal><operator>,</operator> <operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name><operator>,</operator>

<operator>(</operator><name>long</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>prev_pts</name></name><operator>+</operator><literal type="number">1500000</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>row</name> <operator>&lt;</operator> <literal type="number">26</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>b_update</name> <operator>|=</operator> <call><name>DecodeNormalPacket</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>magazine</name></expr></argument>, <argument><expr><name>row</name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_update</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>l</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>total</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>total</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pt</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>l</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pt</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>total</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pt</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_prev_text</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"UPDATE TELETEXT PICTURE"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_prev_text</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_prev_text</name></name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"can't get spu buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name> <operator>|</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>(</operator><name>p_dec</name><operator>,</operator> <literal type="string">"%ld --&gt; %ld"</literal><operator>,</operator> <operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name><operator>/</operator><literal type="number">100000</literal><operator>,</operator> <operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name><operator>/</operator><literal type="number">100000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_spu</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>( <expr><name>p_spu</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
