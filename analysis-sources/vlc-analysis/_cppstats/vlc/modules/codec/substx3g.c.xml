<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\substx3g.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"substext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/mp4/minibox.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"tx3g subtitles decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"tx3g subtitles"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"tx3g subtitles encoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"tx3g subtitles encoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">101</literal></argument> )</argument_list></macro>

<macro><name>set_callback</name><argument_list>( <argument>OpenEncoder</argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT_FACE_BOLD</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT_FACE_ITALIC</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT_FACE_UNDERLINE</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ConvertToVLCFlags</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_atomflags</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_vlcstyles_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_atomflags</name> <operator>&amp;</operator> <name>FONT_FACE_BOLD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_vlcstyles_flags</name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_atomflags</name> <operator>&amp;</operator> <name>FONT_FACE_ITALIC</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_vlcstyles_flags</name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_atomflags</name> <operator>&amp;</operator> <name>FONT_FACE_UNDERLINE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_vlcstyles_flags</name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_vlcstyles_flags</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>str8len</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><name>psz_string</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><operator>*</operator><name>psz_tmp</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>psz_tmp</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tmp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>str8indup</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_skip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>i_skip</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>psz_string</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_skip</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_string</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>*</operator><name>psz_string</name> <operator>||</operator> <name>i_skip</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><name>psz_string</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>n</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_tmp</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>*</operator><name>psz_tmp</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tmp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><call><name>strndup</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><name>psz_tmp</name> <operator>-</operator> <name>psz_string</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>tx3g_segment_t</name></name></type> <name>tx3g_segment_t</name>;</typedef>

<struct>struct <name>tx3g_segment_t</name>

<block>{

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_next3g</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>tx3g_segment_t</name> <modifier>*</modifier></type> <name>tx3g_segment_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_seg</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tx3g_segment_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_seg</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seg</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seg</name><operator>-&gt;</operator><name>p_next3g</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seg</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_seg</name><operator>-&gt;</operator><name>s</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_seg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_seg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_seg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SegmentDoSplit</name><parameter_list>( <parameter><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_end</name></decl></parameter>,

<parameter><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_segment_left</name></decl></parameter>,

<parameter><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_segment_middle</name></decl></parameter>,

<parameter><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_segment_right</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_segment_left</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_segment_right</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_segment_middle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_segment</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <name>i_start</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_segment</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <name>i_end</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_text</name> <init>= <expr><call><name>str8indup</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_start</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_segment_left</name> <operator>=</operator> <call><name>tx3g_segment_New</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_segment_left</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment_left</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment_left</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <call><name>str8len</name><argument_list>( <argument><expr><name><name>p_segment_left</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_midtext</name> <init>= <expr><call><name>str8indup</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_end</name> <operator>-</operator> <name>i_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_segment_middle</name> <operator>=</operator> <call><name>tx3g_segment_New</name><argument_list>( <argument><expr><name>psz_midtext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_midtext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_segment_middle</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment_middle</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment_middle</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <call><name>str8len</name><argument_list>( <argument><expr><name><name>p_segment_middle</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_end</name> <operator>&lt;</operator> <operator>(</operator><name><name>p_segment</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_text</name> <init>= <expr><call><name>str8indup</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><name>i_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <name>i_end</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_segment_right</name> <operator>=</operator> <call><name>tx3g_segment_New</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_segment_right</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment_right</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment_right</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <call><name>str8len</name><argument_list>( <argument><expr><name><name>p_segment_right</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_segment_left</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_segment_left</name><operator>-&gt;</operator><name>p_next3g</name></name> <operator>=</operator> <name>p_segment_middle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_segment_right</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_segment_middle</name><operator>-&gt;</operator><name>p_next3g</name></name> <operator>=</operator> <name>p_segment_right</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_segment_left</name> <operator>=</operator> <name>p_segment_left</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_segment_middle</name> <operator>=</operator> <name>p_segment_middle</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_segment_right</name> <operator>=</operator> <name>p_segment_right</name></expr>;</expr_stmt>

<return>return;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_segment_middle</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name><name>p_segment_middle</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_segment_middle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_segment_left</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name><name>p_segment_left</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_segment_left</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_segment_left</name> <operator>=</operator> <operator>*</operator><name>pp_segment_middle</name> <operator>=</operator> <operator>*</operator><name>pp_segment_right</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>SegmentSplit</name><parameter_list>( <parameter><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_prev</name></decl></parameter>, <parameter><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_segment</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_end</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_styles</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_segment_left</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_segment_middle</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_segment_right</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><operator>(</operator><operator>*</operator><name>pp_segment</name><operator>)</operator><operator>-&gt;</operator><name>i_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_start</name> <operator>&gt;</operator> <name>i_end</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>i_end</name> <operator>-</operator> <name>i_start</name><operator>)</operator> <operator>&gt;</operator> <name><operator>(</operator><operator>*</operator><name>pp_segment</name><operator>)</operator><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_end</name> <operator>&gt;</operator> <name><operator>(</operator><operator>*</operator><name>pp_segment</name><operator>)</operator><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SegmentDoSplit</name><argument_list>( <argument><expr><operator>*</operator><name>pp_segment</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_segment_left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_segment_middle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_segment_right</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_segment_middle</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name><name>p_segment_left</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_segment_left</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name><name>p_segment_right</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_segment_right</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_next3g</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pp_segment</name><operator>)</operator><operator>-&gt;</operator><name>p_next3g</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_segment</name><operator>)</operator><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>pp_segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_segment</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>p_segment_left</name> <operator>)</operator></expr> ?</condition><then> <expr><name>p_segment_left</name></expr> </then><else>: <expr><name>p_segment_middle</name></expr></else></ternary></expr> ;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_prev</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_prev</name><operator>-&gt;</operator><name>p_next3g</name></name> <operator>=</operator> <operator>*</operator><name>pp_segment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_segment_right</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_segment_right</name><operator>-&gt;</operator><name>p_next3g</name></name> <operator>=</operator> <name>p_next3g</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_segment_middle</name><operator>-&gt;</operator><name>p_next3g</name></name> <operator>=</operator> <name>p_next3g</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_segment_middle</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>text_style_Merge</name><argument_list>( <argument><expr><name><name>p_segment_middle</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name></expr></argument>, <argument><expr><name>p_styles</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_segment_middle</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name>p_styles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ApplySegmentStyle</name><parameter_list>( <parameter><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_segment</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_absstart</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_absend</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_styles</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_curstart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_cur</name> <init>= <expr><operator>*</operator><name>pp_segment</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>p_cur</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_curend</name> <init>= <expr><name>i_curstart</name> <operator>+</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_absstart</name> <operator>&gt;=</operator> <name>i_curstart</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_absend</name> <operator>&lt;=</operator> <name>i_curend</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>SegmentSplit</name><argument_list>( <argument><expr><name>p_prev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_cur</name></expr></argument>, <argument><expr><name>i_absstart</name> <operator>-</operator> <name>i_curstart</name></expr></argument>,

<argument><expr><name>i_absend</name> <operator>-</operator> <name>i_curstart</name></expr></argument>, <argument><expr><name>p_styles</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_prev</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pp_segment</name> <operator>=</operator> <name>p_cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_curstart</name> <operator>+=</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name>p_cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cur</name> <operator>=</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>p_next3g</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FontSizeConvert</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_reference</name></decl></parameter>, <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_style</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_reference</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p_reference</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <literal type="number">5.0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <literal type="number">5.0</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>/</operator> <name><name>p_reference</name><operator>-&gt;</operator><name>i_font_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator> <operator>)</operator> <operator>||</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_psz_bytelength</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>i_psz_bytelength</name> <operator>+</operator> <literal type="number">2U</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pszstart</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_psz_bytelength</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_pszstart</name></expr></argument>, <argument><expr><literal type="string">"\xFE\xFF"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_pszstart</name></expr></argument>, <argument><expr><literal type="string">"\xFF\xFE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16"</literal></expr></argument>, <argument><expr><name>p_pszstart</name></expr></argument>, <argument><expr><name>i_psz_bytelength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_subtitle</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>p_pszstart</name></expr></argument>, <argument><expr><name>i_psz_bytelength</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>psz_subtitle</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>+=</operator> <name>i_psz_bytelength</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_psz_bytelength</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>( <expr><name><name>psz_subtitle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>psz_subtitle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<decl_stmt><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type><name>p_segment3g</name> <init>= <expr><call><name>tx3g_segment_New</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_segment3g</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <call><name>str8len</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_segment3g</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>psz_text</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name><name>p_segment3g</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_segment3g</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpictureText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name><name>p_segment3g</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_segment3g</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_root_style</name> <init>= <expr><operator>(</operator><name>text_style_t</name> <operator>*</operator><operator>)</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_box_iterator_t</name></type> <name>it</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mp4_box_iterator_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <operator>(</operator><name>p_buf</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_QTXT</name></expr> )</condition><block type="pseudo"><block_content>

<while>while<condition>( <expr><call><name>mp4_box_iterator_Next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>it</name><operator>.</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'y'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>it</name><operator>.</operator><name>i_payload</name></name> <operator>&lt;</operator> <literal type="number">14</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_nbrecords</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>p_payload</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_cur_record</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>it</name><operator>.</operator><name>p_payload</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>it</name><operator>.</operator><name>i_payload</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name>i_cur_record</name><operator>++</operator> <operator>&lt;</operator> <name>i_nbrecords</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>.</operator><name>i_payload</name></name> <operator>&gt;=</operator> <literal type="number">12</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_start</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><call><name>GetWBE</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>p_payload</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i_psz_bytelength</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_end</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>p_payload</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>&lt;</operator> <name>i_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_end</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name>i_end</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_psz_bytelength</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_style</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>=</operator> <call><name>ConvertToVLCFlags</name><argument_list>( <argument><expr><name><name>it</name><operator>.</operator><name>p_payload</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <name><name>it</name><operator>.</operator><name>p_payload</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>.</operator><name>p_payload</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>.</operator><name>p_payload</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name> <operator>|</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ApplySegmentStyle</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_segment3g</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_end</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>.</operator><name>p_payload</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>it</name><operator>.</operator><name>i_payload</name></name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block> <break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Merge</name><argument_list>( <argument><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></argument>, <argument><expr><name>p_root_style</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FontSizeConvert</name><argument_list>( <argument><expr><name>p_root_style</name></expr></argument>, <argument><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_text_segments</name> <init>= <expr><name><name>p_segment3g</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_cur</name> <init>= <expr><name>p_text_segments</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_segment3g</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FontSizeConvert</name><argument_list>( <argument><expr><name>p_root_style</name></expr></argument>, <argument><expr><name><name>p_segment3g</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>tx3g_segment_t</name> <modifier>*</modifier></type> <name>p_old</name> <init>= <expr><name>p_segment3g</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_segment3g</name> <operator>=</operator> <name><name>p_segment3g</name><operator>-&gt;</operator><name>p_next3g</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_old</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_segment3g</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cur</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_segment3g</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_cur</name> <operator>=</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name></name> <operator>=</operator> <name>p_text_segments</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseExtradataTx3g</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><operator>(</operator><name>text_style_t</name> <operator>*</operator><operator>)</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <name><name>p_extra</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_BACKGROUND_COLOR</name><operator>|</operator><name>STYLE_HAS_BACKGROUND_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>=</operator> <call><name>ConvertToVLCFlags</name><argument_list>( <argument><expr><name><name>p_extra</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <name><name>p_extra</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <name><name>p_extra</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name> <operator>|</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseExtradataTextMedia</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><operator>(</operator><name>text_style_t</name> <operator>*</operator><operator>)</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&lt;</operator> <literal type="number">44</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name> <init>= <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x1000</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_SHADOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_SHADOW_COLOR</name><operator>|</operator><name>STYLE_HAS_FLAGS</name><operator>|</operator><name>STYLE_HAS_SHADOW_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_shadow_color</name></name> <operator>=</operator> <literal type="number">0xC0C0C0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_shadow_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x4000</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_BACKGROUND</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <operator>(</operator><name><name>p_extra</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>p_extra</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<name><name>p_extra</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_BACKGROUND_COLOR</name> <operator>|</operator> <name>STYLE_HAS_BACKGROUND_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <call><name>ConvertToVLCFlags</name><argument_list>( <argument><expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <operator>(</operator><name><name>p_extra</name><index>[<expr><literal type="number">37</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>p_extra</name><index>[<expr><literal type="number">39</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<name><name>p_extra</name><index>[<expr><literal type="number">41</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><operator>(</operator><name>text_style_t</name> <operator>*</operator><operator>)</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_TX3G</name> <operator>&amp;&amp;</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_QTXT</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_default_style</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_default_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BACKGROUND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_default_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TX3G</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ParseExtradataTx3g</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ParseExtradataTextMedia</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_TEXT</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FillExtradataTx3g</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_extra</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_extra</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name> <init>= <expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">37</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_extra</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_extra</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_extra</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x000000FFU</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_extra</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <name>STYLE_DEFAULT_FONT_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFU</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ftab"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_extra</name><index>[<expr><literal type="number">41</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Serif"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_extra</name><index>[<expr><literal type="number">47</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Sans-serif"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_extra</name><index>[<expr><literal type="number">58</literal></expr>]</index></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">59</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Monospace"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_extra</name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_extra</name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_TX3G</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_TEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_sub</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>SPU_ES</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillExtradataTx3g</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ConvertFromVLCFlags</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_atomflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;</operator> <name>STYLE_HAS_FLAGS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_BOLD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_atomflags</name> <operator>|=</operator> <name>FONT_FACE_BOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_ITALIC</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_atomflags</name> <operator>|=</operator> <name>FONT_FACE_ITALIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_UNDERLINE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_atomflags</name> <operator>|=</operator> <name>FONT_FACE_UNDERLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_atomflags</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ConvertFromVLCColor</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rgba</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;</operator> <name>STYLE_HAS_FONT_COLOR</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rgba</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rgba</name> <operator>=</operator> <literal type="number">0xFFFFFF00U</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rgba</name> <operator>|=</operator> <name><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rgba</name> <operator>|=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>rgba</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>NeedStyling</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;</operator> <name>STYLE_HAS_FLAGS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>STYLE_BOLD</name><operator>|</operator><name>STYLE_ITALIC</name><operator>|</operator><name>STYLE_UNDERLINE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;</operator> <operator>(</operator><name>STYLE_HAS_FONT_COLOR</name><operator>|</operator><name>STYLE_HAS_FONT_ALPHA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetStylBlock</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_styles</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_styl</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">10</literal> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>i_styles</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_styl</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name><name>p_styl</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_styl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_styl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"styl"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_styl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_styles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_styl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_segment</name></expr>;</condition> <incr><expr><name>p_segment</name> <operator>=</operator> <name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>str8len</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>NeedStyling</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_styl</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_styl</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_start</name> <operator>+</operator> <name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>ConvertFromVLCFlags</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>STYLE_DEFAULT_FONT_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>ConvertFromVLCColor</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_styl</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_start</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_styl</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>p_segments</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name><operator>)</operator></expr>

?</condition><then> <expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_styles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><specifier>const</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name> <init>= <expr><name>p_segments</name></expr></init></decl>;</init>

<condition><expr><name>p_segment</name></expr>;</condition> <incr><expr><name>p_segment</name> <operator>=</operator> <name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_styles</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><specifier>const</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name> <init>= <expr><name>p_segments</name></expr></init></decl>;</init>

<condition><expr><name>p_segment</name></expr>;</condition> <incr><expr><name>p_segment</name> <operator>=</operator> <name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_seglen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><name>i_seglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_seglen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_styles</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <call><name>GetStylBlock</name><argument_list>( <argument><expr><name>p_segments</name></expr></argument>, <argument><expr><name>i_styles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>block_ChainGather</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
