<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\atsc_a65.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atsc_a65.h"</cpp:file></cpp:include>

<enum>enum

<block>{

<decl><name>ATSC_A65_COMPRESSION_NONE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>ATSC_A65_COMPRESSION_HUFFMAN_C4C5</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>ATSC_A65_COMPRESSION_HUFFMAN_C6C7</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>ATSC_A65_COMPRESSION_RESERVED_FIRST</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>ATSC_A65_COMPRESSION_RESERVED_LAST</name> <init>= <expr><literal type="number">0xAF</literal></expr></init></decl>,

<decl><name>ATSC_A65_COMPRESSION_OTHER_FIRST</name> <init>= <expr><literal type="number">0xB0</literal></expr></init></decl>,

<decl><name>ATSC_A65_COMPRESSION_OTHER_LAST</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum

<block>{

<decl><name>ATSC_A65_MODE_UNICODE_RANGE_START</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>, 

<decl><name>ATSC_A65_MODE_UNICODE_RANGE_END</name> <init>= <expr><literal type="number">0x33</literal></expr></init></decl>,

<decl><name>ATSC_A65_MODE_SCSU</name> <init>= <expr><literal type="number">0x3E</literal></expr></init></decl>,

<decl><name>ATSC_A65_MODE_UNICODE_UTF16</name> <init>= <expr><literal type="number">0x3F</literal></expr></init></decl>,

<decl><name>ATSC_A65_MODE_TAIWAN_FIRST</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,

<decl><name>ATSC_A65_MODE_TAIWAN_LAST</name> <init>= <expr><literal type="number">0x41</literal></expr></init></decl>,

<decl><name>ATSC_A65_MODE_SOUTH_KOREA</name> <init>= <expr><literal type="number">0x48</literal></expr></init></decl>,

<decl><name>ATSC_A65_MODE_OTHER_FIRST</name> <init>= <expr><literal type="number">0xE0</literal></expr></init></decl>,

<decl><name>ATSC_A65_MODE_OTHER_LAST</name> <init>= <expr><literal type="number">0xFE</literal></expr></init></decl>,

<decl><name>ATSC_A65_MODE_NOT_APPLICABLE</name> <init>= <expr><literal type="number">0xFF</literal></expr></init></decl>,

}</block>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ATSC_A65_MODE_RESERVED_RANGES</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,

<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x1F</literal></expr>,

<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x2F</literal></expr>,

<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x3D</literal></expr>,

<expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x47</literal></expr>,

<expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xDF</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>atsc_a65_handle_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lang</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_iconv_t</name></type> <name>iconv_u16be</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>atsc_a65_handle_t</name> <modifier>*</modifier></type><name>atsc_a65_handle_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_lang</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>atsc_a65_handle_t</name> <modifier>*</modifier></type><name>p_handle</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_handle</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_handle</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_lang</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_lang</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_handle</name><operator>-&gt;</operator><name>psz_lang</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_lang</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_handle</name><operator>-&gt;</operator><name>psz_lang</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_handle</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>atsc_a65_handle_Release</name><parameter_list>( <parameter><decl><type><name>atsc_a65_handle_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_iconv_close</name><argument_list>( <argument><expr><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_handle</name><operator>-&gt;</operator><name>psz_lang</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>enlarge_to16</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_prefix</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_src</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_new_allocated</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_src</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_new</name> <init>= <expr><name>psz_new_allocated</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_new</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>psz_new</name></expr></argument>, <argument><expr><name>i_prefix</name></expr></argument>, <argument><expr><name>i_src</name> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_new</name><index>[ <expr><name>i_src</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name>i_src</name><operator>--</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>psz_new</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_new</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>psz_new_allocated</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>convert_encoding_set</name><parameter_list>( <parameter><decl><type><name>atsc_a65_handle_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_src</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_merg</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_mergmin1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_mode</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dest</name> <init>= <expr><operator>*</operator><name>ppsz_merg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_mergmin1</name> <init>= <expr><operator>*</operator><name>pi_mergmin1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_src</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_mode</name> <operator>&gt;=</operator> <name><name>ATSC_A65_MODE_RESERVED_RANGES</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name>i_mode</name> <operator>&lt;=</operator> <name><name>ATSC_A65_MODE_RESERVED_RANGES</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_mode</name> <operator>&lt;=</operator> <name>ATSC_A65_MODE_UNICODE_RANGE_END</name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name> <operator>=</operator> <call><name>vlc_iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>VLC_ICONV_ERR</name> <operator>==</operator> <call><name>vlc_iconv</name><argument_list>( <argument><expr><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz16</name> <init>= <expr><call><name>enlarge_to16</name><argument_list>( <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>i_mode</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>psz16</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument>, <argument><expr><name>i_mergmin1</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>i_src</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_realloc</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_inbuf</name> <init>= <expr><name>psz16</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_outbuf</name> <init>= <expr><operator>&amp;</operator><name><name>psz_realloc</name><index>[<expr><name>i_mergmin1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_outbuf_size</name> <init>= <expr><name>i_src</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_inbuf_remain</name> <init>= <expr><name>i_src</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_outbuf_remain</name> <init>= <expr><name>i_outbuf_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <operator>(</operator> <name>VLC_ICONV_ERR</name> <operator>!=</operator> <call><name>vlc_iconv</name><argument_list>( <argument><expr><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_inbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_inbuf_remain</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_outbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_outbuf_remain</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_dest</name> <operator>=</operator> <name>psz_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mergmin1</name> <operator>+=</operator> <operator>(</operator><name>i_outbuf_size</name> <operator>-</operator> <name>i_outbuf_remain</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_outbuf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz16</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_merg</name> <operator>=</operator> <name>psz_dest</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_mergmin1</name> <operator>=</operator> <name>i_mergmin1</name></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_ADVANCE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p_buffer += n; i_buffer -= n;</cpp:value></cpp:define>

<function><type><name>char</name> <modifier>*</modifier></type> <name>atsc_a65_Decode_multiple_string</name><parameter_list>( <parameter><decl><type><name>atsc_a65_handle_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_resmin1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_nb</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUF_ADVANCE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_nb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_nb</name><operator>--</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_skip</name> <init>= <expr><operator>(</operator> <name><name>p_handle</name><operator>-&gt;</operator><name>psz_lang</name></name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name><name>p_handle</name><operator>-&gt;</operator><name>psz_lang</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUF_ADVANCE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_seg</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUF_ADVANCE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_seg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_seg</name><operator>--</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_compression</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_mode</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_bytes</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUF_ADVANCE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <name>i_bytes</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_compression</name> <operator>!=</operator> <name>ATSC_A65_COMPRESSION_NONE</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>b_skip</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_skip</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>convert_encoding_set</name><argument_list>( <argument><expr><name>p_handle</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_bytes</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_resmin1</name></expr></argument>, <argument><expr><name>i_mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BUF_ADVANCE</name><argument_list>(<argument><expr><name>i_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>psz_res</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUF_ADVANCE</name></cpp:undef>

<function><type><name>char</name> <modifier>*</modifier></type> <name>atsc_a65_Decode_simple_UTF16_string</name><parameter_list>( <parameter><decl><type><name>atsc_a65_handle_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name> <operator>=</operator> <call><name>vlc_iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>VLC_ICONV_ERR</name> <operator>==</operator> <call><name>vlc_iconv</name><argument_list>( <argument><expr><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_target_buffer</name> <init>= <expr><name>i_buffer</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_target_remaining</name> <init>= <expr><name>i_target_buffer</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_toconvert</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_converted_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_converted</name> <init>= <expr><name>psz_converted_end</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_target_buffer</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>psz_converted</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_ICONV_ERR</name> <operator>==</operator> <call><name>vlc_iconv</name><argument_list>( <argument><expr><name><name>p_handle</name><operator>-&gt;</operator><name>iconv_u16be</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_toconvert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_converted_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_target_remaining</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_converted</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_converted</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>psz_converted</name><index>[ <expr><name>i_target_buffer</name> <operator>-</operator> <name>i_target_remaining</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>psz_converted</name></expr>;</return>

</block_content>}</block></function>

</unit>
