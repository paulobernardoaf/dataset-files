<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\cc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PKT_BYTE0</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0xFC | (0x03 &amp; field))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_MAX_DATA_SIZE</name></cpp:macro> <cpp:value>(2 * 3*600)</cpp:value></cpp:define>

<enum>enum <name>cc_payload_type_e</name>

<block>{

<decl><name>CC_PAYLOAD_NONE</name></decl>,

<decl><name>CC_PAYLOAD_RAW</name></decl>,

<decl><name>CC_PAYLOAD_GA94</name></decl>,

<decl><name>CC_PAYLOAD_DVD</name></decl>,

<decl><name>CC_PAYLOAD_REPLAYTV</name></decl>,

<decl><name>CC_PAYLOAD_SCTE20</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_708channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_608channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_reorder</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pktsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>seq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sid_bs</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>CEA708_PKT_END</name></decl>,

<decl><name>CEA708_PKT_WAIT_BLOCK_HEADER</name></decl>,

<decl><name>CEA708_PKT_WAIT_EXT_BLOCK_HEADER</name></decl>,

<decl><name>CEA708_PKT_IN_BLOCK</name></decl>,

}</block> <decl><name>state</name></decl>;</enum>

}</block> <decl><name>cea708</name></decl>;</struct>

<decl_stmt><decl><type><name><name>enum</name> <name>cc_payload_type_e</name></name></type> <name>i_payload_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_payload_other_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_data</name><index>[<expr><name>CC_MAX_DATA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>cc_data_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cc_Init</name><parameter_list>( <parameter><decl><type><name>cc_data_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_608channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_708channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b_reorder</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>sid_bs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_END</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_payload_type</name></name> <operator>=</operator> <name>CC_PAYLOAD_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_payload_other_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cc_Exit</name><parameter_list>( <parameter><decl><type><name>cc_data_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cc_Flush</name><parameter_list>( <parameter><decl><type><name>cc_data_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_END</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cc_ProbeCEA708OneByte</name><parameter_list>( <parameter><decl><type><name>cc_data_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>cc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_start</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_pkt_sequence</name> <init>= <expr><name>cc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pkt_sequence</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>seq</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator> <name>i_pkt_sequence</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <name>i_pkt_sequence</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_END</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <name>i_pkt_sequence</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name> <operator>=</operator> <name>cc</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_WAIT_BLOCK_HEADER</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_END</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>CEA708_PKT_END</name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>CEA708_PKT_WAIT_BLOCK_HEADER</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sid</name> <init>= <expr><name>cc</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>sid_bs</name></name> <operator>=</operator> <name>cc</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sid</name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>sid_bs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_sid</name> <operator>!=</operator> <literal type="number">0x07</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>--</operator><name>i_sid</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_708channels</name></name> <operator>|=</operator> <operator>(</operator><name>mask</name> <operator>+</operator> <operator>(</operator><name>mask</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_IN_BLOCK</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>sid_bs</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_END</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_WAIT_EXT_BLOCK_HEADER</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_END</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>CEA708_PKT_WAIT_EXT_BLOCK_HEADER</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_extsid</name> <init>= <expr><name>cc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_extsid</name> <operator>&gt;=</operator> <literal type="number">0x07</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>--</operator><name>i_extsid</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_708channels</name></name> <operator>|=</operator> <operator>(</operator><name>mask</name> <operator>+</operator> <operator>(</operator><name>mask</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>sid_bs</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_WAIT_BLOCK_HEADER</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_IN_BLOCK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>CEA708_PKT_IN_BLOCK</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>sid_bs</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>sid_bs</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_WAIT_BLOCK_HEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>pktsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cea708</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>CEA708_PKT_END</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cc_ProbeCEA708</name><parameter_list>( <parameter><decl><type><name>cc_data_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_field</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>cc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>cc_ProbeCEA708OneByte</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>cc_ProbeCEA708OneByte</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>cc_ProbeCEA708OneByte</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cc_AppendData</name><parameter_list>( <parameter><decl><type><name>cc_data_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>cc_preamble</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>cc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_field</name> <init>= <expr><name>cc_preamble</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_608channels</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i_field</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>cc_ProbeCEA708</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>i_field</name></expr></argument>, <argument><expr><name>cc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_708channels</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cc_preamble</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cc_Extract</name><parameter_list>( <parameter><decl><type><name>cc_data_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cc_payload_type_e</name></name></type> <name>i_payload_type</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_top_field_first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>i_payload_type</name></name> <operator>!=</operator> <name>CC_PAYLOAD_NONE</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>i_payload_type</name></name> <operator>!=</operator> <name>i_payload_type</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_payload_other_count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>i_payload_other_count</name></name> <operator>&lt;</operator> <literal type="number">50</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_payload_type</name></name> <operator>=</operator> <name>i_payload_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>i_payload_other_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_payload_type</name> <operator>==</operator> <name>CC_PAYLOAD_RAW</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>i_src</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>CC_MAX_DATA_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cc_AppendData</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b_reorder</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_payload_type</name> <operator>==</operator> <name>CC_PAYLOAD_GA94</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_count_cc</name> <init>= <expr><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x40</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_src</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>+</operator><literal type="number">1</literal> <operator>+</operator> <name>i_count_cc</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count_cc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cc</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i_count_cc</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal></expr> )</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cc</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count_cc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>cc</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>CC_MAX_DATA_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cc_AppendData</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b_reorder</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_payload_type</name> <operator>==</operator> <name>CC_PAYLOAD_DVD</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_truncate</name> <init>= <expr><name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_field_first</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_count_cc2</name> <init>= <expr><operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_src</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">6</literal><operator>*</operator><name>i_count_cc2</name> <operator>-</operator> <operator>(</operator> <ternary><condition><expr><name>b_truncate</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count_cc2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>cc</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_field</name> <init>= <expr><ternary><condition><expr><name>j</name> <operator>==</operator> <name>i_field_first</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_truncate</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>i_count_cc2</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfe</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xfe</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>CC_MAX_DATA_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cc_AppendData</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>CC_PKT_BYTE0</name><argument_list>(<argument><expr><name>i_field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b_reorder</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_payload_type</name> <operator>==</operator> <name>CC_PAYLOAD_REPLAYTV</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_cc_count</name> <init>= <expr><name>i_src</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i_cc_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition>

<incr><expr><name>i_cc_count</name><operator>--</operator></expr><operator>,</operator> <expr><name>cc</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>CC_MAX_DATA_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_field</name> <init>= <expr><operator>(</operator><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cc_AppendData</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>CC_PKT_BYTE0</name><argument_list>(<argument><expr><name>i_field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b_reorder</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_src</name> <operator>-</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_cc_count</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_cc_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_field_idx</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>cc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_field_idx</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>i_data</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal> <operator>&gt;</operator> <name>CC_MAX_DATA_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_field</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i_field_idx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_top_field_first</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_field</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cc_AppendData</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>CC_PKT_BYTE0</name><argument_list>(<argument><expr><name>i_field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>b_reorder</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cc_ProbeAndExtract</name><parameter_list>( <parameter><decl><type><name>cc_data_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_top_field_first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_cc_ga94</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x34</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_cc_dvd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xf8</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_cc_replaytv4a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x02</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_cc_replaytv4b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x02</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_cc_replaytv5a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x02</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_cc_replaytv5b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x02</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_cc_scte20</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_cc_scte20_old</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_src</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>cc_payload_type_e</name></name></type> <name>i_payload_type</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_cc_ga94</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>i_src</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_payload_type</name> <operator>=</operator> <name>CC_PAYLOAD_GA94</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_src</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_cc_dvd</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>i_src</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_payload_type</name> <operator>=</operator> <name>CC_PAYLOAD_DVD</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_src</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>+</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>+</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>(</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_cc_replaytv4a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_cc_replaytv4b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_cc_replaytv5a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_cc_replaytv5b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_payload_type</name> <operator>=</operator> <name>CC_PAYLOAD_REPLAYTV</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_cc_scte20</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_cc_scte20_old</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <name>i_src</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_payload_type</name> <operator>=</operator> <name>CC_PAYLOAD_SCTE20</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal> <operator>&amp;&amp;</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>i_src</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i_payload_type</name> <operator>=</operator> <name>CC_PAYLOAD_GA94</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_src</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ( x &lt; 0x20 || x &gt;= 0x7f ) ? '?' : x )</cpp:value></cpp:define>

fprintf( stderr, "-------------- unknown user data " );

for( int i = 0; i &lt; i_src; i++ )

fprintf( stderr, "%2.2x ", p_src[i] );

for( int i = 0; i &lt; i_src; i++ )

fprintf( stderr, "%c ", V(p_src[i]) );

fprintf( stderr, "\n" );

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>cc_Extract</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>i_payload_type</name></expr></argument>, <argument><expr><name>b_top_field_first</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
