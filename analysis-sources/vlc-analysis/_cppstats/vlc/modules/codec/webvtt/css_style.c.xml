<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\webvtt\css_style.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_text_style.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"css_parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"css_style.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Color</name><parameter_list>( <parameter><decl><type><name>vlc_css_term_t</name></type> <name>term</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>alpha</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>feat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cflag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aflag</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_FUNCTION</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term</name><operator>.</operator><name>function</name></name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"rgb"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>term</name><operator>.</operator><name>function</name><operator>-&gt;</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"rgba"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>term</name><operator>.</operator><name>function</name><operator>-&gt;</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>color</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>term</name><operator>.</operator><name>function</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>term</name><operator>.</operator><name>function</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>term</name><operator>.</operator><name>function</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>feat</name> <operator>|=</operator> <name>cflag</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>term</name><operator>.</operator><name>psz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>alpha</name> <operator>=</operator> <name><name>term</name><operator>.</operator><name>function</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>*</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>feat</name> <operator>|=</operator> <name>aflag</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STRING</name> <operator>||</operator>

<name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_HEXCOLOR</name> <operator>||</operator>

<name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_IDENTIFIER</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_color</name> <init>= <expr><call><name>vlc_html_color</name><argument_list>( <argument><expr><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_valid</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_valid</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>alpha</name> <operator>=</operator> <operator>(</operator><name>i_color</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>color</name> <operator>=</operator> <name>i_color</name> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>feat</name> <operator>|=</operator> <name>cflag</name><operator>|</operator><name>aflag</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OutlineWidth</name><parameter_list>( <parameter><decl><type><name>vlc_css_term_t</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term</name><operator>.</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_PIXELS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_outline_width</name></name> <operator>=</operator> <name><name>term</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_OUTLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OutlineColor</name><parameter_list>( <parameter><decl><type><name>vlc_css_term_t</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Color</name><argument_list>( <argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_outline_color</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_outline_alpha</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name></expr></argument>, <argument><expr><name>STYLE_HAS_OUTLINE_COLOR</name></expr></argument>, <argument><expr><name>STYLE_HAS_OUTLINE_ALPHA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ShadowDrop</name><parameter_list>( <parameter><decl><type><name>vlc_css_term_t</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term</name><operator>.</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_PIXELS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_shadow_width</name></name> <operator>=</operator> <name><name>term</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_SHADOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ShadowColor</name><parameter_list>( <parameter><decl><type><name>vlc_css_term_t</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Color</name><argument_list>( <argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_shadow_color</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_shadow_alpha</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name></expr></argument>, <argument><expr><name>STYLE_HAS_SHADOW_COLOR</name></expr></argument>, <argument><expr><name>STYLE_HAS_SHADOW_ALPHA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>webvtt_FillStyleFromCssDeclaration</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_decl</name></decl></parameter>, <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name> <operator>||</operator> <operator>!</operator><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_css_term_t</name></type> <name>term0</name> <init>= <expr><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>term</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Color</name><argument_list>( <argument><expr><name>term0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name></expr></argument>, <argument><expr><name>STYLE_HAS_FONT_COLOR</name></expr></argument>, <argument><expr><name>STYLE_HAS_FONT_ALPHA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"text-decoration"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term0</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STRING</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>STYLE_STRIKEOUT</name><operator>|</operator><name>STYLE_UNDERLINE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"line-through"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_STRIKEOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"underline"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"text-shadow"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ShadowDrop</name><argument_list>( <argument><expr><name>term0</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ShadowColor</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>term</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"background-color"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Color</name><argument_list>( <argument><expr><name>term0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name></expr></argument>, <argument><expr><name>STYLE_HAS_BACKGROUND_COLOR</name></expr></argument>, <argument><expr><name>STYLE_HAS_BACKGROUND_ALPHA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BACKGROUND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"outline-color"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OutlineColor</name><argument_list>( <argument><expr><name>term0</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"outline-width"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OutlineWidth</name><argument_list>( <argument><expr><name>term0</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"outline"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OutlineWidth</name><argument_list>( <argument><expr><name>term0</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OutlineColor</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>term</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"font-family"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term0</name><operator>.</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_STRING</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_font</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_font</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><name>psz</name> <operator>-</operator> <name><name>term0</name><operator>.</operator><name>psz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_font</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_style</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <call><name>vlc_css_unquoted</name><argument_list>( <argument><expr><name>psz_font</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_font</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"font-style"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term0</name><operator>.</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_STRING</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_ITALIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"italic"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"font-weight"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term0</name><operator>.</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_STRING</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"bold"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>term0</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_NONE</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term0</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <literal type="number">700.0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_BOLD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"font-size"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term0</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PIXELS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <name><name>term0</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>term0</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_EMS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name><name>term0</name><operator>.</operator><name>val</name></name> <operator>*</operator> <literal type="number">5.33</literal> <operator>/</operator> <literal type="number">1.06</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>term0</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PERCENT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name><name>term0</name><operator>.</operator><name>val</name></name> <operator>*</operator> <literal type="number">5.33</literal> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"white-space"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>term0</name><operator>.</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_STRING</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>e_wrapinfo</name></name> <operator>=</operator> <name>STYLE_WRAP_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>term0</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"nowrap"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>e_wrapinfo</name></name> <operator>=</operator> <name>STYLE_WRAP_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
