<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\webvtt\encvtt.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_boxes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"webvtt.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name> <parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>webvtt_OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_WEBVTT</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_sub</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>SPU_ES</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>webvtt_CloseEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_this</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WriteText</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c_last</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>(<expr><operator>*</operator><name>psz</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><name>box</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>psz</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>c_last</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c_last</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><name>box</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c_last</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>psz</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'\0'</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_spu</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name></type> <name>box</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init>

<condition><expr><name>p_region</name></expr>;</condition> <incr><expr><name>p_region</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_TEXT</name> <operator>||</operator>

<name><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>p_region</name><operator>-&gt;</operator><name>p_text</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><call><name>bo_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="string">"vttc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="string">"payl"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>prevchar</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name></expr></init></decl>;</init>

<condition><expr><name>p_segment</name></expr>;</condition> <incr><expr><name>p_segment</name> <operator>=</operator> <name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_segment</name><operator>-&gt;</operator><name>p_ruby</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"&lt;ruby&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_ruby</name> <init>= <expr><name><name>p_segment</name><operator>-&gt;</operator><name>p_ruby</name></name></expr></init></decl>;</init>

<condition><expr><name>p_ruby</name></expr>;</condition> <incr><expr><name>p_ruby</name> <operator>=</operator> <name><name>p_ruby</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>WriteText</name><argument_list>( <argument><expr><name><name>p_ruby</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prevchar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"&lt;rt&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WriteText</name><argument_list>( <argument><expr><name><name>p_ruby</name><operator>-&gt;</operator><name>psz_rt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prevchar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"&lt;/rt&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"&lt;/ruby&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>style</name> <init>= <expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>style</name> <operator>&amp;&amp;</operator> <name><name>style</name><operator>-&gt;</operator><name>i_features</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;</operator> <name>STYLE_HAS_FLAGS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_BOLD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"&lt;b&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_UNDERLINE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"&lt;u&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_ITALIC</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"&lt;i&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WriteText</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prevchar</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>style</name> <operator>&amp;&amp;</operator> <name><name>style</name><operator>-&gt;</operator><name>i_features</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;</operator> <name>STYLE_HAS_FLAGS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_BOLD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"&lt;/b&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_UNDERLINE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"&lt;/u&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_ITALIC</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"&lt;/i&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_set_32be</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><name>i_offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>i_offset</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_region</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>&amp;</operator> <operator>(</operator><name>SUBPICTURE_ALIGN_LEFT</name><operator>|</operator><name>SUBPICTURE_ALIGN_RIGHT</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_start</name> <init>= <expr><call><name>bo_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="string">"sttg"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"align:left"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"align:right"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>offset</name> <init>= <expr><literal type="number">100.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>offset</name> <operator>*</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>/</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bo_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>i_start</name> <operator>+</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_printed</name> <init>= <expr><call><name>us_asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="string">"line:%2.2f%%"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_printed</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_printed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><name>i_printed</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_set_32be</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>i_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_set_32be</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><call><name>bo_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>, <argument><expr><literal type="string">"vtte"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>box</name><operator>.</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>box</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_deinit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

</unit>
