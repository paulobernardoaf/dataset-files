<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\webvtt\webvtt.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"webvtt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"WEBVTT decoder"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"WEBVTT subtitles decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>webvtt_OpenDecoder</argument>, <argument>webvtt_CloseDecoder</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"WEBVTT"</literal></argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"WEBVTT subtitles parser"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>webvtt_OpenDemux</argument>, <argument>webvtt_CloseDemux</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"webvtt"</literal></argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"WEBVTT"</literal></argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"WEBVTT subtitles parser"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>webvtt_OpenDemuxStream</argument>, <argument>webvtt_CloseDemux</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"webvttstream"</literal></argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument><literal type="string">"WEBVTT text encoder"</literal></argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">101</literal></argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>webvtt_OpenEncoder</argument>, <argument>webvtt_CloseEncoder</argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<struct>struct <name>webvtt_text_parser_t</name>

<block>{

<enum>enum

<block>{

<decl><name>WEBVTT_SECTION_UNDEFINED</name> <init>= <expr><name>WEBVTT_HEADER_STYLE</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>WEBVTT_SECTION_STYLE</name> <init>= <expr><name>WEBVTT_HEADER_STYLE</name></expr></init></decl>,

<decl><name>WEBVTT_SECTION_REGION</name> <init>= <expr><name>WEBVTT_HEADER_REGION</name></expr></init></decl>,

<decl><name>WEBVTT_SECTION_NOTE</name></decl>,

<decl><name>WEBVTT_SECTION_CUES</name></decl>,

}</block> <decl><name>section</name></decl>;</enum>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name><name>reads</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>priv</name></decl>;</decl_stmt>

<function_decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_get_cue</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_cue_done</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_header</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>webvtt_header_line_e</name></name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>MakeTime</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>webvtt_scan_time</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>p_time</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%2u:%2u.%3u"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_time</name> <operator>=</operator> <call><name>MakeTime</name><argument_list>( <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%u:%2u:%2u.%3u"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_time</name> <operator>=</operator> <call><name>MakeTime</name><argument_list>( <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>KeywordMatch</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return<expr><operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>psz</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>||</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>psz</name><index>[<expr><name>i_len</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>webvtt_text_parser_t</name> <modifier>*</modifier></type> <name>webvtt_text_parser_New</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,

<parameter><function_decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_get_cue</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_cue_done</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>webvtt_cue_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_header</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>webvtt_header_line_e</name></name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_text_parser_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>WEBVTT_SECTION_UNDEFINED</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pf_cue_done</name></name> <operator>=</operator> <name>pf_cue_done</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pf_get_cue</name></name> <operator>=</operator> <name>pf_get_cue</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pf_header</name></name> <operator>=</operator> <name>pf_header</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>webvtt_text_parser_Delete</name><parameter_list>( <parameter><decl><type><name>webvtt_text_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>forward_line</name><parameter_list>( <parameter><decl><type><name>webvtt_text_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_new</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pf_header</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pf_header</name></name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><operator>(</operator>enum <name>webvtt_header_line_e</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>section</name></name></expr></argument>,

<argument><expr><name>b_new</name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>webvtt_text_parser_Feed</name><parameter_list>( <parameter><decl><type><name>webvtt_text_parser_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_line</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pf_cue_done</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pf_cue_done</name></name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>psz_line</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>==</operator> <name>WEBVTT_SECTION_UNDEFINED</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>KeywordMatch</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">"\xEF\xBB\xBFWEBVTT"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>KeywordMatch</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">"WEBVTT"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>WEBVTT_SECTION_UNDEFINED</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pf_cue_done</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pf_cue_done</name></name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KeywordMatch</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">"STYLE"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>WEBVTT_SECTION_STYLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>forward_line</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KeywordMatch</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">"REGION"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>WEBVTT_SECTION_REGION</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>forward_line</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>KeywordMatch</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">"NOTE"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>WEBVTT_SECTION_NOTE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>psz_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>WEBVTT_SECTION_CUES</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>==</operator> <name>WEBVTT_SECTION_CUES</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>psz_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pf_cue_done</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pf_cue_done</name></name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_merged</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>-</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_merged</name></expr></argument>, <argument><expr><literal type="string">"%s\n%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_merged</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_split</name> <init>= <expr><call><name>strstr</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" --&gt; "</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_split</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>, <decl><type ref="prev"/><name>i_stop</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>webvtt_scan_time</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_start</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>webvtt_scan_time</name><argument_list>( <argument><expr><name>psz_split</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stop</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>i_start</name> <operator>&lt;=</operator> <name>i_stop</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attrs</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_split</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>pf_get_cue</name></name> <operator>)</operator></expr> ?</condition><then> <expr><call><name><name>p</name><operator>-&gt;</operator><name>pf_get_cue</name></name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name><operator>-&gt;</operator><name>psz_attrs</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>psz_attrs</name> <operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_attrs</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>reads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name>i_stop</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>==</operator> <name>WEBVTT_SECTION_STYLE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>forward_line</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>WEBVTT_SECTION_UNDEFINED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>==</operator> <name>WEBVTT_SECTION_REGION</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>forward_line</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>WEBVTT_SECTION_UNDEFINED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>==</operator> <name>WEBVTT_SECTION_NOTE</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>psz_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>WEBVTT_SECTION_UNDEFINED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
