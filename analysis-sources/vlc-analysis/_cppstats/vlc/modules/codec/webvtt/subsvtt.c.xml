<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\webvtt\subsvtt.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../substext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/mp4/minibox.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"webvtt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"css_parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"css_style.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>webvtt_region_t</name></name></type> <name>webvtt_region_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>webvtt_dom_node_t</name></name></type> <name>webvtt_dom_node_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>webvtt_dom_cue_t</name></name></type> <name>webvtt_dom_cue_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEBVTT_REGION_LINES_COUNT</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEBVTT_DEFAULT_LINE_HEIGHT_VH</name></cpp:macro> <cpp:value>5.33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEBVTT_LINE_TO_HEIGHT_RATIO</name></cpp:macro> <cpp:value>1.06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEBVTT_MAX_DEPTH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 

<enum>enum <name>webvtt_align_e</name>

<block>{

<decl><name>WEBVTT_ALIGN_AUTO</name></decl>,

<decl><name>WEBVTT_ALIGN_LEFT</name></decl>,

<decl><name>WEBVTT_ALIGN_CENTER</name></decl>,

<decl><name>WEBVTT_ALIGN_RIGHT</name></decl>,

<decl><name>WEBVTT_ALIGN_START</name></decl>,

<decl><name>WEBVTT_ALIGN_END</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_auto</name></decl>;</decl_stmt>

}</block></struct></type> <name>webvtt_auto_value_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>webvtt_align_e</name></name></type> <name>vertical</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_snap_to_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>webvtt_auto_value_t</name></type> <name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>webvtt_align_e</name></name></type> <name>linealign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>webvtt_align_e</name></name></type> <name>positionalign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>webvtt_auto_value_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>webvtt_align_e</name></name></type> <name>align</name></decl>;</decl_stmt>

}</block></struct></type> <name>webvtt_cue_settings_t</name>;</typedef>

<enum>enum <name>webvtt_node_type_e</name>

<block>{

<decl><name>NODE_TAG</name></decl>,

<decl><name>NODE_TEXT</name></decl>,

<decl><name>NODE_CUE</name></decl>,

<decl><name>NODE_REGION</name></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEBVTT_NODE_BASE_MEMBERS</name></cpp:macro> <cpp:value>enum webvtt_node_type_e type;webvtt_dom_node_t *p_parent;webvtt_dom_node_t *p_next;</cpp:value></cpp:define>

<struct>struct <name>webvtt_region_t</name>

<block>{

<decl_stmt><decl><type><name>WEBVTT_NODE_BASE_MEMBERS</name>

<name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_lines_max_scroll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>anchor_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>anchor_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>viewport_anchor_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>viewport_anchor_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_scroll_up</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_cssstyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_child</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>webvtt_dom_cue_t</name>

<block>{

<decl_stmt><decl><type><name>WEBVTT_NODE_BASE_MEMBERS</name>

<name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>webvtt_cue_settings_t</name></type> <name>settings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_cssstyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_child</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>WEBVTT_NODE_BASE_MEMBERS</name>

<name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

}</block></struct></type> <name>webvtt_dom_text_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>WEBVTT_NODE_BASE_MEMBERS</name>

<name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_cssstyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_child</name></decl>;</decl_stmt>

}</block></struct></type> <name>webvtt_dom_tag_t</name>;</typedef>

<struct>struct <name>webvtt_dom_node_t</name>

<block>{

<expr_stmt><expr><name>WEBVTT_NODE_BASE_MEMBERS</name></expr></expr_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_root</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_css_rules</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_iden</name></cpp:macro> <cpp:value>VLC_FOURCC('i', 'd', 'e', 'n')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_payl</name></cpp:macro> <cpp:value>VLC_FOURCC('p', 'a', 'y', 'l')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sttg</name></cpp:macro> <cpp:value>VLC_FOURCC('s', 't', 't', 'g')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vttc</name></cpp:macro> <cpp:value>VLC_FOURCC('v', 't', 't', 'c')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vtte</name></cpp:macro> <cpp:value>VLC_FOURCC('v', 't', 't', 'e')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vttx</name></cpp:macro> <cpp:value>VLC_FOURCC('v', 't', 't', 'x')</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_percent</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><call><name>us_strtof</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;=</operator> <literal type="number">100.0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'%'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>d</name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>psz_end</name> <operator>!=</operator> <name>psz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>parse_percent_tuple</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><call><name>us_strtof</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_end</name> <operator>!=</operator> <name>psz</name> <operator>&amp;&amp;</operator>

<name>a</name> <operator>&gt;=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <literal type="number">100.0</literal> <operator>&amp;&amp;</operator> <name>psz_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'%'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_end</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><call><name>us_strtof</name><argument_list>( <argument><expr><operator>++</operator><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_end</name> <operator>!=</operator> <name>psz</name> <operator>&amp;&amp;</operator>

<name>b</name> <operator>&gt;=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <literal type="number">100.0</literal> <operator>&amp;&amp;</operator> <name>psz_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'%'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>a</name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>b</name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>,<name>y</name>,<name>w</name>,<name>h</name>;</decl_stmt>

}</block></struct></type> <name>webvtt_rect_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_get_cueboxrect</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_cue_settings_t</name> <modifier>*</modifier></type><name>p_settings</name></decl></parameter>,

<parameter><decl><type><name>webvtt_rect_t</name> <modifier>*</modifier></type><name>p_rect</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>extent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>indent_anchor_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>webvtt_align_e</name></name></type> <name>alignment_on_indent_anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>line_offset</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_settings</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>b_auto</name></name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_settings</name><operator>-&gt;</operator><name>b_snap_to_lines</name></name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>line_offset</name> <operator>=</operator> <name><name>p_settings</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>value</name></name> <operator>/</operator>

<operator>(</operator><name>WEBVTT_REGION_LINES_COUNT</name> <operator>*</operator> <name>WEBVTT_LINE_TO_HEIGHT_RATIO</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>line_offset</name> <operator>=</operator> <name><name>p_settings</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>line_offset</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_settings</name><operator>-&gt;</operator><name>position</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_LEFT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indent_anchor_position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_RIGHT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indent_anchor_position</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>indent_anchor_position</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>indent_anchor_position</name> <operator>=</operator> <name><name>p_settings</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_settings</name><operator>-&gt;</operator><name>positionalign</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_AUTO</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_LEFT</name> <operator>||</operator>

<name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_RIGHT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>alignment_on_indent_anchor</name> <operator>=</operator> <name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>alignment_on_indent_anchor</name> <operator>=</operator> <name>WEBVTT_ALIGN_CENTER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>alignment_on_indent_anchor</name> <operator>=</operator> <name><name>p_settings</name><operator>-&gt;</operator><name>positionalign</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_settings</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>b_auto</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>extent</name> <operator>=</operator> <name><name>p_settings</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>extent</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_settings</name><operator>-&gt;</operator><name>vertical</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_AUTO</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_rect</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <ternary><condition><expr><name>line_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>line_offset</name></expr> </then><else>: <expr><literal type="number">1.0</literal> <operator>+</operator> <name>line_offset</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>extent</name><operator>)</operator></expr> ?</condition><then> <expr><name>extent</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>indent_anchor_position</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>alignment_on_indent_anchor</name> <operator>==</operator> <name>WEBVTT_ALIGN_LEFT</name> <operator>||</operator>

<name>alignment_on_indent_anchor</name> <operator>==</operator> <name>WEBVTT_ALIGN_START</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_rect</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>indent_anchor_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>-=</operator> <name><name>p_rect</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_settings</name><operator>-&gt;</operator><name>vertical</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_LEFT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_rect</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <ternary><condition><expr><name>line_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1.0</literal> <operator>-</operator> <name>line_offset</name></expr> </then><else>: <expr><operator>-</operator><name>line_offset</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_rect</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <ternary><condition><expr><name>line_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>line_offset</name></expr> </then><else>: <expr><literal type="number">1.0</literal> <operator>+</operator> <name>line_offset</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_rect</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>extent</name><operator>)</operator></expr> ?</condition><then> <expr><name>extent</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>indent_anchor_position</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>alignment_on_indent_anchor</name> <operator>==</operator> <name>WEBVTT_ALIGN_START</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_rect</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>indent_anchor_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rect</name><operator>-&gt;</operator><name>h</name></name> <operator>-=</operator> <name><name>p_rect</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_cue_settings_ParseTuple</name><parameter_list>( <parameter><decl><type><name>webvtt_cue_settings_t</name> <modifier>*</modifier></type><name>p_settings</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"vertical"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"rl"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>vertical</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"lr"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>vertical</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>vertical</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_AUTO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>b_auto</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>parse_percent</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_settings</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>b_snap_to_lines</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>us_strtof</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_align</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_align</name><operator>++</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_align</name></expr></argument>, <argument><expr><literal type="string">"center"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>linealign</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_CENTER</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_align</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>linealign</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_END</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>linealign</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_START</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"position"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>parse_percent</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_settings</name><operator>-&gt;</operator><name>position</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_align</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_align</name><operator>++</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_align</name></expr></argument>, <argument><expr><literal type="string">"line-left"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>positionalign</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_align</name></expr></argument>, <argument><expr><literal type="string">"line-right"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>positionalign</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_align</name></expr></argument>, <argument><expr><literal type="string">"center"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>positionalign</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_CENTER</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>positionalign</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_AUTO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>parse_percent</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_settings</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>b_auto</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"region"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_settings</name><operator>-&gt;</operator><name>psz_region</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>psz_region</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"align"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_START</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_END</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"left"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"right"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_CENTER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_cue_settings_Parse</name><parameter_list>( <parameter><decl><type><name>webvtt_cue_settings_t</name> <modifier>*</modifier></type><name>p_settings</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p_str</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tuple</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>psz_tuple</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_tuple</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_split</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_tuple</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_split</name> <operator>&amp;&amp;</operator> <name><name>psz_split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>psz_split</name> <operator>!=</operator> <name>psz_tuple</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><name>psz_tuple</name></expr></argument>, <argument><expr><name>psz_split</name> <operator>-</operator> <name>psz_tuple</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_key</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>webvtt_cue_settings_ParseTuple</name><argument_list>( <argument><expr><name>p_settings</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name>psz_split</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><name>psz_tuple</name></expr> )</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_cue_settings_Clean</name><parameter_list>( <parameter><decl><type><name>webvtt_cue_settings_t</name> <modifier>*</modifier></type><name>p_settings</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_settings</name><operator>-&gt;</operator><name>psz_region</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_cue_settings_Init</name><parameter_list>( <parameter><decl><type><name>webvtt_cue_settings_t</name> <modifier>*</modifier></type><name>p_settings</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>psz_region</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>vertical</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>b_snap_to_lines</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>b_auto</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>line</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>linealign</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_START</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>positionalign</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_AUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>size</name><operator>.</operator><name>b_auto</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_settings</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>WEBVTT_ALIGN_CENTER</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUBSVTT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_Debug</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_depth</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_node</name></expr> ;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TEXT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"TEXT %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>webvtt_dom_text_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_tag</name> <init>= <expr><operator>(</operator><name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator><name>p_node</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"TAG%s (%s)\n"</literal></expr></argument>, <argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_domnode_Debug</name><argument_list>( <argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name>i_depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name> <init>= <expr><operator>(</operator><name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name>p_node</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CUE %s\n"</literal></expr></argument>, <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_domnode_Debug</name><argument_list>( <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name>i_depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_REGION</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><operator>(</operator><name>webvtt_region_t</name> <operator>*</operator><operator>)</operator><name>p_node</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"REGION %s\n"</literal></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_domnode_Debug</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name>i_depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>webvtt_domnode_Debug</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>webvtt_domnode_Debug((webvtt_dom_node_t *)a,b)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_ChainDelete</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_dom_cue_Delete</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_region_Delete</name><parameter_list>( <parameter><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_dom_text_Delete</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_text_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_dom_tag_Delete</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_cssstyle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_domnode_ChainDelete</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_AppendLast</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name></decl></parameter>,

<parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <name>p_node</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>webvtt_domnode_AppendLast</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>webvtt_domnode_AppendLast( (webvtt_dom_node_t **) a, (webvtt_dom_node_t *) b )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_ChainDelete</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>p_node</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_dom_tag_Delete</name><argument_list>( <argument><expr><operator>(</operator><name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_dom_text_Delete</name><argument_list>( <argument><expr><operator>(</operator><name>webvtt_dom_text_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_dom_cue_Delete</name><argument_list>( <argument><expr><operator>(</operator><name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_REGION</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_region_Delete</name><argument_list>( <argument><expr><operator>(</operator><name>webvtt_region_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_node</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>webvtt_dom_text_t</name> <modifier>*</modifier></type> <name>webvtt_dom_text_New</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_text_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_node</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_node</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NODE_TEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <name>p_parent</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_node</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type> <name>webvtt_dom_tag_New</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_node</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_node</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NODE_TAG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <name>p_parent</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_node</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type> <name>webvtt_domnode_getParentByTag</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_parent</name></expr> ;</condition> <incr><expr><name>p_parent</name> <operator>=</operator> <name><name>p_parent</name><operator>-&gt;</operator><name>p_parent</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><operator>(</operator><name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator> <name>p_parent</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_tag</name></name> <operator>&amp;&amp;</operator> <name>psz_tag</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><name>psz_tag</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_parent</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type> <name>webvtt_domnode_getFirstChild</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>NODE_CUE</name></expr>:</case>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>p_child</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NODE_REGION</name></expr>:</case>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>webvtt_region_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>p_child</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NODE_TAG</name></expr>:</case>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>p_child</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>p_child</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>webvtt_domnode_getFirstChild</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>webvtt_domnode_getFirstChild((webvtt_dom_node_t *)a)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>webvtt_domnode_GetPlaybackTime</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_node</name></expr>;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>i_start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_end</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_start</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_node</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>b_end</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>i_stop</name></expr></then><else>:

<expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>i_start</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>webvtt_domnode_Match_Class</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_tagnode</name> <init>= <expr><operator>(</operator><name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&amp;&amp;</operator> <name>psz</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name> <operator>&gt;</operator> <name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_attrs</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i_len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>webvtt_domnode_Match_Id</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_id</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_id</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_id</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_REGION</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>webvtt_region_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>psz_id</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>webvtt_region_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>psz_id</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>psz_id</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>psz_id</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>webvtt_domnode_Match_Tag</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name> <operator>&amp;&amp;</operator> <name>psz_tag</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz_tag</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>psz_tag</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>psz_tag</name></expr></argument>, <argument><expr><name>psz_tag</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>webvtt_domnode_Match_PseudoClass</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_playbacktime</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"past"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"future"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name> <init>= <expr><call><name>webvtt_domnode_GetPlaybackTime</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator> <operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>i_start</name> <operator>&lt;</operator> <name>i_playbacktime</name></expr> </then><else>: <expr><name>i_start</name> <operator>&gt;</operator> <name>i_playbacktime</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>webvtt_domnode_Match_PseudoElement</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"cue"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"cue-region"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_REGION</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>MatchAttribute</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_lookup</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_css_match_e</name></name></type> <name>match</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>match</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>MATCH_EQUALS</name></expr>:</case>

<return>return <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><name>psz_lookup</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>MATCH_INCLUDES</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><name>psz_lookup</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>p</name> <operator>==</operator> <name>psz_attr</name> <operator>||</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>p</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_lookup</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>MATCH_DASHMATCH</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_lookup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><name>psz_lookup</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>psz_attr</name> <operator>+</operator> <name>i_len</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>MATCH_BEGINSWITH</name></expr>:</case>

<return>return <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><name>psz_lookup</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_lookup</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>MATCH_ENDSWITH</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><name>psz_lookup</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block>

<case>case <expr><name>MATCH_CONTAINS</name></expr>:</case>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>strstr</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><name>psz_lookup</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>webvtt_domnode_Match_Attribute</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_matchsel</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name> <operator>&amp;&amp;</operator> <name>p_matchsel</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_tagnode</name> <init>= <expr><operator>(</operator><name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"voice"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator> 

<operator>(</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><literal type="string">"lang"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"lang"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_start</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>psz_start</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>psz_start</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>psz_start</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_start</name> <operator>=</operator> <name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_matchsel</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>MatchAttribute</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><name><name>p_matchsel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_matchsel</name><operator>-&gt;</operator><name>match</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>webvtt_domnode_MatchType</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_playbacktime</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_sel</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SELECTOR_SIMPLE</name></expr>:</case>

<return>return <expr><call><name>webvtt_domnode_Match_Tag</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>SELECTOR_PSEUDOCLASS</name></expr>:</case>

<return>return <expr><call><name>webvtt_domnode_Match_PseudoClass</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>SELECTOR_PSEUDOELEMENT</name></expr>:</case>

<return>return <expr><call><name>webvtt_domnode_Match_PseudoElement</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>SPECIFIER_ID</name></expr>:</case>

<return>return <expr><call><name>webvtt_domnode_Match_Id</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>SPECIFIER_CLASS</name></expr>:</case>

<return>return <expr><call><name>webvtt_domnode_Match_Class</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>SPECIFIER_ATTRIB</name></expr>:</case>

<return>return <expr><call><name>webvtt_domnode_Match_Attribute</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>p_matchsel</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>text_style_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>get_ppCSSStyle</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>NODE_CUE</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>p_cssstyle</name></expr>;</return>

<case>case <expr><name>NODE_REGION</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>webvtt_region_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>p_cssstyle</name></expr>;</return>

<case>case <expr><name>NODE_TAG</name></expr>:</case>

<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>p_cssstyle</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_style_t</name> <modifier>*</modifier></type> <name>webvtt_domnode_getCSSStyle</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_style</name> <init>= <expr><call><name>get_ppCSSStyle</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_style</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>*</operator><name>pp_style</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>webvtt_domnode_getCSSStyle</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>webvtt_domnode_getCSSStyle((webvtt_dom_node_t *)a)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>webvtt_domnode_supportsCSSStyle</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_ppCSSStyle</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_setCSSStyle</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_style</name> <init>= <expr><call><name>get_ppCSSStyle</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_style</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pp_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_style</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><operator>*</operator><name>pp_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_style</name> <operator>=</operator> <name>p_style</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_SelectNodesInTree</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_tree</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_depth</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_playbacktime</name></decl></parameter>, <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_SelectChildNodesInTree</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_tree</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_depth</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_playbacktime</name></decl></parameter>, <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><call><name>webvtt_domnode_getFirstChild</name><argument_list>( <argument><expr><name>p_tree</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_max_depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_domnode_SelectNodesInTree</name><argument_list>( <argument><expr><name>p_child</name></expr></argument>, <argument><expr><name>p_sel</name></expr></argument>, <argument><expr><name>i_max_depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_SelectNodesBySpeficier</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_spec</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_playbacktime</name></decl></parameter>, <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_spec</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_spec</name><operator>-&gt;</operator><name>combinator</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>RELATION_DESCENDENT</name></expr>:</case>

<expr_stmt><expr><call><name>webvtt_domnode_SelectChildNodesInTree</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_spec</name></expr></argument>, <argument><expr><name>WEBVTT_MAX_DEPTH</name></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RELATION_DIRECTADJACENT</name></expr>:</case>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_adj</name> <init>= <expr><name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</init> <condition><expr><name>p_adj</name></expr>;</condition> <incr><expr><name>p_adj</name> <operator>=</operator> <name><name>p_adj</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_domnode_SelectChildNodesInTree</name><argument_list>( <argument><expr><name>p_adj</name></expr></argument>, <argument><expr><name>p_spec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>RELATION_INDIRECTADJACENT</name></expr>:</case>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_adj</name> <init>= <expr><call><name>webvtt_domnode_getFirstChild</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</init>

<condition><expr><name>p_adj</name> <operator>&amp;&amp;</operator> <name>p_adj</name> <operator>!=</operator> <name>p_node</name></expr>;</condition> <incr><expr><name>p_adj</name> <operator>=</operator> <name><name>p_adj</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_domnode_SelectChildNodesInTree</name><argument_list>( <argument><expr><name>p_adj</name></expr></argument>, <argument><expr><name>p_spec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>RELATION_CHILD</name></expr>:</case>

<expr_stmt><expr><call><name>webvtt_domnode_SelectChildNodesInTree</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_spec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RELATION_SELF</name></expr>:</case>

<expr_stmt><expr><call><name>webvtt_domnode_SelectNodesInTree</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_spec</name></expr></argument>, <argument><expr><name>WEBVTT_MAX_DEPTH</name></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_SelectNodesInTree</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_depth</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_playbacktime</name></decl></parameter>, <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_node</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>webvtt_domnode_MatchType</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_sel</name></expr></argument>, <argument><expr><name>i_playbacktime</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sel</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vlc_array_append</name><argument_list>( <argument><expr><name>p_results</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>webvtt_domnode_SelectNodesBySpeficier</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>webvtt_domnode_SelectChildNodesInTree</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_sel</name></expr></argument>, <argument><expr><name>i_max_depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><name>p_results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_domnode_SelectRuleNodes</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_playbacktime</name></decl></parameter>, <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_root</name> <operator>||</operator> <name><name>p_root</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NODE_TAG</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_cues</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator><name>p_root</name><operator>)</operator><operator>-&gt;</operator><name>p_child</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name> <init>= <expr><name><name>p_rule</name><operator>-&gt;</operator><name>p_selectors</name></name></expr></init></decl>;</init> <condition><expr><name>p_sel</name></expr>;</condition> <incr><expr><name>p_sel</name> <operator>=</operator> <name><name>p_sel</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>tempresults</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tempresults</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name>p_cues</name></expr></init></decl>;</init> <condition><expr><name>p_node</name></expr>;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>webvtt_domnode_SelectNodesInTree</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_sel</name></expr></argument>, <argument><expr><name>WEBVTT_MAX_DEPTH</name></expr></argument>,

<argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempresults</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tempresults</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vlc_array_append</name><argument_list>( <argument><expr><name>p_results</name></expr></argument>, <argument><expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tempresults</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tempresults</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>IsEndTag</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>psz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>FindNextTag</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_taglast</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppsz_taglast</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>ppsz_taglast</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>tagsize</name> <init>= <expr><operator>*</operator><name>ppsz_taglast</name> <operator>-</operator> <name>psz</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>tagsize</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>tagsize</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>IsEndTag</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ppsz_taglast</name> <operator>=</operator> <name>psz</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>psz</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>psz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SplitTag</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_attrs</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>psz_tag</name> <operator>+=</operator> <ternary><condition><expr><call><name>IsEndTag</name><argument_list>( <argument><expr><name>psz_tag</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>psz_tag</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isalpha</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><call><name>isalnum</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_tag</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while<condition>( <expr><call><name>isspace</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_attrs</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>psz_tag</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>webvtt_dom_cue_t</name> <modifier>*</modifier></type> <name>webvtt_dom_cue_New</name><parameter_list>( <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_cue</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cue</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NODE_CUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name>i_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_child</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_cssstyle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_cue_settings_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_cue</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_dom_cue_ClearText</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>webvtt_domnode_ChainDelete</name><argument_list>( <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_child</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_dom_cue_Delete</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_cssstyle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_dom_cue_ClearText</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_cue_settings_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>webvtt_dom_cue_Reduced</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init>

<condition><expr><name>p_node</name></expr>;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NODE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>webvtt_dom_text_t</name> <modifier>*</modifier></type><name>p_textnode</name> <init>= <expr><operator>(</operator><name>webvtt_dom_text_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nl</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>nl</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_remain</name> <init>= <expr><name>i_len</name> <operator>-</operator> <operator>(</operator><name>nl</name> <operator>-</operator> <name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_new</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i_remain</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_new</name></expr>;</expr_stmt>

<return>return <expr><operator>--</operator><name><name>p_cue</name><operator>-&gt;</operator><name>i_lines</name></name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_lines</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_region_ParseTuple</name><parameter_list>( <parameter><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>parse_percent</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>f_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"regionanchor"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>parse_percent_tuple</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>anchor_x</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>anchor_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"viewportanchor"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>parse_percent_tuple</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>viewport_anchor_x</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>viewport_anchor_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"lines"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_lines_max_scroll</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>WEBVTT_REGION_LINES_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"scroll"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>b_scroll_up</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><literal type="string">"up"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_region_Parse</name><parameter_list>( <parameter><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tuple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_str</name> <init>= <expr><name>psz_line</name></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>psz_tuple</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>p_str</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_save</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_tuple</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_split</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_tuple</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_split</name> <operator>&amp;&amp;</operator> <name><name>psz_split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>psz_split</name> <operator>!=</operator> <name>psz_tuple</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><name>psz_tuple</name></expr></argument>, <argument><expr><name>psz_split</name> <operator>-</operator> <name>psz_tuple</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_key</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>webvtt_region_ParseTuple</name><argument_list>( <argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name>psz_split</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><name>psz_tuple</name></expr> )</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>webvtt_region_CountLines</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init>

<condition><expr><name>p_node</name></expr>;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NODE_CUE</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_lines</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name>p_node</name><operator>)</operator><operator>-&gt;</operator><name>i_lines</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_lines</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_region_ClearCues</name><parameter_list>( <parameter><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>webvtt_domnode_ChainDelete</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ClearCuesByTime</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_next</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>pp_next</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><operator>*</operator><name>pp_next</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_node</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name> <init>= <expr><operator>(</operator><name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name>p_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;=</operator> <name>i_time</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_next</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_dom_cue_Delete</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_REGION</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><operator>(</operator><name>webvtt_region_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ClearCuesByTime</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name>i_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp_next</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_region_Reduce</name><parameter_list>( <parameter><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NODE_CUE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name> <init>= <expr><operator>(</operator><name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<call><name>webvtt_dom_cue_Reduced</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name> <operator>=</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_dom_cue_Delete</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_region_AddCue</name><parameter_list>( <parameter><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,

<parameter><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_add</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pp_add</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_add</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_add</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>pp_add</name> <operator>=</operator> <operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator><name>p_cue</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator><name>p_region</name></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_lines</name> <init>= <expr><call><name>webvtt_region_CountLines</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_lines</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>i_lines</name> <operator>&gt;</operator> <name>WEBVTT_REGION_LINES_COUNT</name> <operator>||</operator>

<operator>(</operator><name><name>p_region</name><operator>-&gt;</operator><name>b_scroll_up</name></name> <operator>&amp;&amp;</operator> <name>i_lines</name> <operator>&gt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>i_lines_max_scroll</name></name><operator>)</operator><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>webvtt_region_Reduce</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>webvtt_region_CountLines</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>webvtt_region_Delete</name><parameter_list>( <parameter><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_cssstyle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_region_ClearCues</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>webvtt_region_t</name> <modifier>*</modifier></type> <name>webvtt_region_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_region</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NODE_REGION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>f_width</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>anchor_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>anchor_y</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_lines_max_scroll</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>viewport_anchor_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>viewport_anchor_y</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>b_scroll_up</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_cssstyle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_region</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>webvtt_region_t</name> <modifier>*</modifier></type> <name>webvtt_region_GetByID</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_id</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init>

<condition><expr><name>p_node</name></expr>;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_REGION</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><operator>(</operator><name>webvtt_region_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_id</name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_region</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>CountNewLines</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type> <name>CreateDomNodes</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_lines</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name>p_head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_parent</name> <init>= <expr><name>p_head</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz_text</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_taglast</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name> <init>= <expr><call><name>FindNextTag</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_taglast</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_tag</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_tag</name> <operator>-</operator> <name>psz_text</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_text_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><call><name>webvtt_dom_text_New</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_node</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>psz_tag</name> <operator>-</operator> <name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_lines</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>pi_lines</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>CountNewLines</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>IsEndTag</name><argument_list>( <argument><expr><name>psz_tag</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><call><name>webvtt_dom_tag_New</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_node</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><call><name>SplitTag</name><argument_list>( <argument><expr><name>psz_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_attrs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_tag</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_attrs</name> <operator>!=</operator> <name>psz_taglast</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_attrs</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>psz_attrs</name></expr></argument>, <argument><expr><name>psz_taglast</name> <operator>-</operator> <name>psz_attrs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_attrs</name></name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_attrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>webvtt_scan_time</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_parent</name> <operator>=</operator> <operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>p_child</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_parent</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><call><name>SplitTag</name><argument_list>( <argument><expr><name>psz_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_attrs</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tagname</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_parent</name> <operator>=</operator> <call><name>webvtt_domnode_getParentByTag</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument>, <argument><expr><name>psz_tagname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_parent</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_parent</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_parent</name> <operator>=</operator> <name><name>p_parent</name><operator>-&gt;</operator><name>p_parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_head</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tagname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <name>psz_taglast</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_text_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><call><name>webvtt_dom_text_New</name><argument_list>( <argument><expr><name>p_parent</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_node</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_lines</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>pi_lines</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>CountNewLines</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>p_head</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ProcessCue</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_child</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_child</name></name> <operator>=</operator> <call><name>CreateDomNodes</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_cue</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init> <condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_child</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator><name>p_cue</name></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUBSVTT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>webvtt_domnode_Debug</name><argument_list>( <argument><expr><operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator> <name>p_cue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_style_t</name> <modifier>*</modifier></type> <name>ComputeStyle</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_leaf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_dfltstyle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_tagtime</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name>p_leaf</name></expr></init></decl> ;</init> <condition><expr><name>p_node</name></expr>;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_nooverride</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name>p_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cue</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_tagtime</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>b_nooverride</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_tagnode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator><name>p_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_tagtime</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_tagtime</name> <operator>=</operator> <name><name>p_tagnode</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_tag</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_style</name> <operator>||</operator> <operator>(</operator><name>p_style</name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_style</name> <operator>||</operator> <operator>(</operator><name>p_style</name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_style</name> <operator>||</operator> <operator>(</operator><name>p_style</name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_css_rules</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_style</name> <operator>||</operator> <operator>(</operator><name>p_style</name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0x7F7F7F</literal> <operator>|</operator> <name>a</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr> )</condition>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_color</name></decl>;</decl_stmt>

}</block> <decl><name><name>CEAcolors</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"white"</literal></expr>, <expr><literal type="number">0xFFFFFF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lime"</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cyan"</literal></expr>, <expr><literal type="number">0x00FFFF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"red"</literal></expr>, <expr><literal type="number">0xFF0000</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"yellow"</literal></expr>, <expr><literal type="number">0xFFFF00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"magenta"</literal></expr>,<expr><literal type="number">0xFF00FF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blue"</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"black"</literal></expr>, <expr><literal type="number">0x000000</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tok</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name><name>p_tagnode</name><operator>-&gt;</operator><name>psz_attrs</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>psz_tok</name></expr>;</condition> <incr><expr><name>psz_tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>bg</name> <init>= <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_tok</name></expr></argument>, <argument><expr><literal type="string">"bg_"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_class</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bg</name><operator>)</operator></expr> ?</condition><then> <expr><name>psz_tok</name> <operator>+</operator> <literal type="number">3</literal></expr> </then><else>: <expr><name>psz_tok</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>CEAcolors</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_class</name></expr></argument>, <argument><expr><name><name>CEAcolors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dfltstyle</name> <operator>||</operator>

<operator>(</operator><name>p_dfltstyle</name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>bg</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dfltstyle</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <name><name>CEAcolors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dfltstyle</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dfltstyle</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_BACKGROUND_COLOR</name> <operator>|</operator>

<name>STYLE_HAS_BACKGROUND_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dfltstyle</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BACKGROUND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dfltstyle</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dfltstyle</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <name><name>CEAcolors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dfltstyle</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_nodestyle</name> <init>= <expr><call><name>webvtt_domnode_getCSSStyle</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_nodestyle</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>text_style_Merge</name><argument_list>( <argument><expr><name>p_style</name></expr></argument>, <argument><expr><name>p_nodestyle</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name>b_nooverride</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_style</name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name>p_nodestyle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dfltstyle</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_style</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_style_Merge</name><argument_list>( <argument><expr><name>p_style</name></expr></argument>, <argument><expr><name>p_dfltstyle</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name>p_dfltstyle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>p_style</name> <operator>=</operator> <name>p_dfltstyle</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_dfltstyle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_style</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetCueTextAlignment</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>align</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>WEBVTT_ALIGN_LEFT</name></expr>:</case>

<return>return <expr><name>SUBPICTURE_ALIGN_LEFT</name></expr>;</return>

<case>case <expr><name>WEBVTT_ALIGN_RIGHT</name></expr>:</case>

<return>return <expr><name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</return>

<case>case <expr><name>WEBVTT_ALIGN_START</name></expr>:</case> 

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>vertical</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_RIGHT</name><operator>)</operator></expr> ?</condition><then>

<expr><name>SUBPICTURE_ALIGN_RIGHT</name></expr> </then><else>: <expr><name>SUBPICTURE_ALIGN_LEFT</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>WEBVTT_ALIGN_END</name></expr>:</case>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>vertical</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_RIGHT</name><operator>)</operator></expr> ?</condition><then>

<expr><name>SUBPICTURE_ALIGN_LEFT</name></expr> </then><else>: <expr><name>SUBPICTURE_ALIGN_RIGHT</name></expr></else></ternary></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<struct>struct <name>render_variables_s</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>i_left_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>i_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>i_top_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>i_top</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>ConvertRubyNodeToSegment</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_ruby</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_segment_ruby_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_rt_append</name> <init>= <expr><operator>&amp;</operator><name>p_ruby</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_base</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_node</name></expr> ;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TEXT</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_text_t</name> <modifier>*</modifier></type><name>p_textnode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_text_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_base</name> <operator>=</operator> <name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_tag</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator><name>p_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_tag</name><operator>-&gt;</operator><name>p_child</name></name> <operator>&amp;&amp;</operator>

<name><name>p_tag</name><operator>-&gt;</operator><name>p_child</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TEXT</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_text_t</name> <modifier>*</modifier></type><name>p_rttext</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_text_t</name> <operator>*</operator><operator>)</operator><name><name>p_tag</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_rt_append</name> <operator>=</operator> <call><name>text_segment_ruby_New</name><argument_list>( <argument><expr><name>psz_base</name></expr></argument>, <argument><expr><name><name>p_rttext</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_rt_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_rt_append</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp_rt_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_base</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><operator>(</operator> <name>p_ruby</name> <operator>)</operator></expr> ?</condition><then> <expr><call><name>text_segment_FromRuby</name><argument_list>( <argument><expr><name>p_ruby</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>ConvertNodesToSegments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>render_variables_s</name></name> <modifier>*</modifier></type><name>p_vars</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name>p_head</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_node</name></expr> ;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TEXT</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_text_t</name> <modifier>*</modifier></type><name>p_textnode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_text_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>psz_text</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_xml_decode</name><argument_list>( <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>ComputeStyle</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_TAG</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_tag</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator><name>p_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>psz_tag</name></name></expr></argument>, <argument><expr><literal type="string">"ruby"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>ConvertNodesToSegments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_vars</name></expr></argument>, <argument><expr><name>p_cue</name></expr></argument>,

<argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>ConvertRubyNodeToSegment</name><argument_list>( <argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_head</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>ConvertCueToSegments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>render_variables_s</name></name> <modifier>*</modifier></type><name>p_vars</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ConvertNodesToSegments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_vars</name></expr></argument>, <argument><expr><name>p_cue</name></expr></argument>, <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ChainCueSegments</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter>, <parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter>,

<parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_new</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_newline</name> <init>= <expr><operator>*</operator><name>pp_append</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name>b_newline</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>vertical</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_LEFT</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><literal type="string">"\u2067"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>vertical</name></name> <operator>==</operator> <name>WEBVTT_ALIGN_LEFT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><literal type="string">"\u2069"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_t</name> <modifier>*</modifier></type> <name>ConvertCuesToSegments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>render_variables_s</name></name> <modifier>*</modifier></type><name>p_vars</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name>p_segments</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_cue</name></expr>;</condition> <incr><expr><name>p_cue</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NODE_CUE</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <name>i_start</name> <operator>||</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;=</operator> <name>i_start</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><call><name>ConvertCueToSegments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_vars</name></expr></argument>, <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ChainCueSegments</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>pp_append</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_segments</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetTimedTags</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name></decl></parameter>, <parameter><decl><type><name>vlc_array_t</name> <modifier>*</modifier></type><name>p_times</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_node</name></expr>;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>NODE_TAG</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_tag</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_tag</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_tag</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;=</operator> <name>i_start</name> <operator>&amp;&amp;</operator> <name><name>p_tag</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&lt;</operator> <name>i_stop</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vlc_array_append</name><argument_list>( <argument><expr><name>p_times</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>p_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetTimedTags</name><argument_list>( <argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_stop</name></expr></argument>, <argument><expr><name>p_times</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>NODE_REGION</name></expr>:</case>

<case>case <expr><name>NODE_CUE</name></expr>:</case>

<expr_stmt><expr><call><name>GetTimedTags</name><argument_list>( <argument><expr><call><name>webvtt_domnode_getFirstChild</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_stop</name></expr></argument>, <argument><expr><name>p_times</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CreateSpuOrNewUpdaterRegion</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_spu</name></decl></parameter>,

<parameter><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_updtregion</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_spu</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_spu</name> <operator>=</operator> <call><name>decoder_NewSubpictureText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_spu</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spusys</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pp_spu</name><operator>)</operator><operator>-&gt;</operator><name><name>updater</name><operator>.</operator><name>p_sys</name></name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_updtregion</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_spusys</name><operator>-&gt;</operator><name>region</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_new</name> <init>=

<expr><call><name>SubpictureUpdaterSysRegionNew</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_new</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SubpictureUpdaterSysRegionAdd</name><argument_list>( <argument><expr><operator>*</operator><name>pp_updtregion</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_updtregion</name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ClearCSSStyles</name><parameter_list>( <parameter><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>webvtt_domnode_supportsCSSStyle</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_domnode_setCSSStyle</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><call><name>webvtt_domnode_getFirstChild</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>p_child</name></expr> ;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ClearCSSStyles</name><argument_list>( <argument><expr><name>p_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ApplyCSSRules</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_playbacktime</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>p_rule</name></expr> ;</condition> <incr><expr><name>p_rule</name> <operator>=</operator> <name><name>p_rule</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>results</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_domnode_SelectRuleNodes</name><argument_list>( <argument><expr><operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument>,

<argument><expr><name>p_rule</name></expr></argument>, <argument><expr><name>i_playbacktime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_decl</name> <init>= <expr><name><name>p_rule</name><operator>-&gt;</operator><name>p_declarations</name></name></expr></init></decl>;</init>

<condition><expr><name>p_decl</name></expr>;</condition> <incr><expr><name>p_decl</name> <operator>=</operator> <name><name>p_decl</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>results</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name>results</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>webvtt_domnode_supportsCSSStyle</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><call><name>webvtt_domnode_getCSSStyle</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_style</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_style</name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>webvtt_domnode_setCSSStyle</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>webvtt_FillStyleFromCssDeclaration</name><argument_list>( <argument><expr><name>p_decl</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>results</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RenderRegions</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_updtregion</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ApplyCSSRules</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_css_rules</name></name></expr></argument>, <argument><expr><name>i_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_rlcue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>webvtt_dom_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init>

<condition><expr><name>p_node</name></expr>;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_REGION</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_vttregion</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>webvtt_region_t</name> <operator>*</operator><operator>)</operator> <name>p_node</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>render_variables_s</name></name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>p_region</name></name> <operator>=</operator> <name>p_vttregion</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>i_left_offset</name></name> <operator>=</operator> <name><name>p_vttregion</name><operator>-&gt;</operator><name>anchor_x</name></name> <operator>*</operator> <name><name>p_vttregion</name><operator>-&gt;</operator><name>f_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>i_left</name></name> <operator>=</operator> <name><name>p_vttregion</name><operator>-&gt;</operator><name>viewport_anchor_x</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>i_left_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>i_top_offset</name></name> <operator>=</operator> <name><name>p_vttregion</name><operator>-&gt;</operator><name>anchor_y</name></name> <operator>*</operator> <name><name>p_vttregion</name><operator>-&gt;</operator><name>i_lines_max_scroll</name></name> <operator>*</operator>

<name>WEBVTT_DEFAULT_LINE_HEIGHT_VH</name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>i_top</name></name> <operator>=</operator> <name><name>p_vttregion</name><operator>-&gt;</operator><name>viewport_anchor_y</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>i_top_offset</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segments</name> <init>=

<expr><call><name>ConvertCuesToSegments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_stop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name><name>p_vttregion</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_segments</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CreateSpuOrNewUpdaterRegion</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_spu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_updtregion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name> <operator>||</operator> <operator>!</operator><name>p_updtregion</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_ChainDelete</name><argument_list>( <argument><expr><name>p_segments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>inner_align</name></name> <operator>=</operator> <call><name>GetCueTextAlignment</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator><name><name>p_vttregion</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>i_left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>i_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p_vttregion</name><operator>-&gt;</operator><name>f_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>UPDT_REGION_ORIGIN_X_IS_RATIO</name><operator>|</operator><name>UPDT_REGION_ORIGIN_Y_IS_RATIO</name>

<operator>|</operator> <name>UPDT_REGION_EXTENT_X_IS_RATIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>p_segments</name></name> <operator>=</operator> <name>p_segments</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NODE_CUE</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_rlcue</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_rlcue</name> <operator>=</operator> <operator>(</operator> <specifier>const</specifier> <name>webvtt_dom_cue_t</name> <operator>*</operator> <operator>)</operator> <name>p_node</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>p_rlcue</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>render_variables_s</name></name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>p_region</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>i_left_offset</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>i_left</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>i_top_offset</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>i_top</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name> <init>= <expr><name>p_rlcue</name></expr></init></decl>;</init> <condition><expr><name>p_cue</name></expr>;</condition>

<incr><expr><name>p_cue</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>webvtt_dom_cue_t</name> <operator>*</operator><operator>)</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NODE_CUE</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;</operator> <name>i_start</name> <operator>||</operator> <name><name>p_cue</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&lt;=</operator> <name>i_start</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segments</name> <init>= <expr><call><name>ConvertCueToSegments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_segments</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CreateSpuOrNewUpdaterRegion</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_spu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_updtregion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_updtregion</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_ChainDelete</name><argument_list>( <argument><expr><name>p_segments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>line</name><operator>.</operator><name>b_auto</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_rect_t</name></type> <name>rect</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>webvtt_get_cueboxrect</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <operator>(</operator><name>UPDT_REGION_ORIGIN_X_IS_RATIO</name><operator>|</operator><name>UPDT_REGION_ORIGIN_Y_IS_RATIO</name><operator>|</operator>

<name>UPDT_REGION_EXTENT_X_IS_RATIO</name><operator>|</operator><name>UPDT_REGION_EXTENT_Y_IS_RATIO</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>inner_align</name></name> <operator>=</operator> <call><name>GetCueTextAlignment</name><argument_list>( <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>p_segments</name></name> <operator>=</operator> <name>p_segments</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_spu</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name>i_stop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>WEBVTT_DEFAULT_LINE_HEIGHT_VH</name> <operator>/</operator>

<name>WEBVTT_LINE_TO_HEIGHT_RATIO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>timedtagsArrayCmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>ta</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>tb</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>result</name> <init>= <expr><name><name>ta</name><operator>-&gt;</operator><name>i_start</name></name> <operator>-</operator> <name><name>tb</name><operator>-&gt;</operator><name>i_start</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Render</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>timedtags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>timedtags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTimedTags</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_stop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timedtags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>timedtags</name><operator>.</operator><name>i_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>( <argument><expr><name><name>timedtags</name><operator>.</operator><name>pp_elems</name></name></expr></argument>, <argument><expr><name><name>timedtags</name><operator>.</operator><name>i_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>timedtags</name><operator>.</operator><name>pp_elems</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>timedtagsArrayCmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_substart</name> <init>= <expr><name>i_start</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>timedtags</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <modifier>*</modifier></type><name>p_tag</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>webvtt_dom_tag_t</name> <operator>*</operator><operator>)</operator> <call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name>timedtags</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_tag</name><operator>-&gt;</operator><name>i_start</name></name> <operator>!=</operator> <name>i_substart</name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ClearCSSStyles</name><argument_list>( <argument><expr><operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RenderRegions</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_substart</name></expr></argument>, <argument><expr><name><name>p_tag</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_substart</name> <operator>=</operator> <name><name>p_tag</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_substart</name> <operator>!=</operator> <name>i_stop</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_substart</name> <operator>!=</operator> <name>i_start</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ClearCSSStyles</name><argument_list>( <argument><expr><operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RenderRegions</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_substart</name></expr></argument>, <argument><expr><name>i_stop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>timedtags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessISOBMFF</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_box_iterator_t</name></type> <name>it</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mp4_box_iterator_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>mp4_box_iterator_Next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>it</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>it</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_vttc</name> <operator>||</operator> <name><name>it</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_vttx</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>webvtt_dom_cue_t</name> <modifier>*</modifier></type><name>p_cue</name> <init>= <expr><call><name>webvtt_dom_cue_New</name><argument_list>( <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_stop</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cue</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mp4_box_iterator_t</name></type> <name>vtcc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mp4_box_iterator_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vtcc</name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>p_payload</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>i_payload</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>mp4_box_iterator_Next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vtcc</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>vtcc</name><operator>.</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ATOM_iden</name></expr>:</case>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>vtcc</name><operator>.</operator><name>p_payload</name></name></expr></argument>, <argument><expr><name><name>vtcc</name><operator>.</operator><name>i_payload</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ATOM_sttg</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>vtcc</name><operator>.</operator><name>p_payload</name></name></expr></argument>, <argument><expr><name><name>vtcc</name><operator>.</operator><name>i_payload</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_cue_settings_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>ATOM_payl</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>vtcc</name><operator>.</operator><name>p_payload</name></name></expr></argument>, <argument><expr><name><name>vtcc</name><operator>.</operator><name>i_payload</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ProcessCue</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><call><name>webvtt_region_GetByID</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>,

<argument><expr><name><name>p_cue</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>psz_region</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>webvtt_region_AddCue</name><argument_list>( <argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>webvtt_domnode_AppendLast</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name>p_cue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cue</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>parser_ctx</name>

<block>{

<decl_stmt><decl><type><name>webvtt_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>css</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_css_memstream_opened</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParserHeaderHandler</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>webvtt_header_line_e</name></name></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_new</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>parser_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>parser_ctx</name> <operator>*</operator><operator>)</operator><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>p_dec</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_new</name> <operator>||</operator> <operator>!</operator><name>psz_line</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>psz_id</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>webvtt_domnode_AppendLast</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_region</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_parent</name></name> <operator>=</operator> <operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"added new region %s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>webvtt_region_Delete</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_region</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>b_css_memstream_opened</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>css</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_css_parser_t</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_css_parser_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_parser_ParseBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ptr</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CSS_PARSER_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_css_parser_Debug</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_css_rules</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>rules</name><operator>.</operator><name>p_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>rules</name><operator>.</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_parser_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_line</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_new</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>s</name> <operator>==</operator> <name>WEBVTT_HEADER_REGION</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>webvtt_region_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>( <expr><name>s</name> <operator>==</operator> <name>WEBVTT_HEADER_STYLE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b_css_memstream_opened</name></name> <operator>=</operator> <operator>!</operator><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>css</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>s</name> <operator>==</operator> <name>WEBVTT_HEADER_REGION</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_region_Parse</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_region</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>( <expr><name>s</name> <operator>==</operator> <name>WEBVTT_HEADER_STYLE</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_css_memstream_opened</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>css</name></name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>css</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadExtradata</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>,

<argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>parser_ctx</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>b_css_memstream_opened</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>p_region</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>p_dec</name></name> <operator>=</operator> <name>p_dec</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>webvtt_text_parser_t</name> <modifier>*</modifier></type><name>p_parser</name> <init>=

<expr><call><name>webvtt_text_parser_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ParserHeaderHandler</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_parser</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>psz_line</name> <operator>=</operator> <call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>webvtt_text_parser_Feed</name><argument_list>( <argument><expr><name>p_parser</name></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>webvtt_text_parser_Delete</name><argument_list>( <argument><expr><name>p_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ParserHeaderHandler</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ClearCuesByTime</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name>VLC_TICK_0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name> <init>= <expr><name>i_start</name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ClearCuesByTime</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name><operator>-&gt;</operator><name>p_child</name></name></expr></argument>, <argument><expr><name>i_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ProcessISOBMFF</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_stop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Render</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_stop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>webvtt_CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>webvtt_domnode_ChainDelete</name><argument_list>( <argument><expr><operator>(</operator><name>webvtt_dom_node_t</name> <operator>*</operator><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_css_rules_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_css_rules</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>webvtt_OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_WEBVTT</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name> <operator>=</operator> <call><name>webvtt_dom_tag_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_root</name><operator>-&gt;</operator><name>psz_tag</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"video"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LoadExtradata</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
