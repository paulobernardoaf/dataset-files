<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\webvtt\css_parser.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"css_bridge.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"css_parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CSSGrammar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_term_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_term_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_expression_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_expr_t</name> <modifier>*</modifier></type><name>p_expr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_declarations_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_decl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_selectors_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_rules_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAIN_APPEND_IMPL</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHAIN_APPEND_DECL(n ,t){t ** insert = &amp;p_a-&gt;p_next;while( *insert ) insert = &amp;((*insert)-&gt;p_next);*insert = p_b;}</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>vlc_css_term_Clean</name><parameter_list>( <parameter><decl><type><name>vlc_css_term_t</name></type> <name>a</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>.</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_STRING</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>a</name><operator>.</operator><name>psz</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_FUNCTION</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>.</operator><name>function</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_css_expression_Delete</name><argument_list>( <argument><expr><name><name>a</name><operator>.</operator><name>function</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_term_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_term_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>depth</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"term: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>.</operator><name>type</name></name> <operator>&gt;=</operator> <name>TYPE_STRING</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%x %s\n"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>a</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_FUNCTION</name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>function</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_css_expression_Debug</name><argument_list>( <argument><expr><name><name>a</name><operator>.</operator><name>function</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%x %f\n"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_css_expression_AddTerm</name><parameter_list>( <parameter><decl><type><name>vlc_css_expr_t</name> <modifier>*</modifier></type><name>p_expr</name></decl></parameter>,

<parameter><decl><type><name>char</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>vlc_css_term_t</name></type> <name>a</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_expr</name><operator>-&gt;</operator><name>i_count</name></name> <operator>&gt;=</operator> <name><name>p_expr</name><operator>-&gt;</operator><name>i_alloc</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_realloc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_expr</name><operator>-&gt;</operator><name>i_alloc</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>p_expr</name><operator>-&gt;</operator><name>i_alloc</name></name> <operator>+</operator> <literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reac</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_expr</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>, <argument><expr><name>i_realloc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>p_expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>reac</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_expr</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name>reac</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_expr</name><operator>-&gt;</operator><name>i_alloc</name></name> <operator>=</operator> <name>i_realloc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_expr</name><operator>-&gt;</operator><name>i_count</name></name> <operator>&gt;=</operator> <name><name>p_expr</name><operator>-&gt;</operator><name>i_alloc</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><name><name>p_expr</name><operator>-&gt;</operator><name>i_count</name></name></expr>]</index></name><operator>.</operator><name>op</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><name><name>p_expr</name><operator>-&gt;</operator><name>i_count</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>term</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_css_expression_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_css_expr_t</name> <modifier>*</modifier></type><name>p_expr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_expr</name></expr> )</condition>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_expr</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_css_term_Clean</name><argument_list>( <argument><expr><name><name>p_expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>term</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_expr</name><operator>-&gt;</operator><name>seq</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_expr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_expression_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_expr_t</name> <modifier>*</modifier></type><name>p_expr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_expr</name></expr> )</condition>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>depth</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"expression: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_expr</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_css_term_Debug</name><argument_list>( <argument><expr><name><name>p_expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>term</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>vlc_css_expr_t</name> <modifier>*</modifier></type> <name>vlc_css_expression_New</name><parameter_list>( <parameter><decl><type><name>vlc_css_term_t</name></type> <name>term</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_css_expr_t</name> <modifier>*</modifier></type><name>p_expr</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_expr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>vlc_css_expression_AddTerm</name><argument_list>( <argument><expr><name>p_expr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>term</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_expr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_expr</name></expr>;</return>

</block_content>}</block></function>

<macro><name>CHAIN_APPEND_IMPL</name><argument_list>(<argument>vlc_css_declarations_Append</argument>, <argument>vlc_css_declaration_t</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>vlc_css_declarations_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_decl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>p_decl</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_decl</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_css_expression_Delete</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_decl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_decl</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_declarations_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_decl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>p_decl</name></expr> )</condition>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>depth</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"declaration: %s\n"</literal></expr></argument>, <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_expression_Debug</name><argument_list>( <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_decl</name> <operator>=</operator> <name><name>p_decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>vlc_css_declaration_t</name> <modifier>*</modifier></type> <name>vlc_css_declaration_New</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_decl</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_decl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_decl</name></expr>;</return>

</block_content>}</block></function>

<macro><name>CHAIN_APPEND_IMPL</name><argument_list>(<argument>vlc_css_selector_Append</argument>, <argument>vlc_css_selector_t</argument>)</argument_list></macro>

<function><type><name>void</name></type>

<name>vlc_css_selector_AddSpecifier</name><parameter_list>( <parameter><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter>, <parameter><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_spec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>p_sel</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <name>p_spec</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>p_spec</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sel</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_spec</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_spec</name> <operator>=</operator> <name><name>p_spec</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_css_selectors_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>p_sel</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sel</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_selectors_Delete</name><argument_list>( <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_selectors_Delete</name><argument_list>( <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>p_matchsel</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sel</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_selectors_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>p_sel</name></expr> )</condition>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>depth</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"selector %c%s:\n"</literal></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>combinator</name></name></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_selectors_Debug</name><argument_list>( <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>p_matchsel</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_selectors_Debug</name><argument_list>( <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sel</name> <operator>=</operator> <name><name>p_sel</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type> <name>vlc_css_selector_New</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sel</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sel</name><operator>-&gt;</operator><name>combinator</name></name> <operator>=</operator> <name>RELATION_SELF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sel</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sel</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_sel</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_css_rules_Delete</name><parameter_list>( <parameter><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>(<expr><name>p_rule</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_rule</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_css_selectors_Delete</name><argument_list>( <argument><expr><name><name>p_rule</name><operator>-&gt;</operator><name>p_selectors</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_declarations_Delete</name><argument_list>( <argument><expr><name><name>p_rule</name><operator>-&gt;</operator><name>p_declarations</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_rule</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_css_rules_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>p_rule</name></expr>)</condition>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>depth</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"rule %d:\n"</literal></expr></argument>, <argument><expr><name>j</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_selectors_Debug</name><argument_list>( <argument><expr><name><name>p_rule</name><operator>-&gt;</operator><name>p_selectors</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_declarations_Debug</name><argument_list>( <argument><expr><name><name>p_rule</name><operator>-&gt;</operator><name>p_declarations</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_rule</name> <operator>=</operator> <name><name>p_rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type> <name>vlc_css_rule_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_rule</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>p_rule</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_css_parser_AddRule</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>,

<parameter><decl><type><name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>p_parser</name><operator>-&gt;</operator><name>rules</name><operator>.</operator><name>pp_append</name></name><operator>)</operator> <operator>=</operator> <name>p_rule</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_parser</name><operator>-&gt;</operator><name>rules</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_css_parser_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_css_rules_Debug</name><argument_list>( <argument><expr><name><name>p_parser</name><operator>-&gt;</operator><name>rules</name><operator>.</operator><name>p_first</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_css_parser_Clean</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_css_rules_Delete</name><argument_list>( <argument><expr><name><name>p_parser</name><operator>-&gt;</operator><name>rules</name><operator>.</operator><name>p_first</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_css_parser_Init</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_css_parser_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_parser</name><operator>-&gt;</operator><name>rules</name><operator>.</operator><name>pp_append</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_parser</name><operator>-&gt;</operator><name>rules</name><operator>.</operator><name>p_first</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_css_parser_ParseBytes</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yyscan_t</name></type> <name>yy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yylex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>YY_BUFFER_STATE</name></type> <name>buf</name> <init>= <expr><call><name>yy_scan_bytes</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>, <argument><expr><name>yy</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><operator>!</operator><call><name>yyparse</name><argument_list>( <argument><expr><name>yy</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yy_delete_buffer</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>yy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yylex_destroy</name><argument_list>( <argument><expr><name>yy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_css_parser_ParseString</name><parameter_list>( <parameter><decl><type><name>vlc_css_parser_t</name> <modifier>*</modifier></type><name>p_parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_css</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yyscan_t</name></type> <name>yy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yylex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>YY_BUFFER_STATE</name></type> <name>buf</name> <init>= <expr><call><name>yy_scan_string</name><argument_list>( <argument><expr><name>psz_css</name></expr></argument>, <argument><expr><name>yy</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><operator>!</operator><call><name>yyparse</name><argument_list>( <argument><expr><name>yy</name></expr></argument>, <argument><expr><name>p_parser</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yy_delete_buffer</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>yy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yylex_destroy</name><argument_list>( <argument><expr><name>yy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CodePointToUTF8</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>ucs4</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>ucs4</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ucs4</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>ucs4</name> <operator>&lt;=</operator> <literal type="number">0x7FF</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC0</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>ucs4</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>ucs4</name> <operator>&lt;=</operator> <literal type="number">0x1FFFFF</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF0</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>ucs4</name> <operator>&lt;=</operator> <literal type="number">0x3FFFFFF</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF8</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">5</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFC</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs4</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ucs4</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">6</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_css_unescape</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>psz</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name>psz</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>r</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>r</name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><literal type="string">"nfr"</literal></expr></argument>, <argument><expr><operator>*</operator><name>r</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>w</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>w</name><operator>++</operator> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>w</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>w</name><operator>++</operator> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>isxdigit</name><argument_list>( <argument><expr><operator>*</operator><name>r</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_start</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>r</name> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>( <argument><expr><operator>*</operator><name>r</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>backup</name> <init>= <expr><operator>*</operator><name>r</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_value</name> <init>= <expr><call><name>strtoul</name><argument_list>( <argument><expr><name>p_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>backup</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>r</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>r</name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>+=</operator> <call><name>CodePointToUTF8</name><argument_list>( <argument><expr><name>i_value</name></expr></argument>, <argument><expr><name>w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>w</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>r</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>vlc_css_unescaped</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ret</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_css_unescape</name><argument_list>( <argument><expr><name>psz_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>vlc_css_unquoted</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">'\"'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz</name><index>[<expr><name>i_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>psz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name>psz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>psz_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>vlc_css_unquotedunescaped</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ret</name> <init>= <expr><call><name>vlc_css_unquoted</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_ret</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_css_unescape</name><argument_list>( <argument><expr><name>psz_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>psz_ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CSS_PARSER_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>css_properties_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_decl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"set %s to "</literal></expr></argument>, <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"term %s "</literal></expr></argument>, <argument><expr><name><name>p_decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>css_selector_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"select its "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_sel</name><operator>-&gt;</operator><name>combinator</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>RELATION_DESCENDENT</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"descendent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RELATION_DIRECTADJACENT</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"adjacent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RELATION_INDIRECTADJACENT</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"indirect adjacent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RELATION_CHILD</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"child"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>RELATION_SELF</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" nodes matching filter: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_sel</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SELECTOR_SIMPLE</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s&gt;\n"</literal></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SELECTOR_PSEUDOCLASS</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">":%s\n"</literal></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SELECTOR_PSEUDOELEMENT</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"::%s\n"</literal></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPECIFIER_ID</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPECIFIER_CLASS</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">".%s\n"</literal></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPECIFIER_ATTRIB</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]\n"</literal></expr></argument>, <argument><expr><name><name>p_sel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>css_rule_Debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>p_rule</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_rule</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"add for rule nodes:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_sel</name> <init>= <expr><name><name>p_rule</name><operator>-&gt;</operator><name>p_selectors</name></name></expr></init></decl>;</init>

<condition><expr><name>p_sel</name></expr>;</condition> <incr><expr><name>p_sel</name> <operator>=</operator> <name><name>p_sel</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>css_selector_Debug</name><argument_list>( <argument><expr><name>p_sel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>vlc_css_selector_t</name> <modifier>*</modifier></type><name>p_spec</name> <init>= <expr><name><name>p_sel</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</init>

<condition><expr><name>p_spec</name></expr>;</condition> <incr><expr><name>p_spec</name> <operator>=</operator> <name><name>p_spec</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>css_selector_Debug</name><argument_list>( <argument><expr><name>p_spec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sel</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"add nodes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>p_decl</name> <init>= <expr><name><name>p_rule</name><operator>-&gt;</operator><name>p_declarations</name></name></expr></init></decl>;</init>

<condition><expr><name>p_decl</name></expr>;</condition> <incr><expr><name>p_decl</name> <operator>=</operator> <name><name>p_decl</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>css_properties_Debug</name><argument_list>( <argument><expr><name>p_decl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
