<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\webvtt\css_test.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"css_parser.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAILOUT</name><parameter_list>(<parameter><type><name>run</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ fprintf(stderr, "failed %s line %d\n", run, __LINE__); goto error; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>test</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>run = (test); fprintf(stderr, "* Running test %s\n", run);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT</name><parameter_list>(<parameter><type><name>foo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(!(foo)) BAILOUT(run)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>css</name> <init>=

<expr><literal type="string">"el1 { float0: 1; }\n"</literal>

<literal type="string">".class1 { hex1: #F0000f; }\n"</literal>

<literal type="string">"#id1 { text2: \"foo bar\"; }\n"</literal>

<literal type="string">":pseudo { text2: \"foobar\"; }\n"</literal>

<literal type="string">"attrib[foo=\"bar\"] { text2: \"foobar\"; }\n"</literal>

<literal type="string">"attrib2[foo] { text2: \"foobar\"; }\n"</literal>

<literal type="string">"attribincludes[foo~=\"bar\"] { text2: \"foobar\"; }\n"</literal>

<literal type="string">"attribdashmatch[foo|=\"bar\"] { text2: \"foobar\"; }\n"</literal>

<literal type="string">"attribstarts[foo^=\"bar\"] { text2: \"foobar\"; }\n"</literal>

<literal type="string">"attribends[foo$=\"bar\"] { text2: \"foobar\"; }\n"</literal>

<literal type="string">"attribcontains[foo*=\"bar\"] { text2: \"foobar\"; }\n"</literal>

<literal type="string">"parent1 child1 { float0: 1; }\n"</literal>

<literal type="string">"el2,el3 { float0: 1; }\n"</literal>

<literal type="string">"el4+el0 { float0: 1; }\n"</literal>

<literal type="string">"el5~el0 { float0: 1; }\n"</literal>

<literal type="string">"el6&gt;el0 { float0: 1; }\n"</literal>

<literal type="string">"values { "</literal>

<literal type="string">" neg: -1;"</literal>

<literal type="string">" ems: 100em;"</literal>

<literal type="string">" exs: 100ex;"</literal>

<literal type="string">" pixels: 100px;"</literal>

<literal type="string">" points: 100pt; "</literal>

<literal type="string">" mm: 100mm;"</literal>

<literal type="string">" percent: 100%;"</literal>

<literal type="string">" ms: 100ms;"</literal>

<literal type="string">" hz: 100Hz;"</literal>

<literal type="string">" degrees: 100deg;"</literal>

<literal type="string">" dimension: 100 -200em 300px;"</literal>

<literal type="string">" string: \"foobar\";"</literal>

<literal type="string">" function: foo(1);"</literal>

<literal type="string">" identifier: foobar;"</literal>

<literal type="string">" hexcolor: #ff00ff;"</literal>

<literal type="string">" unicoderange: U+00-FF;"</literal>

<literal type="string">" uri: url(http://crap/);"</literal>

<literal type="string">"}\n"</literal></expr></init></decl>

;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>run</name> <init>=<expr><literal type="string">"parsing"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_css_parser_t</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_css_parser_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><call><name>vlc_css_parser_ParseBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>css</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>css</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_parser_Debug</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_css_rule_t</name> <modifier>*</modifier></type><name>rule</name> <init>= <expr><name><name>p</name><operator>.</operator><name>rules</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"element selector"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"el1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SELECTOR_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_css_declaration_t</name> <modifier>*</modifier></type><name>decl</name> <init>= <expr><name><name>rule</name><operator>-&gt;</operator><name>p_declarations</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_declarations</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"float0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"class selector"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"class1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SPECIFIER_CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_declarations</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_declarations</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"hex1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_HEXCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>,<argument><expr><literal type="string">"#F0000f"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"id selector"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"#id1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SPECIFIER_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_declarations</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_declarations</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"text2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>,<argument><expr><literal type="string">"foo bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"pseudoclass selector"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"pseudo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SELECTOR_PSEUDOCLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"attribute selector equals"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"attrib"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SELECTOR_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SPECIFIER_ATTRIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <name>MATCH_EQUALS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"attribute selector key only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"attrib2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SELECTOR_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SPECIFIER_ATTRIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"attribute selector ~="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"attribincludes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SELECTOR_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SPECIFIER_ATTRIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <name>MATCH_INCLUDES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"attribute selector |="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"attribdashmatch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SELECTOR_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SPECIFIER_ATTRIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <name>MATCH_DASHMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"attribute selector ^="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"attribstarts"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SELECTOR_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SPECIFIER_ATTRIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <name>MATCH_BEGINSWITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"attribute selector $="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"attribends"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SELECTOR_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SPECIFIER_ATTRIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <name>MATCH_ENDSWITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"attribute selector *="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"attribcontains"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SELECTOR_SIMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SPECIFIER_ATTRIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>match</name></name> <operator>==</operator> <name>MATCH_CONTAINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_matchsel</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"selectors combination parent child"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"parent1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>combinator</name></name> <operator>==</operator> <name>RELATION_DESCENDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"child1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"selectors combination alternative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"el2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>p_next</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"el3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"selectors combination directadjacent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"el4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>combinator</name></name> <operator>==</operator> <name>RELATION_DIRECTADJACENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"el0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"selectors combination directprecedent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"el5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>combinator</name></name> <operator>==</operator> <name>RELATION_INDIRECTADJACENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"el0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"selectors combination child"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"el6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>combinator</name></name> <operator>==</operator> <name>RELATION_CHILD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>specifiers</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"el0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="string">"values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>rule</name> <operator>&amp;&amp;</operator> <name><name>rule</name><operator>-&gt;</operator><name>b_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>p_selectors</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,<argument><expr><literal type="string">"values"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>rule</name><operator>-&gt;</operator><name>p_declarations</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"neg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"ems"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_EMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"exs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_EXS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"pixels"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PIXELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"points"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_POINTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"mm"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_MILLIMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"percent"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PERCENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"ms"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"hz"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_HERTZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"degrees"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_DEGREES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"dimension"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_EMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <operator>-</operator><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PIXELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"foobar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"identifier"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"foobar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"hexcolor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_HEXCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"#ff00ff"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"unicoderange"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_UNICODERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"U+00-FF"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decl</name> <operator>=</operator> <name><name>decl</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name>decl</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>psz_property</name></name></expr></argument>, <argument><expr><literal type="string">"uri"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TYPE_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXPECT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>decl</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>term</name><operator>.</operator><name>psz</name></name></expr></argument>, <argument><expr><literal type="string">"url(http://crap/)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_css_parser_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vlc_css_parser_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
