<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\crystalhd.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/h264_nal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LINUX_USER__</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libcrystalhd/bc_dts_defs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libcrystalhd/bc_dts_types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCRYSTALHD_BC_DRV_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libcrystalhd/bc_drv_if.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_DL_OPENING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libcrystalhd/libcrystalhd_if.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DL_OPENING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:warning>#<cpp:directive>warning</cpp:directive> DLL opening mode</cpp:warning>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>Our ##a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_PSYS</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>p_sys-&gt;Our ##a</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC_FUNC_PSYS</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>a</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_BC_PTS</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( MSFTIME_FROM_VLC_TICK(a) + 1 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_BC_PTS</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>VLC_TICK_FROM_MSFTIME(a - 1)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_VCODEC</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Crystal HD hardware video decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"crystalhd"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>crystal_insert_sps_pps</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>HANDLE</name></type> <name>bcm_handle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_sps_pps_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>i_sps_pps_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_nal_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_DTS_PROC_OUT</name> <modifier>*</modifier></type><name>proc_out</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DL_OPENING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>p_bcm_dll</name></decl>;</decl_stmt>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsCloseDecoder</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsDeviceClose</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsFlushInput</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>Mode</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsStopDecoder</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsGetDriverStatus</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter>,

<parameter><decl><type><name>BC_DTS_STATUS</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsProcInput</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter>, <parameter><decl><type><name>U8</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>,

<parameter><decl><type><name>U32</name></type> <name>ulSizeInBytes</name></decl></parameter>, <parameter><decl><type><name>U64</name></type> <name>timeStamp</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>encrypted</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsProcOutput</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>milliSecWait</name></decl></parameter>,

<parameter><decl><type><name>BC_DTS_PROC_OUT</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsIsEndOfStream</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter>, <parameter><decl><type><name>U8</name><modifier>*</modifier></type> <name>bEOS</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bcm_codec_subtype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bcm_codec_subtype</name> <operator>=</operator> <name>BC_MSUBTYPE_AVC1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bcm_codec_subtype</name> <operator>=</operator> <name>BC_MSUBTYPE_H264</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_VC1</name></expr>:</case>

<expr_stmt><expr><name>i_bcm_codec_subtype</name> <operator>=</operator> <name>BC_MSUBTYPE_VC1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_WMV3</name></expr>:</case>

<expr_stmt><expr><name>i_bcm_codec_subtype</name> <operator>=</operator> <name>BC_MSUBTYPE_WMV3</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_WMVA</name></expr>:</case>

<expr_stmt><expr><name>i_bcm_codec_subtype</name> <operator>=</operator> <name>BC_MSUBTYPE_WMVA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>

<expr_stmt><expr><name>i_bcm_codec_subtype</name> <operator>=</operator> <name>BC_MSUBTYPE_MPEG2VIDEO</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nal_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sps_pps_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sps_pps_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proc_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DL_OPENING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLL_NAME</name></cpp:macro> <cpp:value>"bcmDIL.dll"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHS_NB</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name><name>psz_paths</name><index>[<expr><name>PATHS_NB</name></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>TEXT</name><argument_list>(<argument><expr><name>DLL_NAME</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"C:\\Program Files\\Broadcom\\Broadcom CrystalHD Decoder\\"</literal> <name>DLL_NAME</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"C:\\Program Files (x86)\\Broadcom\\Broadcom CrystalHD Decoder\\"</literal> <name>DLL_NAME</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PATHS_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>p_bcm_dll</name> <init>= <expr><call><name>LoadLibrary</name><argument_list>( <argument><expr><name><name>psz_paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_bcm_dll</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcm_dll</name></name> <operator>=</operator> <name>p_bcm_dll</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_bcm_dll</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Couldn't load the CrystalHD dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_SYM</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>BC_FUNC( a ) = (void *)GetProcAddress( p_sys-&gt;p_bcm_dll, ( #a ) ); if( !BC_FUNC( a ) ) { msg_Err( p_dec, "missing symbol " #a ); return VLC_EGENERIC; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_SYM_PSYS</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>p_sys-&gt;BC_FUNC( a ) = (void *)GetProcAddress( p_sys-&gt;p_bcm_dll, #a ); if( !p_sys-&gt;BC_FUNC( a ) ) { msg_Err( p_dec, "missing symbol " #a ); return VLC_EGENERIC; }</cpp:value></cpp:define>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsDeviceOpen</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>hDevice</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>mode</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>LOAD_SYM</name><argument_list>( <argument><expr><name>DtsDeviceOpen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsCrystalHDVersion</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter>, <parameter><decl><type><name>PBC_INFO_CRYSTAL</name></type> <name>bCrystalInfo</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>LOAD_SYM</name><argument_list>( <argument><expr><name>DtsCrystalHDVersion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsSetColorSpace</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter>, <parameter><decl><type><name>BC_OUTPUT_FORMAT</name></type> <name>Mode422</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>LOAD_SYM</name><argument_list>( <argument><expr><name>DtsSetColorSpace</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsSetInputFormat</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter>, <parameter><decl><type><name>BC_INPUT_FORMAT</name> <modifier>*</modifier></type><name>pInputFormat</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>LOAD_SYM</name><argument_list>( <argument><expr><name>DtsSetInputFormat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsOpenDecoder</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>StreamType</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>LOAD_SYM</name><argument_list>( <argument><expr><name>DtsOpenDecoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsStartDecoder</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>LOAD_SYM</name><argument_list>( <argument><expr><name>DtsStartDecoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>BC_STATUS</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDtsStartCapture</name>)<parameter_list>( <parameter><decl><type><name>HANDLE</name></type> <name>hDevice</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>LOAD_SYM</name><argument_list>( <argument><expr><name>DtsStartCapture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_SYM_PSYS</name><argument_list>( <argument><expr><name>DtsCloseDecoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_SYM_PSYS</name><argument_list>( <argument><expr><name>DtsDeviceClose</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_SYM_PSYS</name><argument_list>( <argument><expr><name>DtsFlushInput</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_SYM_PSYS</name><argument_list>( <argument><expr><name>DtsStopDecoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_SYM_PSYS</name><argument_list>( <argument><expr><name>DtsGetDriverStatus</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_SYM_PSYS</name><argument_list>( <argument><expr><name>DtsProcInput</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_SYM_PSYS</name><argument_list>( <argument><expr><name>DtsProcOutput</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_SYM_PSYS</name><argument_list>( <argument><expr><name>DtsIsEndOfStream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_SYM</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_SYM_PSYS</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CRYSTALHD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Trying to open CrystalHD HW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC</name><argument_list>(<argument><expr><name>DtsDeviceOpen</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>DTS_PLAYBACK_MODE</name> <operator>|</operator> <name>DTS_LOAD_FILE_PLAY_FW</name> <operator>|</operator> <name>DTS_SKIP_TX_CHK_CPB</name><operator>)</operator></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find and open the BCM CrystalHD device"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CRYSTALHD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>BC_INFO_CRYSTAL</name></type> <name>info</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC</name><argument_list>(<argument><expr><name>DtsCrystalHDVersion</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>BC_STS_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Using CrystalHD Driver version: %i.%i.%i, "</literal>

<literal type="string">"Library version: %i.%i.%i, Firmware version: %i.%i.%i"</literal></expr></argument>,

<argument><expr><name><name>info</name><operator>.</operator><name>drvVersion</name><operator>.</operator><name>drvRelease</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>drvVersion</name><operator>.</operator><name>drvMajor</name></name></expr></argument>,

<argument><expr><name><name>info</name><operator>.</operator><name>drvVersion</name><operator>.</operator><name>drvMinor</name></name></expr></argument>,

<argument><expr><name><name>info</name><operator>.</operator><name>dilVersion</name><operator>.</operator><name>dilRelease</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>dilVersion</name><operator>.</operator><name>dilMajor</name></name></expr></argument>,

<argument><expr><name><name>info</name><operator>.</operator><name>dilVersion</name><operator>.</operator><name>dilMinor</name></name></expr></argument>,

<argument><expr><name><name>info</name><operator>.</operator><name>fwVersion</name><operator>.</operator><name>fwRelease</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fwVersion</name><operator>.</operator><name>fwMajor</name></name></expr></argument>,

<argument><expr><name><name>info</name><operator>.</operator><name>fwVersion</name><operator>.</operator><name>fwMinor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>i_bcm_codec_subtype</name> <operator>==</operator> <name>BC_MSUBTYPE_AVC1</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Parsing extra infos for avc1"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>crystal_insert_sps_pps</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Missing extra infos for avc1"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC</name><argument_list>(<argument><expr><name>DtsSetColorSpace</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>, <argument><expr><name>OUTPUT_MODE422_YUY2</name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Couldn't set the color space. Please report this!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>BC_INPUT_FORMAT</name></type> <name>p_in</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BC_INPUT_FORMAT</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in</name><operator>.</operator><name>OptFlags</name></name> <operator>=</operator> <literal type="number">0x51</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_in</name><operator>.</operator><name>mSubtype</name></name> <operator>=</operator> <name>i_bcm_codec_subtype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in</name><operator>.</operator><name>startCodeSz</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nal_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in</name><operator>.</operator><name>pMetaData</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_sps_pps_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in</name><operator>.</operator><name>metaDataSz</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sps_pps_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in</name><operator>.</operator><name>Progressive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC</name><argument_list>(<argument><expr><name>DtsSetInputFormat</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_in</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Couldn't set the color space. Please report this!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC</name><argument_list>(<argument><expr><name>DtsOpenDecoder</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>, <argument><expr><name>BC_STREAM_TYPE_ES</name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Couldn't open the CrystalHD decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC</name><argument_list>(<argument><expr><name>DtsStartDecoder</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Couldn't start the decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC</name><argument_list>(<argument><expr><name>DtsStartCapture</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Couldn't start the capture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_complete</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_YUYV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Opened CrystalHD hardware with success"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error_complete</name>:</label>

<function_decl><type><name>BC_FUNC_PSYS</name></type>(<name>DtsCloseDecoder</name>)<parameter_list>( <parameter><decl><type><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></type></decl></parameter> )</parameter_list>;</function_decl>

<label><name>error</name>:</label>

<function_decl><type><name>BC_FUNC_PSYS</name></type>(<name>DtsDeviceClose</name>)<parameter_list>( <parameter><decl><type><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></type></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC_PSYS</name><argument_list>(<argument><expr><name>DtsFlushInput</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC_PSYS</name><argument_list>(<argument><expr><name>DtsStopDecoder</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC_PSYS</name><argument_list>(<argument><expr><name>DtsCloseDecoder</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC_PSYS</name><argument_list>(<argument><expr><name>DtsDeviceClose</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sps_pps_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CRYSTALHD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"done cleaning up CrystalHD"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__KERNEL__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LINUX_USER__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>BC_STATUS</name></type> <name>ourCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>shnd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BC_DTS_PROC_OUT</name> <modifier>*</modifier></type><name>proc_in</name> <init>= <expr><operator>(</operator><name>BC_DTS_PROC_OUT</name><operator>*</operator><operator>)</operator><name>pOut</name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>BC_STATUS</name></type> <name>ourCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>shnd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>BC_DTS_PROC_OUT</name> <modifier>*</modifier></type><name>proc_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>shnd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_DTS_PROC_OUT</name> <modifier>*</modifier></type><name>proc_out</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>proc_out</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>proc_in</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_INTERLACED_SRC</name><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>proc_in</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_FIELDPAIR</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pic</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>BC_STS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>proc_in</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_INTERLACED_SRC</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>proc_in</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_BOTTOM_FIRST</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc_out</name><operator>-&gt;</operator><name>Ybuff</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>proc_in</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_FIELDPAIR</name><operator>)</operator></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>:

<expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc_out</name><operator>-&gt;</operator><name>YbuffSz</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc_out</name><operator>-&gt;</operator><name>StrideSz</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>proc_in</name><operator>-&gt;</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_INTERLACED_SRC</name><operator>)</operator></expr>?</condition><then>

<expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></then><else>:

<expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc_out</name><operator>-&gt;</operator><name>PoutFlags</name></name> <operator>|=</operator> <name>BC_POUT_FLAGS_STRIDE</name></expr>;</expr_stmt> 

<return>return <expr><name>BC_STS_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_DTS_PROC_OUT</name></type> <name>proc_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BC_DTS_STATUS</name></type> <name>driver_stat</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC_PSYS</name><argument_list>(<argument><expr><name>DtsGetDriverStatus</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>driver_stat</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>BC_STATUS</name></type> <name>status</name> <init>= <expr><call><call><name>BC_FUNC_PSYS</name><argument_list>(<argument><expr><name>DtsProcInput</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><call><name>TO_BC_PTS</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>status</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CRYSTALHD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>driver_stat</name><operator>.</operator><name>ReadyListCount</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">" Input NULL but have pictures %u"</literal></expr></argument>, <argument><expr><name><name>driver_stat</name><operator>.</operator><name>ReadyListCount</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>driver_stat</name><operator>.</operator><name>ReadyListCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>proc_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BC_DTS_PROC_OUT</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc_out</name><operator>.</operator><name>PoutFlags</name></name> <operator>=</operator> <name>BC_POUT_FLAGS_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc_out</name><operator>.</operator><name>AppCallBack</name></name> <operator>=</operator> <name>ourCallback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>proc_out</name><operator>.</operator><name>hnd</name></name> <operator>=</operator> <name>p_dec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>proc_out</name></name> <operator>=</operator> <operator>&amp;</operator><name>proc_out</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>BC_STATUS</name></type> <name>sts</name> <init>= <expr><call><call><name>BC_FUNC_PSYS</name><argument_list>(<argument><expr><name>DtsProcOutput</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_out</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CRYSTALHD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>sts</name> <operator>!=</operator> <name>BC_STS_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"DtsProcOutput returned %i"</literal></expr></argument>, <argument><expr><name>sts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b_eos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pic</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>sts</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>BC_STS_SUCCESS</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>proc_out</name><operator>.</operator><name>PoutFlags</name></name> <operator>&amp;</operator> <name>BC_POUT_FLAGS_PIB_VALID</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid PIB"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_INTERLACED_SRC</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VDEC_FLAG_FIELDPAIR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <ternary><condition><expr><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>timeStamp</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><call><name>FROM_BC_PTS</name><argument_list>(<argument><expr><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>timeStamp</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>VLC_TICK_INVALID</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CRYSTALHD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"TS Output is %"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

<case>case <expr><name>BC_STS_DEC_NOT_OPEN</name></expr>:</case>

<case>case <expr><name>BC_STS_DEC_NOT_STARTED</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Decoder not opened or started"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BC_STS_INV_ARG</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid arguments. Please report"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BC_STS_FMT_CHANGE</name></expr>:</case> 

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>height</name></name> <operator>==</operator> <literal type="number">1088</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">1080</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setAR</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>case a: p_dec-&gt;fmt_out.video.i_sar_num = b; p_dec-&gt;fmt_out.video.i_sar_den = c; break;</cpp:value></cpp:define>

<switch>switch<condition>( <expr><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>aspect_ratio</name></name></expr> )</condition>

<block>{<block_content>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatioSquare</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio12_11</argument>, <argument><literal type="number">12</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio10_11</argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio16_11</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio40_33</argument>, <argument><literal type="number">40</literal></argument>, <argument><literal type="number">33</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio24_11</argument>, <argument><literal type="number">24</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio20_11</argument>, <argument><literal type="number">20</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio32_11</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio80_33</argument>, <argument><literal type="number">80</literal></argument>, <argument><literal type="number">33</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio18_11</argument>, <argument><literal type="number">18</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio15_11</argument>, <argument><literal type="number">15</literal></argument>, <argument><literal type="number">11</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio64_33</argument>, <argument><literal type="number">64</literal></argument>, <argument><literal type="number">33</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio160_99</argument>, <argument><literal type="number">160</literal></argument>, <argument><literal type="number">99</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio4_3</argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">3</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio16_9</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">9</literal></argument> )</argument_list></macro>

<macro><name>setAR</name><argument_list>( <argument>vdecAspectRatio221_1</argument>, <argument><literal type="number">221</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setAR</name></cpp:undef>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Format Change Detected [%i, %i], AR: %i/%i"</literal></expr></argument>,

<argument><expr><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>proc_out</name><operator>.</operator><name>PicInfo</name><operator>.</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BC_STS_NO_DATA</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><call><name>BC_FUNC_PSYS</name><argument_list>(<argument><expr><name>DtsIsEndOfStream</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bcm_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_eos</name></expr></argument> )</argument_list></call>

<operator>==</operator> <name>BC_STS_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name>b_eos</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"End of Stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>BC_STS_TIMEOUT</name></expr>:</case> 

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcOutput timeout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BC_STS_IO_XFR_ERROR</name></expr>:</case>

<case>case <expr><name>BC_STS_IO_USER_ABORT</name></expr>:</case>

<case>case <expr><name>BC_STS_IO_ERROR</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcOutput return mode not implemented. Please report"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unknown return status. Please report %i"</literal></expr></argument>, <argument><expr><name>sts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void crystal_CopyPicture ( picture_t *p_pic, BC_DTS_PROC_OUT* p_out )

{

int i_dst_stride;

uint8_t *p_dst, *p_dst_end;

uint8_t *p_src = p_out-&gt;Ybuff;

p_dst = p_pic-&gt;p[0].p_pixels;

i_dst_stride = p_pic-&gt;p[0].i_pitch;

p_dst_end = p_dst + (i_dst_stride * p_out-&gt;PicInfo.height);

for( ; p_dst &lt; p_dst_end; p_dst += i_dst_stride, p_src += (p_out-&gt;PicInfo.width * 2))

memcpy( p_dst, p_src, p_out-&gt;PicInfo.width * 2); 

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crystal_insert_sps_pps</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>i_buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sps_pps_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sps_pps_buf</name></name> <operator>=</operator> <call><name>h264_avcC_to_AnnexB_NAL</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf_size</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_sps_pps_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nal_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_sps_pps_buf</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function></block_content></block></function>

</unit>
