<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\vpx.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vpx_decoder.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vp8dx.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vpx_image.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vpx_encoder.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vp8cx.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"quality-mode"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pict</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUALITY_MODE_TEXT</name></cpp:macro> <cpp:value>N_("Quality mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUALITY_MODE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Quality setting which will determine max encoding time\n" " - 0: Good quality\n"" - 1: Realtime\n"" - 2: Best quality")</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"vpx"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"WebM video decoder"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">60</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>OpenDecoder</argument>, <argument>CloseDecoder</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_VCODEC</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"vpx"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">60</literal></argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"WebM video encoder"</literal>)</argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>OpenEncoder</argument>, <argument>CloseEncoder</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-vpx-"</cpp:value></cpp:define>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"quality-mode"</literal></argument>, <argument>VPX_DL_GOOD_QUALITY</argument>, <argument>QUALITY_MODE_TEXT</argument>,

<argument>QUALITY_MODE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vpx_err_msg</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>vpx_codec_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>vpx_codec_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>detail</name> <init>= <expr><call><name>vpx_codec_error_detail</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>detail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="string">"no specific information"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VPX_ERR</name><parameter_list>(<parameter><type><name>this</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vpx_err_msg(VLC_OBJECT(this), ctx, msg ": %s (%s)")</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_ctx</name></name></type> <name>ctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vpx_img_fmt</name></name></type> <name>i_chroma_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bitdepth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_needs_hack</name></decl>;</decl_stmt>

}</block> <decl><name><name>chroma_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_I420</name></expr>, <expr><name>VPX_IMG_FMT_I420</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I422</name></expr>, <expr><name>VPX_IMG_FMT_I422</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I444</name></expr>, <expr><name>VPX_IMG_FMT_I444</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I440</name></expr>, <expr><name>VPX_IMG_FMT_I440</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_YV12</name></expr>, <expr><name>VPX_IMG_FMT_YV12</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR</name></expr>, <expr><name>VPX_IMG_FMT_I444</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_GBR_PLANAR_10L</name></expr>, <expr><name>VPX_IMG_FMT_I44416</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><name>VPX_IMG_FMT_I42016</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I422_10L</name></expr>, <expr><name>VPX_IMG_FMT_I42216</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I444_10L</name></expr>, <expr><name>VPX_IMG_FMT_I44416</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I420_12L</name></expr>, <expr><name>VPX_IMG_FMT_I42016</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I422_12L</name></expr>, <expr><name>VPX_IMG_FMT_I42216</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I444_12L</name></expr>, <expr><name>VPX_IMG_FMT_I44416</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I444_16L</name></expr>, <expr><name>VPX_IMG_FMT_I44416</name></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct>struct <name>video_color</name>

<block>{

<decl_stmt><decl><type><name>video_color_primaries_t</name></type> <name>primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_transfer_func_t</name></type> <name>transfer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_color_space_t</name></type> <name>space</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>video_color</name></name></type> <name><name>vpx_color_mapping_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><name>VPX_CS_UNKNOWN</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_PRIMARIES_UNDEF</name></expr>,

<expr><name>TRANSFER_FUNC_UNDEF</name></expr>,

<expr><name>COLOR_SPACE_UNDEF</name></expr> }</block></expr>,

<expr><index>[<expr><name>VPX_CS_BT_601</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_PRIMARIES_BT601_525</name></expr>,

<expr><name>TRANSFER_FUNC_BT709</name></expr>,

<expr><name>COLOR_SPACE_BT601</name></expr> }</block></expr>,

<expr><index>[<expr><name>VPX_CS_BT_709</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_PRIMARIES_BT709</name></expr>,

<expr><name>TRANSFER_FUNC_BT709</name></expr>,

<expr><name>COLOR_SPACE_BT709</name></expr> }</block></expr>,

<expr><index>[<expr><name>VPX_CS_SMPTE_170</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_PRIMARIES_SMTPE_170</name></expr>,

<expr><name>TRANSFER_FUNC_BT709</name></expr>,

<expr><name>COLOR_SPACE_BT601</name></expr> }</block></expr>,

<expr><index>[<expr><name>VPX_CS_SMPTE_240</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_PRIMARIES_SMTPE_240</name></expr>,

<expr><name>TRANSFER_FUNC_SMPTE_240</name></expr>,

<expr><name>COLOR_SPACE_UNDEF</name></expr> }</block></expr>,

<expr><index>[<expr><name>VPX_CS_BT_2020</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_PRIMARIES_BT2020</name></expr>,

<expr><name>TRANSFER_FUNC_BT2020</name></expr>,

<expr><name>COLOR_SPACE_BT2020</name></expr> }</block></expr>,

<expr><index>[<expr><name>VPX_CS_RESERVED</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_PRIMARIES_UNDEF</name></expr>,

<expr><name>TRANSFER_FUNC_UNDEF</name></expr>,

<expr><name>COLOR_SPACE_UNDEF</name></expr> }</block></expr>,

<expr><index>[<expr><name>VPX_CS_SRGB</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_PRIMARIES_SRGB</name></expr>,

<expr><name>TRANSFER_FUNC_SRGB</name></expr>,

<expr><name>COLOR_SPACE_UNDEF</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>FindVlcChroma</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vpx_image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>hack</name> <init>= <expr><operator>(</operator><name><name>img</name><operator>-&gt;</operator><name>fmt</name></name> <operator>&amp;</operator> <name>VPX_IMG_FMT_I444</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>img</name><operator>-&gt;</operator><name>cs</name></name> <operator>==</operator> <name>VPX_CS_SRGB</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>chroma_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma_id</name> <operator>==</operator> <name><name>img</name><operator>-&gt;</operator><name>fmt</name></name> <operator>&amp;&amp;</operator>

<name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitdepth</name> <operator>==</operator> <name><name>img</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>&amp;&amp;</operator>

<name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_needs_hack</name> <operator>==</operator> <name>hack</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pkt_pts</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt_pts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt_pts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pkt_pts</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vpx_codec_err_t</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vpx_codec_decode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>pkt_pts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pkt_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VPX_ERR</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to decode frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>VPX_CODEC_UNSUP_BITSTREAM</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_ECRITICAL</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vpx_image</name></name> <modifier>*</modifier></type><name>img</name> <init>= <expr><call><name>vpx_codec_get_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>img</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pkt_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pkt_pts</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>user_priv</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name> <init>= <expr><operator>*</operator><name>pkt_pts</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pkt_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <call><name>FindVlcChroma</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"Unsupported output colorspace %d"</literal></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>d_w</name></name> <operator>!=</operator> <name><name>v</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>||</operator> <name><name>img</name><operator>-&gt;</operator><name>d_h</name></name> <operator>!=</operator> <name><name>v</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>d_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>d_h</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>||</operator> <operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name> <operator>&amp;&amp;</operator>

<name><name>img</name><operator>-&gt;</operator><name>cs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>img</name><operator>-&gt;</operator><name>cs</name></name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>vpx_color_mapping_table</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name><name>vpx_color_mapping_table</name><index>[<expr><name><name>img</name><operator>-&gt;</operator><name>cs</name></name></expr>]</index></name><operator>.</operator><name>primaries</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name><name>vpx_color_mapping_table</name><index>[<expr><name><name>img</name><operator>-&gt;</operator><name>cs</name></name></expr>]</index></name><operator>.</operator><name>transfer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name><name>vpx_color_mapping_table</name><index>[<expr><name><name>img</name><operator>-&gt;</operator><name>cs</name></name></expr>]</index></name><operator>.</operator><name>space</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>img</name><operator>-&gt;</operator><name>range</name></name> <operator>==</operator> <name>VPX_CR_FULL_RANGE</name></expr> ?</condition><then> <expr><name>COLOR_RANGE_FULL</name></expr> </then><else>: <expr><name>COLOR_RANGE_LIMITED</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>projection_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>pose</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>pose</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decoder_UpdateVideoFormat</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>decoder_NewPicture</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_stride</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_stride</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vpx_codec_iface</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vp_version</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VP8_DECODER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_WEBP</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>

<expr_stmt><expr><name>iface</name> <operator>=</operator> <operator>&amp;</operator><name>vpx_codec_vp8_dx_algo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vp_version</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VP9_DECODER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_VP9</name></expr>:</case>

<expr_stmt><expr><name>iface</name> <operator>=</operator> <operator>&amp;</operator><name>vpx_codec_vp9_dx_algo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vp_version</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_dec_cfg</name></name></type> <name>deccfg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>threads</name> <operator>=</operator> <macro><name>__MIN</name><argument_list>(<argument>vlc_GetCPUCount()</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"VP%d: using libvpx version %s (build options %s)"</literal></expr></argument>,

<argument><expr><name>vp_version</name></expr></argument>, <argument><expr><call><name>vpx_codec_version_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>vpx_codec_build_config</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vpx_codec_dec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deccfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VPX_ERR</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vpx_image</name></name> <modifier>*</modifier></type><name>img</name> <init>= <expr><call><name>vpx_codec_get_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>img</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>user_priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vpx_codec_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_ctx</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>quality</name></decl>;</decl_stmt>

}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vpx_codec_iface</name></name> <modifier>*</modifier></type><name>iface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vp_version</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VP8_ENCODER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>

<expr_stmt><expr><name>iface</name> <operator>=</operator> <operator>&amp;</operator><name>vpx_codec_vp8_cx_algo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vp_version</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VP9_ENCODER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_VP9</name></expr>:</case>

<expr_stmt><expr><name>iface</name> <operator>=</operator> <operator>&amp;</operator><name>vpx_codec_vp9_cx_algo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vp_version</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_enc_cfg</name></name></type> <name>enccfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vpx_codec_enc_config_default</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_threads</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><call><name>vlc_GetCPUCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_w</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enccfg</name><operator>.</operator><name>g_h</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"VP%d: using libvpx version %s (build options %s)"</literal></expr></argument>,

<argument><expr><name>vp_version</name></expr></argument>, <argument><expr><call><name>vpx_codec_version_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>vpx_codec_build_config</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vpx_codec_enc_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enccfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VPX_ERR</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"quality-mode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name>VPX_DL_REALTIME</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name>VPX_DL_BEST_QUALITY</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name>VPX_DL_GOOD_QUALITY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vpx_codec_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_pict</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vpx_image_t</name></type> <name>img</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_w</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_h</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vpx_img_wrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>img</name></expr></argument>, <argument><expr><name>VPX_IMG_FMT_I420</name></expr></argument>, <argument><expr><name>i_w</name></expr></argument>, <argument><expr><name>i_h</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VPX_ERR</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to wrap image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>planes</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>stride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vpx_codec_err_t</name></type> <name>res</name> <init>= <expr><call><name>vpx_codec_encode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>img</name></expr></argument>, <argument><expr><name><name>p_pict</name><operator>-&gt;</operator><name>date</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>VPX_CODEC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VPX_ERR</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Failed to encode frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vpx_img_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vpx_codec_cx_pkt_t</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vpx_codec_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>pkt</name> <operator>=</operator> <call><name>vpx_codec_get_cx_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>VPX_CODEC_CX_FRAME_PKT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>VPX_FRAME_IS_KEY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>frame</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyframe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_out</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vpx_img_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vpx_codec_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VPX_ERR</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to destroy codec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
