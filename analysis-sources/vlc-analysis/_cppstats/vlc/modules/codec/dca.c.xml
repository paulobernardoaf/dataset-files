<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\dca.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dca.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>dca_state_t</name> <modifier>*</modifier></type><name>p_libdca</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_dynrng</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_dontwarn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_chan_table</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_synced</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNRNG_TEXT</name></cpp:macro> <cpp:value>N_("DTS dynamic range compression")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNRNG_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Dynamic range compression makes the loud sounds softer, and the soft " "sounds louder, so you can more easily listen to the stream in a noisy " "environment without disturbing anyone. If you disable the dynamic range ""compression the playback will be more adapted to a movie theater or a " "listening room.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACODEC</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"DCA"</literal></argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"DTS Coherent Acoustics audio decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"dts-dynrng"</literal></argument>, <argument>true</argument>, <argument>DYNRNG_TEXT</argument>, <argument>DYNRNG_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">60</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Interleave</name><parameter_list>( <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>p_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type> <name>p_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_nb_channels</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_chan_table</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_nb_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i</name> <operator>*</operator> <name>i_nb_channels</name> <operator>+</operator> <name><name>pi_chan_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>p_in</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Duplicate</name><parameter_list>( <parameter><decl><type><name>float</name> <modifier>*</modifier></type> <name>p_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type> <name>p_in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_in_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>sample_t</name></type> <name>i_sample_level</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_flags</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_bytes_per_block</name> <init>= <expr><literal type="number">256</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out_buf</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">6</literal> <operator>*</operator> <name>i_bytes_per_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_out_buf</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sample_rate</name></decl>, <decl><type ref="prev"/><name>i_bit_rate</name></decl>, <decl><type ref="prev"/><name>i_frame_length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dca_syncinfo</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_libdca</name></name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_flags</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_sample_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bit_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_frame_length</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"libdca couldn't sync on frame"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dca_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_libdca</name></name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sample_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&amp;</operator> <name>DCA_CHANNEL_MASK</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>DCA_CHANNEL_MASK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_dontwarn</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>,

<argument><expr><literal type="string">"libdca couldn't do the requested downmix 0x%x-&gt;0x%x"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>DCA_CHANNEL_MASK</name></expr></argument>,

<argument><expr><name>i_flags</name> <operator>&amp;</operator> <name>DCA_CHANNEL_MASK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dontwarn</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>dca_blocks_num</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_libdca</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sample_t</name> <modifier>*</modifier></type> <name>p_samples</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dca_block</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_libdca</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"dca_block failed for block %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_samples</name> <operator>=</operator> <call><name>dca_samples</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_libdca</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>DCA_CHANNEL_MASK</name><operator>)</operator> <operator>==</operator> <name>DCA_MONO</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name>

<operator>&amp;</operator> <operator>(</operator><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name><operator>)</operator><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Duplicate</name><argument_list>( <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i_bytes_per_block</name><operator>)</operator></expr></argument>,

<argument><expr><name>p_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>Interleave</name><argument_list>( <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i_bytes_per_block</name><operator>)</operator></expr></argument>,

<argument><expr><name>p_samples</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_channels</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_chan_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <call><name>dca_blocks_num</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_libdca</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<label><name>out</name>:</label>

<if_stmt><if>if <condition>(<expr><name>p_out_buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_out_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>channels_vlc2dca</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>audio_format_t</name> <modifier>*</modifier></type><name>p_audio</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_flags</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <operator>~</operator><name>AOUT_CHAN_LFE</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AOUT_CHAN_CENTER</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>p_audio</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_CENTER</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p_audio</name><operator>-&gt;</operator><name>i_physical_channels</name></name>

<operator>&amp;</operator> <operator>(</operator><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name><operator>)</operator><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name>DCA_MONO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>&amp;</operator> <name>AOUT_CHANMODE_DOLBYSTEREO</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name>DCA_DOLBY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>&amp;</operator> <name>AOUT_CHANMODE_DUALMONO</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name>DCA_CHANNEL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name>DCA_STEREO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name></expr>:</case>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name>DCA_3F</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name></expr>:</case>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name>DCA_2F1R</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARCENTER</name></expr>:</case>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name>DCA_3F1R</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>:</case>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name>DCA_2F2R</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>:</case>

<expr_stmt><expr><name>i_flags</name> <operator>=</operator> <name>DCA_3F2R</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>( <expr><name><name>p_audio</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>DCA_LFE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_flags</name> <operator>=</operator> <name>i_flags</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DTS</name>

<operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dynrng</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dts-dynrng"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dontwarn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_channels</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>channels_vlc2dca</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"unknown sample format!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_libdca</name></name> <operator>=</operator> <call><name>dca_init</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_libdca</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"unable to initialize libdca"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_channels_in</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_CheckChannelReorder</name><argument_list>( <argument><expr><name>pi_channels_in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_chan_table</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dca_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_libdca</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
