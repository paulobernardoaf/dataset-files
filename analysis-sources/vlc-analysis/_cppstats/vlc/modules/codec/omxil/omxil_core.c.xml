<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\omxil\omxil_core.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dll_open</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlopen( name, RTLD_NOW )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dll_close</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlclose(handle)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omxil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omxil_core.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_dll_list</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RPI_OMX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"/opt/vc/lib/libopenmaxil.so"</literal></expr>, 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>

<expr><literal type="string">"libOMX_Core.so"</literal></expr>, 

<expr><literal type="string">"libOmxCore.so"</literal></expr>, 

<expr><literal type="string">"libnvomx.so"</literal></expr>, 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"libomxil-bellagio.so"</literal></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RPI_OMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_extra_dll_list</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"/opt/vc/lib/libbcm_host.so"</literal></expr>, 

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>omx_core_mutex</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>omx_refcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dll_handle</name></decl>;</decl_stmt>

<function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier><name>pf_init</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier><name>pf_deinit</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier><name>pf_get_handle</name>) <parameter_list>(<parameter><decl><type><name>OMX_HANDLETYPE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>OMX_STRING</name></type></decl></parameter>,

<parameter><decl><type><name>OMX_PTR</name></type></decl></parameter>, <parameter><decl><type><name>OMX_CALLBACKTYPE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier><name>pf_free_handle</name>) <parameter_list>(<parameter><decl><type><name>OMX_HANDLETYPE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier><name>pf_component_enum</name>)<parameter_list>(<parameter><decl><type><name>OMX_STRING</name></type></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> (<modifier>*</modifier><name>pf_get_roles_of_component</name>)<parameter_list>(<parameter><decl><type><name>OMX_STRING</name></type></decl></parameter>, <parameter><decl><type><name>OMX_U32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>OMX_U8</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RPI_OMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>extra_dll_handle</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>pf_host_init</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>pf_host_deinit</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseExtraDll</name><parameter_list>()</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pf_host_deinit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pf_host_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CloseExtraDll</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>InitOmxCore</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>omx_core_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>omx_refcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>omx_refcount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>omx_core_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RPI_OMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>extra_dll_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ppsz_extra_dll_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>extra_dll_handle</name> <operator>=</operator> <call><name>dll_open</name><argument_list>( <argument><expr><name><name>ppsz_extra_dll_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>extra_dll_handle</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>extra_dll_handle</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>pf_host_init</name> <operator>=</operator> <call><name>dlsym</name><argument_list>( <argument><expr><name>extra_dll_handle</name></expr></argument>, <argument><expr><literal type="string">"bcm_host_init"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pf_host_deinit</name> <operator>=</operator> <call><name>dlsym</name><argument_list>( <argument><expr><name>extra_dll_handle</name></expr></argument>, <argument><expr><literal type="string">"bcm_host_deinit"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pf_host_init</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pf_host_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ppsz_dll_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>dll_handle</name> <operator>=</operator> <call><name>dll_open</name><argument_list>( <argument><expr><name><name>ppsz_dll_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>dll_handle</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>dll_handle</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseExtraDll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>omx_core_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pf_init</name> <operator>=</operator> <call><name>dlsym</name><argument_list>( <argument><expr><name>dll_handle</name></expr></argument>, <argument><expr><literal type="string">"OMX_Init"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pf_deinit</name> <operator>=</operator> <call><name>dlsym</name><argument_list>( <argument><expr><name>dll_handle</name></expr></argument>, <argument><expr><literal type="string">"OMX_Deinit"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pf_get_handle</name> <operator>=</operator> <call><name>dlsym</name><argument_list>( <argument><expr><name>dll_handle</name></expr></argument>, <argument><expr><literal type="string">"OMX_GetHandle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pf_free_handle</name> <operator>=</operator> <call><name>dlsym</name><argument_list>( <argument><expr><name>dll_handle</name></expr></argument>, <argument><expr><literal type="string">"OMX_FreeHandle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pf_component_enum</name> <operator>=</operator> <call><name>dlsym</name><argument_list>( <argument><expr><name>dll_handle</name></expr></argument>, <argument><expr><literal type="string">"OMX_ComponentNameEnum"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pf_get_roles_of_component</name> <operator>=</operator> <call><name>dlsym</name><argument_list>( <argument><expr><name>dll_handle</name></expr></argument>, <argument><expr><literal type="string">"OMX_GetRolesOfComponent"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pf_init</name> <operator>||</operator> <operator>!</operator><name>pf_deinit</name> <operator>||</operator> <operator>!</operator><name>pf_get_handle</name> <operator>||</operator> <operator>!</operator><name>pf_free_handle</name> <operator>||</operator>

<operator>!</operator><name>pf_component_enum</name> <operator>||</operator> <operator>!</operator><name>pf_get_roles_of_component</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"cannot find OMX_* symbols in `%s' (%s)"</literal></expr></argument>,

<argument><expr><name><name>ppsz_dll_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dll_close</name><argument_list>(<argument><expr><name>dll_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseExtraDll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>omx_core_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name> <init>= <expr><call><name>pf_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"OMX_Init failed (%x: %s)"</literal></expr></argument>, <argument><expr><name>omx_error</name></expr></argument>,

<argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><name>omx_error</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dll_close</name><argument_list>(<argument><expr><name>dll_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseExtraDll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>omx_core_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>omx_refcount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>omx_core_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DeinitOmxCore</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>omx_core_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_refcount</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>omx_refcount</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pf_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dll_close</name><argument_list>( <argument><expr><name>dll_handle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseExtraDll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>omx_core_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_role</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

}</block> <decl><name><name>role_mappings</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RPI_OMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"video_decoder.avc"</literal></expr>, <expr><literal type="string">"OMX.broadcom.video_decode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video_decoder.mpeg2"</literal></expr>, <expr><literal type="string">"OMX.broadcom.video_decode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"iv_renderer"</literal></expr>, <expr><literal type="string">"OMX.broadcom.video_render"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>CreateComponentsList</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_role</name></decl></parameter>,

<parameter><decl><type><name>char</name></type> <name><name>ppsz_components</name><index>[<expr><name>MAX_COMPONENTS_LIST_SIZE</name></expr>]</index><index>[<expr><name>OMX_MAX_STRINGNAME_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_name</name><index>[<expr><name>OMX_MAX_STRINGNAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>roles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_U8</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_roles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>components</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psz_role</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>pf_component_enum</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>OMX_MAX_STRINGNAME_SIZE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"component %s"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>role_mappings</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_role</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_role</name></expr></argument>, <argument><expr><name><name>role_mappings</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_role</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name><name>role_mappings</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<goto>goto <name>found</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>pf_get_roles_of_component</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>roles</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name> <operator>||</operator> <operator>!</operator><name>roles</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ppsz_roles</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>roles</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OMX_U8</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>OMX_MAX_STRINGNAME_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ppsz_roles</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>roles</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppsz_roles</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OMX_U8</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>ppsz_roles</name><index>[<expr><name>roles</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator>

<name>j</name> <operator>*</operator> <name>OMX_MAX_STRINGNAME_SIZE</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>pf_get_roles_of_component</name><argument_list>(<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>roles</name></expr></argument>, <argument><expr><name>ppsz_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>roles</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>roles</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">" - role: %s"</literal></expr></argument>, <argument><expr><name><name>ppsz_roles</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ppsz_roles</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_role</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ppsz_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_found</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<label><name>found</name>:</label>

<if_stmt><if>if<condition>(<expr><name>components</name> <operator>&gt;=</operator> <name>MAX_COMPONENTS_LIST_SIZE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"too many matching components"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ppsz_components</name><index>[<expr><name>components</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,

<argument><expr><name>OMX_MAX_STRINGNAME_SIZE</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"found %i matching components for role %s"</literal></expr></argument>,

<argument><expr><name>components</name></expr></argument>, <argument><expr><name>psz_role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>components</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"- %s"</literal></expr></argument>, <argument><expr><name><name>ppsz_components</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>components</name></expr>;</return>

</block_content>}</block></function>

</unit>
