<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\omxil\omxil_utils.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_MINOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_REV</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_STEP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RPI_OMX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_MINOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_REV</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_STEP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_MINOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_REV</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_VERSION_STEP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_INIT_COMMON</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).nSize = sizeof(a); (a).nVersion.s.nVersionMajor = OMX_VERSION_MAJOR; (a).nVersion.s.nVersionMinor = OMX_VERSION_MINOR; (a).nVersion.s.nRevision = OMX_VERSION_REV; (a).nVersion.s.nStep = OMX_VERSION_STEP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_INIT_STRUCTURE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(&amp;(a), 0, sizeof(a)); OMX_INIT_COMMON(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_ComponentRoleEnum</name><parameter_list>(<parameter><type><name>hComponent</name></type></parameter>, <parameter><type><name>cRole</name></type></parameter>, <parameter><type><name>nIndex</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((OMX_COMPONENTTYPE*)hComponent)-&gt;ComponentRoleEnum ? ((OMX_COMPONENTTYPE*)hComponent)-&gt;ComponentRoleEnum( hComponent, cRole, nIndex ) : OMX_ErrorNotImplemented</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ERROR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(a != OMX_ErrorNone) {msg_Dbg( p_dec, __VA_ARGS__ ); goto error;}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OMX_SKIP64BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>FromOmxTicks</name><parameter_list>(<parameter><decl><type><name>OMX_TICKS</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>value</name><operator>.</operator><name>nHighPart</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>value</name><operator>.</operator><name>nLowPart</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>OMX_TICKS</name></type> <name>ToOmxTicks</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>nLowPart</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>nHighPart</name></name> <operator>=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FromOmxTicks</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ToOmxTicks</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_FIFO_INIT</name><parameter_list>(<parameter><type><name>p_fifo</name></type></parameter>, <parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vlc_mutex_init( &amp;(p_fifo)-&gt;lock ); vlc_cond_init( &amp;(p_fifo)-&gt;wait ); (p_fifo)-&gt;offset = offsetof(OMX_BUFFERHEADERTYPE, next) / sizeof(void *); (p_fifo)-&gt;pp_last = &amp;(p_fifo)-&gt;p_first; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_FIFO_DESTROY</name><parameter_list>(<parameter><type><name>p_fifo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0) { }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_FIFO_PEEK</name><parameter_list>(<parameter><type><name>p_fifo</name></type></parameter>, <parameter><type><name>p_buffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p_buffer = (p_fifo)-&gt;p_first;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_FIFO_GET</name><parameter_list>(<parameter><type><name>p_fifo</name></type></parameter>, <parameter><type><name>p_buffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vlc_mutex_lock( &amp;(p_fifo)-&gt;lock ); while( !(p_fifo)-&gt;p_first ) vlc_cond_wait( &amp;(p_fifo)-&gt;wait, &amp;(p_fifo)-&gt;lock ); p_buffer = (p_fifo)-&gt;p_first; OMX_BUFFERHEADERTYPE **pp_next = (OMX_BUFFERHEADERTYPE **) ((void **)p_buffer + (p_fifo)-&gt;offset); (p_fifo)-&gt;p_first = *pp_next; *pp_next = 0; if( !(p_fifo)-&gt;p_first ) (p_fifo)-&gt;pp_last = &amp;(p_fifo)-&gt;p_first; vlc_mutex_unlock( &amp;(p_fifo)-&gt;lock ); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_FIFO_GET_TIMEOUT</name><parameter_list>(<parameter><type><name>p_fifo</name></type></parameter>, <parameter><type><name>p_buffer</name></type></parameter>, <parameter><type><name>timeout</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vlc_mutex_lock( &amp;(p_fifo)-&gt;lock ); vlc_tick_t end = vlc_tick_now() + timeout; if( !(p_fifo)-&gt;p_first ) vlc_cond_timedwait( &amp;(p_fifo)-&gt;wait, &amp;(p_fifo)-&gt;lock, end ); p_buffer = (p_fifo)-&gt;p_first; if( p_buffer ) { OMX_BUFFERHEADERTYPE **pp_next = (OMX_BUFFERHEADERTYPE **) ((void **)p_buffer + (p_fifo)-&gt;offset); (p_fifo)-&gt;p_first = *pp_next; *pp_next = 0; if( !(p_fifo)-&gt;p_first ) (p_fifo)-&gt;pp_last = &amp;(p_fifo)-&gt;p_first; } vlc_mutex_unlock( &amp;(p_fifo)-&gt;lock ); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_FIFO_PUT</name><parameter_list>(<parameter><type><name>p_fifo</name></type></parameter>, <parameter><type><name>p_buffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vlc_mutex_lock (&amp;(p_fifo)-&gt;lock); OMX_BUFFERHEADERTYPE **pp_next = (OMX_BUFFERHEADERTYPE **) ((void **)p_buffer + (p_fifo)-&gt;offset); *(p_fifo)-&gt;pp_last = p_buffer; (p_fifo)-&gt;pp_last = pp_next; *pp_next = 0; vlc_cond_signal( &amp;(p_fifo)-&gt;wait ); vlc_mutex_unlock( &amp;(p_fifo)-&gt;lock ); } while(0)</cpp:value></cpp:define>

<typedef>typedef <type><union>union <block>{

<decl_stmt><decl><type><name>OMX_PARAM_U32TYPE</name></type> <name>common</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_PCMMODETYPE</name></type> <name>pcm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_MP3TYPE</name></type> <name>mp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_AACPROFILETYPE</name></type> <name>aac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_VORBISTYPE</name></type> <name>vorbis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_WMATYPE</name></type> <name>wma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_RATYPE</name></type> <name>ra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_ADPCMTYPE</name></type> <name>adpcm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_G723TYPE</name></type> <name>g723</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_G726TYPE</name></type> <name>g726</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_G729TYPE</name></type> <name>g729</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_PARAM_AMRTYPE</name></type> <name>amr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_VIDEO_PARAM_H263TYPE</name></type> <name>h263</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_VIDEO_PARAM_MPEG2TYPE</name></type> <name>mpeg2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_VIDEO_PARAM_MPEG4TYPE</name></type> <name>mpeg4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_VIDEO_PARAM_WMVTYPE</name></type> <name>wmv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_VIDEO_PARAM_RVTYPE</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_VIDEO_PARAM_AVCTYPE</name></type> <name>avc</name></decl>;</decl_stmt>

}</block></union></type> <name>OmxFormatParam</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OmxEvent</name>

<block>{

<decl_stmt><decl><type><name>OMX_EVENTTYPE</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>data_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>data_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_PTR</name></type> <name>event_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OmxEvent</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block></struct></type> <name>OmxEvent</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OmxEventQueue</name>

<block>{

<decl_stmt><decl><type><name>OmxEvent</name> <modifier>*</modifier></type><name>p_events</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OmxEvent</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

}</block></struct></type> <name>OmxEventQueue</name>;</typedef>

<function_decl><type><name>void</name></type> <name>InitOmxEventQueue</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DeinitOmxEventQueue</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> <name>PostOmxEvent</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>OMX_EVENTTYPE</name></type> <name>event</name></decl></parameter>,

<parameter><decl><type><name>OMX_U32</name></type> <name>data_1</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>data_2</name></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name></type> <name>event_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> <name>WaitForOmxEvent</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>OMX_EVENTTYPE</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>OMX_U32</name> <modifier>*</modifier></type><name>data_1</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name> <modifier>*</modifier></type><name>data_2</name></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name> <modifier>*</modifier></type><name>event_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> <name>WaitForSpecificOmxEvent</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,

<parameter><decl><type><name>OMX_EVENTTYPE</name></type> <name>specific_event</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name> <modifier>*</modifier></type><name>data_1</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name> <modifier>*</modifier></type><name>data_2</name></decl></parameter>,

<parameter><decl><type><name>OMX_PTR</name> <modifier>*</modifier></type><name>event_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintOmxEvent</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>OMX_EVENTTYPE</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>data_1</name></decl></parameter>,

<parameter><decl><type><name>OMX_U32</name></type> <name>data_2</name></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name></type> <name>event_data</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>ArchitectureSpecificCopyData</name>

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block></struct></type> <name>ArchitectureSpecificCopyData</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ArchitectureSpecificCopyHooks</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_color_format</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_slice_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src_stride</name></decl></parameter>,

<parameter><decl><type><name>ArchitectureSpecificCopyData</name> <modifier>*</modifier></type><name>p_architecture_specific</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ArchitectureSpecificCopyHooksDestroy</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_color_format</name></decl></parameter>,

<parameter><decl><type><name>ArchitectureSpecificCopyData</name> <modifier>*</modifier></type><name>p_architecture_specific</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>CopyOmxPicture</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_color_format</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_slice_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_chroma_div</name></decl></parameter>,

<parameter><decl><type><name>ArchitectureSpecificCopyData</name> <modifier>*</modifier></type><name>p_architecture_specific</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>CopyVlcPicture</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>StateToString</name><parameter_list>(<parameter><decl><type><name>OMX_STATETYPE</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CommandToString</name><parameter_list>(<parameter><decl><type><name>OMX_COMMANDTYPE</name></type> <name>command</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>EventToString</name><parameter_list>(<parameter><decl><type><name>OMX_EVENTTYPE</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ErrorToString</name><parameter_list>(<parameter><decl><type><name>OMX_ERRORTYPE</name></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PrintOmx</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>omx_handle</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>i_port</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>OMXCodec_IsBlacklisted</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_name_len</name></decl></parameter> )</parameter_list>;</function_decl>

<enum>enum <block>{

<decl><name>OMXCODEC_NO_QUIRKS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>OMXCODEC_QUIRKS_NEED_CSD</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,

<decl><name>OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,

<decl><name>OMXCODEC_VIDEO_QUIRKS_SUPPORT_INTERLACED</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,

<decl><name>OMXCODEC_AUDIO_QUIRKS_NEED_CHANNELS</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,

}</block>;</enum>

<function_decl><type><name>int</name></type> <name>OMXCodec_GetQuirks</name><parameter_list>( <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_name_len</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetOmxVideoFormat</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,

<parameter><decl><type><name>OMX_VIDEO_CODINGTYPE</name> <modifier>*</modifier></type><name>pi_omx_codec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetVlcVideoFormat</name><parameter_list>( <parameter><decl><type><name>OMX_VIDEO_CODINGTYPE</name></type> <name>i_omx_codec</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>pi_fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetOmxAudioFormat</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,

<parameter><decl><type><name>OMX_AUDIO_CODINGTYPE</name> <modifier>*</modifier></type><name>pi_omx_codec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>OmxToVlcAudioFormat</name><parameter_list>( <parameter><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>i_omx_codec</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>pi_fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOmxRole</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_enc</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetOmxChromaFormat</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,

<parameter><decl><type><name>OMX_COLOR_FORMATTYPE</name> <modifier>*</modifier></type><name>pi_omx_codec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetVlcChromaFormat</name><parameter_list>( <parameter><decl><type><name>OMX_COLOR_FORMATTYPE</name></type> <name>i_omx_codec</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>pi_fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetVlcChromaSizes</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pitch</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>chroma_pitch_div</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> <name>SetAudioParameters</name><parameter_list>(<parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>handle</name></decl></parameter>,

<parameter><decl><type><name>OmxFormatParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>i_port</name></decl></parameter>, <parameter><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>encoding</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_samplerate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bitrate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bps</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_blocksize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OMX_ERRORTYPE</name></type> <name>GetAudioParameters</name><parameter_list>(<parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>handle</name></decl></parameter>,

<parameter><decl><type><name>OmxFormatParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>i_port</name></decl></parameter>, <parameter><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>encoding</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_samplerate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_bitrate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_bps</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_blocksize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>GetAudioParamSize</name><parameter_list>(<parameter><decl><type><name>OMX_INDEXTYPE</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_QCOM_COLOR_FormatYVU420SemiPlanar</name></cpp:macro> <cpp:value>0x7FA30C00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_TI_COLOR_FormatYUV420PackedSemiPlanar</name></cpp:macro> <cpp:value>0x7F000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QOMX_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka</name></cpp:macro> <cpp:value>0x7FA30C03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar32m</name></cpp:macro> <cpp:value>0x7FA30C04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_IndexVendorSetYUV420pMode</name></cpp:macro> <cpp:value>0x7f000003</cpp:value></cpp:define>

<function_decl><type><name>size_t</name></type> <name>convert_omx_to_profile_idc</name><parameter_list>(<parameter><decl><type><name>OMX_VIDEO_AVCPROFILETYPE</name></type> <name>profile_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>convert_omx_to_level_idc</name><parameter_list>(<parameter><decl><type><name>OMX_VIDEO_AVCLEVELTYPE</name></type> <name>level_type</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
