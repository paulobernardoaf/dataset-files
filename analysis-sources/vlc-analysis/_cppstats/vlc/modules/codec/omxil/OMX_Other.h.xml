<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\omxil\OMX_Other.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OMX_Core.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>OMX_OTHER_FORMATTYPE</name> <block>{

<decl><name>OMX_OTHER_FormatTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>OMX_OTHER_FormatPower</name></decl>, 

<decl><name>OMX_OTHER_FormatStats</name></decl>, 

<decl><name>OMX_OTHER_FormatBinary</name></decl>, 

<decl><name>OMX_OTHER_FormatVendorReserved</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>, 

<decl><name>OMX_OTHER_FormatKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 

<decl><name>OMX_OTHER_FormatVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 

<decl><name>OMX_OTHER_FormatMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>

}</block></enum></type> <name>OMX_OTHER_FORMATTYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>OMX_TIME_SEEKMODETYPE</name> <block>{

<decl><name>OMX_TIME_SeekModeFast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>OMX_TIME_SeekModeAccurate</name></decl>, 

<decl><name>OMX_TIME_SeekModeKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 

<decl><name>OMX_TIME_SeekModeVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 

<decl><name>OMX_TIME_SeekModeMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>

}</block></enum></type> <name>OMX_TIME_SEEKMODETYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_TIME_CONFIG_SEEKMODETYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TIME_SEEKMODETYPE</name></type> <name>eType</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_TIME_CONFIG_SEEKMODETYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_TIME_CONFIG_TIMESTAMPTYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nPortIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>nTimestamp</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_TIME_CONFIG_TIMESTAMPTYPE</name>;</typedef> 

<typedef>typedef <type><enum>enum <name>OMX_TIME_UPDATETYPE</name> <block>{

<decl><name>OMX_TIME_UpdateRequestFulfillment</name></decl>, 

<decl><name>OMX_TIME_UpdateScaleChanged</name></decl>, 

<decl><name>OMX_TIME_UpdateClockStateChanged</name></decl>, 

<decl><name>OMX_TIME_UpdateKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 

<decl><name>OMX_TIME_UpdateVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 

<decl><name>OMX_TIME_UpdateMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>

}</block></enum></type> <name>OMX_TIME_UPDATETYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>OMX_TIME_REFCLOCKTYPE</name> <block>{

<decl><name>OMX_TIME_RefClockNone</name></decl>, 

<decl><name>OMX_TIME_RefClockAudio</name></decl>, 

<decl><name>OMX_TIME_RefClockVideo</name></decl>, 

<decl><name>OMX_TIME_RefClockKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 

<decl><name>OMX_TIME_RefClockVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 

<decl><name>OMX_TIME_RefClockMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>

}</block></enum></type> <name>OMX_TIME_REFCLOCKTYPE</name>;</typedef>

<typedef>typedef <type><enum>enum <name>OMX_TIME_CLOCKSTATE</name> <block>{

<decl><name>OMX_TIME_ClockStateRunning</name></decl>, 

<decl><name>OMX_TIME_ClockStateWaitingForStartTime</name></decl>, 

<decl><name>OMX_TIME_ClockStateStopped</name></decl>, 

<decl><name>OMX_TIME_ClockStateKhronosExtensions</name> <init>= <expr><literal type="number">0x6F000000</literal></expr></init></decl>, 

<decl><name>OMX_TIME_ClockStateVendorStartUnused</name> <init>= <expr><literal type="number">0x7F000000</literal></expr></init></decl>, 

<decl><name>OMX_TIME_ClockStateMax</name> <init>= <expr><literal type="number">0x7FFFFFFF</literal></expr></init></decl>

}</block></enum></type> <name>OMX_TIME_CLOCKSTATE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_TIME_CONFIG_MEDIATIMEREQUESTTYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nPortIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_PTR</name></type> <name>pClientPrivate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>nMediaTimestamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>nOffset</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_TIME_CONFIG_MEDIATIMEREQUESTTYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_TIME_MEDIATIMETYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nClientPrivate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TIME_UPDATETYPE</name></type> <name>eUpdateType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>nMediaTimestamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>nOffset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>nWallTimeAtMediaTime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_S32</name></type> <name>xScale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TIME_CLOCKSTATE</name></type> <name>eState</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_TIME_MEDIATIMETYPE</name>;</typedef> 

<typedef>typedef <type><struct>struct <name>OMX_TIME_CONFIG_SCALETYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_S32</name></type> <name>xScale</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_TIME_CONFIG_SCALETYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_CLOCKPORT0</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_CLOCKPORT1</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_CLOCKPORT2</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_CLOCKPORT3</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_CLOCKPORT4</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_CLOCKPORT5</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_CLOCKPORT6</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMX_CLOCKPORT7</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>OMX_TIME_CONFIG_CLOCKSTATETYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TIME_CLOCKSTATE</name></type> <name>eState</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>nStartTime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TICKS</name></type> <name>nOffset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nWaitMask</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_TIME_CONFIG_CLOCKSTATETYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_TIME_CONFIG_ACTIVEREFCLOCKTYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_TIME_REFCLOCKTYPE</name></type> <name>eClock</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_TIME_CONFIG_ACTIVEREFCLOCKTYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_OTHER_CONFIG_POWERTYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_BOOL</name></type> <name>bEnablePM</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_OTHER_CONFIG_POWERTYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_OTHER_CONFIG_STATSTYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_OTHER_CONFIG_STATSTYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_OTHER_PORTDEFINITIONTYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_OTHER_FORMATTYPE</name></type> <name>eFormat</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_OTHER_PORTDEFINITIONTYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OMX_OTHER_PARAM_PORTFORMATTYPE</name> <block>{

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_VERSIONTYPE</name></type> <name>nVersion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nPortIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_U32</name></type> <name>nIndex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>OMX_OTHER_FORMATTYPE</name></type> <name>eFormat</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OMX_OTHER_PARAM_PORTFORMATTYPE</name>;</typedef> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
