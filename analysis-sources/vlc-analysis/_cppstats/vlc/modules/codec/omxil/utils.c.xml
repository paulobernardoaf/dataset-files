<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\omxil\utils.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"omxil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qcom.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/copy.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/h264_nal.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>InitOmxEventQueue</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>pp_last_event</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>p_events</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DeinitOmxEventQueue</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>queue</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>OMX_ERRORTYPE</name></type> <name>PostOmxEvent</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>OMX_EVENTTYPE</name></type> <name>event</name></decl></parameter>,

<parameter><decl><type><name>OMX_U32</name></type> <name>data_1</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>data_2</name></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name></type> <name>event_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OmxEvent</name> <modifier>*</modifier></type><name>p_event</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_event</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OmxEvent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_event</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>OMX_ErrorInsufficientResources</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>data_1</name></name> <operator>=</operator> <name>data_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>data_2</name></name> <operator>=</operator> <name>data_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>event_data</name></name> <operator>=</operator> <name>event_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_event</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>queue</name><operator>-&gt;</operator><name>pp_last_event</name></name> <operator>=</operator> <name>p_event</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>pp_last_event</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_event</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OMX_ErrorNone</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OMX_ERRORTYPE</name></type> <name>WaitForOmxEvent</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>OMX_EVENTTYPE</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>OMX_U32</name> <modifier>*</modifier></type><name>data_1</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name> <modifier>*</modifier></type><name>data_2</name></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name> <modifier>*</modifier></type><name>event_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OmxEvent</name> <modifier>*</modifier></type><name>p_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>p_event</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>p_events</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><name>p_event</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>p_events</name></name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>queue</name><operator>-&gt;</operator><name>p_events</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>pp_last_event</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>p_events</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_event</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>event</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>event</name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>event</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>data_1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>data_1</name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>data_1</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>data_2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>data_2</name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>data_2</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>event_data</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>event_data</name> <operator>=</operator> <name><name>p_event</name><operator>-&gt;</operator><name>event_data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OMX_ErrorNone</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OMX_ErrorTimeout</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OMX_ERRORTYPE</name></type> <name>WaitForSpecificOmxEvent</name><parameter_list>(<parameter><decl><type><name>OmxEventQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,

<parameter><decl><type><name>OMX_EVENTTYPE</name></type> <name>specific_event</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name> <modifier>*</modifier></type><name>data_1</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name> <modifier>*</modifier></type><name>data_2</name></decl></parameter>,

<parameter><decl><type><name>OMX_PTR</name> <modifier>*</modifier></type><name>event_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_EVENTTYPE</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>before</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>WaitForOmxEvent</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>data_1</name></expr></argument>, <argument><expr><name>data_2</name></expr></argument>, <argument><expr><name>event_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>event</name> <operator>==</operator> <name>specific_event</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>before</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>OMX_ErrorTimeout</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>OMX_ErrorNone</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>PrintOmxEvent</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>OMX_EVENTTYPE</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>data_1</name></decl></parameter>,

<parameter><decl><type><name>OMX_U32</name></type> <name>data_2</name></decl></parameter>, <parameter><decl><type><name>OMX_PTR</name></type> <name>event_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>event</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>OMX_EventCmdComplete</name></expr>:</case>

<switch>switch <condition>(<expr><operator>(</operator><name>OMX_STATETYPE</name><operator>)</operator><name>data_1</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>OMX_CommandStateSet</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"OmxEventHandler (%s, %s, %s)"</literal></expr></argument>, <argument><expr><call><name>EventToString</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>CommandToString</name><argument_list>(<argument><expr><name>data_1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>StateToString</name><argument_list>(<argument><expr><name>data_2</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"OmxEventHandler (%s, %s, %u)"</literal></expr></argument>, <argument><expr><call><name>EventToString</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>CommandToString</name><argument_list>(<argument><expr><name>data_1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>data_2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>OMX_EventError</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"OmxEventHandler (%s, %s, %u, %s)"</literal></expr></argument>, <argument><expr><call><name>EventToString</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ErrorToString</name><argument_list>(<argument><expr><operator>(</operator><name>OMX_ERRORTYPE</name><operator>)</operator><name>data_1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>data_2</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>event_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"OmxEventHandler (%s, %u, %u)"</literal></expr></argument>, <argument><expr><call><name>EventToString</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>data_1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>data_2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ArchitectureSpecificCopyHooks</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_color_format</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_slice_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_src_stride</name></decl></parameter>,

<parameter><decl><type><name>ArchitectureSpecificCopyData</name> <modifier>*</modifier></type><name>p_architecture_specific</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i_slice_height</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>i_color_format</name> <operator>==</operator> <name>OMX_COLOR_FormatYUV420SemiPlanar</name> <operator>&amp;&amp;</operator> <call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>copy_cache_t</name> <modifier>*</modifier></type><name>p_surface_cache</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>copy_cache_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_surface_cache</name> <operator>||</operator> <call><name>CopyInitCache</name><argument_list>( <argument><expr><name>p_surface_cache</name></expr></argument>, <argument><expr><name>i_src_stride</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_surface_cache</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_architecture_specific</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>p_surface_cache</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_YV12</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_src_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_architecture_specific</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ArchitectureSpecificCopyHooksDestroy</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_color_format</name></decl></parameter>,

<parameter><decl><type><name>ArchitectureSpecificCopyData</name> <modifier>*</modifier></type><name>p_architecture_specific</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_architecture_specific</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>i_color_format</name> <operator>==</operator> <name>OMX_COLOR_FormatYUV420SemiPlanar</name> <operator>&amp;&amp;</operator> <call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>copy_cache_t</name> <modifier>*</modifier></type><name>p_surface_cache</name> <init>= <expr><operator>(</operator><name>copy_cache_t</name><operator>*</operator><operator>)</operator><name><name>p_architecture_specific</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CopyCleanCache</name><argument_list>(<argument><expr><name>p_surface_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_architecture_specific</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_architecture_specific</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CopyOmxPicture</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_color_format</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_slice_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_chroma_div</name></decl></parameter>,

<parameter><decl><type><name>ArchitectureSpecificCopyData</name> <modifier>*</modifier></type><name>p_architecture_specific</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_dst_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name></decl>, <decl><type ref="prev"/><name>i_width</name></decl>, <decl><type ref="prev"/><name>i_line</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_color_format</name> <operator>==</operator> <name>QOMX_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>qcom_convert</name><argument_list>(<argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>i_color_format</name> <operator>==</operator> <name>OMX_COLOR_FormatYUV420SemiPlanar</name>

<operator>&amp;&amp;</operator> <call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>p_architecture_specific</name> <operator>&amp;&amp;</operator> <name><name>p_architecture_specific</name><operator>-&gt;</operator><name>data</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>copy_cache_t</name> <modifier>*</modifier></type><name>p_surface_cache</name> <init>= <expr><operator>(</operator><name>copy_cache_t</name><operator>*</operator><operator>)</operator><name><name>p_architecture_specific</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>ppi_src_pointers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>p_src</name></expr>, <expr><name>p_src</name> <operator>+</operator> <name>i_src_stride</name> <operator>*</operator> <name>i_slice_height</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>pi_src_strides</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>i_src_stride</name></expr>, <expr><name>i_src_stride</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Copy420_SP_to_P</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>ppi_src_pointers</name></expr></argument>, <argument><expr><name>pi_src_strides</name></expr></argument>,

<argument><expr><name>i_slice_height</name></expr></argument>, <argument><expr><name>p_surface_cache</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_SwapUV</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_architecture_specific</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i_plane</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_src_stride</name> <operator>/=</operator> <name>i_chroma_div</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dst_stride</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>i_dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_plane</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_slice_height</name> <operator>&gt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_src_stride</name> <operator>*</operator> <operator>(</operator><name>i_slice_height</name> <operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name>i_plane</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_slice_height</name><operator>/</operator><literal type="number">2</literal> <operator>&gt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_src_stride</name> <operator>*</operator> <operator>(</operator><name>i_slice_height</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CopyVlcPicture</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OMX_BUFFERHEADERTYPE</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_src_stride</name></decl>, <decl><type ref="prev"/><name>i_dst_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name></decl>, <decl><type ref="prev"/><name>i_width</name></decl>, <decl><type ref="prev"/><name>i_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_src</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_dst_stride</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>i_frame_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>+</operator> <name><name>p_header</name><operator>-&gt;</operator><name>nOffset</name></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i_plane</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_dst_stride</name> <operator>/=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>i_frame_stride_chroma_div</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_src</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_src_stride</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>i_dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>OMXCodec_IsBlacklisted</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_name_len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>blacklisted_prefix</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"OMX.PV."</literal></expr>,

<expr><literal type="string">"OMX.google."</literal></expr>,

<expr><literal type="string">"OMX.ARICENT."</literal></expr>,

<expr><literal type="string">"OMX.SEC.WMV.Decoder"</literal></expr>,

<expr><literal type="string">"OMX.SEC.MP3.Decoder"</literal></expr>,

<expr><literal type="string">"OMX.MTK.VIDEO.DECODER.VC1"</literal></expr>,

<expr><literal type="string">"OMX.SEC.vp8.dec"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>blacklisted_suffix</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">".secure"</literal></expr>,

<expr><literal type="string">".sw.dec"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_bl_prefix</name> <init>= <expr><name>blacklisted_prefix</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>pp_bl_prefix</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>pp_bl_prefix</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>p_name</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_bl_prefix</name></expr></argument>,

<argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>pp_bl_prefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i_name_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_bl_suffix</name> <init>= <expr><name>blacklisted_suffix</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>pp_bl_suffix</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>pp_bl_suffix</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_suffix_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><operator>*</operator><name>pp_bl_suffix</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_name_len</name> <operator>&gt;</operator> <name>i_suffix_len</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>p_name</name> <operator>+</operator> <name>i_name_len</name> <operator>-</operator> <name>i_suffix_len</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_bl_suffix</name></expr></argument>,

<argument><expr><name>i_suffix_len</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>str2quirks</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_quirks</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>int</name></type> <name>OMXCodec_GetQuirks</name><parameter_list>( <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_name_len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>str2quirks</name></name></type> <name><name>quirks_prefix</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"OMX.MTK.VIDEO.DECODER.MPEG4"</literal></expr>, <expr><name>OMXCODEC_QUIRKS_NEED_CSD</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OMX.Marvell"</literal></expr>, <expr><name>OMXCODEC_AUDIO_QUIRKS_NEED_CHANNELS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OMX.SEC.avc.dec"</literal></expr>, <expr><name>OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OMX.SEC.avcdec"</literal></expr>, <expr><name>OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OMX.SEC.MPEG4.Decoder"</literal></expr>, <expr><name>OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OMX.SEC.mpeg4.dec"</literal></expr>, <expr><name>OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OMX.SEC.vc1.dec"</literal></expr>, <expr><name>OMXCODEC_VIDEO_QUIRKS_IGNORE_PADDING</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OMX.amlogic.avc.decoder.awesome"</literal></expr>, <expr><name>OMXCODEC_VIDEO_QUIRKS_SUPPORT_INTERLACED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>str2quirks</name></name></type> <name><name>quirks_suffix</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_quirks</name> <init>= <expr><name>OMXCODEC_NO_QUIRKS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_codec</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_VC1</name></expr>:</case>

<expr_stmt><expr><name>i_quirks</name> <operator>|=</operator> <name>OMXCODEC_QUIRKS_NEED_CSD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><name>i_cat</name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_codec</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_VORBIS</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>

<expr_stmt><expr><name>i_quirks</name> <operator>|=</operator> <name>OMXCODEC_QUIRKS_NEED_CSD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>str2quirks</name></name> <modifier>*</modifier><name>p_q_prefix</name></type> <init>= <expr><name>quirks_prefix</name></expr></init></decl>;</init> <condition><expr><name><name>p_q_prefix</name><operator>-&gt;</operator><name>psz_name</name></name></expr>;</condition>

<incr><expr><name>p_q_prefix</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_prefix</name> <init>= <expr><name><name>p_q_prefix</name><operator>-&gt;</operator><name>psz_name</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>p_name</name></expr></argument>, <argument><expr><name>psz_prefix</name></expr></argument>,

<argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_prefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i_name_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_quirks</name> <operator>|=</operator> <name><name>p_q_prefix</name><operator>-&gt;</operator><name>i_quirks</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>str2quirks</name></name> <modifier>*</modifier><name>p_q_suffix</name></type> <init>= <expr><name>quirks_suffix</name></expr></init></decl>;</init> <condition><expr><name><name>p_q_suffix</name><operator>-&gt;</operator><name>psz_name</name></name></expr>;</condition>

<incr><expr><name>p_q_suffix</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_suffix</name> <init>= <expr><name><name>p_q_suffix</name><operator>-&gt;</operator><name>psz_name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_suffix_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_suffix</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_name_len</name> <operator>&gt;</operator> <name>i_suffix_len</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>p_name</name> <operator>+</operator> <name>i_name_len</name> <operator>-</operator> <name>i_suffix_len</name></expr></argument>, <argument><expr><name>psz_suffix</name></expr></argument>,

<argument><expr><name>i_suffix_len</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_quirks</name> <operator>|=</operator> <name><name>p_q_suffix</name><operator>-&gt;</operator><name>i_quirks</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_quirks</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>StateToString</name><parameter_list>(<parameter><decl><type><name>OMX_STATETYPE</name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case state: return #state</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_StateInvalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_StateLoaded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_StateIdle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_StateExecuting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_StatePause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_StateWaitForResources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_StateKhronosExtensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_StateVendorStartUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE</name></cpp:undef>

<case>case <expr><name>OMX_StateMax</name></expr>:</case> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"OMX_State unknown"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CommandToString</name><parameter_list>(<parameter><decl><type><name>OMX_COMMANDTYPE</name></type> <name>command</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>command</name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>command</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case command: return #command</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_CommandStateSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_CommandFlush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_CommandPortDisable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_CommandPortEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_CommandMarkBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_CommandKhronosExtensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_CommandVendorStartUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE</name></cpp:undef>

<case>case <expr><name>OMX_CommandMax</name></expr>:</case> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"OMX_Command unknown"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>EventToString</name><parameter_list>(<parameter><decl><type><name>OMX_EVENTTYPE</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>event</name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>event</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case event: return #event</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventCmdComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventPortSettingsChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventBufferFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventResourcesAcquired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventComponentResumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventDynamicResourcesAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventPortFormatDetected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventKhronosExtensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_EventVendorStartUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE</name></cpp:undef>

<case>case <expr><name>OMX_EventMax</name></expr>:</case> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"OMX_Event unknown"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ErrorToString</name><parameter_list>(<parameter><decl><type><name>OMX_ERRORTYPE</name></type> <name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>error</name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>error</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case error: return #error</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorInsufficientResources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorUndefined</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorInvalidComponentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorComponentNotFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorInvalidComponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorBadParameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorNotImplemented</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorUnderflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorHardware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorInvalidState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorStreamCorrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorPortsNotCompatible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorResourcesLost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorNoMore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorVersionMismatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorNotReady</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorSameState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorResourcesPreempted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorPortUnresponsiveDuringAllocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorPortUnresponsiveDuringDeallocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorPortUnresponsiveDuringStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorIncorrectStateTransition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorIncorrectStateOperation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorUnsupportedSetting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorUnsupportedIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorBadPortIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorPortUnpopulated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorComponentSuspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorDynamicResourcesUnavailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorMbErrorsInFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorFormatNotDetected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorContentPipeOpenFailed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorContentPipeCreationFailed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorSeperateTablesUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorTunnelingUnsupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorKhronosExtensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>OMX_ErrorVendorStartUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE</name></cpp:undef>

<case>case <expr><name>OMX_ErrorMax</name></expr>:</case> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"OMX_Error unknown"</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_VIDEO_CODINGTYPE</name></type> <name>i_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_role</name></decl>;</decl_stmt>

}</block> <decl><name><name>video_format_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_MPGV</name></expr>, <expr><name>OMX_VIDEO_CodingMPEG2</name></expr>, <expr><literal type="string">"video_decoder.mpeg2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MP4V</name></expr>, <expr><name>OMX_VIDEO_CodingMPEG4</name></expr>, <expr><literal type="string">"video_decoder.mpeg4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_HEVC</name></expr>, <expr><name>OMX_VIDEO_CodingAutoDetect</name></expr>, <expr><literal type="string">"video_decoder.hevc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_H264</name></expr>, <expr><name>OMX_VIDEO_CodingAVC</name></expr>, <expr><literal type="string">"video_decoder.avc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_H263</name></expr>, <expr><name>OMX_VIDEO_CodingH263</name></expr>, <expr><literal type="string">"video_decoder.h263"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV1</name></expr>, <expr><name>OMX_VIDEO_CodingWMV</name></expr>, <expr><literal type="string">"video_decoder.wmv1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV2</name></expr>, <expr><name>OMX_VIDEO_CodingWMV</name></expr>, <expr><literal type="string">"video_decoder.wmv2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV3</name></expr>, <expr><name>OMX_VIDEO_CodingWMV</name></expr>, <expr><literal type="string">"video_decoder.wmv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_VC1</name></expr>, <expr><name>OMX_VIDEO_CodingWMV</name></expr>, <expr><literal type="string">"video_decoder.wmv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MJPG</name></expr>, <expr><name>OMX_VIDEO_CodingMJPEG</name></expr>, <expr><literal type="string">"video_decoder.jpeg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MJPG</name></expr>, <expr><name>OMX_VIDEO_CodingMJPEG</name></expr>, <expr><literal type="string">"video_decoder.mjpeg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RV10</name></expr>, <expr><name>OMX_VIDEO_CodingRV</name></expr>, <expr><literal type="string">"video_decoder.rv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RV20</name></expr>, <expr><name>OMX_VIDEO_CodingRV</name></expr>, <expr><literal type="string">"video_decoder.rv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RV30</name></expr>, <expr><name>OMX_VIDEO_CodingRV</name></expr>, <expr><literal type="string">"video_decoder.rv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RV40</name></expr>, <expr><name>OMX_VIDEO_CodingRV</name></expr>, <expr><literal type="string">"video_decoder.rv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_VP8</name></expr>, <expr><name>OMX_VIDEO_CodingAutoDetect</name></expr>, <expr><literal type="string">"video_decoder.vp8"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_VP9</name></expr>, <expr><name>OMX_VIDEO_CodingAutoDetect</name></expr>, <expr><literal type="string">"video_decoder.vp9"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>i_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_role</name></decl>;</decl_stmt>

}</block> <decl><name><name>audio_format_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_AMR_NB</name></expr>, <expr><name>OMX_AUDIO_CodingAMR</name></expr>, <expr><literal type="string">"audio_decoder.amrnb"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_AMR_WB</name></expr>, <expr><name>OMX_AUDIO_CodingAMR</name></expr>, <expr><literal type="string">"audio_decoder.amrwb"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><name>OMX_AUDIO_CodingAAC</name></expr>, <expr><literal type="string">"audio_decoder.aac"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>OMX_AUDIO_CodingPCM</name></expr>, <expr><literal type="string">"audio_decoder.pcm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MP3</name></expr>, <expr><name>OMX_AUDIO_CodingMP3</name></expr>, <expr><literal type="string">"audio_decoder.mp3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_VIDEO_CODINGTYPE</name></type> <name>i_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_role</name></decl>;</decl_stmt>

}</block> <decl><name><name>video_enc_format_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_MPGV</name></expr>, <expr><name>OMX_VIDEO_CodingMPEG2</name></expr>, <expr><literal type="string">"video_encoder.mpeg2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MP4V</name></expr>, <expr><name>OMX_VIDEO_CodingMPEG4</name></expr>, <expr><literal type="string">"video_encoder.mpeg4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_H264</name></expr>, <expr><name>OMX_VIDEO_CodingAVC</name></expr>, <expr><literal type="string">"video_encoder.avc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_H263</name></expr>, <expr><name>OMX_VIDEO_CodingH263</name></expr>, <expr><literal type="string">"video_encoder.h263"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV1</name></expr>, <expr><name>OMX_VIDEO_CodingWMV</name></expr>, <expr><literal type="string">"video_encoder.wmv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV2</name></expr>, <expr><name>OMX_VIDEO_CodingWMV</name></expr>, <expr><literal type="string">"video_encoder.wmv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV3</name></expr>, <expr><name>OMX_VIDEO_CodingWMV</name></expr>, <expr><literal type="string">"video_encoder.wmv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MJPG</name></expr>, <expr><name>OMX_VIDEO_CodingMJPEG</name></expr>, <expr><literal type="string">"video_encoder.jpeg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RV10</name></expr>, <expr><name>OMX_VIDEO_CodingRV</name></expr>, <expr><literal type="string">"video_encoder.rv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RV20</name></expr>, <expr><name>OMX_VIDEO_CodingRV</name></expr>, <expr><literal type="string">"video_encoder.rv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RV30</name></expr>, <expr><name>OMX_VIDEO_CodingRV</name></expr>, <expr><literal type="string">"video_encoder.rv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RV40</name></expr>, <expr><name>OMX_VIDEO_CodingRV</name></expr>, <expr><literal type="string">"video_encoder.rv"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>i_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_role</name></decl>;</decl_stmt>

}</block> <decl><name><name>audio_enc_format_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_AMR_NB</name></expr>, <expr><name>OMX_AUDIO_CodingAMR</name></expr>, <expr><literal type="string">"audio_encoder.amrnb"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_AMR_WB</name></expr>, <expr><name>OMX_AUDIO_CodingAMR</name></expr>, <expr><literal type="string">"audio_encoder.amrwb"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><name>OMX_AUDIO_CodingAAC</name></expr>, <expr><literal type="string">"audio_encoder.aac"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>OMX_AUDIO_CodingPCM</name></expr>, <expr><literal type="string">"audio_encoder.pcm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_COLOR_FORMATTYPE</name></type> <name>i_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size_mul</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_line_mul</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_line_chroma_div</name></decl>;</decl_stmt>

}</block> <decl><name><name>chroma_format_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_I420</name></expr>, <expr><name>OMX_COLOR_FormatYUV420Planar</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_I420</name></expr>, <expr><name>OMX_COLOR_FormatYUV420PackedPlanar</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_NV12</name></expr>, <expr><name>OMX_COLOR_FormatYUV420SemiPlanar</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_NV21</name></expr>, <expr><name>OMX_QCOM_COLOR_FormatYVU420SemiPlanar</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_NV12</name></expr>, <expr><name>OMX_TI_COLOR_FormatYUV420PackedSemiPlanar</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_NV12</name></expr>, <expr><name>QOMX_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_NV12</name></expr>, <expr><name>OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar32m</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_YUYV</name></expr>, <expr><name>OMX_COLOR_FormatYCbYCr</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_YVYU</name></expr>, <expr><name>OMX_COLOR_FormatYCrYCb</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_UYVY</name></expr>, <expr><name>OMX_COLOR_FormatCbYCrY</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_VYUY</name></expr>, <expr><name>OMX_COLOR_FormatCrYCbY</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>GetOmxVideoFormat</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,

<parameter><decl><type><name>OMX_VIDEO_CODINGTYPE</name> <modifier>*</modifier></type><name>pi_omx_codec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_fourcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>pi_omx_codec</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_omx_codec</name> <operator>=</operator> <name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ppsz_name</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetVlcVideoFormat</name><parameter_list>( <parameter><decl><type><name>OMX_VIDEO_CODINGTYPE</name></type> <name>i_omx_codec</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>pi_fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>==</operator> <name>i_omx_codec</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>pi_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_fourcc</name> <operator>=</operator> <name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ppsz_name</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>,

<argument><expr><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOmxVideoRole</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_fourcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name><name>video_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_role</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOmxVideoEncRole</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_fourcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>video_enc_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>video_enc_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name><name>video_enc_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_role</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetOmxAudioFormat</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,

<parameter><decl><type><name>OMX_AUDIO_CODINGTYPE</name> <modifier>*</modifier></type><name>pi_omx_codec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_fourcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>pi_omx_codec</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_omx_codec</name> <operator>=</operator> <name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ppsz_name</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>OmxToVlcAudioFormat</name><parameter_list>( <parameter><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>i_omx_codec</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>pi_fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>==</operator> <name>i_omx_codec</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>pi_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_fourcc</name> <operator>=</operator> <name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ppsz_name</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>,

<argument><expr><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOmxAudioRole</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_fourcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name><name>audio_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_role</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOmxAudioEncRole</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_fourcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>audio_enc_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>audio_enc_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name><name>audio_enc_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_role</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetOmxRole</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_enc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>b_enc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name></expr> ?</condition><then>

<expr><call><name>GetOmxVideoEncRole</name><argument_list>( <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><call><name>GetOmxAudioEncRole</name><argument_list>( <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name></expr> ?</condition><then>

<expr><call><name>GetOmxVideoRole</name><argument_list>( <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><call><name>GetOmxAudioRole</name><argument_list>( <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetOmxChromaFormat</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,

<parameter><decl><type><name>OMX_COLOR_FORMATTYPE</name> <modifier>*</modifier></type><name>pi_omx_codec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_fourcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>pi_omx_codec</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_omx_codec</name> <operator>=</operator> <name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ppsz_name</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetVlcChromaFormat</name><parameter_list>( <parameter><decl><type><name>OMX_COLOR_FORMATTYPE</name></type> <name>i_omx_codec</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>pi_fourcc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>==</operator> <name>i_omx_codec</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>pi_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_fourcc</name> <operator>=</operator> <name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ppsz_name</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppsz_name</name> <operator>=</operator> <call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>,

<argument><expr><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetVlcChromaSizes</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pitch</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>chroma_pitch_div</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_fourcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xF</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size_mul</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pitch</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pitch</name> <operator>=</operator> <name>width</name> <operator>*</operator> <name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_line_mul</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>chroma_pitch_div</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>chroma_pitch_div</name> <operator>=</operator> <name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_line_chroma_div</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>chroma_format_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_INDEXTYPE</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block> <decl><name><name>audio_encoding_param</name><index>[]</index></name> <init>=

<expr><block>{ <expr><block>{ <expr><name>OMX_AUDIO_CodingPCM</name></expr>, <expr><name>OMX_IndexParamAudioPcm</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_PCMMODETYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingADPCM</name></expr>, <expr><name>OMX_IndexParamAudioAdpcm</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_ADPCMTYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingAMR</name></expr>, <expr><name>OMX_IndexParamAudioAmr</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_AMRTYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingG711</name></expr>, <expr><name>OMX_IndexParamAudioPcm</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_PCMMODETYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingG723</name></expr>, <expr><name>OMX_IndexParamAudioG723</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_G723TYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingG726</name></expr>, <expr><name>OMX_IndexParamAudioG726</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_G726TYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingG729</name></expr>, <expr><name>OMX_IndexParamAudioG729</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_G729TYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingAAC</name></expr>, <expr><name>OMX_IndexParamAudioAac</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_AACPROFILETYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingMP3</name></expr>, <expr><name>OMX_IndexParamAudioMp3</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_MP3TYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingSBC</name></expr>, <expr><name>OMX_IndexParamAudioSbc</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_SBCTYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingVORBIS</name></expr>, <expr><name>OMX_IndexParamAudioVorbis</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_VORBISTYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingWMA</name></expr>, <expr><name>OMX_IndexParamAudioWma</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_WMATYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingRA</name></expr>, <expr><name>OMX_IndexParamAudioRa</name></expr>,

<expr>sizeof<operator>(</operator><name>OMX_AUDIO_PARAM_RATYPE</name><operator>)</operator></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_AUDIO_CodingUnused</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>OMX_INDEXTYPE</name></type> <name>GetAudioParamFormatIndex</name><parameter_list>(<parameter><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>encoding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>audio_encoding_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>encoding</name> <operator>!=</operator> <name>OMX_AUDIO_CodingUnused</name> <operator>&amp;&amp;</operator>

<name><name>audio_encoding_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>encoding</name> <operator>!=</operator> <name>encoding</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><name><name>audio_encoding_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>GetAudioParamSize</name><parameter_list>(<parameter><decl><type><name>OMX_INDEXTYPE</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>audio_encoding_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>encoding</name> <operator>!=</operator> <name>OMX_AUDIO_CodingUnused</name> <operator>&amp;&amp;</operator>

<name><name>audio_encoding_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>!=</operator> <name>index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><name><name>audio_encoding_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OMX_ERRORTYPE</name></type> <name>SetAudioParameters</name><parameter_list>(<parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>handle</name></decl></parameter>,

<parameter><decl><type><name>OmxFormatParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>i_port</name></decl></parameter>, <parameter><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>encoding</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_samplerate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bitrate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bps</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_blocksize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OMX_INDEXTYPE</name></type> <name>index</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>encoding</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>OMX_AUDIO_CodingPCM</name></expr>:</case>

<case>case <expr><name>OMX_AUDIO_CodingG711</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>nSamplingRate</name></name> <operator>=</operator> <name>i_samplerate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>eNumData</name></name> <operator>=</operator> <name>OMX_NumericalDataSigned</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>ePCMMode</name></name> <operator>=</operator> <name>OMX_AUDIO_PCMModeLinear</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>eEndian</name></name> <operator>=</operator> <name>OMX_EndianLittle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bInterleaved</name></name> <operator>=</operator> <name>OMX_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>nBitPerSample</name></name> <operator>=</operator> <name>i_bps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>eChannelMapping</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>OMX_AUDIO_ChannelCF</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>eChannelMapping</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>OMX_AUDIO_ChannelLF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>eChannelMapping</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>OMX_AUDIO_ChannelRF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingADPCM</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>adpcm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>adpcm</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>adpcm</name><operator>.</operator><name>nSampleRate</name></name> <operator>=</operator> <name>i_samplerate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>adpcm</name><operator>.</operator><name>nBitsPerSample</name></name> <operator>=</operator> <name>i_bps</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingAMR</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>amr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>amr</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>amr</name><operator>.</operator><name>nBitRate</name></name> <operator>=</operator> <name>i_bitrate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_AMR_WB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>amr</name><operator>.</operator><name>eAMRBandMode</name></name> <operator>=</operator> <name>OMX_AUDIO_AMRBandModeWB0</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>amr</name><operator>.</operator><name>eAMRBandMode</name></name> <operator>=</operator> <name>OMX_AUDIO_AMRBandModeNB0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>amr</name><operator>.</operator><name>eAMRDTXMode</name></name> <operator>=</operator> <name>OMX_AUDIO_AMRDTXModeOff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>amr</name><operator>.</operator><name>eAMRFrameFormat</name></name> <operator>=</operator> <name>OMX_AUDIO_AMRFrameFormatFSF</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingG723</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>g723</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g723</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g723</name><operator>.</operator><name>bDTX</name></name> <operator>=</operator> <name>OMX_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g723</name><operator>.</operator><name>eBitRate</name></name> <operator>=</operator> <name>OMX_AUDIO_G723ModeUnused</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g723</name><operator>.</operator><name>bHiPassFilter</name></name> <operator>=</operator> <name>OMX_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g723</name><operator>.</operator><name>bPostFilter</name></name> <operator>=</operator> <name>OMX_TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingG726</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>g726</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g726</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g726</name><operator>.</operator><name>eG726Mode</name></name> <operator>=</operator> <name>OMX_AUDIO_G726ModeUnused</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingG729</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>g729</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g729</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g729</name><operator>.</operator><name>bDTX</name></name> <operator>=</operator> <name>OMX_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>g729</name><operator>.</operator><name>eBitType</name></name> <operator>=</operator> <name>OMX_AUDIO_G729</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingAAC</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nSampleRate</name></name> <operator>=</operator> <name>i_samplerate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nBitRate</name></name> <operator>=</operator> <name>i_bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nAudioBandWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nFrameLength</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nAACtools</name></name> <operator>=</operator> <name>OMX_AUDIO_AACToolAll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nAACERtools</name></name> <operator>=</operator> <name>OMX_AUDIO_AACERAll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>eAACProfile</name></name> <operator>=</operator> <name>OMX_AUDIO_AACObjectLC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>eAACStreamFormat</name></name> <operator>=</operator> <name>OMX_AUDIO_AACStreamFormatMP4FF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>eChannelMode</name></name> <operator>=</operator> <ternary><condition><expr><name>i_channels</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then>

<expr><name>OMX_AUDIO_ChannelModeStereo</name></expr> </then><else>: <expr><name>OMX_AUDIO_ChannelModeMono</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingMP3</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>mp3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>mp3</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>mp3</name><operator>.</operator><name>nSampleRate</name></name> <operator>=</operator> <name>i_samplerate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>mp3</name><operator>.</operator><name>nBitRate</name></name> <operator>=</operator> <name>i_bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>mp3</name><operator>.</operator><name>eChannelMode</name></name> <operator>=</operator> <ternary><condition><expr><name>i_channels</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then>

<expr><name>OMX_AUDIO_ChannelModeStereo</name></expr> </then><else>: <expr><name>OMX_AUDIO_ChannelModeMono</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>mp3</name><operator>.</operator><name>eFormat</name></name> <operator>=</operator> <name>OMX_AUDIO_MP3StreamFormatMP1Layer3</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingWMA</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>wma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nBitRate</name></name> <operator>=</operator> <name>i_bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>eFormat</name></name> <operator>=</operator> <name>OMX_AUDIO_WMAFormatUnused</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>eProfile</name></name> <operator>=</operator> <name>OMX_AUDIO_WMAProfileUnused</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nSamplingRate</name></name> <operator>=</operator> <name>i_samplerate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nBlockAlign</name></name> <operator>=</operator> <name>i_blocksize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nEncodeOptions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nSuperBlockAlign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingRA</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>ra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nSamplingRate</name></name> <operator>=</operator> <name>i_samplerate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nBitsPerFrame</name></name> <operator>=</operator> <name>i_bps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nSamplePerFrame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nCouplingQuantBits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nCouplingStartRegion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nNumRegions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>eFormat</name></name> <operator>=</operator> <name>OMX_AUDIO_RAFormatUnused</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingVORBIS</name></expr>:</case>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nChannels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nBitRate</name></name> <operator>=</operator> <name>i_bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nMinBitRate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nMaxBitRate</name></name> <operator>=</operator> <name>i_bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nSampleRate</name></name> <operator>=</operator> <name>i_samplerate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nAudioBandWidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nQuality</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>bManaged</name></name> <operator>=</operator> <name>OMX_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>bDownmix</name></name> <operator>=</operator> <name>OMX_FALSE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>OMX_ErrorBadParameter</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name>i_port</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>GetAudioParamFormatIndex</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>OMX_SetParameter</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>OMX_ERRORTYPE</name></type> <name>GetAudioParameters</name><parameter_list>(<parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>handle</name></decl></parameter>,

<parameter><decl><type><name>OmxFormatParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>i_port</name></decl></parameter>, <parameter><decl><type><name>OMX_AUDIO_CODINGTYPE</name></type> <name>encoding</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_samplerate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_bitrate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_bps</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_blocksize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_samplerate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_bitrate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_blocksize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_INDEXTYPE</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OMX_INIT_COMMON</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name>i_port</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>GetAudioParamFormatIndex</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>index</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>OMX_ErrorNotImplemented</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>nSize</name></name> <operator>=</operator> <call><name>GetAudioParamSize</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>omx_error</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>encoding</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>OMX_AUDIO_CodingPCM</name></expr>:</case>

<case>case <expr><name>OMX_AUDIO_CodingG711</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samplerate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>nSamplingRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bps</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>nBitPerSample</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingADPCM</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>adpcm</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samplerate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>adpcm</name><operator>.</operator><name>nSampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bps</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>adpcm</name><operator>.</operator><name>nBitsPerSample</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingAMR</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>amr</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitrate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>amr</name><operator>.</operator><name>nBitRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samplerate</name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingG723</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>g723</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingG726</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>g726</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingG729</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>g729</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingAAC</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samplerate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nSampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitrate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>nBitRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>-&gt;</operator><name>aac</name><operator>.</operator><name>eChannelMode</name></name> <operator>==</operator> <name>OMX_AUDIO_ChannelModeStereo</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingMP3</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mp3</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samplerate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mp3</name><operator>.</operator><name>nSampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitrate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mp3</name><operator>.</operator><name>nBitRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>-&gt;</operator><name>mp3</name><operator>.</operator><name>eChannelMode</name></name> <operator>==</operator> <name>OMX_AUDIO_ChannelModeStereo</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingVORBIS</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitrate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nBitRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samplerate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>vorbis</name><operator>.</operator><name>nSampleRate</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingWMA</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitrate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nBitRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samplerate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nSamplingRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_blocksize</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>wma</name><operator>.</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_AUDIO_CodingRA</name></expr>:</case>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samplerate</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nSamplingRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bps</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>ra</name><operator>.</operator><name>nBitsPerFrame</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>OMX_ErrorBadParameter</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>pi_channels</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pi_samplerate</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_samplerate</name> <operator>=</operator> <name>i_samplerate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pi_bitrate</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_bitrate</name> <operator>=</operator> <name>i_bitrate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pi_bps</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_bps</name> <operator>=</operator> <name>i_bps</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pi_blocksize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_blocksize</name> <operator>=</operator> <name>i_blocksize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OMX_ErrorNone</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>PrintOmx</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>OMX_HANDLETYPE</name></type> <name>omx_handle</name></decl></parameter>, <parameter><decl><type><name>OMX_U32</name></type> <name>i_port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OMX_PARAM_PORTDEFINITIONTYPE</name></type> <name>definition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_PORT_PARAM_TYPE</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_ERRORTYPE</name></type> <name>omx_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>definition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_IndexParamAudioInit</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i_port</name> <operator>==</operator> <name>OMX_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"found %i %s ports"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>param</name><operator>.</operator><name>nPorts</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"audio"</literal></expr> </then><else>: <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"image"</literal></expr> </then><else>: <expr><literal type="string">"video"</literal></expr></else></ternary></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>param</name><operator>.</operator><name>nPorts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_samplerate</name></decl>, <decl><type ref="prev"/><name>i_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bitspersample</name></decl>, <decl><type ref="prev"/><name>i_blockalign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OmxFormatParam</name></type> <name>format_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OMX_CONFIG_RECTTYPE</name></type> <name>crop_rect</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_port</name> <operator>!=</operator> <name>OMX_ALL</name> <operator>&amp;&amp;</operator> <name>i_port</name> <operator>!=</operator> <name><name>param</name><operator>.</operator><name>nStartPortNumber</name></name> <operator>+</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>definition</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>nStartPortNumber</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_IndexParamPortDefinition</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>definition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>OMX_PARAM_U32TYPE</name></type> <name>u32param</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>u32param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u32param</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>nStartPortNumber</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetParameter</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_IndexParamNumAvailableStreams</name></expr></argument>,

<argument><expr><operator>(</operator><name>OMX_PTR</name><operator>)</operator><operator>&amp;</operator><name>u32param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"-&gt; %s %i (%i streams) (%i:%i:%i buffers) (%i,%i) %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>definition</name><operator>.</operator><name>eDir</name></name> <operator>==</operator> <name>OMX_DirOutput</name></expr> ?</condition><then> <expr><literal type="string">"output"</literal></expr> </then><else>: <expr><literal type="string">"input"</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>nPortIndex</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>u32param</name><operator>.</operator><name>nU32</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>nBufferCountActual</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>nBufferCountMin</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>nBufferSize</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>bBuffersContiguous</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>nBufferAlignment</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>definition</name><operator>.</operator><name>bEnabled</name></name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>definition</name><operator>.</operator><name>eDomain</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>OMX_PortDomainVideo</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eCompressionFormat</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetVlcVideoFormat</name><argument_list>( <argument><expr><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eCompressionFormat</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_fourcc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetVlcChromaFormat</name><argument_list>( <argument><expr><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_fourcc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>OMX_INIT_STRUCTURE</name><argument_list>(<argument><expr><name>crop_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crop_rect</name><operator>.</operator><name>nPortIndex</name></name> <operator>=</operator> <name><name>definition</name><operator>.</operator><name>nPortIndex</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>omx_error</name> <operator>=</operator> <call><name>OMX_GetConfig</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><name>OMX_IndexConfigCommonOutputCrop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crop_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>omx_error</name> <operator>!=</operator> <name>OMX_ErrorNone</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>crop_rect</name><operator>.</operator><name>nLeft</name></name> <operator>=</operator> <name><name>crop_rect</name><operator>.</operator><name>nTop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crop_rect</name><operator>.</operator><name>nWidth</name></name> <operator>=</operator> <name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crop_rect</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">" -&gt; video %s %ix%i@%.2f (%i,%i) (%i,%i) (%i,%i,%i,%i)"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameWidth</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nFrameHeight</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>xFramerate</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eCompressionFormat</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>eColorFormat</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nStride</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>video</name><operator>.</operator><name>nSliceHeight</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crop_rect</name><operator>.</operator><name>nLeft</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crop_rect</name><operator>.</operator><name>nTop</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crop_rect</name><operator>.</operator><name>nWidth</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>crop_rect</name><operator>.</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OMX_PortDomainAudio</name></expr>:</case>

<expr_stmt><expr><call><name>OmxToVlcAudioFormat</name><argument_list>( <argument><expr><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_fourcc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetAudioParameters</name><argument_list>(<argument><expr><name>omx_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format_param</name></expr></argument>,

<argument><expr><name><name>definition</name><operator>.</operator><name>nPortIndex</name></name></expr></argument>,

<argument><expr><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_samplerate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bitrate</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_bitspersample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_blockalign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">" -&gt; audio %s (%i) %i,%i,%i,%i,%i"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>definition</name><operator>.</operator><name>format</name><operator>.</operator><name>audio</name><operator>.</operator><name>eEncoding</name></name></expr></argument>,

<argument><expr><name>i_channels</name></expr></argument>, <argument><expr><name>i_samplerate</name></expr></argument>, <argument><expr><name>i_bitrate</name></expr></argument>, <argument><expr><name>i_bitspersample</name></expr></argument>,

<argument><expr><name>i_blockalign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>OMX_VIDEO_AVCPROFILETYPE</name></type> <name>omx_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>profile_idc</name></decl>;</decl_stmt>

}</block> <decl><name><name>omx_to_profile_idc</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>OMX_VIDEO_AVCProfileBaseline</name></expr>, <expr><name>PROFILE_H264_BASELINE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCProfileMain</name></expr>, <expr><name>PROFILE_H264_MAIN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCProfileExtended</name></expr>, <expr><name>PROFILE_H264_EXTENDED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCProfileHigh</name></expr>, <expr><name>PROFILE_H264_HIGH</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCProfileHigh10</name></expr>, <expr><name>PROFILE_H264_HIGH_10</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCProfileHigh422</name></expr>, <expr><name>PROFILE_H264_HIGH_422</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCProfileHigh444</name></expr>, <expr><name>PROFILE_H264_HIGH_444</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>size_t</name></type> <name>convert_omx_to_profile_idc</name><parameter_list>(<parameter><decl><type><name>OMX_VIDEO_AVCPROFILETYPE</name></type> <name>profile_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>array_length</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>omx_to_profile_idc</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>omx_to_profile_idc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>array_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>omx_to_profile_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>omx_profile</name> <operator>==</operator> <name>profile_type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>omx_to_profile_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>profile_idc</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>OMX_VIDEO_AVCLEVELTYPE</name></type> <name>omx_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>level_idc</name></decl>;</decl_stmt>

}</block> <decl><name><name>omx_to_level_idc</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel1</name></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel1b</name></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel11</name></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel12</name></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel13</name></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel2</name></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel21</name></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel22</name></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel3</name></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel31</name></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel32</name></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel4</name></expr>, <expr><literal type="number">40</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel41</name></expr>, <expr><literal type="number">41</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel42</name></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel5</name></expr>, <expr><literal type="number">50</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OMX_VIDEO_AVCLevel51</name></expr>, <expr><literal type="number">51</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>size_t</name></type> <name>convert_omx_to_level_idc</name><parameter_list>(<parameter><decl><type><name>OMX_VIDEO_AVCLEVELTYPE</name></type> <name>level_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>array_length</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>omx_to_level_idc</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>omx_to_level_idc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>array_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>omx_to_level_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>omx_level</name> <operator>==</operator> <name>level_type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>omx_to_level_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level_idc</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
