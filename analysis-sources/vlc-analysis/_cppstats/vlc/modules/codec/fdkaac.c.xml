<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\fdkaac.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fdk-aac/aacenc_lib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-fdkaac-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_TEXT</name></cpp:macro> <cpp:value>N_("Encoder Profile")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Encoder Algorithm to use.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIDEBAND_TEXT</name></cpp:macro> <cpp:value>N_("Enable spectral band replication")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIDEBAND_LONGTEXT</name></cpp:macro> <cpp:value>N_("This is an optional feature only for the AAC-ELD profile.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBR_QUALITY_TEXT</name></cpp:macro> <cpp:value>N_("VBR Quality")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBR_QUALITY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Quality of the VBR Encoding (0=cbr, 1-5 constant vbr quality, 5 is the best).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFTERBURNER_TEXT</name></cpp:macro> <cpp:value>N_("Enable afterburner library")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFTERBURNER_LONGTEXT</name></cpp:macro> <cpp:value>N_("This library will produce higher quality audio at the expense of additional CPU usage (default is enabled).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNALING_TEXT</name></cpp:macro> <cpp:value>N_("Signaling mode of the extension AOT")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNALING_LONGTEXT</name></cpp:macro> <cpp:value>N_("1 is explicit for SBR and implicit for PS (default), 2 is explicit hierarchical.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH_ORDER_MPEG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH_ORDER_WAV</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH_ORDER_WG4</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_AAC_LC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_AAC_HE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_AAC_HE_v2</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_AAC_LD</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_AAC_ELD</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNALING_COMPATIBLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNALING_HIERARCHICAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDKENC_VER_AT_LEAST</name><parameter_list>(<parameter><type><name>vl0</name></type></parameter>, <parameter><type><name>vl1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(defined(AACENCODER_LIB_VL0) &amp;&amp; ((AACENCODER_LIB_VL0 &gt; vl0) || (AACENCODER_LIB_VL0 == vl0 &amp;&amp; AACENCODER_LIB_VL1 &gt;= vl1)))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_aot_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>PROFILE_AAC_LC</name></expr>, <expr><name>PROFILE_AAC_HE</name></expr>, <expr><name>PROFILE_AAC_HE_v2</name></expr>, <expr><name>PROFILE_AAC_LD</name></expr>, <expr><name>PROFILE_AAC_ELD</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_aot_descriptions</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"AAC-LC"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"HE-AAC"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"HE-AAC-v2"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"AAC-LD"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"AAC-ELD"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"FDKAAC"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"FDK-AAC Audio encoder"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">150</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>OpenEncoder</argument>, <argument>CloseEncoder</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"fdkaac"</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACODEC</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>ENC_CFG_PREFIX <literal type="string">"profile"</literal></argument>, <argument>PROFILE_AAC_LC</argument>, <argument>AOT_TEXT</argument>,

<argument>AOT_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_list</name><argument_list>(<argument><expr><name>pi_aot_values</name></expr></argument>, <argument><expr><name>ppsz_aot_descriptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_bool</name><argument_list>(<argument>ENC_CFG_PREFIX <literal type="string">"sbr"</literal></argument>, <argument>false</argument>, <argument>SIDEBAND_TEXT</argument>,

<argument>SIDEBAND_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>ENC_CFG_PREFIX <literal type="string">"vbr"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>VBR_QUALITY_TEXT</argument>,

<argument>VBR_QUALITY_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument>ENC_CFG_PREFIX <literal type="string">"afterburner"</literal></argument>, <argument>true</argument>, <argument>AFTERBURNER_TEXT</argument>,

<argument>AFTERBURNER_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>ENC_CFG_PREFIX <literal type="string">"signaling"</literal></argument>, <argument>SIGNALING_COMPATIBLE</argument>, <argument>SIGNALING_TEXT</argument>,

<argument>SIGNALING_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name> <argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeAudio</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_enc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"sbr"</literal></expr>, <expr><literal type="string">"vbr"</literal></expr>, <expr><literal type="string">"afterburner"</literal></expr>, <expr><literal type="string">"signaling"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>double</name></type> <name>d_compression_ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_encoderdelay</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_maxoutputsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>HANDLE_AACENCODER</name></type> <name>handle</name></decl>;</decl_stmt>

}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fdkaac_error</name><parameter_list>(<parameter><decl><type><name>AACENC_ERROR</name></type> <name>erraac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>erraac</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AACENC_OK</name></expr>:</case> <return>return <expr><literal type="string">"No error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INVALID_HANDLE</name></expr>:</case> <return>return <expr><literal type="string">"Invalid handle"</literal></expr>;</return>

<case>case <expr><name>AACENC_MEMORY_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"Memory allocation error"</literal></expr>;</return>

<case>case <expr><name>AACENC_UNSUPPORTED_PARAMETER</name></expr>:</case> <return>return <expr><literal type="string">"Unsupported parameter"</literal></expr>;</return>

<case>case <expr><name>AACENC_INVALID_CONFIG</name></expr>:</case> <return>return <expr><literal type="string">"Invalid config"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"Initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_AAC_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"AAC library initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_SBR_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"SBR library initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_TP_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"Transport library initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_INIT_META_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"Metadata library initialization error"</literal></expr>;</return>

<case>case <expr><name>AACENC_ENCODE_ERROR</name></expr>:</case> <return>return <expr><literal type="string">"Encoding error"</literal></expr>;</return>

<case>case <expr><name>AACENC_ENCODE_EOF</name></expr>:</case> <return>return <expr><literal type="string">"End of file"</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_enc_options</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_aot</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>

<expr_stmt><expr><name>i_aot</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>i_aot</name> <operator>=</operator> <name>PROFILE_AAC_LC</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>i_aot</name> <operator>=</operator> <name>PROFILE_AAC_HE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>i_aot</name> <operator>=</operator> <name>PROFILE_AAC_HE_v2</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i_aot</name> <operator>==</operator> <name>PROFILE_AAC_HE_v2</name> <operator>||</operator> <name>i_aot</name> <operator>==</operator> <name>PROFILE_AAC_ELD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Selected profile %d can only be used with stereo"</literal></expr></argument>, <argument><expr><name>i_aot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>channel_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHANNEL_MODE</name></type> <name>mode</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>channel_config</name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>channel_config</name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>channel_config</name> <operator>=</operator> <name>AOUT_CHANS_3_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>channel_config</name> <operator>=</operator> <name>AOUT_CHANS_4_CENTER_REAR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_2</name></expr>;</expr_stmt> <expr_stmt><expr><name>channel_config</name> <operator>=</operator> <name>AOUT_CHANS_5_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_2_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>channel_config</name> <operator>=</operator> <name>AOUT_CHANS_5_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_1_2_2_2_1</name></expr>;</expr_stmt> <expr_stmt><expr><name>channel_config</name> <operator>=</operator> <name>AOUT_CHANS_7_1</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"we do not support &gt; 8 input channels, this input has %i"</literal></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>channel_config</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Initializing AAC Encoder, %i channels"</literal></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>encoder_sys_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_MP4A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AACENC_ERROR</name></type> <name>erraac</name></decl>;</decl_stmt>

<expr_stmt><expr><name>erraac</name> <operator>=</operator> <call><name>aacEncOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>erraac</name> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to open encoder: %s"</literal></expr></argument>, <argument><expr><call><name>fdkaac_error</name><argument_list>(<argument><expr><name>erraac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_PARAM</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { AACENC_ERROR err = aacEncoder_SetParam(p_sys-&gt;handle, AACENC_ ##P, V); if (err != AACENC_OK) { msg_Err(p_enc, "Couldn't set " #P " to value %d: %s", V, fdkaac_error(err)); goto error; } } while(0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>AOT</name></expr></argument>, <argument><expr><name>i_aot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_eld_sbr</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"sbr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_aot</name> <operator>==</operator> <name>PROFILE_AAC_ELD</name> <operator>&amp;&amp;</operator> <name>b_eld_sbr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>SBR_MODE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>SAMPLERATE</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>CHANNELMODE</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>CHANNELORDER</name></expr></argument>, <argument><expr><name>CH_ORDER_WG4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_vbr</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"vbr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_vbr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_aot</name> <operator>==</operator> <name>PROFILE_AAC_HE</name> <operator>||</operator> <name>i_aot</name> <operator>==</operator> <name>PROFILE_AAC_HE_v2</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>i_vbr</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Maximum VBR quality for this profile is 3, setting vbr=3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_vbr</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>BITRATEMODE</name></expr></argument>, <argument><expr><name>i_vbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_bitrate</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_bitrate</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_bitrate</name> <operator>=</operator> <literal type="number">96</literal> <operator>*</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>*</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator> <literal type="number">44</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_aot</name> <operator>==</operator> <name>PROFILE_AAC_HE</name> <operator>||</operator> <name>i_aot</name> <operator>==</operator> <name>PROFILE_AAC_HE_v2</name> <operator>||</operator> <name>b_eld_sbr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bitrate</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name>i_bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Setting optimal bitrate of %i"</literal></expr></argument>, <argument><expr><name>i_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>BITRATE</name></expr></argument>, <argument><expr><name>i_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>TRANSMUX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>SIGNALING_MODE</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"signaling"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_PARAM</name><argument_list>(<argument><expr><name>AFTERBURNER</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"afterburner"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_PARAM</name></cpp:undef>

<expr_stmt><expr><name>erraac</name> <operator>=</operator> <call><name>aacEncEncode</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>erraac</name> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to initialize the encoder: %s"</literal></expr></argument>, <argument><expr><call><name>fdkaac_error</name><argument_list>(<argument><expr><name>erraac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AACENC_InfoStruct</name></type> <name>info</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>erraac</name> <operator>=</operator> <call><name>aacEncInfo</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>erraac</name> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to get the encoder info: %s"</literal></expr></argument>, <argument><expr><call><name>fdkaac_error</name><argument_list>(<argument><expr><name>erraac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_maxoutputsize</name></name> <operator>=</operator> <literal type="number">768</literal><operator>*</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>frameLength</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>FDKENC_VER_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_encoderdelay</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>nDelay</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_encoderdelay</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>encoderDelay</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>confSize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate fmt_out.p_extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>confBuf</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_audio</name></name> <operator>=</operator> <name>EncodeAudio</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"fmt_out.p_extra = %i"</literal></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>CloseEncoder</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeAudio</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>p_aout_buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samples</name> <operator>=</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pts_out</name> <operator>=</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_encoderdelay</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_last</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_last</name></name> <operator>=</operator> <name>i_pts_out</name> <operator>-</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i_samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pts_out</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_last</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_samples_left</name> <init>= <expr><name>i_samples</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_loop_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i_samples_left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AACENC_BufDesc</name></type> <name>in_buf</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>out_buf</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACENC_InArgs</name></type> <name>in_args</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACENC_OutArgs</name></type> <name>out_args</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_identifier</name> <init>= <expr><name>IN_AUDIO_DATA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_size</name></decl>, <decl><type ref="prev"/><name>in_elem_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_identifier</name> <init>= <expr><name>OUT_BITSTREAM_DATA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_size</name></decl>, <decl><type ref="prev"/><name>out_elem_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>in_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dummy_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_samples</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_ptr</name> <operator>=</operator> <name>dummy_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_args</name><operator>.</operator><name>numInSamples</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>in_ptr</name> <operator>=</operator> <name>p_buffer</name> <operator>+</operator> <operator>(</operator><name>i_samples</name> <operator>-</operator> <name>i_samples_left</name><operator>)</operator><operator>*</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_size</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name><operator>*</operator><name>i_samples_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_args</name><operator>.</operator><name>numInSamples</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name><operator>*</operator><name>i_samples_left</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>in_elem_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>numBufs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufs</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufferIdentifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_identifier</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_buf</name><operator>.</operator><name>bufElSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>in_elem_size</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_maxoutputsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_maxoutputsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_ptr</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_size</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_elem_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>numBufs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufs</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufferIdentifiers</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_identifier</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buf</name><operator>.</operator><name>bufElSizes</name></name> <operator>=</operator> <operator>&amp;</operator><name>out_elem_size</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AACENC_ERROR</name></type> <name>erraac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>erraac</name> <operator>=</operator> <call><name>aacEncEncode</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_args</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>AACENC_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>erraac</name> <operator>==</operator> <name>AACENC_ENCODE_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Encoding final bytes (EOF)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Encoding failed: %s"</literal></expr></argument>, <argument><expr><call><name>fdkaac_error</name><argument_list>(<argument><expr><name>erraac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out_args</name><operator>.</operator><name>numOutBytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>out_args</name><operator>.</operator><name>numOutBytes</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_samples</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d_samples_forward</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>d_compression_ratio</name></name><operator>*</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>out_args</name><operator>.</operator><name>numOutBytes</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_pts_out</name> <operator>+=</operator> <operator>(</operator><name>vlc_tick_t</name><operator>)</operator><name>d_samples_forward</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <operator>(</operator><name>vlc_tick_t</name><operator>)</operator><name>d_samples_forward</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_loop_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d_samples_delay</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>out_args</name><operator>.</operator><name>numInSamples</name></name> <operator>/</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_pts_out</name> <operator>-=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name>d_samples_delay</name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>d_samples_delay</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>d_length</name> <init>= <expr><call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>out_args</name><operator>.</operator><name>numInSamples</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_pts_out</name> <operator>+=</operator> <name>d_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>d_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>out_args</name><operator>.</operator><name>numInSamples</name></name> <operator>/</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_pts_out</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_chain</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Dbg(p_enc, "dts %"PRId64", length %"PRId64", " "pts_last "

"%"PRId64" numOutBytes = %i, numInSamples = %i, "

"i_samples %i, i_loop_count %i",

p_block-&gt;i_dts, p_block-&gt;i_length,

p_sys-&gt;i_pts_last, out_args.numOutBytes,

out_args.numInSamples, i_samples, i_loop_count);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>i_samples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d_compression_ratio</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>out_args</name><operator>.</operator><name>numOutBytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samples_left</name> <operator>-=</operator> <name><name>out_args</name><operator>.</operator><name>numInSamples</name></name><operator>/</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_last</name></name> <operator>=</operator> <name>i_pts_out</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_loop_count</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Loop count greater than 100!!!, something must be wrong with the encoder library"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>p_chain</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aacEncClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
