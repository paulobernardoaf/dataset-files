<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\kate.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/xiph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kate/kate.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tiger/tiger.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_START</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int64_t profile_start_##name = vlc_tick_now()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_STOP</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf( stderr, #name ": %f ms\n", (vlc_tick_now() - profile_start_##name)/1000.0f )</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_START</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_STOP</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_TIGER_RET</name><parameter_list>( <parameter><type><name>statement</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { int i_ret_check = (statement); if( i_ret_check &lt; 0 ) { msg_Dbg( p_dec, "Error in " #statement ": %d", i_ret_check ); } } while( 0 )</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_PACKETIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>b_packetizer</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ready</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kate_info</name></type> <name>ki</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kate_comment</name></type> <name>kc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kate_state</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_max_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_refcount</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>tiger_renderer</name> <modifier>*</modifier></type><name>p_tr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_dirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tiger_default_font_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tiger_default_background_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tiger_font_effect</name></type> <name>e_tiger_default_font_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_tiger_default_font_effect_strength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tiger_default_font_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_tiger_quality</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>bool</name></type> <name>b_formatted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_use_tiger</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_dec_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt>

}</block></struct></type> <name>kate_spu_updater_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>kate_decoder_list_mutex</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>kate_decoder_list_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>decoder_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>kate_decoder_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_PACKETIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeSub</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ProcessHeaders</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ProcessPacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>kate_packet</name> <modifier>*</modifier></type><name>p_kp</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>DecodePacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>kate_packet</name> <modifier>*</modifier></type><name>p_kp</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ParseKateComments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>SetupSimpleKateSPU</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>kate_event</name> <modifier>*</modifier></type><name>ev</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecSysRelease</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecSysHold</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetTigerColor</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_prefix</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTigerString</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetTigerInteger</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>GetTigerFloat</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerFontColor</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerBackgroundColor</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerFontEffect</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerQuality</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerFontDesc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NAME</name></cpp:macro> <cpp:value>"Default"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_TEXT</name></cpp:macro> <cpp:value>N_("Formatted Subtitles")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Kate streams allow for text formatting. " "VLC partly implements this, but you can choose to disable all formatting. " "Note that this has no effect is rendering via Tiger is enabled.")</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>tiger_font_effect</name></type> <name><name>pi_font_effects</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>tiger_font_plain</name></expr>, <expr><name>tiger_font_shadow</name></expr>, <expr><name>tiger_font_outline</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ppsz_font_effect_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Shadow"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Outline"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_color_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00808080</literal></expr>, <expr><literal type="number">0x00C0C0C0</literal></expr>, <expr><literal type="number">0x00FFFFFF</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>,

<expr><literal type="number">0x00FF0000</literal></expr>, <expr><literal type="number">0x00FF00FF</literal></expr>, <expr><literal type="number">0x00FFFF00</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00008080</literal></expr>,

<expr><literal type="number">0x0000FF00</literal></expr>, <expr><literal type="number">0x00800080</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x000000FF</literal></expr>, <expr><literal type="number">0x0000FFFF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_color_descriptions</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Black"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Gray"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Silver"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"White"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Maroon"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Red"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Fuchsia"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Yellow"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Olive"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Green"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Teal"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Lime"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Purple"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Navy"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Blue"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Aqua"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_TEXT</name></cpp:macro> <cpp:value>N_("Use Tiger for rendering")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_LONGTEXT</name></cpp:macro> <cpp:value>N_("Kate streams can be rendered using the Tiger library. " "Disabling this will only render static text and bitmap based streams.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_QUALITY_DEFAULT</name></cpp:macro> <cpp:value>1.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_QUALITY_TEXT</name></cpp:macro> <cpp:value>N_("Rendering quality")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_QUALITY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select rendering quality, at the expense of speed. " "0 is fastest, 1 is highest quality.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_EFFECT_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_EFFECT_TEXT</name></cpp:macro> <cpp:value>N_("Default font effect")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_EFFECT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Add a font effect to text to improve readability " "against different backgrounds.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_EFFECT_STRENGTH_DEFAULT</name></cpp:macro> <cpp:value>0.5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_EFFECT_STRENGTH_TEXT</name></cpp:macro> <cpp:value>N_("Default font effect strength")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_EFFECT_STRENGTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("How pronounced to make the chosen font effect " "(effect dependent).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_DESC_DEFAULT</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_DESC_TEXT</name></cpp:macro> <cpp:value>N_("Default font description")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_DESC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Which font description to use if the Kate stream " "does not specify particular font parameters (name, size, etc) to use. " "A blank name will let Tiger choose font parameters where appropriate.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_COLOR_DEFAULT</name></cpp:macro> <cpp:value>0x00ffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_COLOR_TEXT</name></cpp:macro> <cpp:value>N_("Default font color")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_COLOR_LONGTEXT</name></cpp:macro> <cpp:value>N_("Default font color to use if the Kate stream " "does not specify a particular font color to use.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_ALPHA_DEFAULT</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_ALPHA_TEXT</name></cpp:macro> <cpp:value>N_("Default font alpha")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_FONT_ALPHA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Transparency of the default font color if the Kate stream " "does not specify a particular font color to use.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_BACKGROUND_COLOR_DEFAULT</name></cpp:macro> <cpp:value>0x00ffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_BACKGROUND_COLOR_TEXT</name></cpp:macro> <cpp:value>N_("Default background color")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_BACKGROUND_COLOR_LONGTEXT</name></cpp:macro> <cpp:value>N_("Default background color if the Kate stream " "does not specify a background color to use.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_BACKGROUND_ALPHA_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_BACKGROUND_ALPHA_TEXT</name></cpp:macro> <cpp:value>N_("Default background alpha")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIGER_DEFAULT_BACKGROUND_ALPHA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Transparency of the default background color if the Kate stream " "does not specify a particular background color to use.")</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_TEXT</name></cpp:macro> <cpp:value>N_( "Kate is a codec for text and image based overlays.\n" "The Tiger rendering library is needed to render complex Kate streams, " "but VLC can still render static text and image based subtitles if " "it is not available.\n" "Note that changing settings below will not take effect until a new stream is played. " "This will hopefully be fixed soon." )</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Kate"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Kate overlay decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_help</name><argument_list>( <argument>HELP_TEXT</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"kate"</literal></argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"kate-formatted"</literal></argument>, <argument>true</argument>, <argument>FORMAT_TEXT</argument>, <argument>FORMAT_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"kate-use-tiger"</literal></argument>, <argument>true</argument>, <argument>TIGER_TEXT</argument>, <argument>TIGER_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"kate-tiger-quality"</literal></argument>,

<argument>TIGER_QUALITY_DEFAULT</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>,

<argument>TIGER_QUALITY_TEXT</argument>, <argument>TIGER_QUALITY_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>set_section</name><argument_list>( <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Tiger rendering defaults"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_string</name><argument_list>( <argument><expr><literal type="string">"kate-tiger-default-font-desc"</literal></expr></argument>, <argument><expr><name>TIGER_DEFAULT_FONT_DESC_DEFAULT</name></expr></argument>,

<argument><expr><name>TIGER_DEFAULT_FONT_DESC_TEXT</name></expr></argument>, <argument><expr><name>TIGER_DEFAULT_FONT_DESC_LONGTEXT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"kate-tiger-default-font-effect"</literal></argument>,

<argument>TIGER_DEFAULT_FONT_EFFECT_DEFAULT</argument>,

<argument><literal type="number">0</literal></argument>, <argument>sizeof(pi_font_effects)/sizeof(pi_font_effects[<literal type="number">0</literal>])-<literal type="number">1</literal></argument>,

<argument>TIGER_DEFAULT_FONT_EFFECT_TEXT</argument>, <argument>TIGER_DEFAULT_FONT_EFFECT_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_list</name><argument_list>( <argument><expr><name>pi_font_effects</name></expr></argument>, <argument><expr><name>ppsz_font_effect_names</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"kate-tiger-default-font-effect-strength"</literal></argument>,

<argument>TIGER_DEFAULT_FONT_EFFECT_STRENGTH_DEFAULT</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>,

<argument>TIGER_DEFAULT_FONT_EFFECT_STRENGTH_TEXT</argument>, <argument>TIGER_DEFAULT_FONT_EFFECT_STRENGTH_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>add_integer_with_range</name><argument_list>( <argument><expr><literal type="string">"kate-tiger-default-font-color"</literal></expr></argument>,

<argument><expr><name>TIGER_DEFAULT_FONT_COLOR_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x00ffffff</literal></expr></argument>,

<argument><expr><name>TIGER_DEFAULT_FONT_COLOR_TEXT</name></expr></argument>, <argument><expr><name>TIGER_DEFAULT_FONT_COLOR_LONGTEXT</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>change_integer_list</name><argument_list>( <argument><expr><name>pi_color_values</name></expr></argument>, <argument><expr><name>ppsz_color_descriptions</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_integer_with_range</name><argument_list>( <argument><expr><literal type="string">"kate-tiger-default-font-alpha"</literal></expr></argument>,

<argument><expr><name>TIGER_DEFAULT_FONT_ALPHA_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>,

<argument><expr><name>TIGER_DEFAULT_FONT_ALPHA_TEXT</name></expr></argument>, <argument><expr><name>TIGER_DEFAULT_FONT_ALPHA_LONGTEXT</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_integer_with_range</name><argument_list>( <argument><expr><literal type="string">"kate-tiger-default-background-color"</literal></expr></argument>,

<argument><expr><name>TIGER_DEFAULT_BACKGROUND_COLOR_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x00ffffff</literal></expr></argument>,

<argument><expr><name>TIGER_DEFAULT_BACKGROUND_COLOR_TEXT</name></expr></argument>, <argument><expr><name>TIGER_DEFAULT_BACKGROUND_COLOR_LONGTEXT</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>change_integer_list</name><argument_list>( <argument><expr><name>pi_color_values</name></expr></argument>, <argument><expr><name>ppsz_color_descriptions</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_integer_with_range</name><argument_list>( <argument><expr><literal type="string">"kate-tiger-default-background-alpha"</literal></expr></argument>,

<argument><expr><name>TIGER_DEFAULT_BACKGROUND_ALPHA_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>,

<argument><expr><name>TIGER_DEFAULT_BACKGROUND_ALPHA_TEXT</name></expr></argument>, <argument><expr><name>TIGER_DEFAULT_BACKGROUND_ALPHA_LONGTEXT</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_PACKETIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Kate text subtitles packetizer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenPacketizer</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"kate"</literal></argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_KATE</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"kate: OpenDecoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_packetizer</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeSub</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecSysHold</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_PACKETIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name> <operator>=</operator> <name>b_packetizer</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_max_stop</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kate_comment_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>kc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kate_info_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_formatted</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"kate-formatted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>kate_decoder_list_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_tiger</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"kate-use-tiger"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_font_color</name></name> <operator>=</operator> <call><name>GetTigerColor</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"kate-tiger-default-font"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_background_color</name></name> <operator>=</operator> <call><name>GetTigerColor</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"kate-tiger-default-background"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>e_tiger_default_font_effect</name></name> <operator>=</operator> <call><name>GetTigerInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"kate-tiger-default-font-effect"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_tiger_default_font_effect_strength</name></name> <operator>=</operator> <call><name>GetTigerFloat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"kate-tiger-default-font-effect-strength"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tiger_default_font_desc</name></name> <operator>=</operator> <call><name>GetTigerString</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"kate-tiger-default-font-desc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_tiger_quality</name></name> <operator>=</operator> <call><name>GetTigerFloat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"kate-tiger-quality"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_tiger</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>tiger_renderer_create</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Failed to create Tiger renderer, falling back to basic rendering"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_tiger</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_TIGER_RET</name><argument_list>( <argument><expr><call><name>tiger_renderer_set_surface_clear_color</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateTigerFontEffect</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateTigerFontColor</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateTigerBackgroundColor</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateTigerQuality</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateTigerFontDesc</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_tiger</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>b_packetizer</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_KATE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name>kate_decoder_list</name></expr></argument>, <argument><expr><operator>(</operator><name>kate_decoder_list_size</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>list</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>list</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>list</name><index>[ <expr><name>kate_decoder_list_size</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>p_dec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kate_decoder_list</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>kate_decoder_list_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_PACKETIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tiger_renderer_seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_stop</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kate_packet</name></type> <name>kp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tiger_renderer_seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_stop</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kate_packet_wrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kp</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ProcessHeaders</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ProcessPacket</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kp</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeSub</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_spu</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>pp_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><operator>*</operator><name>pp_block</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessHeaders</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kate_packet</name></type> <name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_size</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>pp_data</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xiph_SplitHeaders</name><argument_list>( <argument><expr><name>pi_size</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_count</name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>kp</name><operator>.</operator><name>nbytes</name></name> <operator>=</operator> <name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pp_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>kate_decode_headerin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>kc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"this bitstream does not contain Kate data (%d)"</literal></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"%s %s text, granule rate %f, granule shift %d"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>language</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>category</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>gps_numerator</name></name><operator>/</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>gps_denominator</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>granule_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_headeridx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_headeridx</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i_headeridx</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>kp</name><operator>.</operator><name>nbytes</name></name> <operator>=</operator> <name><name>pi_size</name><index>[<expr><name>i_headeridx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pp_data</name><index>[<expr><name>i_headeridx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>kate_decode_headerin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>kc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Kate header %d is corrupted: %d"</literal></expr></argument>, <argument><expr><name>i_headeridx</name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_headeridx</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ParseKateComments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_PACKETIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name></expr> )</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"we have all headers, initialize libkate for decoding"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>kate_decode_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Kate failed to initialize for decoding: %d"</literal></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_PACKETIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p_extra</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_extra</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ProcessPacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>kate_packet</name> <modifier>*</modifier></type><name>p_kp</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_PACKETIZER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_headers</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_num_headers</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_buf</name> <init>= <expr><call><name>DecodePacket</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_kp</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_buf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rgb_to_yuv</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <operator>(</operator> <literal type="number">66</literal> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">129</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">25</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <operator>-</operator><literal type="number">38</literal> <operator>*</operator> <name>r</name> <operator>-</operator> <literal type="number">74</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">112</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr> ;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <literal type="number">112</literal> <operator>*</operator> <name>r</name> <operator>-</operator> <literal type="number">94</literal> <operator>*</operator> <name>g</name> <operator>-</operator> <literal type="number">18</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr> ;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetVideoSize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>original_canvas_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>original_canvas_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>original_canvas_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>original_canvas_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"original canvas %zu %zu"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>original_canvas_width</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>original_canvas_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"original canvas size unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CreateKateBitmap</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>kate_bitmap</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>y</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>bitmap</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>Y_PIXELS</name></name><operator>+</operator><name><name>pic</name><operator>-&gt;</operator><name>Y_PITCH</name></name><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>bitmap</name><operator>-&gt;</operator><name>pixels</name></name><operator>+</operator><name>y</name><operator>*</operator><name><name>bitmap</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CreateKatePalette</name><parameter_list>( <parameter><decl><type><name>video_palette_t</name> <modifier>*</modifier></type><name>fmt_palette</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>kate_palette</name> <modifier>*</modifier></type><name>palette</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <name><name>palette</name><operator>-&gt;</operator><name>ncolors</name></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name><name>palette</name><operator>-&gt;</operator><name>ncolors</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rgb_to_yuv</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>fmt_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>palette</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>, <argument><expr><name><name>palette</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>g</name></expr></argument>, <argument><expr><name><name>palette</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupText</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>kate_event</name> <modifier>*</modifier></type><name>ev</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>text_encoding</name></name> <operator>!=</operator> <name>kate_utf8</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Text isn't UTF-8, unsupported, ignored"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>ev</name><operator>-&gt;</operator><name>text_markup_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>kate_markup_none</name></expr>:</case>

<case>case <expr><name>kate_markup_simple</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_formatted</name></name></expr> )</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>text</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len0</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>copy</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kate_text_remove_markup</name><argument_list>( <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>text_encoding</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><name>copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>TigerDestroySubpicture</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>kate_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_spusys</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DecSysRelease</name><argument_list>( <argument><expr><name><name>p_spusys</name><operator>-&gt;</operator><name>p_dec_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_spusys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PostprocessTigerImage</name><parameter_list>( <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_plane</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_width</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PROFILE_START</name><argument_list>( <argument><expr><name>tiger_renderer_postprocess</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>p_plane</name><operator>-&gt;</operator><name>i_lines</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_plane</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>p_plane</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>i_width</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pixel</name> <init>= <expr><name>p_line</name><operator>+</operator><name>x</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>a</name> <init>= <expr><name><name>p_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>a</name> <init>= <expr><name><name>p_pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>a</name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tmp</name> <init>= <expr><name><name>p_pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>clip_uint8_vlc</name><argument_list>(<argument><expr><operator>(</operator><name><name>p_pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <name>a</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>clip_uint8_vlc</name><argument_list>(<argument><expr><operator>(</operator><name><name>p_pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <name>a</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>clip_uint8_vlc</name><argument_list>(<argument><expr><operator>(</operator><name>tmp</name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <name>a</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>clip_uint8_vlc</name><argument_list>(<argument><expr><operator>(</operator><name><name>p_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <name>a</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>clip_uint8_vlc</name><argument_list>(<argument><expr><operator>(</operator><name><name>p_pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <name>a</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>clip_uint8_vlc</name><argument_list>(<argument><expr><operator>(</operator><name><name>p_pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <name>a</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pixel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>PROFILE_STOP</name><argument_list>( <argument><expr><name>tiger_renderer_postprocess</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TigerValidateSubpicture</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_fmt_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_fmt_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_fmt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_fmt_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kate_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_spusys</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_spusys</name><operator>-&gt;</operator><name>p_dec_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_fmt_src</name> <operator>||</operator> <name>b_fmt_dst</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PROFILE_START</name><argument_list>( <argument><expr><name>TigerValidateSubpicture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>kate_float</name></type> <name>t</name> <init>= <expr><operator>(</operator><name><name>p_spusys</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <name>ts</name> <operator>-</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">1000000.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dirty</name></name> <operator>||</operator> <call><name>tiger_renderer_is_dirty</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tiger_renderer_update</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>tiger_renderer_is_dirty</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PROFILE_STOP</name><argument_list>( <argument><expr><name>TigerValidateSubpicture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TigerUpdateSubpicture</name><parameter_list>( <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_dst</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>ts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>kate_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_spusys</name> <init>= <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_spusys</name><operator>-&gt;</operator><name>p_dec_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kate_float</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name><name>p_spusys</name><operator>-&gt;</operator><name>i_start</name></name> <operator>+</operator> <name>ts</name> <operator>-</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">1000000.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PROFILE_START</name><argument_list>( <argument><expr><name>TigerUpdateSubpicture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><operator>*</operator><name>p_fmt_dst</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_fmt_src</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_fmt_src</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_r</name> <init>= <expr><call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_r</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_r</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_r</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_r</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_plane</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>tiger_renderer_set_buffer</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><name><name>p_plane</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_plane</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>, <argument><expr><name><name>p_plane</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<goto>goto <name>failure</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PROFILE_START</name><argument_list>( <argument><expr><name>tiger_renderer_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>tiger_renderer_update</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<goto>goto <name>failure</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PROFILE_STOP</name><argument_list>( <argument><expr><name>tiger_renderer_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PROFILE_START</name><argument_list>( <argument><expr><name>tiger_renderer_render</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>tiger_renderer_render</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<goto>goto <name>failure</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PROFILE_STOP</name><argument_list>( <argument><expr><name>tiger_renderer_render</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostprocessTigerImage</name><argument_list>( <argument><expr><name>p_plane</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>p_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PROFILE_STOP</name><argument_list>( <argument><expr><name>TigerUpdateSubpicture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>failure</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_region_ChainDelete</name><argument_list>( <argument><expr><name>p_r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetTigerColor</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_prefix</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_color</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"%s-color"</literal></expr></argument>, <argument><expr><name>psz_prefix</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_rgb</name> <init>= <expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_color</name> <operator>|=</operator> <name>i_rgb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"%s-alpha"</literal></expr></argument>, <argument><expr><name>psz_prefix</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_alpha</name> <init>= <expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_color</name> <operator>|=</operator> <operator>(</operator><name>i_alpha</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_color</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTigerString</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>var_CreateGetString</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_value</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetTigerInteger</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_value</name> <init>= <expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>GetTigerFloat</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f_value</name> <init>= <expr><call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>f_value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerQuality</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>decoder_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_TIGER_RET</name><argument_list>( <argument><expr><call><name>tiger_renderer_set_quality</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_tiger_quality</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerFontDesc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>decoder_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_TIGER_RET</name><argument_list>( <argument><expr><call><name>tiger_renderer_set_default_font_description</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tiger_default_font_desc</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerFontColor</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>decoder_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_a</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_font_color</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_font_color</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_g</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_font_color</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_b</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_font_color</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_TIGER_RET</name><argument_list>( <argument><expr><call><name>tiger_renderer_set_default_font_color</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><name>f_r</name></expr></argument>, <argument><expr><name>f_g</name></expr></argument>, <argument><expr><name>f_b</name></expr></argument>, <argument><expr><name>f_a</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerBackgroundColor</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>decoder_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_a</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_background_color</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_background_color</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_g</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_background_color</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_b</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_tiger_default_background_color</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_TIGER_RET</name><argument_list>( <argument><expr><call><name>tiger_renderer_set_default_background_fill_color</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><name>f_r</name></expr></argument>, <argument><expr><name>f_g</name></expr></argument>, <argument><expr><name>f_b</name></expr></argument>, <argument><expr><name>f_a</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTigerFontEffect</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>decoder_sys_t</name><operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_TIGER_RET</name><argument_list>( <argument><expr><call><name>tiger_renderer_set_default_font_effect</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>e_tiger_default_font_effect</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_tiger_default_font_effect_strength</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>DecodePacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>kate_packet</name> <modifier>*</modifier></type><name>p_kp</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>kate_event</name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Cannot decode Kate packet, decoder not initialized"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>kate_decode_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name>p_kp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Kate failed to decode packet: %d"</literal></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>kate_decode_eventout</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Kate failed to retrieve event: %d"</literal></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>kate_spu_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_tiger</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_spu_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_spu_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_updater_t</name></type> <name>updater</name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>.</operator><name>pf_validate</name> <operator>=</operator> <name>TigerValidateSubpicture</name></expr>,

<expr><operator>.</operator><name>pf_update</name> <operator>=</operator> <name>TigerUpdateSubpicture</name></expr>,

<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>TigerDestroySubpicture</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <name>p_spu_sys</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_tiger</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>updater</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_spu_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>duration</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>gps_denominator</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>gps_numerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_use_tiger</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>p_dec_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecSysHold</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_stop</name></name></expr></argument>, <argument><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_TIGER_RET</name><argument_list>( <argument><expr><call><name>tiger_renderer_add_event</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ki</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>SetupSimpleKateSPU</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument>, <argument><expr><name>ev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>SetupSimpleKateSPU</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>kate_event</name> <modifier>*</modifier></type><name>ev</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_bitmap_region</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_palette_t</name></type> <name>palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kate_tracker</name></type> <name>kin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_tracker_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>original_canvas_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ki</name><operator>.</operator><name>original_canvas_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_formatted</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>kate_tracker_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>kin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to initialize kate tracker, event will be unformatted: %d"</literal></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">720</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">576</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>GetVideoSize</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>kate_tracker_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>kate_tracker_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to update kate tracker, event will be unformatted: %d"</literal></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>b_tracker_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>type</name></name><operator>==</operator><name>kate_bitmap_type_paletted</name> <operator>&amp;&amp;</operator> <name><name>ev</name><operator>-&gt;</operator><name>palette</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <operator>&amp;</operator><name>palette</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CreateKatePalette</name><argument_list>( <argument><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>palette</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bitmap_region</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_bitmap_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CreateKateBitmap</name><argument_list>( <argument><expr><name><name>p_bitmap_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Created bitmap, %zux%zu, %zu colors"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>bitmap</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>palette</name><operator>-&gt;</operator><name>ncolors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_TEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_bitmap_region</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>subpicture_region_Delete</name><argument_list>( <argument><expr><name>p_bitmap_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetupText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument>, <argument><expr><name>ev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_bitmap_region</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bitmap_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_tracker_valid</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>kin</name><operator>.</operator><name>has</name><operator>.</operator><name>region</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>kin</name><operator>.</operator><name>region_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>kin</name><operator>.</operator><name>region_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_bitmap_region</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bitmap_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>kin</name><operator>.</operator><name>region_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bitmap_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>kin</name><operator>.</operator><name>region_y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kate_tracker_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_bitmap_region</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bitmap_region</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <name>p_bitmap_region</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseKateComments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_comment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>kc</name><operator>.</operator><name>comments</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_comment</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>kc</name><operator>.</operator><name>user_comments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_comment</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <name>psz_comment</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_value</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_value</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_value</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>kate_decoder_list_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>kate_decoder_list_size</name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>kate_decoder_list</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>==</operator> <name>p_dec</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>kate_decoder_list</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>=</operator> <name><name>kate_decoder_list</name><index>[ <expr><operator>--</operator><name>kate_decoder_list_size</name></expr> ]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>kate_decoder_list_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Closing Kate decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecSysRelease</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecSysHold</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecSysRelease</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tiger_renderer_destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_tr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_tiger_default_font_desc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>kate_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>k</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>kate_info_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ki</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kate_comment_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>kc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
