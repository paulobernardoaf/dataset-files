<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\dav1d.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_timestamp_helper.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dav1d/dav1d.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/iso_color_tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cc.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_FRAMES_TEXT</name></cpp:macro> <cpp:value>N_("Frames Threads")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_FRAMES_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Max number of threads used for frame decoding, default 0=auto" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_TILES_TEXT</name></cpp:macro> <cpp:value>N_("Tiles Threads")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_TILES_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Max number of threads used for tile decoding, default 0=auto" )</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"dav1d"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Dav1d video decoder"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">10000</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>OpenDecoder</argument>, <argument>CloseDecoder</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_VCODEC</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"dav1d-thread-frames"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>THREAD_FRAMES_TEXT</argument>, <argument>THREAD_FRAMES_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"dav1d-thread-tiles"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>THREAD_TILES_TEXT</argument>, <argument>THREAD_TILES_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>Dav1dSettings</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dav1dContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cc_data_t</name></type> <name>cc</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<struct>struct <name>user_data_s</name>

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>dts</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeUserData_Handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>Dav1dPixelLayout</name></name></type> <name>i_chroma_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bitdepth</name></decl>;</decl_stmt>

}</block> <decl><name><name>chroma_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>VLC_CODEC_GREY</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I400</name></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I420</name></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I422</name></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I444</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I444</name></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GREY_10L</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I400</name></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I420</name></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422_10L</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I422</name></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I444_10L</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I444</name></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GREY_12L</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I400</name></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420_12L</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I420</name></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422_12L</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I422</name></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I444_12L</name></expr>, <expr><name>DAV1D_PIXEL_LAYOUT_I444</name></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>FindVlcChroma</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Dav1dPicture</name> <modifier>*</modifier></type><name>img</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>chroma_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma_id</name> <operator>==</operator> <name><name>img</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>layout</name></name> <operator>&amp;&amp;</operator>

<name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bitdepth</name> <operator>==</operator> <name><name>img</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>bpc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>NewPicture</name><parameter_list>(<parameter><decl><type><name>Dav1dPicture</name> <modifier>*</modifier></type><name>img</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <operator>(</operator><name><name>img</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>w</name></name> <operator>+</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <operator>(</operator><name><name>img</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>h</name></name> <operator>+</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7F</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>||</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name> <operator>&amp;&amp;</operator> <name><name>img</name><operator>-&gt;</operator><name>seq_hdr</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <call><name>iso_23001_8_cp_to_vlc_primaries</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>pri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <call><name>iso_23001_8_tc_to_vlc_xfer</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <call><name>iso_23001_8_mc_to_vlc_coeffs</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>mtrx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>img</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>color_range</name></name></expr> ?</condition><then> <expr><name>COLOR_RANGE_FULL</name></expr> </then><else>: <expr><name>COLOR_RANGE_LIMITED</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Dav1dMasteringDisplay</name> <modifier>*</modifier></type><name>md</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>mastering_display</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>md</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>RGB2GBR</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<literal type="number">50000</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>md</name><operator>-&gt;</operator><name>primaries</name><index>[<expr><name><name>RGB2GBR</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>]</index></name>

<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>min_luminance</name></name> <operator>=</operator> <literal type="number">10000</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>md</name><operator>-&gt;</operator><name>min_luminance</name></name>

<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name> <operator>=</operator> <literal type="number">10000</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>md</name><operator>-&gt;</operator><name>max_luminance</name></name>

<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">50000</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>md</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">50000</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>md</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>

<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Dav1dContentLightLevel</name> <modifier>*</modifier></type><name>cll</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>content_light</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cll</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name> <operator>=</operator> <name><name>cll</name><operator>-&gt;</operator><name>max_content_light_level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name> <operator>=</operator> <name><name>cll</name><operator>-&gt;</operator><name>max_frame_average_light_level</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>projection_mode</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>projection_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>multiview_mode</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pose</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>pose</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <call><name>FindVlcChroma</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decoder_UpdateVideoFormat</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>decoder_NewPicture</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>pic</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>allocator_data</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ExtractCaptions</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Dav1dPicture</name> <modifier>*</modifier></type><name>img</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>user_data_s</name></name> <modifier>*</modifier></type><name>userdata</name> <init>= <expr><operator>(</operator>struct <name>user_data_s</name> <operator>*</operator><operator>)</operator> <name><name>img</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>user_data</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Dav1dITUTT35</name> <modifier>*</modifier></type><name>itu_t35</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>itut_t35</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>itu_t35</name> <operator>&amp;&amp;</operator> <name><name>itu_t35</name><operator>-&gt;</operator><name>country_code</name></name> <operator>==</operator> <literal type="number">0xb5</literal> <operator>&amp;&amp;</operator>

<name><name>itu_t35</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>&gt;</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>itu_t35</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>, <argument><expr><literal type="string">"\x00\x0x31GA94\x03"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cc_Extract</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><name>CC_PAYLOAD_GA94</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>itu_t35</name><operator>-&gt;</operator><name>payload</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>itu_t35</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>-</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_reorder</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_cc</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_cc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_reorder</name></name> <operator>||</operator> <name>userdata</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_cc</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_cc</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>userdata</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>decoder_cc_desc_t</name></type> <name>desc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>i_608_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_608channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>i_708_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_708channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>i_reorder_depth</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueCc</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>p_cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreePicture</name><parameter_list>(<parameter><decl><type><name>Dav1dPicture</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name>cookie</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FlushDecoder</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dav1d_flush</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>release_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_eos</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dav1dData</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dav1dData</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <operator>&amp;</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>dav1d_data_wrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name>release_block</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_ECRITICAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <ternary><condition><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name></expr> </then><else>: <expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>timestamp</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>user_data_s</name></name> <modifier>*</modifier></type><name>userdata</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>userdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>userdata</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<literal type="number">0</literal> <operator>!=</operator> <call><name>dav1d_data_wrap_user_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>userdata</name></expr></argument>,

<argument><expr><name>FreeUserData_Handler</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dav1d_data_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_ECRITICAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_eos</name> <operator>=</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_END_OF_SEQUENCE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_draining</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLCDEC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_data</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dav1d_send_data</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <call><name>DAV1D_ERR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"Decoder feed error %d!"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_output_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>Dav1dPicture</name></type> <name>img</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dav1d_get_picture</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>_pic</name> <init>= <expr><name><name>img</name><operator>.</operator><name>allocator_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_Clone</name><argument_list>(<argument><expr><name>_pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_output_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name><name>img</name><operator>.</operator><name>m</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExtractCaptions</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dav1d_picture_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>res</name> <operator>!=</operator> <call><name>DAV1D_ERR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"Decoder error %d!"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_output_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>b_output_error</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_draining</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>res</name> <operator>==</operator> <call><name>DAV1D_ERR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>p_data</name> <operator>==</operator> <name>NULL</name><operator>||</operator><name>b_eos</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_draining</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>p_data</name> <operator>&amp;&amp;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>sz</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>p_data</name> <operator>&amp;&amp;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>sz</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dav1d_data_unref</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_AV1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dav1d_default_settings</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>n_tile_threads</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dav1d-thread-tiles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>n_tile_threads</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>n_tile_threads</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><call><name>vlc_GetCPUCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>n_frame_threads</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dav1d-thread-frames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>n_frame_threads</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>n_frame_threads</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>vlc_GetCPUCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>allocator</name><operator>.</operator><name>cookie</name></name> <operator>=</operator> <name>dec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>allocator</name><operator>.</operator><name>alloc_picture_callback</name></name> <operator>=</operator> <name>NewPicture</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>allocator</name><operator>.</operator><name>release_picture_callback</name></name> <operator>=</operator> <name>FreePicture</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dav1d_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Could not open the Dav1d decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Using dav1d version %s with %d/%d frame/tile threads"</literal></expr></argument>,

<argument><expr><call><name>dav1d_version</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>n_frame_threads</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>n_tile_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>FlushDecoder</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>i_extra_picture_buffers</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>n_frame_threads</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FlushDecoder</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dav1d_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
