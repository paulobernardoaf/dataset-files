<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\aes3.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACODEC</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"AES3/SMPTE 302M audio decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"AES3/SMPTE 302M audio packetizer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenPacketizer</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AES3_HEADER_LEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Parse</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_frame_length</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Open</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Open</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>reverse</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xd0</literal></expr>,

<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xe8</literal></expr>,

<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xc4</literal></expr>,

<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xf4</literal></expr>,

<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xdc</literal></expr>,

<expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xe2</literal></expr>,

<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0xca</literal></expr>,

<expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xfa</literal></expr>,

<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xd6</literal></expr>,

<expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xee</literal></expr>,

<expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xc1</literal></expr>,

<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xf1</literal></expr>,

<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xd9</literal></expr>,

<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xe5</literal></expr>,

<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xcd</literal></expr>,

<expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xfd</literal></expr>,

<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xd3</literal></expr>,

<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xeb</literal></expr>,

<expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xc7</literal></expr>,

<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xf7</literal></expr>,

<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xdf</literal></expr>,

<expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xff</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_length</name></decl>, <decl><type ref="prev"/><name>i_bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>Parse</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_frame_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bits</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_aout_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_aout_buffer</name> <operator>=</operator> <call><name>decoder_NewAudioBuffer</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_frame_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout_buffer</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>,

<argument><expr><name>i_frame_length</name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>AES3_HEADER_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>AES3_HEADER_LEN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_bits</name> <operator>==</operator> <literal type="number">24</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">7</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFF00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_bits</name> <operator>==</operator> <literal type="number">20</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">6</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_bits</name> <operator>==</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name>

<operator>|</operator><operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>reverse</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<label><name>exit</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout_buffer</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_aout_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_length</name></decl>, <decl><type ref="prev"/><name>i_bits</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_block</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <operator>*</operator><name>pp_block</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>Parse</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_frame_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bits</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>i_frame_length</name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_302M</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><literal type="number">48000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_packetizer</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_302M</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>pi_original_channels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>Parse</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_frame_length</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bits</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>|</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <name>AES3_HEADER_LEN</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"frame is too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_channels</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bits</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x03</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>AES3_HEADER_LEN</name> <operator>+</operator> <name>i_size</name> <operator>!=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>||</operator> <name>i_bits</name> <operator>&gt;</operator> <literal type="number">24</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"frame has invalid header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_packetizer</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name>i_bits</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>i_bits</name> <operator>==</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><name>VLC_CODEC_S16N</name></expr> </then><else>: <expr><name>VLC_CODEC_S32N</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <ternary><condition><expr><name>i_bits</name> <operator>==</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>pi_original_channels</name><index>[<expr><name>i_channels</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_frame_length</name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>AES3_HEADER_LEN</name><operator>)</operator> <operator>/</operator> <operator>(</operator> <operator>(</operator><literal type="number">4</literal><operator>+</operator><name>i_bits</name><operator>)</operator> <operator>*</operator> <name>i_channels</name> <operator>/</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_bits</name> <operator>=</operator> <name>i_bits</name></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

</unit>
