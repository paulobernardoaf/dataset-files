<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\cdg.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_SCREEN_WIDTH</name></cpp:macro> <cpp:value>300u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_SCREEN_HEIGHT</name></cpp:macro> <cpp:value>216u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_SCREEN_BORDER_WIDTH</name></cpp:macro> <cpp:value>6u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_SCREEN_BORDER_HEIGHT</name></cpp:macro> <cpp:value>12u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_DISPLAY_WIDTH</name></cpp:macro> <cpp:value>(CDG_SCREEN_WIDTH-2*CDG_SCREEN_BORDER_WIDTH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_DISPLAY_HEIGHT</name></cpp:macro> <cpp:value>(CDG_SCREEN_HEIGHT-2*CDG_SCREEN_BORDER_HEIGHT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_SCREEN_PITCH</name></cpp:macro> <cpp:value>CDG_SCREEN_WIDTH</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_offseth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_offsetv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>screen</name><index>[<expr><name>CDG_SCREEN_PITCH</name><operator>*</operator><name>CDG_SCREEN_HEIGHT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_packet</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_PACKET_SIZE</name></cpp:macro> <cpp:value>24u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_COLOR_R_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_COLOR_G_SHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDG_COLOR_B_SHIFT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodePacket</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Render</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_VCODEC</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"CDG video decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">1000</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"cdg"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_CDG</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_screen</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>screen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name>CDG_DISPLAY_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name>CDG_DISPLAY_HEIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&lt;&lt;</operator> <name>CDG_COLOR_R_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&lt;&lt;</operator> <name>CDG_COLOR_G_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&lt;&lt;</operator> <name>CDG_COLOR_B_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <name>CDG_PACKET_SIZE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DecodePacket</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>CDG_PACKET_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>CDG_PACKET_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>CDG_PACKET_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet</name></name><operator>%</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Render</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>exit</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ScreenFill</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <name>sy</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sy</name><operator>+</operator><name>dy</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <name>sx</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>sx</name><operator>+</operator><name>dx</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>p_screen</name><index>[<expr><name>y</name><operator>*</operator><name>CDG_SCREEN_PITCH</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeMemoryPreset</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_color</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

const int i_repeat= p_data[1]&amp;0x0f;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ScreenFill</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CDG_SCREEN_WIDTH</name></expr></argument>, <argument><expr><name>CDG_SCREEN_HEIGHT</name></expr></argument>, <argument><expr><name>i_color</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBorderPreset</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_color</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ScreenFill</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>CDG_SCREEN_WIDTH</name></expr></argument>, <argument><expr><name>CDG_SCREEN_BORDER_HEIGHT</name></expr></argument>, <argument><expr><name>i_color</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScreenFill</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CDG_SCREEN_HEIGHT</name><operator>-</operator><name>CDG_SCREEN_BORDER_HEIGHT</name></expr></argument>,

<argument><expr><name>CDG_SCREEN_WIDTH</name></expr></argument>, <argument><expr><name>CDG_SCREEN_BORDER_HEIGHT</name></expr></argument>, <argument><expr><name>i_color</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScreenFill</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CDG_SCREEN_BORDER_HEIGHT</name></expr></argument>,

<argument><expr><name>CDG_SCREEN_BORDER_WIDTH</name></expr></argument>, <argument><expr><name>CDG_SCREEN_HEIGHT</name><operator>-</operator><name>CDG_SCREEN_BORDER_HEIGHT</name></expr></argument>, <argument><expr><name>i_color</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScreenFill</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><name>CDG_SCREEN_WIDTH</name><operator>-</operator><name>CDG_SCREEN_BORDER_WIDTH</name></expr></argument>, <argument><expr><name>CDG_SCREEN_BORDER_HEIGHT</name></expr></argument>,

<argument><expr><name>CDG_SCREEN_BORDER_WIDTH</name></expr></argument>, <argument><expr><name>CDG_SCREEN_HEIGHT</name><operator>-</operator><name>CDG_SCREEN_BORDER_HEIGHT</name></expr></argument>, <argument><expr><name>i_color</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeLoadColorTable</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_base</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_data</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0c</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x03</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name> <init>= <expr><name>c</name> <operator>&amp;</operator><literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>color</name><index>[<expr><name>i_base</name><operator>+</operator><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>color</name><index>[<expr><name>i_base</name><operator>+</operator><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>color</name><index>[<expr><name>i_base</name><operator>+</operator><name>n</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeTileBlock</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doXor</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>p_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name></decl>, <decl><type ref="prev"/><name>sy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>=</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>*</operator><literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator><operator>*</operator><literal type="number">6</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator> <name><name>p_data</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>y</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">5</literal><operator>-</operator><name>x</name><operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>sy</name><operator>+</operator><name>y</name><operator>)</operator><operator>*</operator><name>CDG_SCREEN_PITCH</name><operator>+</operator><operator>(</operator><name>sx</name><operator>+</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>index</name> <operator>&gt;=</operator> <name>CDG_SCREEN_PITCH</name><operator>*</operator><name>CDG_SCREEN_HEIGHT</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_cdg</name><operator>-&gt;</operator><name>p_screen</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>doXor</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>^=</operator> <name><name>p_color</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>p_color</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeScroll</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_copy</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>copy</name><index>[<expr><name>CDG_SCREEN_PITCH</name><operator>*</operator><name>CDG_SCREEN_HEIGHT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>color</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_shifth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_shiftv</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>i_offseth</name></name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cdg</name><operator>-&gt;</operator><name>i_offseth</name></name> <operator>&gt;=</operator> <name>CDG_SCREEN_BORDER_WIDTH</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>i_offseth</name></name> <operator>=</operator> <name>CDG_SCREEN_BORDER_WIDTH</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>i_offsetv</name></name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xf</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cdg</name><operator>-&gt;</operator><name>i_offsetv</name></name> <operator>&gt;=</operator> <name>CDG_SCREEN_BORDER_HEIGHT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>i_offsetv</name></name> <operator>=</operator> <name>CDG_SCREEN_BORDER_HEIGHT</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x3</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> <expr_stmt><expr><name>i_shifth</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> <expr_stmt><expr><name>i_shifth</name> <operator>=</operator> <operator>-</operator><literal type="number">6</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>i_shifth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x3</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> <expr_stmt><expr><name>i_shiftv</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> <expr_stmt><expr><name>i_shiftv</name> <operator>=</operator><operator>-</operator><literal type="number">12</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>i_shiftv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>i_shifth</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_shiftv</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>copy</name></expr></argument>, <argument><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScreenFill</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CDG_SCREEN_WIDTH</name></expr></argument>, <argument><expr><name>CDG_SCREEN_HEIGHT</name></expr></argument>, <argument><expr><name>color</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>CDG_SCREEN_HEIGHT</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name>i_shiftv</name> <operator>+</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>CDG_SCREEN_WIDTH</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name>i_shifth</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_copy</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>dy</name> <operator>=</operator> <operator>(</operator><name>dy</name> <operator>+</operator> <name>CDG_SCREEN_HEIGHT</name><operator>)</operator> <operator>%</operator> <name>CDG_SCREEN_HEIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <operator>(</operator><name>dx</name> <operator>+</operator> <name>CDG_SCREEN_WIDTH</name> <operator>)</operator> <operator>%</operator> <name>CDG_SCREEN_WIDTH</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>dy</name> <operator>&gt;=</operator> <name>CDG_SCREEN_HEIGHT</name> <operator>||</operator>

<name>dx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>dx</name> <operator>&gt;=</operator> <name>CDG_SCREEN_WIDTH</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>screen</name><index>[<expr><name>dy</name><operator>*</operator><name>CDG_SCREEN_PITCH</name><operator>+</operator><name>dx</name></expr>]</index></name> <operator>=</operator> <name><name>copy</name><index>[<expr><name>y</name><operator>*</operator><name>CDG_SCREEN_PITCH</name><operator>+</operator><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodePacket</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_cmd</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_instruction</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>!=</operator> <name>CDG_PACKET_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cdg</name><operator>-&gt;</operator><name>i_packet</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_cmd</name> <operator>!=</operator> <literal type="number">0x09</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_instruction</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>DecodeMemoryPreset</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>DecodeBorderPreset</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><call><name>DecodeTileBlock</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">20</literal></expr>:</case>

<expr_stmt><expr><call><name>DecodeScroll</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><call><name>DecodeScroll</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">28</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case>

<expr_stmt><expr><call><name>DecodeLoadColorTable</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">31</literal></expr>:</case>

<expr_stmt><expr><call><name>DecodeLoadColorTable</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">38</literal></expr>:</case>

<expr_stmt><expr><call><name>DecodeTileBlock</name><argument_list>( <argument><expr><name>p_cdg</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RenderPixel</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_pitch</name> <init>= <expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name>i_pitch</name> <operator>+</operator> <name>x</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>RenderRGB</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator> <name>r</name> <operator>&lt;&lt;</operator> <name>CDG_COLOR_R_SHIFT</name> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>g</name> <operator>&lt;&lt;</operator> <name>CDG_COLOR_G_SHIFT</name> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>b</name> <operator>&lt;&lt;</operator> <name>CDG_COLOR_B_SHIFT</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Render</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_cdg</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>CDG_DISPLAY_HEIGHT</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>CDG_DISPLAY_WIDTH</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sx</name> <init>= <expr><name>x</name> <operator>+</operator> <name><name>p_cdg</name><operator>-&gt;</operator><name>i_offseth</name></name> <operator>+</operator> <name>CDG_SCREEN_BORDER_WIDTH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sy</name> <init>= <expr><name>y</name> <operator>+</operator> <name><name>p_cdg</name><operator>-&gt;</operator><name>i_offsetv</name></name> <operator>+</operator> <name>CDG_SCREEN_BORDER_HEIGHT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cidx</name> <init>= <expr><name><name>p_cdg</name><operator>-&gt;</operator><name>p_screen</name><index>[<expr><name>sy</name><operator>*</operator><name>CDG_SCREEN_PITCH</name> <operator>+</operator><name>sx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>r</name> <init>= <expr><name><name>p_cdg</name><operator>-&gt;</operator><name>color</name><index>[<expr><name>cidx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>g</name> <init>= <expr><name><name>p_cdg</name><operator>-&gt;</operator><name>color</name><index>[<expr><name>cidx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><name><name>p_cdg</name><operator>-&gt;</operator><name>color</name><index>[<expr><name>cidx</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RenderPixel</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>RenderRGB</name><argument_list>( <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
