<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\ttml\substtml.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_text_style.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"substext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttml.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imageupdater.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttmlpes.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name>i_value</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>TTML_UNIT_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TTML_UNIT_PERCENT</name></decl>,

<decl><name>TTML_UNIT_CELL</name></decl>,

<decl><name>TTML_UNIT_PIXELS</name></decl>,

}</block> <decl><name>unit</name></decl>;</enum>

}</block></struct></type> <name>ttml_length_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTML_DEFAULT_CELL_RESOLUTION_H</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTML_DEFAULT_CELL_RESOLUTION_V</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTML_LINE_TO_HEIGHT_RATIO</name></cpp:macro> <cpp:value>1.06</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>text_style_t</name><modifier>*</modifier></type> <name>font_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>font_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>extent_h</name></decl>, <name>extent_v</name>;</decl_stmt>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>origin_h</name></decl>, <name>origin_v</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_text_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_text_align_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_direction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_direction_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_preserve_space</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>TTML_DISPLAY_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TTML_DISPLAY_AUTO</name></decl>,

<decl><name>TTML_DISPLAY_NONE</name></decl>,

}</block> <decl><name>display</name></decl>;</enum>

}</block></struct></type> <name>ttml_style_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>regions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type> <name>p_rootnode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>root_extent_h</name></decl>, <name>root_extent_v</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_cell_resolution_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_cell_resolution_h</name></decl>;</decl_stmt>

}</block></struct></type> <name>ttml_context_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>substext_updater_region_t</name></type> <name>updt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last_segment</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_bytes</name></decl>;</decl_stmt>

}</block> <decl><name>bgbitmap</name></decl>;</struct> 

}</block></struct></type> <name>ttml_region_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ttml_in_pes_ctx</name></name></type> <name>pes</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<enum>enum

<block>{

<decl><name>UNICODE_BIDI_LTR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>UNICODE_BIDI_RTL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>UNICODE_BIDI_EMBEDDED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>UNICODE_BIDI_OVERRIDE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>ParseTTML</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ttml_style_Delete</name><parameter_list>( <parameter><decl><type><name>ttml_style_t</name><modifier>*</modifier></type> <name>p_ttml_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ttml_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ttml_style_t</name> <modifier>*</modifier></type> <name>ttml_style_New</name><parameter_list>( )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_style_t</name> <modifier>*</modifier></type><name>p_ttml_style</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ttml_style_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_ttml_style</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>extent_h</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>extent_v</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>origin_h</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>origin_v</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>font_size</name><operator>.</operator><name>i_value</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>font_size</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_CELL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>font_style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_ttml_style</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ttml_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_ttml_style</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ttml_region_Delete</name><parameter_list>( <parameter><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SubpictureUpdaterSysRegionClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>updt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>bgbitmap</name><operator>.</operator><name>p_bytes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ttml_style_t</name> <modifier>*</modifier></type> <name>ttml_style_Duplicate</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ttml_style_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_style_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>ttml_style_New</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dup</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dup</name> <operator>=</operator> <operator>*</operator><name>p_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dup</name><operator>-&gt;</operator><name>font_style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_dup</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ttml_style_Merge</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ttml_style_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>ttml_style_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_src</name> <operator>&amp;&amp;</operator> <name>p_dst</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>font_style</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dst</name><operator>-&gt;</operator><name>font_style</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>text_style_Merge</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>font_style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>b_direction_set</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>b_direction_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_direction</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_direction</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>TTML_DISPLAY_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>display</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ttml_region_t</name> <modifier>*</modifier></type><name>ttml_region_New</name><parameter_list>( <parameter><decl><type><name>bool</name></type> <name>b_root</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_ttml_region</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ttml_region_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_ttml_region</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SubpictureUpdaterSysRegionInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ttml_region</name><operator>-&gt;</operator><name>updt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_region</name><operator>-&gt;</operator><name>pp_last_segment</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_ttml_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>p_segments</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_root</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ttml_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>extent</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>extent</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>UPDT_REGION_EXTENT_X_IS_RATIO</name><operator>|</operator><name>UPDT_REGION_EXTENT_Y_IS_RATIO</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_ttml_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_ttml_region</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ttml_length_t</name></type> <name>ttml_read_length</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>len</name> <init>= <expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><name>TTML_UNIT_UNKNOWN</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>size</name> <init>= <expr><call><name>us_strtof</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>len</name><operator>.</operator><name>i_value</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_end</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'r'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>len</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_CELL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'%'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>len</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_PERCENT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>psz_end</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>len</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_PIXELS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ttml_length_t</name></type> <name>ttml_rebase_length</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>i_cell_resolution</name></decl></parameter>,

<parameter><decl><type><name>ttml_length_t</name></type> <name>value</name></decl></parameter>,

<parameter><decl><type><name>ttml_length_t</name></type> <name>reference</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>value</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>TTML_UNIT_PERCENT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>value</name><operator>.</operator><name>i_value</name></name> <operator>*=</operator> <name><name>reference</name><operator>.</operator><name>i_value</name></name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name><name>reference</name><operator>.</operator><name>unit</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>value</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>TTML_UNIT_CELL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>value</name><operator>.</operator><name>i_value</name></name> <operator>*=</operator> <name><name>reference</name><operator>.</operator><name>i_value</name></name> <operator>/</operator> <name>i_cell_resolution</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name><name>reference</name><operator>.</operator><name>unit</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ttml_read_coords</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>ttml_length_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>ttml_length_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name><name>vals</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><name>TTML_UNIT_UNKNOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><name>TTML_UNIT_UNKNOWN</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>token</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>dup</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>dup</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_saveptr</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>token</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ttml_read_length</name><argument_list>( <argument><expr><name>token</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_saveptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>unit</name> <operator>!=</operator> <name>TTML_UNIT_UNKNOWN</name> <operator>&amp;&amp;</operator>

<name><name>vals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>unit</name> <operator>!=</operator> <name>TTML_UNIT_UNKNOWN</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name><name>vals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tt_node_t</name> <modifier>*</modifier></type> <name>FindNode</name><parameter_list>( <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_nodename</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_maxdepth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument>, <argument><expr><name>psz_nodename</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_id</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><literal type="string">"xml:id"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_node</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>p_node</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_maxdepth</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name><name>p_node</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init>

<condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_child</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TT_NODE_TYPE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_node</name> <operator>=</operator> <call><name>FindNode</name><argument_list>( <argument><expr><operator>(</operator><name>tt_node_t</name> <operator>*</operator><operator>)</operator> <name>p_child</name></expr></argument>, <argument><expr><name>psz_nodename</name></expr></argument>, <argument><expr><name>i_maxdepth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_node</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_node</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillTextStyle</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name></decl></parameter>,

<parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_text_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"tts:fontFamily"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:opacity"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_BACKGROUND_ALPHA</name> <operator>|</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:color"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_color</name> <init>= <expr><call><name>vlc_html_color</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <operator>(</operator><name>i_color</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <operator>(</operator><name>i_color</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name> <operator>|</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:backgroundColor"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_color</name> <init>= <expr><call><name>vlc_html_color</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <name>i_color</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <operator>(</operator><name>i_color</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_BACKGROUND_COLOR</name>

<operator>|</operator> <name>STYLE_HAS_BACKGROUND_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BACKGROUND</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:fontStyle"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"italic"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"oblique"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_ITALIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"tts:fontWeight"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"bold"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_BOLD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"tts:textDecoration"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"underline"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"noUnderline"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_UNDERLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"lineThrough"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_STRIKEOUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"noLineThrough"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_STRIKEOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:textOutline"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>token</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>value</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_saveptr</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>token</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>color</name> <init>= <expr><call><name>vlc_html_color</name><argument_list>( <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_ok</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_ok</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_outline_color</name></name> <operator>=</operator> <name>color</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_outline_alpha</name></name> <operator>=</operator> <operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_saveptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>token</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_outline_width</name> <init>= <expr><call><name>strtol</name><argument_list>( <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_end</name> <operator>!=</operator> <name>token</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_outline_width</name></name> <operator>=</operator> <name>i_outline_width</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillCoord</name><parameter_list>( <parameter><decl><type><name>ttml_length_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_flag</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_flags</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_val</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>i_value</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>v</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>TTML_UNIT_PERCENT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_val</name> <operator>/=</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_flags</name> <operator>|=</operator> <name>i_flag</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pi_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>i_flag</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillUpdaterCoords</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><name>ttml_length_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>ttml_length_t</name></type> <name>v</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_origin</name></decl></parameter>, <parameter><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_updt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>base</name> <init>= <expr><block>{ <expr><literal type="number">100.0</literal></expr>, <expr><name>TTML_UNIT_PERCENT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>x</name> <init>= <expr><call><name>ttml_rebase_length</name><argument_list>( <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_cell_resolution_h</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>base</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>y</name> <init>= <expr><call><name>ttml_rebase_length</name><argument_list>( <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_cell_resolution_v</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>base</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_origin</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FillCoord</name><argument_list>( <argument><expr><name>x</name></expr></argument>, <argument><expr><name>UPDT_REGION_ORIGIN_X_IS_RATIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_updt</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_updt</name><operator>-&gt;</operator><name>flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillCoord</name><argument_list>( <argument><expr><name>y</name></expr></argument>, <argument><expr><name>UPDT_REGION_ORIGIN_Y_IS_RATIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_updt</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_updt</name><operator>-&gt;</operator><name>flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updt</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>FillCoord</name><argument_list>( <argument><expr><name>x</name></expr></argument>, <argument><expr><name>UPDT_REGION_EXTENT_X_IS_RATIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_updt</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_updt</name><operator>-&gt;</operator><name>flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillCoord</name><argument_list>( <argument><expr><name>y</name></expr></argument>, <argument><expr><name>UPDT_REGION_EXTENT_Y_IS_RATIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_updt</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_updt</name><operator>-&gt;</operator><name>flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillRegionStyle</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name></decl></parameter>,

<parameter><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:displayAlign"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>inner_align</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_BOTTOM</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"after"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>inner_align</name></name> <operator>|=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"center"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>inner_align</name></name> <operator>|=</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"tts:origin"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"tts:extent"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ttml_read_coords</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillUpdaterCoords</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name><name>psz_attr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>updt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ComputeTTMLStyles</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dict</name></decl></parameter>,

<parameter><decl><type><name>ttml_style_t</name> <modifier>*</modifier></type><name>p_ttml_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_text_style</name> <init>= <expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>font_style</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>len</name> <init>= <expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>font_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>len</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>TTML_UNIT_PERCENT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>len</name><operator>.</operator><name>i_value</name></name> <operator>/=</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>len</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_CELL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>len</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>TTML_UNIT_CELL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ttml_rebase_length</name><argument_list>( <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_cell_resolution_v</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>root_extent_v</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>len</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>TTML_UNIT_PERCENT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name><name>len</name><operator>.</operator><name>i_value</name></name> <operator>/</operator> <name>TTML_LINE_TO_HEIGHT_RATIO</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if<condition>( <expr><name><name>len</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>TTML_UNIT_PIXELS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <name><name>len</name><operator>.</operator><name>i_value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillTTMLStyle</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name></decl></parameter>,

<parameter><decl><type><name>ttml_style_t</name> <modifier>*</modifier></type><name>p_ttml_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:extent"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ttml_read_coords</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ttml_style</name><operator>-&gt;</operator><name>extent_h</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_ttml_style</name><operator>-&gt;</operator><name>extent_v</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:origin"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ttml_read_coords</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ttml_style</name><operator>-&gt;</operator><name>origin_h</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_ttml_style</name><operator>-&gt;</operator><name>origin_v</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:textAlign"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SUBPICTURE_ALIGN_LEFT</name><operator>|</operator><name>SUBPICTURE_ALIGN_RIGHT</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"left"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>|=</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"right"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>|=</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>|=</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>strcasecmp</name> <argument_list>( <argument><expr><literal type="string">"center"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>|=</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>b_text_align_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TTML_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"**%s %x\n"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_text_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:fontSize"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_length_t</name></type> <name>len</name> <init>= <expr><call><name>ttml_read_length</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>len</name><operator>.</operator><name>unit</name></name> <operator>!=</operator> <name>TTML_UNIT_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>len</name><operator>.</operator><name>i_value</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>font_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:direction"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"rtl"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_direction</name></name> <operator>|=</operator> <name>UNICODE_BIDI_RTL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>b_direction_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"ltr"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_direction</name></name> <operator>|=</operator> <name>UNICODE_BIDI_LTR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>b_direction_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:unicodeBidi"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"bidiOverride"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_direction</name></name> <operator>|=</operator> <name>UNICODE_BIDI_OVERRIDE</name> <operator>&amp;</operator> <operator>~</operator><name>UNICODE_BIDI_EMBEDDED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"embed"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_direction</name></name> <operator>|=</operator> <name>UNICODE_BIDI_EMBEDDED</name> <operator>&amp;</operator> <operator>~</operator><name>UNICODE_BIDI_OVERRIDE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"tts:writingMode"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"rl"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"rltb"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_direction</name></name> <operator>=</operator> <name>UNICODE_BIDI_RTL</name> <operator>|</operator> <name>UNICODE_BIDI_OVERRIDE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>b_direction_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"lr"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"lrtb"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>i_direction</name></name> <operator>=</operator> <name>UNICODE_BIDI_LTR</name> <operator>|</operator> <name>UNICODE_BIDI_OVERRIDE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>b_direction_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><literal type="string">"tts:display"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>TTML_DISPLAY_NONE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>TTML_DISPLAY_AUTO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"xml:space"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>b_preserve_space</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><literal type="string">"preserve"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>FillTextStyle</name><argument_list>( <argument><expr><name>psz_attr</name></expr></argument>, <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><name><name>p_ttml_style</name><operator>-&gt;</operator><name>font_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DictionaryMerge</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_override</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><decl><type><specifier>const</specifier> <name>vlc_dictionary_entry_t</name><modifier>*</modifier></type> <name>p_entry</name> <init>= <expr><name><name>p_src</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init>

<condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"tts:"</literal></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"ttp:"</literal></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><literal type="string">"xml:space"</literal></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_dictionary_has_key</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_override</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dictionary_remove_value_for_key</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DictMergeWithStyleID</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_styles</name></decl></parameter>,

<parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dup</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_styles</name> <operator>&amp;&amp;</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_rootnode</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>psz_dup</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_styles</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>tempdict</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tempdict</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_id</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>psz_id</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><call><name>FindNode</name><argument_list>( <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument>,

<argument><expr><literal type="string">"style"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_node</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DictionaryMerge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempdict</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_id</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_dictionary_is_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tempdict</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DictionaryMerge</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tempdict</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tempdict</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DictMergeWithRegionID</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter>,

<parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_id</name> <operator>&amp;&amp;</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_regionnode</name> <init>= <expr><call><name>FindNode</name><argument_list>( <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument>,

<argument><expr><literal type="string">"region"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_regionnode</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DictionaryMerge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_regionnode</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_styleid</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator>

<call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_regionnode</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><literal type="string">"style"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_styleid</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DictMergeWithStyleID</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>psz_styleid</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name><name>p_regionnode</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init>

<condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_child</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TT_NODE_TYPE_TEXT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>tt_node_t</name> <operator>*</operator><operator>)</operator> <name>p_child</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument>, <argument><expr><literal type="string">"style"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DictionaryMerge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DictToTTMLStyle</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dict</name></decl></parameter>,

<parameter><decl><type><name>ttml_style_t</name> <modifier>*</modifier></type><name>p_ttml_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><decl><type><name>vlc_dictionary_entry_t</name><modifier>*</modifier></type> <name>p_entry</name> <init>= <expr><name><name>p_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init>

<condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>FillTTMLStyle</name><argument_list>( <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>, <argument><expr><name>p_ttml_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ComputeTTMLStyles</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>p_ttml_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ttml_style_t</name> <modifier>*</modifier></type> <name>InheritTTMLStyles</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ttml_style_t</name> <modifier>*</modifier></type><name>p_ttml_style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>merged</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_node</name></expr>;</condition> <incr><expr><name>p_node</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_parent</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>DictionaryMerge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_styleid</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator>

<call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><literal type="string">"style"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_styleid</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DictMergeWithStyleID</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>psz_styleid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_regionid</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator>

<call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><literal type="string">"region"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_regionid</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DictMergeWithRegionID</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>psz_regionid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_dictionary_is_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_ttml_style</name> <operator>=</operator> <call><name>ttml_style_New</name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DictToTTMLStyle</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument>, <argument><expr><name>p_ttml_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_ttml_style</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseTTMLChunk</name><parameter_list>( <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_reader</name></decl></parameter>, <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_rootnode</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_node_name</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_node_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>&lt;=</operator> <name>XML_READER_NONE</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>i_type</name></expr>)</condition>

<block>{<block_content>

<default>default:</default>

<break>break;</break>

<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name>psz_node_name</name></expr></argument>, <argument><expr><literal type="string">"tt"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>*</operator><name>pp_rootnode</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_rootnode</name> <operator>=</operator> <call><name>tt_node_New</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_node_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_rootnode</name> <operator>||</operator>

<call><name>tt_nodes_Read</name><argument_list>( <argument><expr><name>p_reader</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_rootnode</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_rootnode</name> <operator>||</operator>

<call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name>psz_node_name</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pp_rootnode</name><operator>)</operator><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> while<condition>( <expr><literal type="number">1</literal></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_rootnode</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BIDIConvert</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_direction</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_uni_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_uni_end</name></decl>;</decl_stmt>

}</block> <decl><name><name>p_bidi</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"\u2066"</literal></expr>, <expr><literal type="string">"\u2069"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"\u2067"</literal></expr>, <expr><literal type="string">"\u2069"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"\u202A"</literal></expr>, <expr><literal type="string">"\u202C"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"\u202B"</literal></expr>, <expr><literal type="string">"\u202C"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"\u202D"</literal></expr>, <expr><literal type="string">"\u202C"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"\u202E"</literal></expr>, <expr><literal type="string">"\u202C"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i_direction</name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>p_bidi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>p_bidi</name><index>[<expr><name>i_direction</name></expr>]</index></name><operator>.</operator><name>psz_uni_start</name></expr></argument>,

<argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><name><name>p_bidi</name><index>[<expr><name>i_direction</name></expr>]</index></name><operator>.</operator><name>psz_uni_end</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>StripSpacing</name><parameter_list>( <parameter><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ttml_region_t</name> <modifier>*</modifier></type><name>GetTTMLRegion</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_region_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><operator>(</operator> <name>ttml_region_t</name> <operator>*</operator> <operator>)</operator>

<call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>regions</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>psz_region_id</name></expr> ?</condition><then> <expr><name>psz_region_id</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_region</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_region_id</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_region_id</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>merged</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DictMergeWithRegionID</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>psz_region_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>p_region</name> <operator>=</operator> <call><name>ttml_region_New</name><argument_list>( <argument><expr><name>false</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>merged</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><decl><type><name>vlc_dictionary_entry_t</name><modifier>*</modifier></type> <name>p_entry</name> <init>= <expr><name><name>merged</name><operator>.</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init>

<condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>FillRegionStyle</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>,

<argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>merged</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>regions</name></name></expr></argument>, <argument><expr><name>psz_region_id</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator><name>p_region</name> <operator>=</operator> <call><name>ttml_region_New</name><argument_list>( <argument><expr><name>true</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>regions</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_region</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AppendLineBreakToRegion</name><parameter_list>( <parameter><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name> <init>= <expr><call><name>text_segment_New</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_segment</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>p_region</name><operator>-&gt;</operator><name>pp_last_segment</name></name> <operator>=</operator> <name>p_segment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>pp_last_segment</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AppendTextToRegion</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tt_textnode_t</name> <modifier>*</modifier></type><name>p_ttnode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ttml_style_t</name> <modifier>*</modifier></type><name>p_set_styles</name></decl></parameter>, <parameter><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_region</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_segment</name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><name><name>p_ttnode</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_segment</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_preserve_space</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ttml_style_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>InheritTTMLStyles</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name><name>p_ttnode</name><operator>-&gt;</operator><name>p_parent</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>s</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_set_styles</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ttml_style_Merge</name><argument_list>( <argument><expr><name>p_set_styles</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>font_style</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>font_style</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_preserve_space</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_preserve_space</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>b_direction_set</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BIDIConvert</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>i_direction</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>TTML_DISPLAY_NONE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>STYLE_BACKGROUND</name><operator>|</operator><name>STYLE_OUTLINE</name><operator>|</operator><name>STYLE_STRIKEOUT</name><operator>|</operator><name>STYLE_SHADOW</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_TRANSPARENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>b_text_align_set</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>inner_align</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SUBPICTURE_ALIGN_LEFT</name><operator>|</operator><name>SUBPICTURE_ALIGN_RIGHT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>inner_align</name></name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_text_align</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>extent_h</name><operator>.</operator><name>unit</name></name> <operator>!=</operator> <name>TTML_UNIT_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillUpdaterCoords</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>extent_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>extent_v</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>updt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>origin_h</name><operator>.</operator><name>unit</name></name> <operator>!=</operator> <name>TTML_UNIT_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillUpdaterCoords</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>origin_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>origin_v</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>updt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ttml_style_Delete</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_preserve_space</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>StripSpacing</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>p_region</name><operator>-&gt;</operator><name>pp_last_segment</name></name> <operator>=</operator> <name>p_segment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>pp_last_segment</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_segment</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>GetSMPTEImage</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_head</name> <init>= <expr><call><name>FindNode</name><argument_list>( <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument>, <argument><expr><literal type="string">"head"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_head</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name><name>p_head</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init>

<condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_child</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TT_NODE_TYPE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><operator>(</operator><name>tt_node_t</name> <operator>*</operator><operator>)</operator> <name>p_child</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument>, <argument><expr><literal type="string">"metadata"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_imagenode</name> <init>= <expr><call><name>FindNode</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><literal type="string">"smpte:image"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_imagenode</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_imagenode</name><operator>-&gt;</operator><name>p_child</name></name> <operator>||</operator> <name><name>p_imagenode</name><operator>-&gt;</operator><name>p_child</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>TT_NODE_TYPE_TEXT</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>tt_textnode_t</name> <modifier>*</modifier></type><name>p_textnode</name> <init>= <expr><operator>(</operator><name>tt_textnode_t</name> <operator>*</operator><operator>)</operator> <name><name>p_imagenode</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><call><name>isspace</name><argument_list>( <argument><expr><operator>*</operator><name>psz_text</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>psz_text</name></expr>;</return>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ConvertNodesToRegionContent</name><parameter_list>( <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>,

<parameter><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ttml_style_t</name> <modifier>*</modifier></type><name>p_upper_set_styles</name></decl></parameter>,

<parameter><decl><type><name>tt_time_t</name></type> <name>playbacktime</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>playbacktime</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>tt_timings_Contains</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>timings</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>playbacktime</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_regionid</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator>

<call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><literal type="string">"region"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_regionid</name> <operator>||</operator> <name>p_region</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_region</name> <operator>=</operator> <call><name>GetTTMLRegion</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><name>psz_regionid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument>, <argument><expr><literal type="string">"div"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>vlc_dictionary_has_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><literal type="string">"smpte:backgroundImage"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_region</name><operator>-&gt;</operator><name>bgbitmap</name><operator>.</operator><name>p_bytes</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name> <init>= <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>,

<argument><expr><literal type="string">"smpte:backgroundImage"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_id</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_id</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_base64</name> <init>= <expr><call><name>GetSMPTEImage</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>psz_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_base64</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>bgbitmap</name><operator>.</operator><name>i_bytes</name></name> <operator>=</operator>

<call><name>vlc_b64_decode_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>bgbitmap</name><operator>.</operator><name>p_bytes</name></name></expr></argument>, <argument><expr><name>psz_base64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>p_segments</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AppendLineBreakToRegion</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ttml_style_t</name> <modifier>*</modifier></type><name>p_set_styles</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>p_upper_set_styles</name><operator>)</operator></expr>

?</condition><then> <expr><call><name>ttml_style_Duplicate</name><argument_list>( <argument><expr><name>p_upper_set_styles</name></expr></argument> )</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name><name>p_node</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init>

<condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_child</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TT_NODE_TYPE_TEXT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AppendTextToRegion</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>tt_textnode_t</name> <operator>*</operator><operator>)</operator> <name>p_child</name></expr></argument>,

<argument><expr><name>p_set_styles</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>tt_node_t</name> <operator>*</operator><operator>)</operator><name>p_child</name><operator>)</operator><operator>-&gt;</operator><name>psz_node_name</name></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_set</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>tt_node_t</name> <operator>*</operator><operator>)</operator><name>p_child</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>playbacktime</name></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>tt_timings_Contains</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_set</name><operator>-&gt;</operator><name>timings</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>playbacktime</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_set_styles</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>p_set_styles</name> <operator>=</operator> <call><name>ttml_style_New</name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DictToTTMLStyle</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_set</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>, <argument><expr><name>p_set_styles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>tt_node_t</name> <operator>*</operator><operator>)</operator><name>p_child</name><operator>)</operator><operator>-&gt;</operator><name>psz_node_name</name></expr></argument>, <argument><expr><literal type="string">"br"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AppendLineBreakToRegion</name><argument_list>( <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ConvertNodesToRegionContent</name><argument_list>( <argument><expr><name>p_ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>tt_node_t</name> <operator>*</operator><operator>)</operator> <name>p_child</name></expr></argument>,

<argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>p_set_styles</name></expr></argument>, <argument><expr><name>playbacktime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_set_styles</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ttml_style_Delete</name><argument_list>( <argument><expr><name>p_set_styles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>ParseTTML</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>p_sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name><modifier>*</modifier></type> <name>p_xml_reader</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sub</name> <operator>=</operator> <call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sub</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_xml_reader</name> <operator>=</operator> <call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_sub</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_xml_reader</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_sub</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_rootnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParseTTMLChunk</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_rootnode</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_rootnode</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tt_node_RecursiveDelete</name><argument_list>( <argument><expr><name>p_rootnode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_rootnode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_sub</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_rootnode</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitTTMLContext</name><parameter_list>( <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_rootnode</name></decl></parameter>, <parameter><decl><type><name>ttml_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_rootnode</name></name> <operator>=</operator> <name>p_rootnode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>root_extent_h</name><operator>.</operator><name>i_value</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>root_extent_h</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_PERCENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>root_extent_v</name><operator>.</operator><name>i_value</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>root_extent_v</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>TTML_UNIT_PERCENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_cell_resolution_v</name></name> <operator>=</operator> <name>TTML_DEFAULT_CELL_RESOLUTION_V</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_cell_resolution_h</name></name> <operator>=</operator> <name>TTML_DEFAULT_CELL_RESOLUTION_H</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_rootnode</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>,

<argument><expr><literal type="string">"tts:extent"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>value</name> <operator>!=</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ttml_read_coords</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>root_extent_h</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>root_extent_v</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_rootnode</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></argument>,

<argument><expr><literal type="string">"ttp:cellResolution"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>value</name> <operator>!=</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%u %u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>w</name> <operator>&amp;&amp;</operator> <name>h</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_cell_resolution_h</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_cell_resolution_v</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ttml_region_t</name> <modifier>*</modifier></type><name>GenerateRegions</name><parameter_list>( <parameter><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_rootnode</name></decl></parameter>, <parameter><decl><type><name>tt_time_t</name></type> <name>playbacktime</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_region_t</name><modifier>*</modifier></type> <name>p_regions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ttml_region_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_region_last</name> <init>= <expr><operator>&amp;</operator><name>p_regions</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name><name>p_rootnode</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument>, <argument><expr><literal type="string">"tt"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_bodynode</name> <init>= <expr><call><name>FindNode</name><argument_list>( <argument><expr><name>p_rootnode</name></expr></argument>, <argument><expr><literal type="string">"body"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_bodynode</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_context_t</name></type> <name>context</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitTTMLContext</name><argument_list>( <argument><expr><name>p_rootnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>.</operator><name>p_rootnode</name></name> <operator>=</operator> <name>p_rootnode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>regions</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ConvertNodesToRegionContent</name><argument_list>( <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>p_bodynode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>playbacktime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>context</name><operator>.</operator><name>regions</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><decl><type><specifier>const</specifier> <name>vlc_dictionary_entry_t</name><modifier>*</modifier></type> <name>p_entry</name> <init>= <expr><name><name>context</name><operator>.</operator><name>regions</name><operator>.</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init>

<condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_region_last</name> <operator>=</operator> <operator>(</operator><name>ttml_region_t</name> <operator>*</operator><operator>)</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_region_last</name> <operator>=</operator> <operator>(</operator><name>ttml_region_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp_region_last</name><operator>)</operator><operator>-&gt;</operator><name><name>updt</name><operator>.</operator><name>p_next</name></name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>context</name><operator>.</operator><name>regions</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>!</operator><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name><name>p_rootnode</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument>, <argument><expr><literal type="string">"div"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name><name>p_rootnode</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_regions</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TTMLRegionsToSpuTextRegions</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter>,

<parameter><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_regions</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_dec_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_updtregion</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><name>p_regions</name></expr></init></decl>;</init>

<condition><expr><name>p_region</name></expr>;</condition> <incr><expr><name>p_region</name> <operator>=</operator> <operator>(</operator><name>ttml_region_t</name> <operator>*</operator><operator>)</operator> <name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_updtregion</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_updtregion</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_updtregion</name> <operator>=</operator> <call><name>SubpictureUpdaterSysRegionNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_updtregion</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SubpictureUpdaterSysRegionAdd</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name></name></expr></argument>, <argument><expr><name>p_updtregion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec_sys</name><operator>-&gt;</operator><name>i_align</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_MASK</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <name><name>p_dec_sys</name><operator>-&gt;</operator><name>i_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>margin_ratio</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_updtregion</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>updt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_updtregion</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>p_region_style</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>p_segments</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type> <name>picture_CreateFromPNG</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>es_in</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>es_in</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_PNG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>es_in</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_logger</name></name> <modifier>*</modifier></type><name>logger</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>no_interact</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>no_interact</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>no_interact</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name> <init>= <expr><call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_image</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>image_Read</name><argument_list>( <argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>es_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name>p_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>no_interact</name></name> <operator>=</operator> <name>no_interact</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <name>logger</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>es_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TTMLRegionsToSpuBitmapRegions</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter>,

<parameter><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_regions</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><name>p_regions</name></expr></init></decl>;</init>

<condition><expr><name>p_region</name></expr>;</condition> <incr><expr><name>p_region</name> <operator>=</operator> <operator>(</operator><name>ttml_region_t</name> <operator>*</operator><operator>)</operator> <name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>picture_CreateFromPNG</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>bgbitmap</name><operator>.</operator><name>p_bytes</name></name></expr></argument>,

<argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>bgbitmap</name><operator>.</operator><name>i_bytes</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_image_updater_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>TTML_ImageUpdaterRegionNew</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>r</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>UPDT_REGION_ORIGIN_X_IS_RATIO</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>ORIGIN_X_IS_RATIO</name></expr></argument>,

<argument><expr><literal type="string">"flag enums values differs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>UPDT_REGION_EXTENT_Y_IS_RATIO</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>EXTENT_Y_IS_RATIO</name></expr></argument>,

<argument><expr><literal type="string">"flag enums values differs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>origin</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>origin</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>extent</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>extent</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TTML_ImageSpuAppendRegion</name><argument_list>( <argument><expr><name><name>p_spu</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tt_time_t</name> <modifier>*</modifier></type><name>p_timings_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_timings_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tt_timings_t</name></type> <name>temporal_extent</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temporal_extent</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>TT_TIMINGS_PARALLEL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>temporal_extent</name><operator>.</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>temporal_extent</name><operator>.</operator><name>end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>temporal_extent</name><operator>.</operator><name>dur</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temporal_extent</name><operator>.</operator><name>begin</name><operator>.</operator><name>base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subtitle without a date"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_rootnode</name> <init>= <expr><call><name>ParseTTML</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_rootnode</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tt_timings_Resolve</name><argument_list>( <argument><expr><operator>(</operator><name>tt_basenode_t</name> <operator>*</operator><operator>)</operator> <name>p_rootnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temporal_extent</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_timings_array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_timings_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TTML_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_timings_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_timings_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_block_start_time</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>TTML_in_PES</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i_block_start_time</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_prev_segment_start_time</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_block_start_time</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_prev_segment_start_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>i_timings_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_timings_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <name>VLC_TICK_0</name> <operator>&lt;</operator> <name>i_block_start_time</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>TTML_in_PES</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_timings_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <name>VLC_TICK_0</name> <operator>&gt;</operator> <name>i_block_start_time</name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>TTML_in_PES</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_prev_segment_start_time</name></name> <operator>&lt;</operator> <call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_timings_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_prev_segment_start_time</name></name> <operator>=</operator> <call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_timings_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bitmap_regions</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_regions</name> <init>= <expr><call><name>GenerateRegions</name><argument_list>( <argument><expr><name>p_rootnode</name></expr></argument>, <argument><expr><name><name>p_timings_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_regions</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_regions</name><operator>-&gt;</operator><name>bgbitmap</name><operator>.</operator><name>i_bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_regions</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>p_segments</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_bitmap_regions</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewTTML_ImageSpu</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpictureText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_regions</name> <operator>&amp;&amp;</operator> <name>p_spu</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_offset</name></name> <operator>+</operator>

<name>VLC_TICK_0</name> <operator>+</operator> <call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_timings_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pes</name><operator>.</operator><name>i_offset</name></name> <operator>+</operator>

<name>VLC_TICK_0</name> <operator>+</operator> <call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_timings_array</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_bitmap_regions</name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>TTMLRegionsToSpuTextRegions</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument>, <argument><expr><name>p_regions</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>TTMLRegionsToSpuBitmapRegions</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument>, <argument><expr><name>p_regions</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>p_regions</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ttml_region_t</name> <modifier>*</modifier></type><name>p_nextregion</name> <init>= <expr><operator>(</operator><name>ttml_region_t</name> <operator>*</operator><operator>)</operator> <name><name>p_regions</name><operator>-&gt;</operator><name>updt</name><operator>.</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ttml_region_Delete</name><argument_list>( <argument><expr><name>p_regions</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_regions</name> <operator>=</operator> <name>p_nextregion</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>tt_node_RecursiveDelete</name><argument_list>( <argument><expr><name>p_rootnode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_timings_array</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ParseBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TTML_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>,<argument><expr><literal type="string">"time %ld %s"</literal></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodePESBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ParsePESEncap</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pes</name></name></expr></argument>, <argument><expr><name>DecodeBlock</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ttml_in_pes_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>tt_OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_TTML</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>TTML_in_PES</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>TTML_in_PES</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodePESBlock</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ttml-align"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ttml_in_pes_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>tt_CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
