<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\subsusf.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_TEXT</name></cpp:macro> <cpp:value>N_("Formatted Subtitles")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Some subtitle formats allow for text formatting. " "VLC partly implements this, but you can choose to disable all formatting.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">40</literal></argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"USFSubs"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"USF subtitles decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_SCODEC</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"subsdec-formatted"</literal></argument>, <argument>true</argument>, <argument>FORMAT_TEXT</argument>, <argument>FORMAT_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>vlc_module_end</name> <argument_list>()</argument_list></call>

enum

<block>{

<expr><name>ATTRIBUTE_ALIGNMENT</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>,

<expr><name>ATTRIBUTE_X</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>,

<expr><name>ATTRIBUTE_X_PERCENT</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>,

<expr><name>ATTRIBUTE_Y</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>,

<expr><name>ATTRIBUTE_Y_PERCENT</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>,

}</block></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

}</block></struct></type> <name>image_attach_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_stylename</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type> <name>p_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_margin_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_margin_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_margin_percent_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_margin_percent_v</name></decl>;</decl_stmt>

}</block></struct></type> <name>ssa_style_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_original_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_original_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_align</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ssa_style_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_ssa_styles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ssa_styles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>image_attach_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_images</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_images</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>CreatePlainText</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>StripTags</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseImageAttachments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>ParseText</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ParseUSFHeader</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>ParseUSFString</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>LoadEmbeddedImage</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_transparent_color</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_USF</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ssa_styles</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_images</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subsdec-align"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ParseImageAttachments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subsdec-formatted"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ParseUSFHeader</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>ParseText</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_spu</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ssa_styles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_stylename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ssa_styles</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_images</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_images</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>ParseText</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"subtitle without a date"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"no subtitle data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_subtitle</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"USF subtitles must be in UTF-8 format.\n"</literal>

<literal type="string">"This stream contains USF subtitles which aren't."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>decoder_NewSubpicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"can't get spu buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>ParseUSFString</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_original_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_original_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GrabAttributeValue</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attribute</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag_start</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_attribute</name> <operator>&amp;&amp;</operator> <name>psz_tag_start</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tag_end</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_tag_start</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_found</name> <init>= <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_tag_start</name></expr></argument>, <argument><expr><name>psz_attribute</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_found</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_found</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_attribute</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator> <operator>*</operator><operator>(</operator><name>psz_found</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'='</literal> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>*</operator><operator>(</operator><name>psz_found</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'\"'</literal> <operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_found</name> <operator>&lt;</operator> <name>psz_tag_end</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><call><name>strcspn</name><argument_list>( <argument><expr><name>psz_found</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strndup</name><argument_list>( <argument><expr><name>psz_found</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssa_style_t</name> <modifier>*</modifier></type><name>ParseStyle</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssa_style_t</name> <modifier>*</modifier></type><name>p_ssa_style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_style</name> <init>= <expr><call><name>GrabAttributeValue</name><argument_list>( <argument><expr><literal type="string">"style"</literal></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_style</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ssa_styles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_stylename</name></expr></argument>, <argument><expr><name>psz_style</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ssa_style</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_ssa_style</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParsePositionAttributeList</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_align</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_align</name> <init>= <expr><call><name>GrabAttributeValue</name><argument_list>( <argument><expr><literal type="string">"alignment"</literal></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_margin_x</name> <init>= <expr><call><name>GrabAttributeValue</name><argument_list>( <argument><expr><literal type="string">"horizontal-margin"</literal></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_margin_y</name> <init>= <expr><call><name>GrabAttributeValue</name><argument_list>( <argument><expr><literal type="string">"vertical-margin"</literal></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_align</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"TopLeft"</literal></expr></argument>, <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"TopCenter"</literal></expr></argument>, <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"TopRight"</literal></expr></argument>, <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"MiddleLeft"</literal></expr></argument>, <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"MiddleCenter"</literal></expr></argument>, <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"MiddleRight"</literal></expr></argument>, <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"BottomLeft"</literal></expr></argument>, <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"BottomCenter"</literal></expr></argument>, <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"BottomRight"</literal></expr></argument>, <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>i_align</name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_mask</name> <operator>|=</operator> <name>ATTRIBUTE_ALIGNMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_align</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_margin_x</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>i_x</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_margin_x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_margin_x</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_mask</name> <operator>|=</operator> <name>ATTRIBUTE_X_PERCENT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_mask</name> <operator>|=</operator> <name>ATTRIBUTE_X</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_margin_x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_margin_y</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>i_y</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_margin_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_margin_y</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_mask</name> <operator>|=</operator> <name>ATTRIBUTE_Y_PERCENT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_mask</name> <operator>|=</operator> <name>ATTRIBUTE_Y</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_margin_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_mask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupPositions</name><parameter_list>( <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_mask</name> <operator>=</operator> <call><name>ParsePositionAttributeList</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_align</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_mask</name> <operator>&amp;</operator> <name>ATTRIBUTE_ALIGNMENT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>i_align</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_mask</name> <operator>&amp;</operator> <name>ATTRIBUTE_X</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name>i_x</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_mask</name> <operator>&amp;</operator> <name>ATTRIBUTE_X_PERCENT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_mask</name> <operator>&amp;</operator> <name>ATTRIBUTE_Y</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name>i_y</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_mask</name> <operator>&amp;</operator> <name>ATTRIBUTE_Y_PERCENT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>CreateTextRegion</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_sys_align</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_text_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_TEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_text_region</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_text_region</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ssa_style_t</name> <modifier>*</modifier></type><name>p_ssa_style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_ssa_style</name> <operator>=</operator> <call><name>ParseStyle</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ssa_style</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ssa_styles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_stylename</name></expr></argument>, <argument><expr><literal type="string">"Default"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ssa_style</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <ternary><condition><expr><name>i_sys_align</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>i_sys_align</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i_sys_align</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ssa_style</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"style is: %s"</literal></expr></argument>, <argument><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>psz_stylename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sys_align</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_v</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>=</operator> <call><name>text_segment_NewInheritStyle</name><argument_list>( <argument><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SetupPositions</name><argument_list>( <argument><expr><name>p_text_region</name></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_text_region</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseImageAttachments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_attachments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_attachments_cnt</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator> <call><name>decoder_GetInputAttachments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_attachments</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_attachments_cnt</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>i_attachments_cnt</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attach</name> <init>= <expr><name><name>pp_attachments</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>type</name> <init>= <expr><call><name>image_Mime2Fourcc</name><argument_list>( <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_attach</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_attach</name><operator>-&gt;</operator><name>p_data</name></name> <operator>!=</operator> <name>NULL</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_image</name> <operator>=</operator> <call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_image</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>es_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>es_in</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>module_exists</name><argument_list>( <argument><expr><literal type="string">"sdl_image"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"codec"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"codec"</literal></expr></argument>, <argument><expr><literal type="string">"sdl_image"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>image_Read</name><argument_list>( <argument><expr><name>p_image</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>es_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>es_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name>p_image</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>image_attach_t</name> <modifier>*</modifier></type><name>p_picture</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>image_attach_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_picture</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>psz_filename</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <name>p_pic</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_images</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name></name></expr></argument>, <argument><expr><name>p_picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name><name>pp_attachments</name><index>[ <expr><name>k</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_attachments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseUSFHeaderTags</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssa_style_t</name> <modifier>*</modifier></type><name>p_ssa_style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_style_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_metadata_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<switch>switch <condition>(<expr><name>i_style_level</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"metadata"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_metadata_level</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_metadata_level</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"styles"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_style_level</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"style"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ssa_styles</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name></name></expr></argument>, <argument><expr><name>p_ssa_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ssa_style</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_style_level</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"metadata"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_style_level</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_metadata_level</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"resolution"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>i_metadata_level</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_original_width</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_original_height</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"styles"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_style_level</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_style_level</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"style"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_style_level</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_style_level</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ssa_style</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssa_style_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_ssa_style</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_ssa_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ssa_styles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_stylename</name></expr></argument>, <argument><expr><literal type="string">"Default"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ssa_style_t</name> <modifier>*</modifier></type><name>p_default_style</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_ssa_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_orig_text_style</name> <init>= <expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_ssa_style</name></expr></argument>, <argument><expr><name>p_default_style</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ssa_style_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <name>p_orig_text_style</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>psz_stylename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Copy</name><argument_list>( <argument><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument>, <argument><expr><name><name>p_default_style</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>psz_stylename</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>psz_stylename</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"fontstyle"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_style_level</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"face"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>*</operator><name>val</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <operator>*</operator><name>val</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_value</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_value</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">5</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_value</name> <operator>&lt;=</operator> <literal type="number">5</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>+=</operator>

<operator>(</operator> <name>i_value</name> <operator>*</operator> <name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_value</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <operator>-</operator> <name>i_value</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_value</name> <operator>&gt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <name>i_value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"italic"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"yes"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_ITALIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"weight"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"bold"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_BOLD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"underline"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"yes"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_UNDERLINE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"color"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>val</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>col</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>val</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <operator>(</operator><name>col</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <operator>(</operator><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name>

<operator>|</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"outline-color"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>val</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>col</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>val</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_outline_color</name></name> <operator>=</operator> <operator>(</operator><name>col</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_outline_alpha</name></name> <operator>=</operator> <operator>(</operator><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_OUTLINE_COLOR</name>

<operator>|</operator> <name>STYLE_HAS_OUTLINE_ALPHA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"outline-level"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_outline_width</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"shadow-color"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>val</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>col</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>val</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_shadow_color</name></name> <operator>=</operator> <operator>(</operator><name>col</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_shadow_alpha</name></name> <operator>=</operator> <operator>(</operator><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_SHADOW_COLOR</name>

<operator>|</operator> <name>STYLE_HAS_SHADOW_ALPHA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"shadow-level"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_shadow_width</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"spacing"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_spacing</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"position"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_style_level</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"alignment"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"TopLeft"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"TopCenter"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"TopRight"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"MiddleLeft"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"MiddleCenter"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"MiddleRight"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"BottomLeft"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"BottomCenter"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"BottomRight"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"horizontal-margin"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_percent_h</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_h</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_percent_h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"vertical-margin"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_percent_v</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_v</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ssa_style</name><operator>-&gt;</operator><name>i_margin_percent_v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ssa_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>ParseUSFString</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region_first</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region_upto</name> <init>= <expr><name>p_region_first</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz_subtitle</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&lt;karaoke "</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&lt;karaoke&gt;"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_end</name> <operator>=</operator> <call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&lt;/karaoke&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_end</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_text_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_flat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_knodes</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_subtitle</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>psz_end</name> <operator>-</operator> <operator>&amp;</operator><name><name>psz_subtitle</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_knodes</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_flat</name> <operator>=</operator> <call><name>CreatePlainText</name><argument_list>( <argument><expr><name>psz_knodes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_knodes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_flat</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_text_region</name> <operator>=</operator> <call><name>CreateTextRegion</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>,

<argument><expr><name>psz_flat</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_text_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>p_text</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>p_text</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_flat</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region_first</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_region_first</name> <operator>=</operator> <name>p_region_upto</name> <operator>=</operator> <name>p_text_region</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>p_text_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region_upto</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_text_region</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_region_upto</name> <operator>=</operator> <name><name>p_region_upto</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_flat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_end</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_end</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&lt;image "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&lt;image&gt;"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_image_region</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_end</name> <operator>=</operator> <call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&lt;/image&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_content</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_transparent</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><call><name>GrabAttributeValue</name><argument_list>( <argument><expr><literal type="string">"colorkey"</literal></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_tmp</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_tmp</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_transparent</name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>psz_tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_content</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>psz_content</name> <operator>&lt;</operator> <name>psz_end</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_content</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>psz_end</name> <operator>-</operator> <operator>&amp;</operator><name><name>psz_content</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_filename</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_image_region</name> <operator>=</operator> <call><name>LoadEmbeddedImage</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>,

<argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>i_transparent</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_end</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_end</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_end</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_image_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetupPositions</name><argument_list>( <argument><expr><name>p_image_region</name></expr></argument>, <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_image_region</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region_first</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_region_first</name> <operator>=</operator> <name>p_region_upto</name> <operator>=</operator> <name>p_image_region</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>p_image_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region_upto</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_image_region</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_region_upto</name> <operator>=</operator> <name><name>p_region_upto</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_text_region</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_end</name> <operator>=</operator> <name>psz_subtitle</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_text_region</name> <operator>=</operator> <call><name>CreateTextRegion</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>,

<argument><expr><name>psz_subtitle</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_align</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_text_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>p_text</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_text_region</name><operator>-&gt;</operator><name>p_text</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>CreatePlainText</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region_first</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_region_first</name> <operator>=</operator> <name>p_region_upto</name> <operator>=</operator> <name>p_text_region</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>p_text_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region_upto</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_text_region</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_region_upto</name> <operator>=</operator> <name><name>p_region_upto</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_end</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_subtitle</name> <operator>=</operator> <name>psz_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>p_region_first</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseUSFHeader</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_sub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sub</name> <operator>=</operator> <call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>,

<argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sub</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_xml_reader</name> <operator>=</operator> <call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_sub</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_xml_reader</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>XML_READER_STARTELEM</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"usfsubtitles"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ParseUSFHeaderTags</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_sub</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>StripTags</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <name>psz_text_start</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text_start</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz_subtitle</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psz_subtitle</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&lt;br/&gt;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&amp;lt;"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text</name><operator>++</operator> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&amp;gt;"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text</name><operator>++</operator> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&amp;amp;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text</name><operator>++</operator> <operator>=</operator> <literal type="char">'&amp;'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">"&amp;quot;"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text</name><operator>++</operator> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_subtitle</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text</name><operator>++</operator> <operator>=</operator> <literal type="char">'&amp;'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>psz_subtitle</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_subtitle</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_subtitle</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>psz_text</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name>psz_text_start</name></expr></argument>, <argument><expr><name>psz_text</name> <operator>-</operator> <name>psz_text_start</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name>psz</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>psz</name></expr> </then><else>: <expr><name>psz_text_start</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>CreatePlainText</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_subtitle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><call><name>StripTags</name><argument_list>( <argument><expr><name>psz_subtitle</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"\t\r\n "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>s</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>spc</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_whitespace</name> <init>= <expr><call><name>strspn</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\t\r\n "</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>i_whitespace</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>spc</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>i_whitespace</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><name>i_whitespace</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>i_whitespace</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>spc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\t\r\n "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>psz_text</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>LoadEmbeddedImage</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_transparent_color</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_images</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>psz_filename</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pp_images</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>p_pic</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unable to read image %s"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>video_format_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_YUVA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_region</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_transparent_color</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_r</name> <init>= <expr><operator>(</operator> <name>i_transparent_color</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_g</name> <init>= <expr><operator>(</operator> <name>i_transparent_color</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_b</name> <init>= <expr><operator>(</operator> <name>i_transparent_color</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_y</name> <init>= <expr><operator>(</operator> <operator>(</operator> <operator>(</operator> <literal type="number">66</literal> <operator>*</operator> <name>i_r</name> <operator>+</operator> <literal type="number">129</literal> <operator>*</operator> <name>i_g</name> <operator>+</operator> <literal type="number">25</literal> <operator>*</operator> <name>i_b</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_u</name> <init>= <expr><operator>(</operator> <operator>(</operator> <operator>-</operator><literal type="number">38</literal> <operator>*</operator> <name>i_r</name> <operator>-</operator> <literal type="number">74</literal> <operator>*</operator> <name>i_g</name> <operator>+</operator> <literal type="number">112</literal> <operator>*</operator> <name>i_b</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_v</name> <init>= <expr><operator>(</operator> <operator>(</operator> <literal type="number">112</literal> <operator>*</operator> <name>i_r</name> <operator>-</operator> <literal type="number">94</literal> <operator>*</operator> <name>i_g</name> <operator>-</operator> <literal type="number">18</literal> <operator>*</operator> <name>i_b</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></init></decl> ;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PIXELS</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PITCH</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>!=</operator> <name>i_y</name> <operator>||</operator>

<name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>U_PIXELS</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>U_PITCH</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>!=</operator> <name>i_u</name> <operator>||</operator>

<name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>V_PIXELS</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>V_PITCH</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>!=</operator> <name>i_v</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>A_PIXELS</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>A_PITCH</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_region</name></expr>;</return>

</block_content>}</block></function>

</unit>
