<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\uleaddvaudio.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/rawdv.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Ulead DV audio decoder"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACODEC</argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_pal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_12bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>shuffle</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DecodeBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>block_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>block_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>*</operator><name>block_ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Flush</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>block_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>block_size</name> <init>= <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>is_pal</name></name></expr> ?</condition><then> <expr><literal type="number">8640</literal></expr> </then><else>: <expr><literal type="number">7200</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <name>block_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>block_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_count</name> <init>= <expr><call><name>dv_get_audio_sample_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">244</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>is_pal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>decoder_NewAudioBuffer</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>sample_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>sample_count</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>output</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sample_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>shuffle</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>is_12bit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>dv_audio_12to16</name><argument_list>(<argument><expr><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>dv_audio_12to16</name><argument_list>(<argument><expr><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>is_pal</name></name></expr> ?</condition><then> <expr><literal type="number">4320</literal></expr> </then><else>: <expr><literal type="number">3600</literal></expr></else></ternary></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>output</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeAudio</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>block_ptr</name> <init>= <expr><operator>&amp;</operator><name>block</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>out</name> <operator>=</operator> <call><name>DecodeBlock</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>block_ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>(<argument><expr><name>dec</name></expr></argument>,<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_ULEAD_DV_AUDIO_NTSC</name> <operator>&amp;&amp;</operator>

<name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_ULEAD_DV_AUDIO_PAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>!=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_pal</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_ULEAD_DV_AUDIO_PAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_12bit</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>==</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>shuffle</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sys</name><operator>-&gt;</operator><name>shuffle</name></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>a</name> <init>= <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>is_pal</name></name></expr> ?</condition><then> <expr><literal type="number">18</literal></expr> </then><else>: <expr><literal type="number">15</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>shuffle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">80</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">21</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>/</operator> <name>a</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <name>b</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>is_12bit</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i</name> <operator>/</operator> <name>b</name><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeAudio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
