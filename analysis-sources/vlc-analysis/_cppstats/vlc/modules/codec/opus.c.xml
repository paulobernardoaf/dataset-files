<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\opus.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/xiph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ogg/ogg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opus.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opus_multistream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus_header.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPUS_SET_GAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACODEC</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Opus audio decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Opus"</literal>)</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Opus audio encoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">150</literal></argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Opus"</literal>)</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenEncoder</argument>, <argument>CloseEncoder</argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpusHeader</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpusMSDecoder</name> <modifier>*</modifier></type><name>p_st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_channels_maps</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARLEFT</name>

<operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARCENTER</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_REARLEFT</name>

<operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_8channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_MIDDLELEFT</name></expr>, <expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>,<expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_7channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_MIDDLELEFT</name></expr>, <expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_6channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_5channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_4channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_3channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeAudio</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ProcessHeaders</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ProcessInitialHeader</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ProcessPacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DecodePacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_OPUS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeAudio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_st</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>oggpacket</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ProcessHeaders</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ProcessPacket</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oggpacket</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeAudio</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessHeaders</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>oggpacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_size</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>pp_data</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_dummy_header</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_extra</name> <operator>||</operator>

<operator>(</operator><name>i_extra</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"OpusHead"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>OpusHeader</name></type> <name>header</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>opus_prepare_header</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>opus_write_header</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>,

<argument><expr><call><name>opus_get_version_string</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_dummy_header</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xiph_SplitHeaders</name><argument_list>( <argument><expr><name>pi_size</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_count</name></expr></argument>,

<argument><expr><name>i_extra</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_dummy_header</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_dummy_header</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oggpacket</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pp_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ProcessInitialHeader</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oggpacket</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"initial Opus header is corrupted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_dummy_header</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessInitialHeader</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>p_oggpacket</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p_stream_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>new_stream_map</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpusHeader</name> <modifier>*</modifier></type><name>p_header</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>opus_header_parse</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>p_oggpacket</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>,<argument><expr><name><name>p_oggpacket</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>,<argument><expr><name>p_header</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot read Opus header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Opus audio with %d channels"</literal></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p_header</name><operator>-&gt;</operator><name>channel_mapping</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name><operator>&gt;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>p_header</name><operator>-&gt;</operator><name>channel_mapping</name></name><operator>==</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name><operator>&gt;</operator><literal type="number">18</literal> <operator>&amp;&amp;</operator> <name><name>p_header</name><operator>-&gt;</operator><name>channel_mapping</name></name><operator>==</operator><literal type="number">2</literal><operator>)</operator> <operator>||</operator>

<name><name>p_header</name><operator>-&gt;</operator><name>channel_mapping</name></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unsupported channel mapping"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_header</name><operator>-&gt;</operator><name>channel_mapping</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_order</name> <init>= <expr><call><name>floor</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nondiegetic</name> <init>= <expr><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <name>i_order</name> <operator>*</operator> <name>i_order</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_nondiegetic</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_nondiegetic</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unsupported ambisonic channel mapping"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_header</name><operator>-&gt;</operator><name>channel_mapping</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator>

<name><name>pi_channels_maps</name><index>[<expr><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name><operator>&gt;</operator><literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name><name>pi_ch</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>pi_3channels_in</name></expr>, <expr><name>pi_4channels_in</name></expr>,

<expr><name>pi_5channels_in</name></expr>, <expr><name>pi_6channels_in</name></expr>,

<expr><name>pi_7channels_in</name></expr>, <expr><name>pi_8channels_in</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_chan_table</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_CheckChannelReorder</name><argument_list>( <argument><expr><name><name>pi_ch</name><index>[<expr><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name>pi_chan_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_stream_map</name><index>[<expr><name><name>pi_chan_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>p_header</name><operator>-&gt;</operator><name>stream_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p_stream_map</name> <operator>=</operator> <name>new_stream_map</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_stream_map</name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>stream_map</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_AMBISONICS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_stream_map</name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>stream_map</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_st</name></name> <operator>=</operator> <call><name>opus_multistream_decoder_create</name><argument_list>( <argument><expr><literal type="number">48000</literal></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>, <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>nb_coupled</name></name></expr></argument>,

<argument><expr><name>p_stream_map</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_st</name></name> <operator>||</operator> <name>err</name><operator>!=</operator><name>OPUS_OK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"decoder initialization failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPUS_SET_GAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><call><name>opus_multistream_decoder_ctl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_st</name></name></expr></argument>,<argument><expr><call><name>OPUS_SET_GAIN</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call> <operator>!=</operator> <name>OPUS_OK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"OPUS_SET_GAIN failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opus_multistream_decoder_destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_st</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><literal type="number">48000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ProcessPacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>p_oggpacket</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>|</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_max_duration</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_END_OF_SEQUENCE</name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buffer</name> <init>= <expr><call><name>DecodePacket</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_oggpacket</name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>,

<argument><expr><name>i_max_duration</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_aout_buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DecodePacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>p_oggpacket</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_nb_samples</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_oggpacket</name><operator>-&gt;</operator><name>bytes</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spp</name><operator>=</operator><call><name>opus_packet_get_nb_frames</name><argument_list>(<argument><expr><name><name>p_oggpacket</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>,<argument><expr><name><name>p_oggpacket</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>spp</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>spp</name><operator>*=</operator><call><name>opus_packet_get_samples_per_frame</name><argument_list>(<argument><expr><name><name>p_oggpacket</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>,<argument><expr><literal type="number">48000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>spp</name><argument_list type="generic">&lt;<argument><expr><literal type="number">120</literal><operator>||</operator><name>spp</name></expr></argument>&gt;</argument_list></name><literal type="number">120</literal><operator>*</operator><literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content><return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>i_nb_samples</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_nb_samples</name> <operator>=</operator> <name>spp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buffer</name><init>=<expr><call><name>decoder_NewAudioBuffer</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>spp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_aout_buffer</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Oops: No new buffer was returned!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spp</name><operator>=</operator><call><name>opus_multistream_decode_float</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_st</name></name></expr></argument>, <argument><expr><name><name>p_oggpacket</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>,

<argument><expr><name><name>p_oggpacket</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>spp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_end_trim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_duration</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>spp</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>i_duration</name> <operator>&lt;</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i_nb_samples</name></expr></argument>, <argument><expr><literal type="number">48000</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_end_trim</name> <operator>=</operator> <name>spp</name> <operator>-</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>i_duration</name></expr></argument>, <argument><expr><literal type="number">48000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>spp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>spp</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_nb_samples</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_end_trim</name> <operator>&gt;=</operator> <name>i_nb_samples</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_aout_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>spp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Error: corrupted stream?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <operator>(</operator><name>i_nb_samples</name> <operator>-</operator> <name>i_end_trim</name><operator>)</operator> <operator>*</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>spp</name> <operator>&gt;</operator> <name>i_nb_samples</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name>

<operator>+</operator> <operator>(</operator><name>spp</name> <operator>-</operator> <name>i_nb_samples</name><operator>)</operator><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>channels</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_nb_samples</name> <operator>-=</operator> <name>i_end_trim</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPUS_SET_GAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>gain</name></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>gain</name></name><operator>/</operator><literal type="number">5120.</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>=<expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_samples</name><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>gain</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>i_nb_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>i_nb_samples</name></expr></argument> )</argument_list></call>

<operator>-</operator> <name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_aout_buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type> <name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_st</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>opus_multistream_decoder_destroy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>OPUS_FRAME_SIZE</name> <init>= <expr><literal type="number">960</literal></expr></init></decl>;</decl_stmt> 

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>OpusMSEncoder</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_nb_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_samples_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>padding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_streams</name></decl>;</decl_stmt>

}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>fill_buffer</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>src_start</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>channels</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src_buf</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator> <name><name>src</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>)</operator> <operator>+</operator> <name>src_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dest_buf</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name>channels</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>len</name> <init>= <expr><name>samples</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest_buf</name></expr></argument>, <argument><expr><name>src_buf</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>+=</operator> <name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_start</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>-=</operator> <name>samples</name></expr>;</expr_stmt>

<return>return <expr><name>src_start</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator>

<call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>src_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>padding_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>OPUS_MAX_ENCODED_BYTES</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1275</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>&gt;=</operator> <name>OPUS_FRAME_SIZE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>OPUS_MAX_ENCODED_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>leftover_space</name> <init>= <expr><name>OPUS_FRAME_SIZE</name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>padding_start</name> <operator>=</operator> <call><name>fill_buffer</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>padding_start</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>,

<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>, <argument><expr><name>leftover_space</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>leftover_space</name> <init>= <expr><name>OPUS_FRAME_SIZE</name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src_start</name> <operator>=</operator> <call><name>fill_buffer</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>src_start</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,

<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>, <argument><expr><name>leftover_space</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>opus_int32</name></type> <name>bytes_encoded</name> <init>= <expr><call><name>opus_multistream_encode_float</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,

<argument><expr><name>OPUS_FRAME_SIZE</name></expr></argument>, <argument><expr><name><name>out_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>out_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_encoded</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>out_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>out_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name>OPUS_FRAME_SIZE</name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>out_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>-=</operator> <name>OPUS_FRAME_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pts</name> <operator>+=</operator> <name><name>out_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>bytes_encoded</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>out_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>src_start</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_OPUS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>pf_encode_audio</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> 

<name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>OpusHeader</name></type> <name>header</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>opus_prepare_header</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>nb_streams</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator>

<call><name>opus_multistream_surround_encoder_create</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>channel_mapping</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>header</name><operator>.</operator><name>nb_streams</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>.</operator><name>nb_coupled</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>stream_map</name></name></expr></argument>,

<argument><expr><name>OPUS_APPLICATION_AUDIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>OPUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Could not create encoder: error %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>opus_multistream_encoder_ctl</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><call><name>OPUS_SET_BITRATE</name><argument_list>( <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>OPUS_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>opus_multistream_encoder_ctl</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>,

<argument><expr><call><name>OPUS_GET_LOOKAHEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>OPUS_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to get number of lookahead samples: %s\n"</literal></expr></argument>,

<argument><expr><call><name>opus_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>header</name><operator>.</operator><name>preskip</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opus_write_header</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><call><name>opus_get_version_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Failed to write header."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>padding_samples</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>*</operator>

<name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name>padding_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pad_ptr</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name><name>sys</name><operator>-&gt;</operator><name>padding</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pad_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>status</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>enc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>opus_multistream_encoder_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>opus_multistream_encoder_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
