<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\qsv.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture_pool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc_fifo_helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/mpeg/timestamps.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-qsv-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_CO2</name></cpp:macro> <cpp:value>(MFX_VERSION_MAJOR &gt; 1 || (MFX_VERSION_MAJOR == 1 &amp;&amp; MFX_VERSION_MINOR &gt;= 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_SYNCPOINT_WAIT</name></cpp:macro> <cpp:value>(1000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_BUSYWAIT_TIME</name></cpp:macro> <cpp:value>VLC_HARD_MIN_SLEEP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_BITRATE_DEFAULT</name></cpp:macro> <cpp:value>(842)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SW_IMPL_TEXT</name></cpp:macro> <cpp:value>N_("Enable software mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SW_IMPL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Allow the use of the Intel Media SDK software " "implementation of the codecs if no QuickSync Video hardware " "acceleration is present on the system.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_TEXT</name></cpp:macro> <cpp:value>N_("Codec Profile")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Specify the codec profile explicitly. If you don't, the codec will " "determine the correct profile from other sources, such as resolution " "and bitrate. E.g. 'high'")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_TEXT</name></cpp:macro> <cpp:value>N_("Codec Level")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Specify the codec level explicitly. If you don't, the codec will " "determine the correct profile from other sources, such as resolution " "and bitrate. E.g. '4.2' for mpeg4-part10 or 'low' for mpeg2")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOP_SIZE_TEXT</name></cpp:macro> <cpp:value>N_("Group of Picture size")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOP_SIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of pictures within the current GOP (Group of Pictures); if " "GopPicSize=0, then the GOP size is unspecified. If GopPicSize=1, " "only I-frames are used.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOP_REF_DIST_TEXT</name></cpp:macro> <cpp:value>N_("Group of Picture Reference Distance")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOP_REF_DIST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Distance between I- or P- key frames; if it is zero, the GOP " "structure is unspecified. Note: If GopRefDist = 1, there are no B-" "frames used.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_USAGE_TEXT</name></cpp:macro> <cpp:value>N_("Target Usage")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_USAGE_LONGTEXT</name></cpp:macro> <cpp:value>N_("The target usage allow to choose between " "different trade-offs between quality and speed. Allowed values are: " "'speed', 'balanced' and 'quality'.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDR_INTERVAL_TEXT</name></cpp:macro> <cpp:value>N_("IDR interval")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDR_INTERVAL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "For H.264, IdrInterval specifies IDR-frame interval in terms of I-" "frames; if IdrInterval=0, then every I-frame is an IDR-frame. If " "IdrInterval=1, then every other I-frame is an IDR-frame, etc. " "For MPEG2, IdrInterval defines sequence header interval in terms " "of I-frames. If IdrInterval=N, SDK inserts the sequence header " "before every Nth I-frame. If IdrInterval=0 (default), SDK inserts " "the sequence header once at the beginning of the stream.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATE_CONTROL_TEXT</name></cpp:macro> <cpp:value>N_("Rate Control Method")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATE_CONTROL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The rate control method to use when encoding. Can be one of " "'cbr', 'vbr', 'qp', 'avbr'. 'qp' mode isn't supported for mpeg2.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QP_TEXT</name></cpp:macro> <cpp:value>N_("Quantization parameter")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QP_LONGTEXT</name></cpp:macro> <cpp:value>N_("Quantization parameter for all types of frames. " "This parameters sets qpi, qpp and qpb. It has less precedence than " "the forementionned parameters. Used only if rc_method is 'qp'.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPI_TEXT</name></cpp:macro> <cpp:value>N_("Quantization parameter for I-frames")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPI_LONGTEXT</name></cpp:macro> <cpp:value>N_("Quantization parameter for I-frames. This parameter " "overrides any qp set globally. Used only if rc_method is 'qp'.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPP_TEXT</name></cpp:macro> <cpp:value>N_("Quantization parameter for P-frames")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPP_LONGTEXT</name></cpp:macro> <cpp:value>N_("Quantization parameter for P-frames. This parameter " "overrides any qp set globally. Used only if rc_method is 'qp'.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPB_TEXT</name></cpp:macro> <cpp:value>N_("Quantization parameter for B-frames")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPB_LONGTEXT</name></cpp:macro> <cpp:value>N_("Quantization parameter for B-frames. This parameter " "overrides any qp set globally. Used only if rc_method is 'qp'.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BITRATE_TEXT</name></cpp:macro> <cpp:value>N_("Maximum Bitrate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BITRATE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Defines the maximum bitrate in kbps " "(1000 bits/s) for VBR rate control method. If not set, this parameter" " is computed from other sources such as bitrate, profile, level, etc.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCURACY_TEXT</name></cpp:macro> <cpp:value>N_("Accuracy of RateControl")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCURACY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Tolerance in percentage of the 'avbr' " " (Average Variable BitRate) method. (e.g. 10 with a bitrate of 800 " " kbps means the encoder tries not to go above 880 kbps and under " " 730 kbps. The targeted accuracy is only reached after a certained " " convergence period. See the convergence parameter")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERGENCE_TEXT</name></cpp:macro> <cpp:value>N_("Convergence time of 'avbr' RateControl")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERGENCE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of 100 frames before the " "'avbr' rate control method reaches the requested bitrate with " "the requested accuracy. See the accuracy parameter.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SLICE_TEXT</name></cpp:macro> <cpp:value>N_("Number of slices per frame")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SLICE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of slices in each video frame; ""each slice contains one or more macro-block rows. If numslice is " "not set, the encoder may choose any slice partitioning allowed " "by the codec standard.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_REF_FRAME_TEXT</name></cpp:macro> <cpp:value>N_("Number of reference frames")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_REF_FRAME_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of reference frames")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_DEPTH_TEXT</name></cpp:macro> <cpp:value>N_("Number of parallel operations")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_DEPTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Defines the number of parallel " "encoding operations before we synchronise the result. Higher " "numbers may result on better throughput depending on hardware. " "MPEG2 needs at least 1 here.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>profile_h264_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>MFX_PROFILE_UNKNOWN</name></expr>, <expr><name>MFX_PROFILE_AVC_CONSTRAINED_BASELINE</name></expr>, <expr><name>MFX_PROFILE_AVC_MAIN</name></expr>,

<expr><name>MFX_PROFILE_AVC_EXTENDED</name></expr>, <expr><name>MFX_PROFILE_AVC_HIGH</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>profile_h264_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"decide"</literal></expr>, <expr><literal type="string">"baseline"</literal></expr>, <expr><literal type="string">"main"</literal></expr>, <expr><literal type="string">"extended"</literal></expr>, <expr><literal type="string">"high"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>profile_mpeg2_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>MFX_PROFILE_UNKNOWN</name></expr>, <expr><name>MFX_PROFILE_MPEG2_SIMPLE</name></expr>, <expr><name>MFX_PROFILE_MPEG2_MAIN</name></expr>,

<expr><name>MFX_PROFILE_MPEG2_HIGH</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>profile_mpeg2_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"decide"</literal></expr>, <expr><literal type="string">"simple"</literal></expr>, <expr><literal type="string">"main"</literal></expr>, <expr><literal type="string">"high"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>level_h264_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>MFX_LEVEL_UNKNOWN</name></expr>, <expr><name>MFX_LEVEL_AVC_1</name></expr>, <expr><name>MFX_LEVEL_AVC_1b</name></expr>, <expr><name>MFX_LEVEL_AVC_12</name></expr>,

<expr><name>MFX_LEVEL_AVC_13</name></expr>, <expr><name>MFX_LEVEL_AVC_2</name></expr>, <expr><name>MFX_LEVEL_AVC_21</name></expr>, <expr><name>MFX_LEVEL_AVC_22</name></expr>,

<expr><name>MFX_LEVEL_AVC_3</name></expr>, <expr><name>MFX_LEVEL_AVC_31</name></expr>, <expr><name>MFX_LEVEL_AVC_32</name></expr>, <expr><name>MFX_LEVEL_AVC_4</name></expr>,

<expr><name>MFX_LEVEL_AVC_41</name></expr>, <expr><name>MFX_LEVEL_AVC_42</name></expr>, <expr><name>MFX_LEVEL_AVC_5</name></expr>, <expr><name>MFX_LEVEL_AVC_51</name></expr>,

<expr><name>MFX_LEVEL_AVC_52</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>level_h264_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"decide"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1.1b"</literal></expr>, <expr><literal type="string">"1.2"</literal></expr>, <expr><literal type="string">"1.3"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"2.1"</literal></expr>, <expr><literal type="string">"2.2"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><literal type="string">"3.1"</literal></expr>,

<expr><literal type="string">"3.2"</literal></expr>, <expr><literal type="string">"4"</literal></expr>, <expr><literal type="string">"4.1"</literal></expr>, <expr><literal type="string">"4.2"</literal></expr>, <expr><literal type="string">"5"</literal></expr>, <expr><literal type="string">"5.1"</literal></expr>, <expr><literal type="string">"5.2"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>level_mpeg2_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>MFX_LEVEL_UNKNOWN</name></expr>, <expr><name>MFX_LEVEL_MPEG2_LOW</name></expr>, <expr><name>MFX_LEVEL_MPEG2_MAIN</name></expr>,

<expr><name>MFX_LEVEL_MPEG2_HIGH</name></expr>, <expr><name>MFX_LEVEL_MPEG2_HIGH1440</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>level_mpeg2_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"decide"</literal></expr>, <expr><literal type="string">"low"</literal></expr>, <expr><literal type="string">"main"</literal></expr>, <expr><literal type="string">"high"</literal></expr>, <expr><literal type="string">"high1440"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>target_usage_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>MFX_TARGETUSAGE_UNKNOWN</name></expr>, <expr><name>MFX_TARGETUSAGE_BEST_QUALITY</name></expr>, <expr><name>MFX_TARGETUSAGE_BALANCED</name></expr>,

<expr><name>MFX_TARGETUSAGE_BEST_SPEED</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>target_usage_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"decide"</literal></expr>, <expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">"balanced"</literal></expr>, <expr><literal type="string">"speed"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>rc_method_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>MFX_RATECONTROL_CBR</name></expr>, <expr><name>MFX_RATECONTROL_VBR</name></expr>,

<expr><name>MFX_RATECONTROL_CQP</name></expr>, <expr><name>MFX_RATECONTROL_AVBR</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>rc_method_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"cbr"</literal></expr>, <expr><literal type="string">"vbr"</literal></expr>, <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"avbr"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_VCODEC</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Intel QuickSync Video encoder for MPEG4-Part10/MPEG2 (aka H.264/H.262)"</literal>)</argument>)</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"qsv"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"software"</literal></argument>, <argument>false</argument>, <argument>SW_IMPL_TEXT</argument>, <argument>SW_IMPL_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"h264-profile"</literal></argument>, <argument><literal type="string">"unspecified"</literal></argument> , <argument>PROFILE_TEXT</argument>, <argument>PROFILE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>profile_h264_text</argument>, <argument>profile_h264_text</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"h264-level"</literal></argument>, <argument><literal type="string">"unspecified"</literal></argument>, <argument>LEVEL_TEXT</argument>, <argument>LEVEL_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>level_h264_text</argument>, <argument>level_h264_text</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"mpeg2-profile"</literal></argument>, <argument><literal type="string">"unspecified"</literal></argument>, <argument>PROFILE_TEXT</argument>, <argument>PROFILE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>profile_mpeg2_text</argument>, <argument>profile_mpeg2_text</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"mpeg2-level"</literal></argument>, <argument><literal type="string">"unspecified"</literal></argument>, <argument>LEVEL_TEXT</argument>, <argument>LEVEL_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>level_mpeg2_text</argument>, <argument>level_mpeg2_text</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"gop-size"</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>GOP_SIZE_TEXT</argument>, <argument>GOP_SIZE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"gop-refdist"</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument>GOP_REF_DIST_TEXT</argument>, <argument>GOP_REF_DIST_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"idr-interval"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>IDR_INTERVAL_TEXT</argument>, <argument>IDR_INTERVAL_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"target-usage"</literal></argument>, <argument><literal type="string">"quality"</literal></argument>, <argument>TARGET_USAGE_TEXT</argument>, <argument>TARGET_USAGE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>target_usage_text</argument>, <argument>target_usage_text</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"rc-method"</literal></argument>, <argument><literal type="string">"vbr"</literal></argument>, <argument>RATE_CONTROL_TEXT</argument>, <argument>RATE_CONTROL_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>rc_method_text</argument>, <argument>rc_method_text</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"qp"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>QP_TEXT</argument>, <argument>QP_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">51</literal></argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"qpi"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>QPI_TEXT</argument>, <argument>QPI_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">51</literal></argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"qpp"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>QPP_TEXT</argument>, <argument>QPP_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">51</literal></argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"qpb"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>QPB_TEXT</argument>, <argument>QPB_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">51</literal></argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"bitrate-max"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>MAX_BITRATE_TEXT</argument>, <argument>MAX_BITRATE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"accuracy"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ACCURACY_TEXT</argument>, <argument>ACCURACY_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"convergence"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>CONVERGENCE_TEXT</argument>, <argument>CONVERGENCE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"num-slice"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>NUM_SLICE_TEXT</argument>, <argument>NUM_SLICE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"num-ref-frame"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>NUM_REF_FRAME_TEXT</argument>, <argument>NUM_REF_FRAME_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"async-depth"</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument>ASYNC_DEPTH_TEXT</argument>, <argument>ASYNC_DEPTH_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>sout_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"software"</literal></expr>, <expr><literal type="string">"h264-profile"</literal></expr>, <expr><literal type="string">"h264-level"</literal></expr>, <expr><literal type="string">"mpeg2-profile"</literal></expr>, <expr><literal type="string">"mpeg2-level"</literal></expr>,

<expr><literal type="string">"gop-size"</literal></expr>, <expr><literal type="string">"gop-refdist"</literal></expr>, <expr><literal type="string">"target-usage"</literal></expr>, <expr><literal type="string">"rc-method"</literal></expr>, <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"qpi"</literal></expr>, <expr><literal type="string">"qpp"</literal></expr>,

<expr><literal type="string">"qpb"</literal></expr>, <expr><literal type="string">"bitrate-max"</literal></expr>, <expr><literal type="string">"accuracy"</literal></expr>, <expr><literal type="string">"convergence"</literal></expr>, <expr><literal type="string">"num-slice"</literal></expr>,

<expr><literal type="string">"num-ref-frame"</literal></expr>, <expr><literal type="string">"async-depth"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>_QSVFrame</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>_QSVFrame</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name></type> <name>surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxEncodeCtrl</name></type> <name>enc_ctrl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>

}</block></struct></type> <name>QSVFrame</name>;</typedef>

<typedef>typedef <type><struct>struct <name>async_task_t</name>

<block>{

<decl_stmt><decl><type><name>fifo_item_t</name></type> <name>fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxBitstream</name></type> <name>bs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>syncp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt> 

}</block></struct></type> <name>async_task_t</name>;</typedef>

<macro><name>TYPED_FIFO</name><argument_list>(<argument>async_task_t</argument>, <argument>async_task_t</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>mfxSession</name></type> <name>session</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mfxVideoParam</name></type> <name>params</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>work_frames</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dts_warn_counter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>busy_warn_counter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>async_depth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>fifo_t</name></type> <name>packets</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>offset_pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_dts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>picture_pool_t</name> <modifier>*</modifier></type><name>input_pool</name></decl>;</decl_stmt> 

}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_unused_frames</name><parameter_list>(<parameter><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>work_frames</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>Locked</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_free_frame</name><parameter_list>(<parameter><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>QSVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_unused_frames</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>work_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>work_frames</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QSVFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>frame</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>qsv_params_get_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>list</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>sel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>sel</name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>list</name><index>[<expr><name>result</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>sts</name> <init>= <expr><name>MFX_ERR_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameAllocRequest</name></type> <name>alloc_request</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sps_buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pps_buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtCodingOptionSPSPPS</name></type> <name>headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtCodingOption</name></type> <name>co</name> <init>= <expr><block>{

<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION</name></expr>,

<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>PicTimingSEI</name> <operator>=</operator> <name>MFX_CODINGOPTION_ON</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>

<decl_stmt><decl><type><name>mfxExtCodingOption2</name></type> <name>co2</name> <init>= <expr><block>{

<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION2</name></expr>,

<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>co2</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier></type><name><name>init_params</name><index>[]</index></name> <init>=

<expr><block>{

<expr><operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>co</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>

<expr><operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>co2</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier></type><name><name>extended_params</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>headers</name></expr>,

<expr><operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>co</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>

<expr><operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>co2</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVersion</name></type> <name>ver</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVideoParam</name></type> <name>param_out</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_H264</name> <operator>&amp;&amp;</operator>

<name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MPGV</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>||</operator> <operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>||</operator>

<operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>||</operator> <operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Framerate and picture dimensions must be non-zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>sys</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sts</name> <operator>=</operator> <call><name>MFXInit</name><argument_list>(<argument><expr><name>MFX_IMPL_AUTO_ANY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sts</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sts</name> <operator>==</operator> <name>MFX_ERR_UNSUPPORTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Intel Media SDK implementation not supported, is your card plugged?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to find an Intel Media SDK implementation (%d)."</literal></expr></argument>, <argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>sout_options</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MFXQueryIMPL</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"software"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>impl</name> <operator>&amp;</operator> <name>MFX_IMPL_SOFTWARE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"No hardware implementation found and software mode disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Using Intel QuickSync Video %s implementation"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>impl</name> <operator>&amp;</operator> <name>MFX_IMPL_HARDWARE</name></expr> ?</condition><then> <expr><literal type="string">"hardware"</literal></expr> </then><else>: <expr><literal type="string">"software"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtN</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtD</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FourCC</name></name> <operator>=</operator> <name>MFX_FOURCC_NV12</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>ChromaFormat</name></name> <operator>=</operator> <name>MFX_CHROMAFORMAT_YUV420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <call><name>vlc_align</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropW</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropH</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>PicStruct</name></name> <operator>=</operator> <name>MFX_PICSTRUCT_PROGRESSIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>AspectRatioH</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>AspectRatioW</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>BitDepthChroma</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>BitDepthLuma</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>IOPattern</name></name> <operator>=</operator> <name>MFX_IOPATTERN_IN_SYSTEM_MEMORY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>AsyncDepth</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"async-depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>GopOptFlag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>GopPicSize</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"gop-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>GopRefDist</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"gop-refdist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>IdrInterval</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"idr-interval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>NumSlice</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"num-slice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>NumRefFrame</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"num-ref-frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>TargetUsage</name></name> <operator>=</operator> <call><name>qsv_params_get_value</name><argument_list>(<argument><expr><name>target_usage_text</name></expr></argument>,

<argument><expr><name>target_usage_list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>target_usage_list</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"target-usage"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecId</name></name> <operator>=</operator> <name>MFX_CODEC_AVC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecProfile</name></name> <operator>=</operator> <call><name>qsv_params_get_value</name><argument_list>(<argument><expr><name>profile_h264_text</name></expr></argument>,

<argument><expr><name>profile_h264_list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profile_h264_list</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"h264-profile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecLevel</name></name> <operator>=</operator> <call><name>qsv_params_get_value</name><argument_list>(<argument><expr><name>level_h264_text</name></expr></argument>,

<argument><expr><name>level_h264_list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>level_h264_list</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"h264-level"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Encoder in H264 mode, with profile %d and level %d"</literal></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecProfile</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecId</name></name> <operator>=</operator> <name>MFX_CODEC_MPEG2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecProfile</name></name> <operator>=</operator> <call><name>qsv_params_get_value</name><argument_list>(<argument><expr><name>profile_mpeg2_text</name></expr></argument>,

<argument><expr><name>profile_mpeg2_list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profile_mpeg2_list</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mpeg2-profile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecLevel</name></name> <operator>=</operator> <call><name>qsv_params_get_value</name><argument_list>(<argument><expr><name>level_mpeg2_text</name></expr></argument>,

<argument><expr><name>level_mpeg2_list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>level_mpeg2_list</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mpeg2-level"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Encoder in MPEG2 mode, with profile %d and level %d"</literal></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecProfile</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>param_out</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecId</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecId</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rc</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"rc-method"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Encoder using '%s' Rate Control method"</literal></expr></argument>, <argument><expr><name>psz_rc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name> <operator>=</operator> <call><name>qsv_params_get_value</name><argument_list>(<argument><expr><name>rc_method_text</name></expr></argument>,

<argument><expr><name>rc_method_list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rc_method_list</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>psz_rc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_CQP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>QPI</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>QPB</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>QPP</name></name> <operator>=</operator>

<call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>QPI</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qpi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>QPB</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qpb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>QPP</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"qpp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"No bitrate specified, using default %d"</literal></expr></argument>,

<argument><expr><name>QSV_BITRATE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>TargetKbps</name></name> <operator>=</operator> <name>QSV_BITRATE_DEFAULT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>TargetKbps</name></name> <operator>=</operator> <name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_AVBR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>Accuracy</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"accuracy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>Convergence</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"convergence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_VBR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>MaxKbps</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"bitrate-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sts</name> <operator>=</operator> <call><name>MFXVideoENCODE_Query</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>sts</name> <operator>&lt;</operator> <name>MFX_ERR_NONE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unsupported encoding parameters (%d)"</literal></expr></argument>, <argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name> <operator>!=</operator> <name><name>param_out</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unsupported control method %d got %d"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name></expr></argument>, <argument><expr><name><name>param_out</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MFXVideoENCODE_Query</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Error querying encoder params"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MFXVideoENCODE_QueryIOSurf</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc_request</name></expr></argument>)</argument_list></call><operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Failed to query for allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_NV12</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>pool_fmt</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pool_fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool_fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>input_pool</name></name> <operator>=</operator> <call><name>picture_pool_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pool_fmt</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>input_pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the internal pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>init_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>

<literal type="number">2</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sts</name> <operator>=</operator> <call><name>MFXVideoENCODE_Init</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sts</name> <operator>==</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Successfuly initialized video encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>sts</name> <operator>&lt;</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to initialize video encoder error (%d). "</literal> \

<literal type="string">" Most likely because of provided encoding parameters"</literal></expr></argument>, <argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Video encoder initialization : %d. The stream might be corrupted/invalid"</literal></expr></argument>, <argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION_SPSPPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>PPSBufSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pps_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>SPSBufSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sps_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>SPSBuffer</name></name> <operator>=</operator> <name>sps_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>PPSBuffer</name></name> <operator>=</operator> <name>pps_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>extended_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>

<literal type="number">3</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><literal type="number">2</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MFXVideoENCODE_GetVideoParam</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_extra</name> <operator>=</operator> <name><name>headers</name><operator>.</operator><name>SPSBufSize</name></name> <operator>+</operator> <name><name>headers</name><operator>.</operator><name>PPSBufSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_extra</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>nomem</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name><name>headers</name><operator>.</operator><name>SPSBuffer</name></name></expr></argument>, <argument><expr><name><name>headers</name><operator>.</operator><name>SPSBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_extra</name> <operator>+</operator> <name><name>headers</name><operator>.</operator><name>SPSBufSize</name></name></expr></argument>, <argument><expr><name><name>headers</name><operator>.</operator><name>PPSBuffer</name></name></expr></argument>, <argument><expr><name><name>headers</name><operator>.</operator><name>PPSBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>async_depth</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>AsyncDepth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>async_task_t_fifo_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_NV12</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<label><name>nomem</name>:</label>

<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MFXVideoENCODE_Close</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>async_task_t_fifo_Release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>input_pool</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_pool_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>input_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qsv_set_block_flags</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>frame_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>frame_type</name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_IDR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>frame_type</name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_P</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>frame_type</name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_I</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>frame_type</name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TYPE_PB</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qsv_set_block_ts</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>TimeStamp</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>offset_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>DecodeTimeStamp</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>offset_pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bs</name><operator>-&gt;</operator><name>DecodeTimeStamp</name></name> <operator>||</operator> <name><name>bs</name><operator>-&gt;</operator><name>DecodeTimeStamp</name></name> <operator>&gt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>bs</name><operator>-&gt;</operator><name>TimeStamp</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dts_warn_counter</name></name><operator>++</operator> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Encode returning empty DTS or DTS &gt; PTS. Your stream will be invalid. "</literal>

<literal type="string">" Please double-check they weren't any warning at encoder initialization "</literal>

<literal type="string">" and that you have the last version of Intel's drivers installed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>qsv_synchronize_block</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>async_task_t</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>sts</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>sts</name> <operator>=</operator> <call><name>MFXVideoCORE_SyncOperation</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>task</name><operator>-&gt;</operator><name>syncp</name></name></expr></argument>, <argument><expr><name>QSV_SYNCPOINT_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>sts</name> <operator>==</operator> <name>MFX_WRN_IN_EXECUTION</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>sts</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"SyncOperation failed (%d), outputting garbage data. "</literal>

<literal type="string">"Updating your drivers and/or changing the encoding settings might resolve this"</literal></expr></argument>, <argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>DataLength</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Empty encoded block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>DataLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name><name>task</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>DataOffset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsv_set_block_ts</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsv_set_block_flags</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>FrameType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,

<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>DecodeTimeStamp</name></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>last_dts</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>last_dts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>DataLength</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>DataOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>submit_frame</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>QSVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>qf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>get_free_frame</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to find an unlocked surface in the pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <call><name>picture_pool_Get</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>input_pool</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>qf</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to find an unlocked surface in the pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name><name>qf</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>, <argument><expr><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>qf</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <operator>(</operator><name><name>qf</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>qf</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name><operator>)</operator> <operator>==</operator> <name><name>qf</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>=</operator> <name>MFX_PICSTRUCT_PROGRESSIVE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>=</operator> <name>MFX_PICSTRUCT_FIELD_TFF</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>=</operator> <name>MFX_PICSTRUCT_FIELD_BFF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>PitchLow</name></name> <operator>=</operator> <name><name>qf</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>qf</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>UV</name></name> <operator>=</operator> <name><name>qf</name><operator>-&gt;</operator><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>TimeStamp</name></name> <operator>=</operator> <call><name>TO_SCALE_NZ</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>date</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>offset_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>new_frame</name> <operator>=</operator> <name>qf</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>async_task_t</name> <modifier>*</modifier></type><name>encode_frame</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>sts</name> <init>= <expr><name>MFX_ERR_MEMORY_ALLOC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>qsv_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>async_task_t</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>task</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>offset_pts</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>offset_pts</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>submit_frame</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qsv_frame</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to find an unlocked surface in the pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>task</name><operator>-&gt;</operator><name>syncp</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>task</name><operator>-&gt;</operator><name>syncp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate syncpoint for encoder output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>task</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BufferSizeInKB</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate block for encoder output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>MaxLength</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>bs</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qsv_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>surf</name> <operator>=</operator> <operator>&amp;</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>sts</name> <operator>=</operator> <call><name>MFXVideoENCODE_EncodeFrameAsync</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>surf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>syncp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sts</name> <operator>!=</operator> <name>MFX_WRN_DEVICE_BUSY</name> <operator>&amp;&amp;</operator> <name>sts</name> <operator>!=</operator> <name>MFX_WRN_IN_EXECUTION</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>busy_warn_counter</name></name><operator>++</operator> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Device is busy, let's wait and retry %d"</literal></expr></argument>, <argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sts</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>QSV_BUSYWAIT_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sts</name> <operator>==</operator> <name>MFX_ERR_MORE_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Encoder feeding phase, more data is needed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Encoder is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>sts</name> <operator>&lt;</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"Encoder not ready or error (%d), trying a reset..."</literal></expr></argument>, <argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MFXVideoENCODE_Reset</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>

<if_stmt><if>if <condition>(<expr><name>sts</name> <operator>&lt;</operator> <name>MFX_ERR_NONE</name> <operator>||</operator> <operator>(</operator><name>task</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>task</name><operator>-&gt;</operator><name>syncp</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>block</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>task</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>task</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>(<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>async_task_t</name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>pic</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>encode_frame</name><argument_list>( <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>task</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>async_task_t_fifo_Put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>async_task_t_fifo_GetCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>async_depth</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>pic</name> <operator>&amp;&amp;</operator> <call><name>async_task_t_fifo_GetCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>async_task_t_fifo_Show</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>syncp</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>async_task_t_fifo_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>qsv_synchronize_block</name><argument_list>( <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>task</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>syncp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

</unit>
