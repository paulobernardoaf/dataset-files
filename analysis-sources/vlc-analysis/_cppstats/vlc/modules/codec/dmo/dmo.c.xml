<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\dmo\dmo.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/copy.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMO_DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>long</name></type> (<name>STDCALL</name> <modifier>*</modifier><name>GETCLASS</name>) <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>GUID</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecoderOpen</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecoderClose</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>DecoderThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EncoderOpen</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EncoderClose</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeBlock</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EncOpen</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>LoadDMO</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IMediaObject</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CopyPicture</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"DirectMedia Object decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"dmo"</literal></argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>DecoderOpen</argument>, <argument>DecoderClose</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_VCODEC</argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"dmo"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>DecoderOpen</argument>, <argument>DecoderClose</argument>)</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"DirectMedia Object encoder"</literal>)</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"dmo"</literal></argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>EncoderOpen</argument>, <argument>EncoderClose</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hmsdmo_dll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMediaObject</name> <modifier>*</modifier></type><name>p_dmo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_min_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait_input</name></decl>, <name>wait_output</name>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ready</name></decl>, <name>b_works</name>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>IID_IWMCodecPrivateData</name> <init>= <expr><block>{<expr><literal type="number">0x73f0be8e</literal></expr>, <expr><literal type="number">0x57f7</literal></expr>, <expr><literal type="number">0x4f01</literal></expr>, <expr><block>{<expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xe</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>IID_IMediaObject</name> <init>= <expr><block>{<expr><literal type="number">0xd8ad0f58</literal></expr>, <expr><literal type="number">0x5494</literal></expr>, <expr><literal type="number">0x4102</literal></expr>, <expr><block>{<expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xf4</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>IID_IMediaBuffer</name> <init>= <expr><block>{<expr><literal type="number">0x59eff8b9</literal></expr>, <expr><literal type="number">0x938c</literal></expr>, <expr><literal type="number">0x4a26</literal></expr>, <expr><block>{<expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x37</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>MEDIATYPE_Video</name> <init>= <expr><block>{<expr><literal type="number">0x73646976</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0010</literal></expr>, <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x71</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>MEDIATYPE_Audio</name> <init>= <expr><block>{<expr><literal type="number">0x73647561</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0010</literal></expr>, <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x71</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>MEDIASUBTYPE_PCM</name> <init>= <expr><block>{<expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0010</literal></expr>, <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x71</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>MEDIASUBTYPE_IEEE_FLOAT</name> <init>= <expr><block>{<expr><literal type="number">0x00000003</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0010</literal></expr>, <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x71</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>FORMAT_VideoInfo</name> <init>= <expr><block>{<expr><literal type="number">0x05589f80</literal></expr>, <expr><literal type="number">0xc356</literal></expr>, <expr><literal type="number">0x11ce</literal></expr>, <expr><block>{<expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5a</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>FORMAT_WaveFormatEx</name> <init>= <expr><block>{<expr><literal type="number">0x05589f81</literal></expr>, <expr><literal type="number">0xc356</literal></expr>, <expr><literal type="number">0x11ce</literal></expr>, <expr><block>{<expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5a</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>GUID_NULL</name> <init>= <expr><block>{<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>MEDIASUBTYPE_I420</name> <init>= <expr><block>{<expr><literal type="number">0x30323449</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0010</literal></expr>, <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x71</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>MEDIASUBTYPE_YV12</name> <init>= <expr><block>{<expr><literal type="number">0x32315659</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0010</literal></expr>, <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x71</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>MEDIASUBTYPE_RGB24</name> <init>= <expr><block>{<expr><literal type="number">0xe436eb7d</literal></expr>, <expr><literal type="number">0x524f</literal></expr>, <expr><literal type="number">0x11ce</literal></expr>, <expr><block>{<expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x70</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>MEDIASUBTYPE_RGB565</name> <init>= <expr><block>{<expr><literal type="number">0xe436eb7b</literal></expr>, <expr><literal type="number">0x524f</literal></expr>, <expr><literal type="number">0x11ce</literal></expr>, <expr><block>{<expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x70</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wvc1</name> <init>= <expr><block>{ <expr><literal type="number">0xc9bfbccf</literal></expr>, <expr><literal type="number">0xe60e</literal></expr>, <expr><literal type="number">0x4588</literal></expr>, <expr><block>{ <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wmv9</name> <init>= <expr><block>{ <expr><literal type="number">0x724bb6a4</literal></expr>, <expr><literal type="number">0xe526</literal></expr>, <expr><literal type="number">0x450f</literal></expr>, <expr><block>{ <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x11</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wmv</name> <init>= <expr><block>{ <expr><literal type="number">0x82d353df</literal></expr>, <expr><literal type="number">0x90bd</literal></expr>, <expr><literal type="number">0x4382</literal></expr>, <expr><block>{ <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x34</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wms</name> <init>= <expr><block>{ <expr><literal type="number">0x7bafb3b1</literal></expr>, <expr><literal type="number">0xd8f4</literal></expr>, <expr><literal type="number">0x4279</literal></expr>, <expr><block>{ <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xde</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wmva</name> <init>=<expr><block>{ <expr><literal type="number">0x03be3ac4</literal></expr>, <expr><literal type="number">0x84b7</literal></expr>, <expr><literal type="number">0x4e0e</literal></expr>, <expr><block>{ <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x5a</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wma</name> <init>= <expr><block>{ <expr><literal type="number">0x874131cb</literal></expr>, <expr><literal type="number">0x4ecc</literal></expr>, <expr><literal type="number">0x443b</literal></expr>, <expr><block>{ <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x20</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wma9</name> <init>= <expr><block>{ <expr><literal type="number">0x27ca0808</literal></expr>, <expr><literal type="number">0x01f5</literal></expr>, <expr><literal type="number">0x4e7a</literal></expr>, <expr><block>{ <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xd1</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wmv_enc2</name> <init>= <expr><block>{ <expr><literal type="number">0x96b57cdd</literal></expr>, <expr><literal type="number">0x8966</literal></expr>, <expr><literal type="number">0x410c</literal></expr>,<expr><block>{ <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x04</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wma_enc</name> <init>= <expr><block>{ <expr><literal type="number">0x70f598e9</literal></expr>, <expr><literal type="number">0xf4ab</literal></expr>, <expr><literal type="number">0x495a</literal></expr>, <expr><block>{ <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xbf</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wmv8_enc</name> <init>= <expr><block>{ <expr><literal type="number">0x7e320092</literal></expr>, <expr><literal type="number">0x596a</literal></expr>, <expr><literal type="number">0x41b2</literal></expr>,<expr><block>{ <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xb6</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>guid_wmv9_enc</name> <init>= <expr><block>{ <expr><literal type="number">0xd23b90d0</literal></expr>, <expr><literal type="number">0x144f</literal></expr>, <expr><literal type="number">0x46bd</literal></expr>,<expr><block>{ <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x59</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BI_RGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI_RGB</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>psz_dll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>p_guid</name></decl>;</decl_stmt>

}</block></struct></type> <name>codec_dll</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>codec_dll</name></type> <name><name>decoders_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_VC1</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wvc1dmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wvc1</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV3</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmv9dmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmv9</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV2</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmvdmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmv</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV1</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmvdmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmv</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MSS2</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"WMVSDECD.DLL"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wms</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MSS2</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmsdmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wms</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MSS1</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"WMVSDECD.DLL"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wms</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MSS1</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmsdmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wms</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMVA</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmvadvd.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmva</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMAP</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wma9dmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wma9</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMAL</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wma9dmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wma9</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMA2</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wma9dmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wma9</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMAS</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmspdmod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wma</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>codec_dll</name></type> <name><name>encoders_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_WMV3</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmvdmoe2.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmv_enc2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV2</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmvdmoe2.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmv_enc2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV1</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmvdmoe2.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmv_enc2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMAP</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmadmoe.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wma_enc</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMA2</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmadmoe.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wma_enc</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV3</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmvencod.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmv9_enc</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV2</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmvxencd.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmv8_enc</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_WMV1</name></expr>, <expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"wmvxencd.dll"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>guid_wmv8_enc</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type> <name>DMOFreeMediaType</name><parameter_list>( <parameter><decl><type><name>DMO_MEDIA_TYPE</name> <modifier>*</modifier></type><name>mt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>mt</name><operator>-&gt;</operator><name>cbFormat</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>( <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator><name><name>mt</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>mt</name><operator>-&gt;</operator><name>pUnk</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>mt</name><operator>-&gt;</operator><name>pUnk</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name><name>mt</name><operator>-&gt;</operator><name>pUnk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>cbFormat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>pbFormat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>pUnk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecoderOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>decoders_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>decoders_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"DMO codec for %4.4s may work with dll=%ls"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>decoders_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>found</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<label><name>found</name>:</label>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_works</name></name> <operator>=</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>DecoderThread</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument>,

<argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_output</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_works</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecoderClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_output</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecOpen</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DMO_MEDIA_TYPE</name></type> <name>dmo_input_type</name></decl>, <decl><type ref="prev"/><name>dmo_output_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMediaObject</name> <modifier>*</modifier></type><name>p_dmo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hmsdmo_dll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VIDEOINFOHEADER</name> <modifier>*</modifier></type><name>p_vih</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>p_wf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>CoInitializeEx</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LoadDMO</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmsdmo_dll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_dmo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>hmsdmo_dll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dmo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_input_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dmo_input_type</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>pUnk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEX</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_wf</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_wf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEX</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>majortype</name></name> <operator>=</operator> <name>MEDIATYPE_Audio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name><name>dmo_input_type</name><operator>.</operator><name>majortype</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr> ?</condition><then>

<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr> </then><else>: <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fourcc_to_wf_tag</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tag</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <name>i_tag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name><name>dmo_input_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>formattype</name></name> <operator>=</operator> <name>FORMAT_WaveFormatEx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>cbFormat</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>pbFormat</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_wf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>bFixedSizeSamples</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>bTemporalCompression</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>lSampleSize</name></name> <operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>VLC_BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>p_bih</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VIDEOINFOHEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_vih</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_vih</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VIDEOINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_vih</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_bih</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vih</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr> ?</condition><then>

<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr> </then><else>: <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biSize</name></name> <operator>=</operator> <name>i_size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VIDEOINFOHEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vih</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>p_vih</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vih</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vih</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vih</name><operator>-&gt;</operator><name>rcTarget</name></name> <operator>=</operator> <name><name>p_vih</name><operator>-&gt;</operator><name>rcSource</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>majortype</name></name> <operator>=</operator> <name>MEDIATYPE_Video</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name><name>dmo_input_type</name><operator>.</operator><name>majortype</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr> ?</condition><then>

<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr></then><else>: <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>formattype</name></name> <operator>=</operator> <name>FORMAT_VideoInfo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>bFixedSizeSamples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>bTemporalCompression</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>cbFormat</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_input_type</name><operator>.</operator><name>pbFormat</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_vih</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>SetInputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_input_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"can't set DMO input type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"DMO input type set"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_output_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dmo_output_type</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>pUnk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator>

<name><name>vlc_chan_maps</name><index>[<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name> <operator>=</operator>

<name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>=</operator>

<name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>*</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>majortype</name></name> <operator>=</operator> <name>MEDIATYPE_Audio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>formattype</name></name> <operator>=</operator> <name>FORMAT_WaveFormatEx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name>MEDIASUBTYPE_PCM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>cbFormat</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEX</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>pbFormat</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_wf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>bFixedSizeSamples</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>bTemporalCompression</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>lSampleSize</name></name> <operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>VLC_BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>p_bih</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DMO_MEDIA_TYPE</name></type> <name>mt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_chroma</name> <init>= <expr><name>VLC_CODEC_YUYV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bpp</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetOutputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>mt</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>mt</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name> <operator>==</operator> <name>VLC_CODEC_YV12</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name><name>mt</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bpp</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MSS1</name> <operator>||</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MSS2</name> <operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>mt</name><operator>.</operator><name>subtype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MEDIASUBTYPE_RGB24</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bpp</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>i_chroma</name> <operator>==</operator> <name>VLC_CODEC_YV12</name></expr> ?</condition><then> <expr><name>VLC_CODEC_I420</name></expr> </then><else>: <expr><name>i_chroma</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <name>i_bpp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_bih</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vih</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>=</operator> <ternary><condition><expr><name>i_chroma</name> <operator>==</operator> <name>VLC_CODEC_RGB24</name></expr> ?</condition><then> <expr><name>BI_RGB</name></expr> </then><else>: <expr><name>i_chroma</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biSizeImage</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>*</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>*</operator>

<operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>majortype</name></name> <operator>=</operator> <name>MEDIATYPE_Video</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>formattype</name></name> <operator>=</operator> <name>FORMAT_VideoInfo</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_chroma</name> <operator>==</operator> <name>VLC_CODEC_RGB24</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name>MEDIASUBTYPE_RGB24</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name><name>dmo_output_type</name><operator>.</operator><name>majortype</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <name><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>bFixedSizeSamples</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>bTemporalCompression</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>lSampleSize</name></name> <operator>=</operator> <name><name>p_bih</name><operator>-&gt;</operator><name>biSizeImage</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>cbFormat</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VIDEOINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_output_type</name><operator>.</operator><name>pbFormat</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_vih</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DMO_MEDIA_TYPE</name></type> <name>mt</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetOutputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>mt</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"available output chroma: %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mt</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_err</name> <init>= <expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>SetOutputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_output_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"can't set DMO output type for decoder: 0x%x"</literal></expr></argument>, <argument><expr><name>i_err</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"DMO output type set for decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hmsdmo_dll</name></name> <operator>=</operator> <name>hmsdmo_dll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name> <operator>=</operator> <name>p_dmo</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>, <decl><type ref="prev"/><name>i_align</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_output</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetOutputSizeInfo</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_align</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"GetOutputSizeInfo() failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"GetOutputSizeInfo(): bytes %i, align %i"</literal></expr></argument>,

<argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_align</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_output</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_vih</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_wf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>b_works</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_dmo</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_dmo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>hmsdmo_dll</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><name>hmsdmo_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_vih</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_wf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadDMO</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>HINSTANCE</name> <modifier>*</modifier></type><name>p_hmsdmo_dll</name></decl></parameter>,

<parameter><decl><type><name>IMediaObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dmo</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DMO_PARTIAL_MEDIATYPE</name></type> <name>dmo_partial_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_err</name></decl>;</decl_stmt>

<function_decl><type><name>long</name></type> (<name>STDCALL</name> <modifier>*</modifier><name>OurDMOEnum</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>DMO_PARTIAL_MEDIATYPE</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DMO_PARTIAL_MEDIATYPE</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>IEnumDMO</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>IEnumDMO</name> <modifier>*</modifier></type><name>p_enum_dmo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>psz_dmo_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>clsid_dmo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GETCLASS</name></type> <name>GetClass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IClassFactory</name> <modifier>*</modifier></type><name>cFactory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IUnknown</name> <modifier>*</modifier></type><name>cObject</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>codec_dll</name> <modifier>*</modifier></type><name>codecs_table</name> <init>= <expr><ternary><condition><expr><name>b_out</name></expr> ?</condition><then> <expr><name>encoders_table</name></expr> </then><else>: <expr><name>decoders_table</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_codec</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dmo_partial_type</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MEDIATYPE_Audio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_partial_type</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name><name>dmo_partial_type</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_partial_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr> ?</condition><then>

<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr> </then><else>: <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fourcc_to_wf_tag</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tag</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dmo_partial_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <name>i_tag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>dmo_partial_type</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MEDIATYPE_Video</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_partial_type</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name><name>dmo_partial_type</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_partial_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr> ?</condition><then>

<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr> </then><else>: <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_hmsdmo_dll</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>( <argument><expr><call><name>TEXT</name><argument_list>( <argument><expr><literal type="string">"msdmo.dll"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_hmsdmo_dll</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"failed loading msdmo.dll"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>OurDMOEnum</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>( <argument><expr><operator>*</operator><name>p_hmsdmo_dll</name></expr></argument>, <argument><expr><literal type="string">"DMOEnum"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>OurDMOEnum</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"GetProcAddress failed to find DMOEnum()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><operator>*</operator><name>p_hmsdmo_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_out</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name>OurDMOEnum</name><argument_list>( <argument><expr><operator>&amp;</operator><name>GUID_NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> ,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_partial_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_enum_dmo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name>OurDMOEnum</name><argument_list>( <argument><expr><operator>&amp;</operator><name>GUID_NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> ,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_partial_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_enum_dmo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><operator>*</operator><name>p_hmsdmo_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>loader</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_dmo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>S_OK</name> <operator>==</operator> <call><name><name>p_enum_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Next</name></name><argument_list>( <argument><expr><name>p_enum_dmo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>clsid_dmo</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_dmo_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"found DMO: %ls"</literal></expr></argument>, <argument><expr><name>psz_dmo_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>( <argument><expr><name>psz_dmo_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CoCreateInstance</name><argument_list>( <argument><expr><operator>&amp;</operator><name>clsid_dmo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IMediaObject</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pp_dmo</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"can't create DMO"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_dmo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name><name>p_enum_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_enum_dmo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_dmo</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><operator>*</operator><name>p_hmsdmo_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>loader</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>loader</name>:</label>

<for>for<control>( <init><expr><name>i_codec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>codecs_table</name><index>[<expr><name>i_codec</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_codec</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>codecs_table</name><index>[<expr><name>i_codec</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>codecs_table</name><index>[<expr><name>i_codec</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>*</operator><name>p_hmsdmo_dll</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>( <argument><expr><name><name>codecs_table</name><index>[<expr><name>i_codec</name></expr>]</index></name><operator>.</operator><name>psz_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_hmsdmo_dll</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"failed loading '%ls'"</literal></expr></argument>, <argument><expr><name><name>codecs_table</name><index>[<expr><name>i_codec</name></expr>]</index></name><operator>.</operator><name>psz_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>GetClass</name> <operator>=</operator> <operator>(</operator><name>GETCLASS</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>( <argument><expr><operator>*</operator><name>p_hmsdmo_dll</name></expr></argument>, <argument><expr><literal type="string">"DllGetClassObject"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>GetClass</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"GetProcAddress failed to find DllGetClassObject()"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><operator>*</operator><name>p_hmsdmo_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name>GetClass</name><argument_list>( <argument><expr><name><name>codecs_table</name><index>[<expr><name>i_codec</name></expr>]</index></name><operator>.</operator><name>p_guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IClassFactory</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cFactory</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name> <operator>||</operator> <name>cFactory</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"no such class object"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><operator>*</operator><name>p_hmsdmo_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name><name>cFactory</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>CreateInstance</name></name><argument_list>( <argument><expr><name>cFactory</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IUnknown</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cFactory</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name><operator>*</operator><operator>)</operator><name>cFactory</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name> <operator>||</operator> <operator>!</operator><name>cObject</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"class factory failure"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><operator>*</operator><name>p_hmsdmo_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name><name>cObject</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>( <argument><expr><name>cObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IMediaObject</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pp_dmo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cObject</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name><operator>*</operator><operator>)</operator><name>cObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_dmo</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"QueryInterface failure"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><operator>*</operator><name>p_hmsdmo_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DecClose</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hmsdmo_dll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DMO_OUTPUT_DATA_BUFFER</name></type> <name>db</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name></type> <name>block_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <operator>*</operator><name>pp_block</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

if( date_Get( &amp;p_sys-&gt;end_date ) == VLC_TICK_INVALID )

{

if( p_block ) block_Release( p_block );

return -1;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <call><name>CMediaBufferCreate</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ProcessInput</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>IMediaBuffer</name> <operator>*</operator><operator>)</operator><name>p_in</name></expr></argument>, <argument><expr><name>DMO_INPUT_DATA_BUFFERF_SYNCPOINT</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_in</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>==</operator> <name>S_FALSE</name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcessInput(): no output generated"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_result</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>DMO_E_NOTACCEPTING</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcessInput(): not accepting"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>S_OK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcessInput(): failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcessInput(): successful"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block_out</name><operator>.</operator><name>p_buffer</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block_out</name><operator>.</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>CMediaBufferCreate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>block_out</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_output</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>.</operator><name>pBuffer</name></name> <operator>=</operator> <operator>(</operator><name>IMediaBuffer</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ProcessOutput</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name></expr></argument>,

<argument><expr><name>DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>S_OK</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>S_FALSE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcessOutput(): failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcessOutput(): no output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>p_out</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcessOutput(): success"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>block_out</name><operator>.</operator><name>i_buffer</name></name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"ProcessOutput(): no output (i_buffer_out == 0)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>p_out</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CopyPicture</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name><name>block_out</name><operator>.</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_out</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>p_out</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_samples</name> <init>= <expr><name><name>block_out</name><operator>.</operator><name>i_buffer</name></name> <operator>/</operator>

<operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>*</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_aout_buffer</name> <operator>=</operator> <call><name>decoder_NewAudioBuffer</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout_buffer</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>block_out</name><operator>.</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block_out</name><operator>.</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator>

<call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>i_samples</name></expr></argument> )</argument_list></call>

<operator>-</operator> <name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_out</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_aout_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CopyPicture</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name></decl>, <decl><type ref="prev"/><name>i_line</name></decl>, <decl><type ref="prev"/><name>i_width</name></decl>, <decl><type ref="prev"/><name>i_dst_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_src</name> <init>= <expr><name>p_in</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_SwapUV</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dst_stride</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>i_dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_SwapUV</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>DecoderThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DecOpen</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ready</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<while>while<condition>( <expr><call><name>DecBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_input</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DecClose</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hmsdmo_dll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMediaObject</name> <modifier>*</modifier></type><name>p_dmo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_min_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>

}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EncoderOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>EncOpen</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name> <operator>=</operator> <operator>(</operator><name>block_t</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>encoder_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>picture_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>

<name>EncodeBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_audio</name></name> <operator>=</operator> <operator>(</operator><name>block_t</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>encoder_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>block_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>

<name>EncodeBlock</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EncoderSetVideoType</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>IMediaObject</name> <modifier>*</modifier></type><name>p_dmo</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_selected</name></decl>, <decl><type ref="prev"/><name>i_err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DMO_MEDIA_TYPE</name></type> <name>dmo_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VIDEOINFOHEADER</name></type> <name>vih</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_vih</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC_BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>p_bih</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetInputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_vih</name> <operator>=</operator> <operator>(</operator><name>VIDEOINFOHEADER</name> <operator>*</operator><operator>)</operator><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"available input chroma: %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dmo_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dmo_type</name><operator>.</operator><name>subtype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MEDIASUBTYPE_RGB565</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"-&gt; MEDIASUBTYPE_RGB565"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dmo_type</name><operator>.</operator><name>subtype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MEDIASUBTYPE_RGB24</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"-&gt; MEDIASUBTYPE_RGB24"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dmo_type</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vih</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VIDEOINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bih</name> <operator>=</operator> <operator>&amp;</operator><name><name>vih</name><operator>.</operator><name>bmiHeader</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biSizeImage</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>*</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>*</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bih</name><operator>-&gt;</operator><name>biSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vih</name><operator>.</operator><name>rcSource</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>vih</name><operator>.</operator><name>rcSource</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vih</name><operator>.</operator><name>rcSource</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vih</name><operator>.</operator><name>rcSource</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vih</name><operator>.</operator><name>rcTarget</name></name> <operator>=</operator> <name><name>vih</name><operator>.</operator><name>rcSource</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vih</name><operator>.</operator><name>AvgTimePerFrame</name></name> <operator>=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">25</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>majortype</name></name> <operator>=</operator> <name>MEDIATYPE_Video</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>subtype</name></name> <operator>=</operator> <name>MEDIASUBTYPE_I420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>formattype</name></name> <operator>=</operator> <name>FORMAT_VideoInfo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>bFixedSizeSamples</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>bTemporalCompression</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>lSampleSize</name></name> <operator>=</operator> <name><name>p_bih</name><operator>-&gt;</operator><name>biSizeImage</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>cbFormat</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VIDEOINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vih</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_err</name> <operator>=</operator> <call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>SetInputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"can't set DMO input type: %x"</literal></expr></argument>, <argument><expr><name>i_err</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"successfully set input type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dmo_type</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>pUnk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i_selected</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetOutputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_vih</name> <operator>=</operator> <operator>(</operator><name>VIDEOINFOHEADER</name> <operator>*</operator><operator>)</operator><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"available output codec: %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dmo_type</name><operator>.</operator><name>subtype</name><operator>.</operator><name>Data1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vih</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biCompression</name></name> <operator>==</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_selected</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_selected</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"couldn't find codec: %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetOutputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_selected</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>VIDEOINFOHEADER</name> <operator>*</operator><operator>)</operator><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name><operator>)</operator><operator>-&gt;</operator><name>dwBitRate</name> <operator>=</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>IWMCodecPrivateData</name> <modifier>*</modifier></type><name>p_privdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VIDEOINFOHEADER</name> <modifier>*</modifier></type><name>p_vih</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_vih</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_dmo</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IWMCodecPrivateData</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_privdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name><name>p_privdata</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>SetPartialOutputType</name></name><argument_list>( <argument><expr><name>p_privdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"SetPartialOutputType() failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_privdata</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_privdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name><name>p_privdata</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetPrivateData</name></name><argument_list>( <argument><expr><name>p_privdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"GetPrivateData() failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_privdata</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_privdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name><name>p_privdata</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetPrivateData</name></name><argument_list>( <argument><expr><name>p_privdata</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_vih</name> <operator>=</operator> <name><name>dmo_type</name><operator>.</operator><name>cbFormat</name></name> <operator>+</operator> <name>i_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vih</name> <operator>=</operator> <call><name>CoTaskMemAlloc</name><argument_list>( <argument><expr><name>i_vih</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_vih</name></expr></argument>, <argument><expr><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name></expr></argument>, <argument><expr><name><name>dmo_type</name><operator>.</operator><name>cbFormat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_vih</name><operator>)</operator> <operator>+</operator> <name><name>dmo_type</name><operator>.</operator><name>cbFormat</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p_vih</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dmo_type</name><operator>.</operator><name>cbFormat</name></name> <operator>=</operator> <name>i_vih</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"found extra data: %i"</literal></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></while>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>SetOutputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_vih</name> <operator>=</operator> <operator>(</operator><name>VIDEOINFOHEADER</name> <operator>*</operator><operator>)</operator><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"can't set DMO output type for encoder: 0x%x"</literal></expr></argument>, <argument><expr><name>i_err</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"successfully set output type for encoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EncoderSetAudioType</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>IMediaObject</name> <modifier>*</modifier></type><name>p_dmo</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_selected</name></decl>, <decl><type ref="prev"/><name>i_err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_last_byterate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DMO_MEDIA_TYPE</name></type> <name>dmo_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>p_wf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fourcc_to_wf_tag</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tag</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_selected</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_last_byterate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetOutputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_wf</name> <operator>=</operator> <operator>(</operator><name>WAVEFORMATEX</name> <operator>*</operator><operator>)</operator><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"available format :%i, sample rate: %i, channels: %i, "</literal>

<literal type="string">"bits per sample: %i, bitrate: %i, blockalign: %i"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>==</operator> <name>i_tag</name> <operator>&amp;&amp;</operator>

<name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>==</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name> <operator>==</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&amp;&amp;</operator>

<name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>==</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>&lt;</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>*</operator> <literal type="number">110</literal> <operator>/</operator> <literal type="number">800</literal> <operator>&amp;&amp;</operator>

<name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>&gt;</operator> <name>i_last_byterate</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_selected</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_last_byterate</name> <operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"selected entry %i (bitrate: %i)"</literal></expr></argument>,

<argument><expr><name>i_selected</name></expr></argument>, <argument><expr><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_selected</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"couldn't find a matching output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetOutputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_selected</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_wf</name> <operator>=</operator> <operator>(</operator><name>WAVEFORMATEX</name> <operator>*</operator><operator>)</operator><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"selected format: %i, sample rate:%i, "</literal>

<literal type="string">"channels: %i, bits per sample: %i, bitrate: %i, blockalign: %i"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"found cbSize: %i"</literal></expr></argument>, <argument><expr><name><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_wf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>SetOutputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"can't set DMO output type: %i"</literal></expr></argument>, <argument><expr><name>i_err</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"successfully set output type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_selected</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetInputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_wf</name> <operator>=</operator> <operator>(</operator><name>WAVEFORMATEX</name> <operator>*</operator><operator>)</operator><name><name>dmo_type</name><operator>.</operator><name>pbFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"available format :%i, sample rate: %i, channels: %i, "</literal>

<literal type="string">"bits per sample: %i, bitrate: %i, blockalign: %i"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>==</operator> <name>WAVE_FORMAT_PCM</name> <operator>&amp;&amp;</operator>

<name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>==</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name> <operator>==</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&amp;&amp;</operator>

<name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>==</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_selected</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_selected</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"couldn't find a matching input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetInputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_selected</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>SetInputType</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DMOFreeMediaType</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dmo_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"can't set DMO input type: 0x%x"</literal></expr></argument>, <argument><expr><name>i_err</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"successfully set input type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EncOpen</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMediaObject</name> <modifier>*</modifier></type><name>p_dmo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hmsdmo_dll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>CoInitializeEx</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LoadDMO</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmsdmo_dll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_dmo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>hmsdmo_dll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dmo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>EncoderSetVideoType</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_dmo</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>EncoderSetAudioType</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_dmo</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hmsdmo_dll</name></name> <operator>=</operator> <name>hmsdmo_dll</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name> <operator>=</operator> <name>p_dmo</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>, <decl><type ref="prev"/><name>i_align</name></decl>, <decl><type ref="prev"/><name>dum</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetInputSizeInfo</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_align</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dum</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"GetInputSizeInfo() failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"GetInputSizeInfo(): bytes %i, align %i, %i"</literal></expr></argument>,

<argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_align</name></expr></argument>, <argument><expr><name>dum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>, <decl><type ref="prev"/><name>i_align</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_output</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetOutputSizeInfo</name></name><argument_list>( <argument><expr><name>p_dmo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_align</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"GetOutputSizeInfo() failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"GetOutputSizeInfo(): bytes %i, align %i"</literal></expr></argument>,

<argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_align</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_output</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_dmo</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_dmo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>hmsdmo_dll</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><name>hmsdmo_dll</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeBlock</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_data</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name></decl>, <decl><type ref="prev"/><name>i_line</name></decl>, <decl><type ref="prev"/><name>i_width</name></decl>, <decl><type ref="prev"/><name>i_src_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><operator>(</operator><name>picture_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_buffer</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>*</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>*</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block_in</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_src_stride</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition>

<incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>i_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_src_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buffer</name> <init>= <expr><operator>(</operator><name>block_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block_in</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <call><name>CMediaBufferCreate</name><argument_list>( <argument><expr><name>p_block_in</name></expr></argument>, <argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ProcessInput</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>IMediaBuffer</name> <operator>*</operator><operator>)</operator><name>p_in</name></expr></argument>, <argument><expr><name>DMO_INPUT_DATA_BUFFERF_TIME</name></expr></argument>, <argument><expr><call><name>MSFTIME_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_pts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_in</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>==</operator> <name>S_FALSE</name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"ProcessInput(): no output generated %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_result</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>DMO_E_NOTACCEPTING</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"ProcessInput(): not accepting"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>S_OK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"ProcessInput(): failed: %x"</literal></expr></argument>, <argument><expr><name>i_result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"ProcessInput(): success"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DMO_OUTPUT_DATA_BUFFER</name></type> <name>db</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block_out</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>CMediaBufferCreate</name><argument_list>(<argument><expr><name>p_block_out</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_min_output</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>.</operator><name>pBuffer</name></name> <operator>=</operator> <operator>(</operator><name>IMediaBuffer</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ProcessOutput</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>S_OK</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>S_FALSE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"ProcessOutput(): failed: %x"</literal></expr></argument>, <argument><expr><name>i_result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"ProcessOutput(): no output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>p_out</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_chain</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_block_out</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"ProcessOutput(): no output (i_buffer_out == 0)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>p_out</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_chain</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>db</name><operator>.</operator><name>dwStatus</name></name> <operator>&amp;</operator> <name>DMO_OUTPUT_DATA_BUFFERF_TIME</name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"ProcessOutput(): pts: %"</literal><name>PRId64</name><literal type="string">", %"</literal><name>PRId64</name></expr></argument>,

<argument><expr><name>i_pts</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MSFTIME</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>rtTimestamp</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MSFTIME</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>rtTimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>db</name><operator>.</operator><name>dwStatus</name></name> <operator>&amp;</operator> <name>DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MSFTIME</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>rtTimelength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DMO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"ProcessOutput(): length: %"</literal><name>PRId64</name></expr></argument>,

<argument><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>db</name><operator>.</operator><name>dwStatus</name></name> <operator>&amp;</operator> <name>DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_chain</name></expr></argument>, <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>EncoderClose</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name><argument_list>( <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_dmo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hmsdmo_dll</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
