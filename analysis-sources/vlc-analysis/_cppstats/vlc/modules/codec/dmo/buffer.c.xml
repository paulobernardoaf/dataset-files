<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\dmo\buffer.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOADER</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wine/winerror.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wine/windef.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmo.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>long</name> <name>STDCALL</name></type> <name>QueryInterface</name><parameter_list>( <parameter><decl><type><name>IUnknown</name> <modifier>*</modifier></type><name>This</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>riid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_mb</name> <init>= <expr><operator>(</operator><name>CMediaBuffer</name> <operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IUnknown</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>riid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IMediaBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>i_ref</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>This</name></expr>;</expr_stmt>

<return>return <expr><name>NOERROR</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>E_NOINTERFACE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>STDCALL</name></type> <name>AddRef</name><parameter_list>( <parameter><decl><type><name>IUnknown</name> <modifier>*</modifier></type><name>This</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_mb</name> <init>= <expr><operator>(</operator><name>CMediaBuffer</name> <operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>p_mb</name><operator>-&gt;</operator><name>i_ref</name></name><operator>++</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>STDCALL</name></type> <name>Release</name><parameter_list>( <parameter><decl><type><name>IUnknown</name> <modifier>*</modifier></type><name>This</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_mb</name> <init>= <expr><operator>(</operator><name>CMediaBuffer</name> <operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>i_ref</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mb</name><operator>-&gt;</operator><name>i_ref</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_mb</name><operator>-&gt;</operator><name>b_own</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_mb</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_mb</name><operator>-&gt;</operator><name>vt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_mb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>STDCALL</name></type> <name>SetLength</name><parameter_list>( <parameter><decl><type><name>IMediaBuffer</name> <modifier>*</modifier></type><name>This</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cbLength</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_mb</name> <init>= <expr><operator>(</operator><name>CMediaBuffer</name> <operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>cbLength</name> <operator>&gt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p_mb</name><operator>-&gt;</operator><name>i_max_size</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>E_INVALIDARG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>cbLength</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>STDCALL</name></type> <name>GetMaxLength</name><parameter_list>( <parameter><decl><type><name>IMediaBuffer</name> <modifier>*</modifier></type><name>This</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pcbMaxLength</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_mb</name> <init>= <expr><operator>(</operator><name>CMediaBuffer</name> <operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pcbMaxLength</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pcbMaxLength</name> <operator>=</operator> <name><name>p_mb</name><operator>-&gt;</operator><name>i_max_size</name></name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>STDCALL</name></type> <name>GetBufferAndLength</name><parameter_list>( <parameter><decl><type><name>IMediaBuffer</name> <modifier>*</modifier></type><name>This</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pcbLength</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_mb</name> <init>= <expr><operator>(</operator><name>CMediaBuffer</name> <operator>*</operator><operator>)</operator><name>This</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>ppBuffer</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pcbLength</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>ppBuffer</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppBuffer</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p_mb</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pcbLength</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pcbLength</name> <operator>=</operator> <name><name>p_mb</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>CMediaBufferCreate</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_size</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_own</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMediaBuffer</name> <modifier>*</modifier></type><name>p_mb</name> <init>= <expr><operator>(</operator><name>CMediaBuffer</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CMediaBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_mb</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <operator>(</operator><name>IMediaBuffer_vt</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IMediaBuffer_vt</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_mb</name><operator>-&gt;</operator><name>vt</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_mb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>i_ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>i_max_size</name></name> <operator>=</operator> <name>i_max_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>b_own</name></name> <operator>=</operator> <name>b_own</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>QueryInterface</name></name> <operator>=</operator> <name>QueryInterface</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>AddRef</name></name> <operator>=</operator> <name>AddRef</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>Release</name></name> <operator>=</operator> <name>Release</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>SetLength</name></name> <operator>=</operator> <name>SetLength</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetMaxLength</name></name> <operator>=</operator> <name>GetMaxLength</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mb</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetBufferAndLength</name></name> <operator>=</operator> <name>GetBufferAndLength</name></expr>;</expr_stmt>

<return>return <expr><name>p_mb</name></expr>;</return>

</block_content>}</block></function>

</unit>
