<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\lpcm.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseCommon</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeFrames</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_ACODEC</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Linear PCM audio decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseCommon</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Linear PCM audio packetizer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenPacketizer</argument>, <argument>CloseCommon</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Linear PCM audio encoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenEncoder</argument>, <argument>CloseEncoder</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"lpcm"</literal></argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_packetizer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_header_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_chans_to_reorder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_chan_table</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_buffer_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_num</name></decl>;</decl_stmt>

}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPCM_VOB_HEADER_LEN</name></cpp:macro> <cpp:value>(6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPCM_AOB_HEADER_LEN</name></cpp:macro> <cpp:value>(11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPCM_BD_HEADER_LEN</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPCM_WIDI_HEADER_LEN</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define>

<enum>enum

<block>{

<decl><name>LPCM_VOB</name></decl>,

<decl><name>LPCM_AOB</name></decl>,

<decl><name>LPCM_BD</name></decl>,

<decl><name>LPCM_WIDI</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_position</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>aob_group_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeFrame</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VobHeader</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_original_channels</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>VobExtract</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_bits</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AobHeader</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_layout</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_padding</name></decl></parameter>,

<parameter><decl><type><name>aob_group_t</name></type> <name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AobExtract</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_bits</name></decl></parameter>, <parameter><decl><type><name>aob_group_t</name></type> <name><name>p_group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>BdHeader</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels_padding</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_original_channels</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BdExtract</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>WidiHeader</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_original_channels</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_header_size</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_DVD_LPCM</name></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>LPCM_VOB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_header_size</name> <operator>=</operator> <name>LPCM_VOB_HEADER_LEN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DVDA_LPCM</name></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>LPCM_AOB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_header_size</name> <operator>=</operator> <name>LPCM_AOB_HEADER_LEN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_BD_LPCM</name></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>LPCM_BD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_header_size</name> <operator>=</operator> <name>LPCM_BD_HEADER_LEN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_WIDI_LPCM</name></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>LPCM_WIDI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_header_size</name> <operator>=</operator> <name>LPCM_WIDI_HEADER_LEN</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name> <operator>=</operator> <name>b_packetizer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>=</operator> <name>i_header_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_packetizer</name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>LPCM_VOB</name></expr>:</case>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_DVD_LPCM</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LPCM_AOB</name></expr>:</case>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_DVDA_LPCM</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LPCM_WIDI</name></expr>:</case>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_WIDI_LPCM</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>LPCM_BD</name></expr>:</case>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_BD_LPCM</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<case>case <expr><literal type="number">20</literal></expr>:</case>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_packetizer</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeFrame</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_original_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_block</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_block</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <operator>*</operator><name>pp_block</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>|</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"frame is too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels_padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>aob_group_t</name></type> <name><name>p_aob_group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>LPCM_VOB</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>VobHeader</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_original_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bits</name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LPCM_AOB</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AobHeader</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_original_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_padding</name></expr></argument>,

<argument><expr><name>p_aob_group</name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LPCM_BD</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>BdHeader</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_channels_padding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_original_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bits</name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LPCM_WIDI</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>WidiHeader</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_original_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bits</name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>||</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>+</operator> <name>i_padding</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"no frame sync or too small frame"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <name>i_rate</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name>i_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name>i_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>i_original_channels</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>LPCM_AOB</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_frame_length</name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>-</operator> <name>i_padding</name><operator>)</operator> <operator>/</operator>

<operator>(</operator>

<operator>(</operator> <operator>(</operator><name><name>p_aob_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_bits</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>p_aob_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_channels</name> <operator>)</operator> <operator>+</operator>

<operator>(</operator> <operator>(</operator><name><name>p_aob_group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_bits</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>p_aob_group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_channels</name> <operator>)</operator>

<operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_frame_length</name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>-</operator> <name>i_padding</name><operator>)</operator> <operator>/</operator>

<operator>(</operator><name>i_channels</name> <operator>+</operator> <name>i_channels_padding</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <name>i_bits</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator>

<call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>i_frame_length</name></expr></argument> )</argument_list></call> <operator>-</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_bits</name> <operator>==</operator> <literal type="number">16</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buffer</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateAudioFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name> <operator>||</operator>

<operator>!</operator><operator>(</operator><name>p_aout_buffer</name> <operator>=</operator> <call><name>decoder_NewAudioBuffer</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_frame_length</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator>

<call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>i_frame_length</name></expr></argument> )</argument_list></call>

<operator>-</operator> <name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>+</operator> <name>i_padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>+</operator> <name>i_padding</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>LPCM_WIDI</name></expr>:</case>

<case>case <expr><name>LPCM_VOB</name></expr>:</case>

<expr_stmt><expr><call><name>VobExtract</name><argument_list>( <argument><expr><name>p_aout_buffer</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>i_bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LPCM_AOB</name></expr>:</case>

<expr_stmt><expr><call><name>AobExtract</name><argument_list>( <argument><expr><name>p_aout_buffer</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>i_bits</name></expr></argument>, <argument><expr><name>p_aob_group</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>LPCM_BD</name></expr>:</case>

<expr_stmt><expr><call><name>BdExtract</name><argument_list>( <argument><expr><name>p_aout_buffer</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>i_frame_length</name></expr></argument>, <argument><expr><name>i_channels</name></expr></argument>, <argument><expr><name>i_channels_padding</name></expr></argument>, <argument><expr><name>i_bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_ChannelReorder</name><argument_list>( <argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_chan_table</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_aout_buffer</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeFrame</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><call><name>Packetize</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_out</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueAudio</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseCommon</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DVD_LPCM</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <literal type="number">48000</literal> <operator>&amp;&amp;</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <literal type="number">96000</literal> <operator>&amp;&amp;</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <literal type="number">44100</literal> <operator>&amp;&amp;</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>!=</operator> <literal type="number">32000</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"DVD LPCM supports only sample rates of 48, 96, 44.1 or 32 kHz"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"DVD LPCM supports a maximum of eight channels"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator>

<operator>(</operator><name>encoder_sys_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator> <literal type="number">150</literal> <operator>/</operator> <literal type="number">90000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name>

<operator>*</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_audio</name></name> <operator>=</operator> <name>EncodeFrames</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>*</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>*</operator>

<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>+</operator> <name>LPCM_VOB_HEADER_LEN</name><operator>)</operator> <operator>/</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeFrames</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_first_block</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_last_block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_aout_buf</name> <operator>||</operator> <operator>!</operator><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_num_frames</name> <init>= <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_used</name></name> <operator>+</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>)</operator> <operator>/</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_leftover_samples</name> <init>= <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_used</name></name> <operator>+</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>)</operator> <operator>%</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_frame_size</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>LPCM_VOB_HEADER_LEN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_start_offset</name> <init>= <expr><operator>-</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_used</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_freq_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr> )</condition> <block>{<block_content>

<case>case <expr><literal type="number">48000</literal></expr>:</case>

<expr_stmt><expr><name>i_freq_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">96000</literal></expr>:</case>

<expr_stmt><expr><name>i_freq_code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">44100</literal></expr>:</case>

<expr_stmt><expr><name>i_freq_code</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32000</literal></expr>:</case>

<expr_stmt><expr><name>i_freq_code</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>i_bytes_consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_num_frames</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_frame_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>frame</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_num</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>frame</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_freq_code</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_consume_samples</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_used</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_kept_bytes</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_used</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_consume_bytes</name> <init>= <expr><name>i_consume_samples</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>frame</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_kept_bytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>frame</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>i_kept_bytes</name></expr></argument>, <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_bytes_consumed</name></expr></argument>,

<argument><expr><name>i_consume_bytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>swab</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>frame</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>i_kept_bytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swab</name><argument_list>( <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_bytes_consumed</name></expr></argument>, <argument><expr><name>frame</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>i_kept_bytes</name></expr></argument>,

<argument><expr><name>i_consume_bytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bytes_consumed</name> <operator>+=</operator> <name>i_consume_bytes</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>this_pts</name> <init>= <expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator>

<call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>+</operator> <name>i_start_offset</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>next_pts</name> <init>= <expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator>

<call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>+</operator> <name>i_start_offset</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>this_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>next_pts</name> <operator>-</operator> <name>this_pts</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_first_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_first_block</name> <operator>=</operator> <name>p_last_block</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_last_block</name> <operator>=</operator> <name><name>p_last_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_bytes_consumed</name></expr></argument>,

<argument><expr><name>i_leftover_samples</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_used</name></name> <operator>=</operator> <name>i_leftover_samples</name></expr>;</expr_stmt>

<return>return <expr><name>p_first_block</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VobHeader</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_original_channels</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_header</name> <init>= <expr><name><name>p_header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><operator>(</operator><name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">96000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">32000</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <operator>(</operator><name>i_header</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch<condition>( <expr><operator>*</operator><name>pi_channels</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><operator>(</operator><name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_bits</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_bits</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>pi_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_header</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>p_aob_group1</name><index>[<expr><literal type="number">21</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>p_aob_group2</name><index>[<expr><literal type="number">21</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AobHeader</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_layout</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_padding</name></decl></parameter>,

<parameter><decl><type><name>aob_group_t</name></type> <name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_header_size</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_header_size</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>LPCM_AOB_HEADER_LEN</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_padding</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <name>i_header_size</name> <operator>-</operator> <name>LPCM_AOB_HEADER_LEN</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_index_size_g1</name> <init>= <expr><operator>(</operator><name><name>p_header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_index_size_g2</name> <init>= <expr><operator>(</operator><name><name>p_header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_index_rate_g1</name> <init>= <expr><operator>(</operator><name><name>p_header</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_index_rate_g2</name> <init>= <expr><operator>(</operator><name><name>p_header</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_assignment</name> <init>= <expr><name><name>p_header</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_index_size_g1</name> <operator>&gt;</operator> <literal type="number">0x02</literal> <operator>||</operator>

<operator>(</operator> <name>i_index_size_g2</name> <operator>!=</operator> <literal type="number">0x0f</literal> <operator>&amp;&amp;</operator> <name>i_index_size_g2</name> <operator>&gt;</operator> <literal type="number">0x02</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_index_rate_g1</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x02</literal> <operator>||</operator>

<operator>(</operator> <name>i_index_rate_g2</name> <operator>!=</operator> <literal type="number">0x0f</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_index_rate_g1</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0x02</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_assignment</name> <operator>&gt;</operator> <literal type="number">20</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_bits</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_index_size_g1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_bits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i_index_size_g2</name> <operator>!=</operator> <literal type="number">0x0f</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_index_size_g2</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_bits</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_index_rate_g1</name> <operator>!=</operator> <name>i_index_rate_g2</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_bits</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_bits</name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_bits</name> <operator>&gt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_index_rate_g1</name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">44100</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i_index_rate_g1</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">48000</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i_index_rate_g1</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_layout1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_aob_group1</name><index>[<expr><name>i_assignment</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>i_channels1</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_layout1</name> <operator>|=</operator> <name><name>p_aob_group1</name><index>[<expr><name>i_assignment</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_layout2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_index_size_g2</name> <operator>!=</operator> <literal type="number">0x0f</literal> <operator>&amp;&amp;</operator> <name>i_index_rate_g2</name> <operator>!=</operator> <literal type="number">0x0f</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_aob_group2</name><index>[<expr><name>i_assignment</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>i_channels2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_layout2</name> <operator>|=</operator> <name><name>p_aob_group2</name><index>[<expr><name>i_assignment</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>i_layout1</name> <operator>&amp;</operator> <name>i_layout2</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <name>i_channels1</name> <operator>+</operator> <operator>(</operator> <ternary><condition><expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_bits</name></expr> ?</condition><then> <expr><name>i_channels2</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_layout</name> <operator>=</operator> <name>i_layout1</name> <operator>|</operator> <operator>(</operator> <ternary><condition><expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_bits</name></expr> ?</condition><then> <expr><name>i_layout2</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>p_aob</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>p_aob_group1</name><index>[<expr><name>i_assignment</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>p_aob_group2</name><index>[<expr><name>i_assignment</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_channels</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_channels1</name></expr> </then><else>:

<expr><name>i_channels2</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bits</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_position</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_channel</name> <init>= <expr><name><name>pi_vlc_chan_order_wg4</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_channel</name> <operator>==</operator> <name><name>p_aob</name><index>[<expr><name>j</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>pi_layout</name><operator>)</operator> <operator>&amp;</operator> <name>i_channel</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_position</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_8channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_MIDDLELEFT</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_7channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_MIDDLELEFT</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_6channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_5channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_MIDDLELEFT</name></expr>, <expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_4channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_3channels_in</name><index>[]</index></name> <init>=

<expr><block>{ <expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>BdHeader</name><parameter_list>( <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels_padding</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_original_channels</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>h</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_header</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>pi_channels_in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><operator>(</operator> <name>h</name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_channels_in</name> <operator>=</operator> <name>pi_3channels_in</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator>

<name>AOUT_CHAN_REARCENTER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_channels_in</name> <operator>=</operator> <name>pi_4channels_in</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator>

<name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_channels_in</name> <operator>=</operator> <name>pi_5channels_in</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator>

<name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_channels_in</name> <operator>=</operator> <name>pi_6channels_in</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator>

<name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_channels_in</name> <operator>=</operator> <name>pi_7channels_in</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">11</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator>

<name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator>

<name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_channels_in</name> <operator>=</operator> <name>pi_8channels_in</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>pi_channels_padding</name> <operator>=</operator> <operator>*</operator><name>pi_channels</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch<condition>( <expr><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>pi_bits</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">96000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">192000</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>pi_channels_in</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name> <operator>=</operator>

<call><name>aout_CheckChannelReorder</name><argument_list>( <argument><expr><name>pi_channels_in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>*</operator><name>pi_original_channels</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_chan_table</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WidiHeader</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_rate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_original_channels</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_bits</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xa0</literal> <operator>||</operator> <name><name>p_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x06</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><operator>(</operator> <name><name>p_header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x38</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>pi_rate</name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_channels</name> <operator>=</operator> <operator>(</operator><name><name>p_header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_channels</name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VobExtract</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buffer</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_bits</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_bits</name> <operator>==</operator> <literal type="number">24</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">12</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_bits</name> <operator>==</operator> <literal type="number">20</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">10</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_bits</name> <operator>==</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>swab</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AobExtract</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buffer</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_aoutbits</name></decl></parameter>, <parameter><decl><type><name>aob_group_t</name></type> <name><name>p_group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_total_channels</name> <init>= <expr><name><name>p_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_channels</name> <operator>+</operator>

<operator>(</operator> <ternary><condition><expr><name><name>p_group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_bits</name></expr> ?</condition><then> <expr><name><name>p_group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_channels</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_aout_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>aob_group_t</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>&amp;</operator><name><name>p_group</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>i_group_size</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>i_bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>i_group_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>i_bits</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src</name> <init>= <expr><name>n</name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst</name> <init>= <expr><name>n</name> <operator>*</operator> <name>i_total_channels</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>pi_position</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_out32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_out</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i_dst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>g</name><operator>-&gt;</operator><name>i_bits</name></name> <operator>==</operator> <literal type="number">24</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_aoutbits</name> <operator>==</operator> <literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out32</name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>i_channels</name></name><operator>+</operator><name>i_src</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>p_out32</name> <operator>=</operator> <call><name>vlc_bswap32</name><argument_list>(<argument><expr><operator>*</operator><name>p_out32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_aout_written</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>g</name><operator>-&gt;</operator><name>i_bits</name></name> <operator>==</operator> <literal type="number">20</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_aoutbits</name> <operator>==</operator> <literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out32</name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>i_channels</name></name><operator>+</operator><name>i_src</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>!</operator><name>n</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>p_out32</name> <operator>=</operator> <call><name>vlc_bswap32</name><argument_list>(<argument><expr><operator>*</operator><name>p_out32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_aout_written</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>g</name><operator>-&gt;</operator><name>i_bits</name></name> <operator>==</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_aoutbits</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>i_aoutbits</name> <operator>==</operator> <literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_aoutbits</name> <operator>==</operator> <literal type="number">16</literal></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_dst</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_dst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_dst</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_aout_written</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out32</name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_src</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>p_out32</name> <operator>=</operator> <call><name>vlc_bswap32</name><argument_list>(<argument><expr><operator>*</operator><name>p_out32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_aout_written</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_group_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_group_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_aout_written</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BdExtract</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buffer</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_frame_length</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_channels_padding</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_bits</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_bits</name> <operator>!=</operator> <literal type="number">16</literal> <operator>||</operator> <name>i_channels_padding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_inc</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i_bits</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>i_channels</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_frame_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_channels</name> <operator>*</operator> <name>i_bits</name> <operator>/</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>i_bits</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>swab</name><argument_list>( <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><operator>(</operator><name>i_channels</name> <operator>+</operator> <name>i_channels_padding</name><operator>)</operator> <operator>*</operator> <name>i_bits</name> <operator>/</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_channels</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>p_src</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>p_src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <operator>(</operator><name>i_channels</name> <operator>+</operator> <name>i_channels_padding</name><operator>)</operator> <operator>*</operator> <name>i_bits</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>dst_inc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_frame_length</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>swab</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_aout_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
