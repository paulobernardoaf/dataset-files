<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\daala.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/xiph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;daala/codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;daala/daaladec.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;daala/daalaenc.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_packetizer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>daala_info</name></type> <name>di</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>daala_comment</name></type> <name>dc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>daala_dec_ctx</name> <modifier>*</modifier></type><name>dcx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_decoded_first_keyframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ProcessHeaders</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ProcessPacket</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>daala_packet</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>DecodePacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>daala_packet</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ParseDaalaComments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>daala_CopyPicture</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>daala_image</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pict</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_chromafmt_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"420"</literal></expr>, <expr><literal type="string">"444"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_chromafmt_list_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"4:2:0"</literal></expr>, <expr><literal type="string">"4:4:4"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QUALITY_TEXT</name></cpp:macro> <cpp:value>N_("Encoding quality")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QUALITY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enforce a quality between 0 (lossless) and 511 (worst)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_KEYINT_TEXT</name></cpp:macro> <cpp:value>N_("Keyframe interval")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_KEYINT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enforce a keyframe interval between 1 and 1000." )</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_VCODEC</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"Daala"</literal></argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Daala video decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"daala"</literal></argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Daala video packetizer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenPacketizer</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"daala"</literal></argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Daala video encoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">150</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenEncoder</argument>, <argument>CloseEncoder</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"daala"</literal></argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-daala-"</cpp:value></cpp:define>

<macro><name>add_integer_with_range</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"quality"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">511</literal></argument>,

<argument>ENC_QUALITY_TEXT</argument>, <argument>ENC_QUALITY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"keyint"</literal></argument>, <argument><literal type="number">256</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1000</literal></argument>,

<argument>ENC_KEYINT_TEXT</argument>, <argument>ENC_KEYINT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CHROMAFMT_TEXT</name></cpp:macro> <cpp:value>N_("Chroma format")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CHROMAFMT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Picking chroma format will force a " "conversion of the video into that format")</cpp:value></cpp:define>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"chroma-fmt"</literal></argument>, <argument><literal type="string">"420"</literal></argument>, <argument>ENC_CHROMAFMT_TEXT</argument>,

<argument>ENC_CHROMAFMT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_chromafmt_list</argument>, <argument>enc_chromafmt_list_text</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_enc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">"keyint"</literal></expr>, <expr><literal type="string">"chroma-fmt"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_packetizer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DAALA</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name> <operator>=</operator> <name>b_packetizer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_decoded_first_keyframe</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dcx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_packetizer</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_DAALA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeVideo</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>daala_comment_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>daala_info_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenPacketizer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>daala_packet</name></type> <name>dpacket</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ProcessHeaders</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_headers</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_decoded_first_keyframe</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_PREROLL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><call><name>ProcessPacket</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpacket</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>pp_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><operator>*</operator><name>pp_block</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessHeaders</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>daala_packet</name></type> <name>dpacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>daala_setup_info</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_size</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>pp_data</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xiph_SplitHeaders</name><argument_list>( <argument><expr><name>pi_size</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_count</name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pp_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>daala_decode_header_in</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpacket</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"this bitstream does not contain Daala video data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xdec</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ydec</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xdec</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ydec</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>xdec</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ydec</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xdec</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ydec</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xdec</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ydec</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>xdec</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ydec</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I444</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unknown chroma in daala sample"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_width</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pixel_aspect_denominator</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pixel_aspect_numerator</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pixel_aspect_numerator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pixel_aspect_denominator</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_numerator</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_denominator</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_numerator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_denominator</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"%dx%d %.02f fps video, frame content "</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_width</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_height</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_numerator</name></name><operator>/</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_denominator</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pi_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pp_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>daala_decode_header_in</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpacket</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Daala comment header is corrupted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ParseDaalaComments</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pi_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpacket</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pp_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>daala_decode_header_in</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpacket</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Daala setup header is corrupted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dcx</name></name> <operator>=</operator> <call><name>daala_decode_create</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name></name></expr></argument>, <argument><expr><name>ds</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate Daala decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p_extra</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_extra</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>daala_setup_free</name><argument_list>( <argument><expr><name>ds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ProcessPacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>daala_packet</name> <modifier>*</modifier></type><name>p_dpacket</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_packetizer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <call><name>DecodePacket</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_dpacket</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_denominator</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_numerator</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>p_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>DecodePacket</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>daala_packet</name> <modifier>*</modifier></type><name>p_dpacket</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>daala_image</name></type> <name>ycbcr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>daala_decode_packet_in</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dcx</name></name></expr></argument>, <argument><expr><name>p_dpacket</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>daala_decode_img_out</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dcx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ycbcr</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>daala_packet_iskeyframe</name><argument_list>( <argument><expr><name>p_dpacket</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_decoded_first_keyframe</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>daala_CopyPicture</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ycbcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseDaalaComments</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_comment</name></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dc</name><operator>.</operator><name>comments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dc</name><operator>.</operator><name>comment_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>clen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>clen</name> <operator>&gt;=</operator> <name>INT_MAX</name></expr> )</condition> <block>{<block_content> <continue>continue;</continue> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_comment</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>clen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_comment</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>psz_comment</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dc</name><operator>.</operator><name>user_comments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>clen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_comment</name><index>[<expr><name>clen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <name>psz_comment</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_value</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_value</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_value</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_description</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_comment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>daala_info_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>daala_comment_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>daala_decode_free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dcx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>daala_CopyPicture</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>,

<parameter><decl><type><name>daala_image</name> <modifier>*</modifier></type><name>ycbcr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_planes</name> <init>= <expr><ternary><condition><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name>i_planes</name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_total_lines</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument>,

<argument><expr><name><name>ycbcr</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>ycbcr</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>ydec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>ycbcr</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_stride</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_stride</name> <init>= <expr><name><name>ycbcr</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>ystride</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_total_lines</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src_stride</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_src</name> <operator>+=</operator> <name>i_src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name>i_dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>daala_info</name></type> <name>di</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>daala_comment</name></type> <name>dc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>daala_enc_ctx</name> <modifier>*</modifier></type><name>dcx</name></decl>;</decl_stmt> 

}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>daala_packet</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DAALA</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>encoder_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_DAALA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_enc_options</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"chroma-fmt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_codec</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_tmp</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"420"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>i_codec</name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"444"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>i_codec</name> <operator>=</operator> <name>VLC_CODEC_I444</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Invalid chroma format: %s"</literal></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>i_codec</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>daala_info_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_width</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_height</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>nplanes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>nplanes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xdec</name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_codec</name> <operator>!=</operator> <name>VLC_CODEC_I444</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ydec</name> <operator>=</operator> <ternary><condition><expr><name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_I420</name></expr> ?</condition><then>

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xdec</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>frame_duration</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>||</operator>

<operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_numerator</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_denominator</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_numerator</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>timebase_denominator</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_dst_num</name></decl>, <decl><type ref="prev"/><name>i_dst_den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_dst_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dst_den</name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pixel_aspect_numerator</name></name> <operator>=</operator> <name>i_dst_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pixel_aspect_denominator</name></name> <operator>=</operator> <name>i_dst_den</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pixel_aspect_numerator</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pixel_aspect_denominator</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>keyframe_rate</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"keyint"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>daala_enc_ctx</name> <modifier>*</modifier></type><name>dcx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dcx</name></name> <operator>=</operator> <name>dcx</name> <operator>=</operator> <call><name>daala_encode_create</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>dcx</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>daala_comment_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_quality</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"quality"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>daala_encode_ctl</name><argument_list>( <argument><expr><name>dcx</name></expr></argument>, <argument><expr><name>OD_SET_QUANT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_quality</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i_quality</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>status</name> <operator>=</operator> <call><name>daala_encode_flush_header</name><argument_list>( <argument><expr><name>dcx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseEncoder</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xiph_AppendHeaders</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>bytes</name></name></expr></argument>,

<argument><expr><name><name>header</name><operator>.</operator><name>packet</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pict</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>daala_packet</name></type> <name>dpacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>daala_image</name></type> <name>img</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pict</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_width</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_height</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>pic_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&lt;</operator> <name>i_width</name> <operator>||</operator>

<name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>&lt;</operator> <name>i_height</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"frame is smaller than encoding size"</literal>

<literal type="string">"(%ix%i-&gt;%ix%i) -&gt; dropping frame"</literal></expr></argument>,

<argument><expr><name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument>,

<argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>nplanes</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>nplanes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>i_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>i_height</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>img</name><operator>.</operator><name>nplanes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xdec</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xdec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ydec</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>di</name><operator>.</operator><name>plane_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ydec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xstride</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ystride</name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitdepth</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><call><name>daala_encode_img_in</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dcx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>img</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"failed encoding a frame"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>daala_encode_packet_out</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dcx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dpacket</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>dpacket</name><operator>.</operator><name>bytes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>dpacket</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>dpacket</name><operator>.</operator><name>bytes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>daala_packet_iskeyframe</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dpacket</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>daala_info_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>di</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>daala_comment_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>daala_encode_free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dcx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
