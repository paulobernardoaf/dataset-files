<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\cea708.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cea708.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"substext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Debug</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>code</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Debug</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>cea708_demux_t</name>

<block>{

<decl_stmt><decl><type><name>int8_t</name></type> <name>i_pkt_sequence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_total_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><name>CEA708_DTVCC_MAX_PKT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>service_data_hdlr_t</name></type> <name>p_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>void</name></type> <name>CEA708_DTVCC_Demuxer_Flush</name><parameter_list>( <parameter><decl><type><name>cea708_demux_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_pkt_sequence</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_total_data</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CEA708_DTVCC_Demuxer_Release</name><parameter_list>( <parameter><decl><type><name>cea708_demux_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>cea708_demux_t</name> <modifier>*</modifier></type> <name>CEA708_DTVCC_Demuxer_New</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>service_data_hdlr_t</name></type> <name>hdlr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_demux_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cea708_demux_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>h</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>p_callback</name></name> <operator>=</operator> <name>hdlr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CEA708_DTVCC_Demuxer_Flush</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_DTVCC_Demux_ServiceBlocks</name><parameter_list>( <parameter><decl><type><name>cea708_demux_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>i_data</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sid</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_block_size</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_block_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_block_size</name> <operator>&gt;</operator> <name>i_data</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_sid</name> <operator>==</operator> <literal type="number">0x07</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_sid</name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sid</name> <operator>&lt;</operator> <literal type="number">0x07</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>p_callback</name></name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name>i_sid</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_block_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_block_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_block_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CEA708_DTVCC_Demuxer_Push</name><parameter_list>( <parameter><decl><type><name>cea708_demux_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name></type> <name>i_pkt_sequence</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pkt_sequence</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>i_pkt_sequence</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator> <name>i_pkt_sequence</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>i_total_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_pkt_sequence</name></name> <operator>=</operator> <name>i_pkt_sequence</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pktsize</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pktsize</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pktsize</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pktsize</name> <operator>=</operator> <name>pktsize</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_pkt_sequence</name></name> <operator>=</operator> <name>i_pkt_sequence</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_total_data</name></name> <operator>=</operator> <name>pktsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_time</name></name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>i_total_data</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>i_data</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>i_total_data</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>i_data</name></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>i_total_data</name></name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>CEA708_DTVCC_Demux_ServiceBlocks</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_total_data</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_SERVICE_INPUT_BUFFER</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_WINDOWS_COUNT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_PREDEFINED_STYLES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_SCREEN_ROWS</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_SCREEN_COLS_43</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_SCREEN_COLS_169</name></cpp:macro> <cpp:value>210</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_SCREEN_SAFE_MARGIN_RATIO</name></cpp:macro> <cpp:value>0.10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_SAFE_AREA_REL</name></cpp:macro> <cpp:value>(1.0 - CEA708_SCREEN_SAFE_MARGIN_RATIO)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_WINDOW_MAX_COLS</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_WINDOW_MAX_ROWS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_ROW_HEIGHT_STANDARD</name></cpp:macro> <cpp:value>(CEA708_SAFE_AREA_REL / CEA708_WINDOW_MAX_ROWS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_FONT_TO_LINE_HEIGHT_RATIO</name></cpp:macro> <cpp:value>1.06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_FONTRELSIZE_STANDARD</name></cpp:macro> <cpp:value>(100.0 * CEA708_ROW_HEIGHT_STANDARD / CEA708_FONT_TO_LINE_HEIGHT_RATIO)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_FONTRELSIZE_SMALL</name></cpp:macro> <cpp:value>(CEA708_FONTRELSIZE_STANDARD * 0.7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEA708_FONTRELSIZE_LARGE</name></cpp:macro> <cpp:value>(CEA708_FONTRELSIZE_STANDARD * 1.3)</cpp:value></cpp:define>

<enum>enum <name>cea708_status_e</name>

<block>{

<decl><name>CEA708_STATUS_OK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_STATUS_STARVING</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>CEA708_STATUS_OUTPUT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <name>cea708_c0_codes</name>

<block>{

<decl><name>CEA708_C0_NUL</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>CEA708_C0_ETX</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>CEA708_C0_BS</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,

<decl><name>CEA708_C0_FF</name> <init>= <expr><literal type="number">0x0C</literal></expr></init></decl>,

<decl><name>CEA708_C0_CR</name> <init>= <expr><literal type="number">0x0D</literal></expr></init></decl>,

<decl><name>CEA708_C0_HCR</name> <init>= <expr><literal type="number">0x0E</literal></expr></init></decl>,

<decl><name>CEA708_C0_EXT1</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,

<decl><name>CEA708_C0_P16</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <name>cea708_c1_codes</name>

<block>{

<decl><name>CEA708_C1_CW0</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,

<decl><name>CEA708_C1_CW7</name> <init>= <expr><literal type="number">0x87</literal></expr></init></decl>,

<decl><name>CEA708_C1_CLW</name></decl>,

<decl><name>CEA708_C1_DSW</name></decl>,

<decl><name>CEA708_C1_HDW</name></decl>,

<decl><name>CEA708_C1_TGW</name></decl>,

<decl><name>CEA708_C1_DLW</name></decl>,

<decl><name>CEA708_C1_DLY</name></decl>,

<decl><name>CEA708_C1_DLC</name></decl>,

<decl><name>CEA708_C1_RST</name></decl>,

<decl><name>CEA708_C1_SPA</name> <init>= <expr><literal type="number">0x90</literal></expr></init></decl>,

<decl><name>CEA708_C1_SPC</name></decl>,

<decl><name>CEA708_C1_SPL</name></decl>,

<decl><name>CEA708_C1_SWA</name> <init>= <expr><literal type="number">0x97</literal></expr></init></decl>,

<decl><name>CEA708_C1_DF0</name></decl>,

<decl><name>CEA708_C1_DF7</name> <init>= <expr><literal type="number">0x9F</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ringbuffer</name><index>[<expr><name>CEA708_SERVICE_INPUT_BUFFER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>capacity</name></decl>;</decl_stmt>

}</block></struct></type> <name>cea708_input_buffer_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cea708_input_buffer_init</name><parameter_list>(<parameter><decl><type><name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ib</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ib</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>cea708_input_buffer_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ib</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>cea708_input_buffer_remain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CEA708_SERVICE_INPUT_BUFFER</name> <operator>-</operator> <name><name>ib</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cea708_input_buffer_add</name><parameter_list>(<parameter><decl><type><name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>cea708_input_buffer_remain</name><argument_list>(<argument><expr><name>ib</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ib</name><operator>-&gt;</operator><name>ringbuffer</name><index>[<expr><operator>(</operator><name><name>ib</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>ib</name><operator>-&gt;</operator><name>capacity</name></name><operator>++</operator><operator>)</operator> <operator>%</operator> <name>CEA708_SERVICE_INPUT_BUFFER</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>cea708_input_buffer_peek</name><parameter_list>(<parameter><decl><type><name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>ib</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name><name>ib</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name>off</name><operator>)</operator> <operator>%</operator> <name>CEA708_SERVICE_INPUT_BUFFER</name></expr>;</expr_stmt>

<return>return <expr><name><name>ib</name><operator>-&gt;</operator><name>ringbuffer</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>cea708_input_buffer_get</name><parameter_list>(<parameter><decl><type><name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>a</name> <init>= <expr><call><name>cea708_input_buffer_peek</name><argument_list>( <argument><expr><name>ib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ib</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <operator>(</operator><name><name>ib</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>CEA708_SERVICE_INPUT_BUFFER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ib</name><operator>-&gt;</operator><name>capacity</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>cea708_opacity_e</name>

<block>{

<decl><name>CEA708_OPACITY_SOLID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_OPACITY_FLASH</name></decl>,

<decl><name>CEA708_OPACITY_TRANSLUCENT</name></decl>,

<decl><name>CEA708_OPACITY_TRANSPARENT</name></decl>,

}</block>;</enum>

<enum>enum <name>cea708_edge_e</name>

<block>{

<decl><name>CEA708_EDGE_NONE</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_EDGE_RAISED</name></decl>,

<decl><name>CEA708_EDGE_DEPRESSED</name></decl>,

<decl><name>CEA708_EDGE_UNIFORM</name></decl>,

<decl><name>CEA708_EDGE_LEFT_DROP_SHADOW</name></decl>,

<decl><name>CEA708_EDGE_RIGHT_DROP_SHADOW</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<enum>enum

<block>{

<decl><name>CEA708_PEN_SIZE_SMALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_PEN_SIZE_STANDARD</name></decl>,

<decl><name>CEA708_PEN_SIZE_LARGE</name></decl>,

}</block> <decl><name>size</name></decl>;</enum>

<enum>enum

<block>{

<decl><name>CEA708_FONT_UNDEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_FONT_MONOSPACED</name></decl>,

<decl><name>CEA708_FONT_PROP</name></decl>,

<decl><name>CEA708_FONT_MONO_SANS_SERIF</name></decl>,

<decl><name>CEA708_FONT_PROP_SANS_SERIF</name></decl>,

<decl><name>CEA708_FONT_CASUAL</name></decl>,

<decl><name>CEA708_FONT_CURSIVE</name></decl>,

<decl><name>CEA708_FONT_SMALL_CAPS</name></decl>,

}</block> <decl><name>font</name></decl>;</enum>

<enum>enum

<block>{

<decl><name>CEA708_TAG_DIALOG</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_TAG_SPEAKER</name></decl>,

<decl><name>CEA708_TAG_SYNTHETIC_VOICE</name></decl>,

<decl><name>CEA708_TAG_DIALOG_SECONDARY_LANG</name></decl>,

<decl><name>CEA708_TAG_VOICEOVER</name></decl>,

<decl><name>CEA708_TAG_AUDIBLE_TRANSLATION</name></decl>,

<decl><name>CEA708_TAG_SUBTITLE_TRANSLATION</name></decl>,

<decl><name>CEA708_TAG_VOICE_QUALITY_DESCRIPTION</name></decl>,

<decl><name>CEA708_TAG_SONG_LYRICS</name></decl>,

<decl><name>CEA708_TAG_FX_DESCRIPTION</name></decl>,

<decl><name>CEA708_TAG_SCORE_DESCRIPTION</name></decl>,

<decl><name>CEA708_TAG_EXPLETIVE</name></decl>,

<decl><name>CEA708_TAG_NOT_TO_BE_DISPLAYED</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

}</block> <decl><name>text_tag</name></decl>;</enum>

<enum>enum

<block>{

<decl><name>CEA708_PEN_OFFSET_SUBSCRIPT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_PEN_OFFSET_NORMAL</name></decl>,

<decl><name>CEA708_PEN_OFFSET_SUPERSCRIPT</name></decl>,

}</block> <decl><name>offset</name></decl>;</enum>

<decl_stmt><decl><type><name>bool</name></type> <name>b_italics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_underline</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>cea708_opacity_e</name></name></type> <name>opacity</name></decl>;</decl_stmt>

}</block> <decl><name>foreground</name></decl>, <name>background</name>;</struct>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>edge_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>cea708_edge_e</name></name></type> <name>edge_type</name></decl>;</decl_stmt>

}</block></struct></type> <name>cea708_pen_style_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>cea708_pen_style_t</name></type> <name>style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>col</name></decl>;</decl_stmt>

}</block></struct></type> <name>cea708_pen_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<enum>enum

<block>{

<decl><name>CEA708_WA_JUSTIFY_LEFT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_WA_JUSTIFY_RIGHT</name></decl>,

<decl><name>CEA708_WA_JUSTIFY_CENTER</name></decl>,

<decl><name>CEA708_WA_JUSTIFY_FULL</name></decl>,

}</block> <decl><name>justify</name></decl>;</enum>

<enum>enum

<block>{

<decl><name>CEA708_WA_DIRECTION_LTR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_WA_DIRECTION_RTL</name></decl>,

<decl><name>CEA708_WA_DIRECTION_TB</name></decl>,

<decl><name>CEA708_WA_DIRECTION_BT</name></decl>,

}</block> <decl><name>print_direction</name></decl>, <name>scroll_direction</name>, <name>effect_direction</name>;</enum>

<decl_stmt><decl><type><name>bool</name></type> <name>b_word_wrap</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>CEA708_WA_EFFECT_SNAP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_WA_EFFECT_FADE</name></decl>,

<decl><name>CEA708_WA_EFFECT_WIPE</name></decl>,

}</block> <decl><name>display_effect</name></decl>;</enum>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>effect_speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>fill_color_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>cea708_opacity_e</name></name></type> <name>fill_opacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>cea708_edge_e</name></name></type> <name>border_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>border_color_color</name></decl>;</decl_stmt>

}</block></struct></type> <name>cea708_window_style_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>cea708_text_row_t</name></name></type> <name>cea708_text_row_t</name>;</typedef>

<struct>struct <name>cea708_text_row_t</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>characters</name><index>[<expr><name>CEA708_WINDOW_MAX_COLS</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_pen_style_t</name></type> <name><name>styles</name><index>[<expr><name>CEA708_WINDOW_MAX_COLS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>firstcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>lastcol</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cea708_text_row_Delete</name><parameter_list>( <parameter><decl><type><name>cea708_text_row_t</name> <modifier>*</modifier></type><name>p_row</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_row</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cea708_text_row_t</name> <modifier>*</modifier></type> <name>cea708_text_row_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_text_row_t</name> <modifier>*</modifier></type><name>p_row</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_row</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_row</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>=</operator> <name>CEA708_WINDOW_MAX_COLS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p_row</name><operator>-&gt;</operator><name>characters</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>CEA708_WINDOW_MAX_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_row</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>cea708_text_row_t</name> <modifier>*</modifier></type> <name><name>rows</name><index>[<expr><name>CEA708_WINDOW_MAX_ROWS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_firstrow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_lastrow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_priority</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>CEA708_ANCHOR_TOP_LEFT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CEA708_ANCHOR_TOP_CENTER</name></decl>,

<decl><name>CEA708_ANCHOR_TOP_RIGHT</name></decl>,

<decl><name>CEA708_ANCHOR_CENTER_LEFT</name></decl>,

<decl><name>CEA708_ANCHOR_CENTER_CENTER</name></decl>,

<decl><name>CEA708_ANCHOR_CENTER_RIGHT</name></decl>,

<decl><name>CEA708_ANCHOR_BOTTOM_LEFT</name></decl>,

<decl><name>CEA708_ANCHOR_BOTTOM_CENTER</name></decl>,

<decl><name>CEA708_ANCHOR_BOTTOM_RIGHT</name></decl>,

}</block> <decl><name>anchor_point</name></decl>;</enum>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_anchor_offset_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_anchor_offset_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_row_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_col_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b_relative</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b_row_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b_column_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b_visible</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_window_style_t</name></type> <name>style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_pen_style_t</name></type> <name>pen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_defined</name></decl>;</decl_stmt>

}</block></struct></type> <name>cea708_window_t</name>;</typedef>

<struct>struct <name>cea708_t</name>

<block>{

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_window_t</name></type> <name><name>window</name><index>[<expr><name>CEA708_WINDOWS_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_input_buffer_t</name></type> <name>input_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_cw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>suspended_deadline</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_text_waiting</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_G0</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_C0</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_G1</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_C1</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_G2G3</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_P16</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>ucs2</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NTSC_STYLE</name><parameter_list>(<parameter><type><name>font</name></type></parameter>, <parameter><type><name>edge</name></type></parameter>, <parameter><type><name>bgopacity</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{CEA708_PEN_SIZE_STANDARD,font,CEA708_TAG_DIALOG,CEA708_PEN_OFFSET_NORMAL,false,false,{ 0x2A, CEA708_OPACITY_SOLID, },{ 0x00, bgopacity, },0x00,edge,}</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cea708_pen_style_t</name></type> <name><name>cea708_default_pen_styles</name><index>[<expr><name>CEA708_PREDEFINED_STYLES</name></expr>]</index></name> <init>=

<expr><block>{

<expr><call><name>DEFAULT_NTSC_STYLE</name><argument_list>( <argument><expr><name>CEA708_FONT_UNDEFINED</name></expr></argument>, <argument><expr><name>CEA708_EDGE_NONE</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_STYLE</name><argument_list>( <argument><expr><name>CEA708_FONT_MONOSPACED</name></expr></argument>, <argument><expr><name>CEA708_EDGE_NONE</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_STYLE</name><argument_list>( <argument><expr><name>CEA708_FONT_PROP</name></expr></argument>, <argument><expr><name>CEA708_EDGE_NONE</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_STYLE</name><argument_list>( <argument><expr><name>CEA708_FONT_MONO_SANS_SERIF</name></expr></argument>, <argument><expr><name>CEA708_EDGE_NONE</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_STYLE</name><argument_list>( <argument><expr><name>CEA708_FONT_PROP_SANS_SERIF</name></expr></argument>, <argument><expr><name>CEA708_EDGE_NONE</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_STYLE</name><argument_list>( <argument><expr><name>CEA708_FONT_MONO_SANS_SERIF</name></expr></argument>, <argument><expr><name>CEA708_EDGE_UNIFORM</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_TRANSPARENT</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_STYLE</name><argument_list>( <argument><expr><name>CEA708_FONT_PROP_SANS_SERIF</name></expr></argument>, <argument><expr><name>CEA708_EDGE_UNIFORM</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_TRANSPARENT</name></expr></argument> )</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFAULT_NTSC_STYLE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NTSC_WA_STYLE</name><parameter_list>(<parameter><type><name>just</name></type></parameter>, <parameter><type><name>pd</name></type></parameter>, <parameter><type><name>scroll</name></type></parameter>, <parameter><type><name>wrap</name></type></parameter>, <parameter><type><name>opacity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{just,pd,scroll,CEA708_WA_DIRECTION_LTR,wrap,CEA708_WA_EFFECT_SNAP,1,0x00,opacity,CEA708_EDGE_NONE,0x00,}</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cea708_window_style_t</name></type> <name><name>cea708_default_window_styles</name><index>[<expr><name>CEA708_PREDEFINED_STYLES</name></expr>]</index></name> <init>=

<expr><block>{

<expr><call><name>DEFAULT_NTSC_WA_STYLE</name><argument_list>(<argument><expr><name>CEA708_WA_JUSTIFY_LEFT</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_LTR</name></expr></argument>,

<argument><expr><name>CEA708_WA_DIRECTION_BT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_WA_STYLE</name><argument_list>(<argument><expr><name>CEA708_WA_JUSTIFY_LEFT</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_LTR</name></expr></argument>,

<argument><expr><name>CEA708_WA_DIRECTION_BT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_TRANSPARENT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_WA_STYLE</name><argument_list>(<argument><expr><name>CEA708_WA_JUSTIFY_CENTER</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_LTR</name></expr></argument>,

<argument><expr><name>CEA708_WA_DIRECTION_BT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_WA_STYLE</name><argument_list>(<argument><expr><name>CEA708_WA_JUSTIFY_LEFT</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_LTR</name></expr></argument>,

<argument><expr><name>CEA708_WA_DIRECTION_BT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_WA_STYLE</name><argument_list>(<argument><expr><name>CEA708_WA_JUSTIFY_LEFT</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_LTR</name></expr></argument>,

<argument><expr><name>CEA708_WA_DIRECTION_BT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_TRANSPARENT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_WA_STYLE</name><argument_list>(<argument><expr><name>CEA708_WA_JUSTIFY_CENTER</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_LTR</name></expr></argument>,

<argument><expr><name>CEA708_WA_DIRECTION_BT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>DEFAULT_NTSC_WA_STYLE</name><argument_list>(<argument><expr><name>CEA708_WA_JUSTIFY_LEFT</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_TB</name></expr></argument>,

<argument><expr><name>CEA708_WA_DIRECTION_RTL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>CEA708_OPACITY_SOLID</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFAULT_NTSC_WA_STYLE</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Window_Init</name><parameter_list>( <parameter><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_w</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <name><name>cea708_default_window_styles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>pen</name></name> <operator>=</operator> <name><name>cea708_default_pen_styles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name> <operator>=</operator> <name>CEA708_WINDOW_MAX_ROWS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>b_row_lock</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>b_column_lock</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Window_ClearText</name><parameter_list>( <parameter><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>cea708_text_row_Delete</name><argument_list>( <argument><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name> <operator>=</operator> <name>CEA708_WINDOW_MAX_ROWS</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Window_Reset</name><parameter_list>( <parameter><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CEA708_Window_ClearText</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CEA708_Window_Init</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CEA708_Window_BreaksSpace</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>==</operator> <name>CEA708_WA_DIRECTION_LTR</name> <operator>&amp;&amp;</operator>

<name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>justify</name></name> <operator>==</operator> <name>CEA708_WA_JUSTIFY_LEFT</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>==</operator> <name>CEA708_WA_DIRECTION_RTL</name> <operator>&amp;&amp;</operator>

<name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>justify</name></name> <operator>==</operator> <name>CEA708_WA_JUSTIFY_RIGHT</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>CEA708_Window_MinCol</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_min</name> <init>= <expr><name>CEA708_WINDOW_MAX_COLS</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>cea708_text_row_t</name> <modifier>*</modifier></type><name>p_row</name> <init>= <expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_row</name> <operator>&amp;&amp;</operator> <name><name>p_row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>&lt;</operator> <name>i_min</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_min</name> <operator>=</operator> <name><name>p_row</name><operator>-&gt;</operator><name>firstcol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_min</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>CEA708_Window_MaxCol</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>cea708_text_row_t</name> <modifier>*</modifier></type><name>p_row</name> <init>= <expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_row</name> <operator>&amp;&amp;</operator> <name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>&gt;</operator> <name>i_max</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max</name> <operator>=</operator> <name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_max</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>CEA708_Window_ColCount</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>cea708_text_row_t</name> <modifier>*</modifier></type><name>p_row</name> <init>= <expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_row</name> <operator>||</operator> <name><name>p_row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>&gt;</operator> <name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>-</operator> <name><name>p_row</name><operator>-&gt;</operator><name>firstcol</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>CEA708_Window_RowCount</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name> <operator>&gt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name> <operator>-</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Window_Truncate</name><parameter_list>( <parameter><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_direction</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_direction</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>CEA708_WA_DIRECTION_LTR</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_max</name> <init>= <expr><call><name>CEA708_Window_MaxCol</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_text_row_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>==</operator> <name>i_max</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>&gt;=</operator> <name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cea708_text_row_Delete</name><argument_list>( <argument><expr><name>row</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_RTL</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_min</name> <init>= <expr><call><name>CEA708_Window_MinCol</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_text_row_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>==</operator> <name>i_min</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>&gt;=</operator> <name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cea708_text_row_Delete</name><argument_list>( <argument><expr><name>row</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_TB</name></expr>:</case> 

<if_stmt><if>if<condition>( <expr><call><name>CEA708_Window_RowCount</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cea708_text_row_Delete</name><argument_list>( <argument><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_BT</name></expr>:</case> 

<if_stmt><if>if<condition>( <expr><call><name>CEA708_Window_RowCount</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cea708_text_row_Delete</name><argument_list>( <argument><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Window_Scroll</name><parameter_list>( <parameter><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>CEA708_Window_RowCount</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>scroll_direction</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>CEA708_WA_DIRECTION_LTR</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>CEA708_Window_MaxCol</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>CEA708_WINDOW_MAX_ROWS</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Truncate</name><argument_list>( <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_LTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_text_row_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>&lt;</operator> <name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name></expr> )</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>-</operator> <name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4U</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>-</operator> <name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cea708_pen_style_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_RTL</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>CEA708_Window_MinCol</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Truncate</name><argument_list>( <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_RTL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_text_row_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>&lt;</operator> <name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name></expr> )</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>-</operator> <name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4U</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>row</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>-</operator> <name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cea708_pen_style_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>firstcol</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>lastcol</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_TB</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name> <operator>==</operator> <name>CEA708_WINDOW_MAX_ROWS</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Truncate</name><argument_list>( <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_BT</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Truncate</name><argument_list>( <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>CEA708_WA_DIRECTION_BT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Window_CarriageReturn</name><parameter_list>( <parameter><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>scroll_direction</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>CEA708_WA_DIRECTION_LTR</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>CEA708_Window_ColCount</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_col_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Scroll</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>==</operator> <name>CEA708_WA_DIRECTION_TB</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="number">0</literal></expr> </then><else>: <expr><name>CEA708_WINDOW_MAX_ROWS</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_RTL</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>CEA708_WINDOW_MAX_COLS</name> <operator>&amp;&amp;</operator>

<call><name>CEA708_Window_ColCount</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_col_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Scroll</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>==</operator> <name>CEA708_WA_DIRECTION_TB</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="number">0</literal></expr> </then><else>: <expr><name>CEA708_WINDOW_MAX_ROWS</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_TB</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>CEA708_Window_RowCount</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_row_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Scroll</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>==</operator> <name>CEA708_WA_DIRECTION_LTR</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="number">0</literal></expr> </then><else>: <expr><name>CEA708_WINDOW_MAX_COLS</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_BT</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_row_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Scroll</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>==</operator> <name>CEA708_WA_DIRECTION_LTR</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="number">0</literal></expr> </then><else>: <expr><name>CEA708_WINDOW_MAX_COLS</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Window_Forward</name><parameter_list>( <parameter><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>CEA708_WA_DIRECTION_LTR</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>CEA708_WINDOW_MAX_COLS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_CarriageReturn</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_RTL</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_CarriageReturn</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_TB</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>CEA708_WINDOW_MAX_ROWS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_CarriageReturn</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_WA_DIRECTION_BT</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_CarriageReturn</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Window_Backward</name><parameter_list>( <parameter><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>reverse</name><index>[]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><name>CEA708_WA_DIRECTION_LTR</name></expr>]</index> <operator>=</operator> <name>CEA708_WA_DIRECTION_RTL</name></expr>,

<expr><index>[<expr><name>CEA708_WA_DIRECTION_RTL</name></expr>]</index> <operator>=</operator> <name>CEA708_WA_DIRECTION_LTR</name></expr>,

<expr><index>[<expr><name>CEA708_WA_DIRECTION_TB</name></expr>]</index> <operator>=</operator> <name>CEA708_WA_DIRECTION_BT</name></expr>,

<expr><index>[<expr><name>CEA708_WA_DIRECTION_BT</name></expr>]</index> <operator>=</operator> <name>CEA708_WA_DIRECTION_TB</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save</name> <init>= <expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>=</operator> <name><name>reverse</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CEA708_Window_Forward</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Window_Write</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_w</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;=</operator> <name>CEA708_WINDOW_MAX_ROWS</name> <operator>||</operator>

<name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;=</operator> <name>CEA708_WINDOW_MAX_COLS</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>&lt;</operator> <name>CEA708_WINDOW_MAX_ROWS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name>CEA708_WINDOW_MAX_COLS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cea708_text_row_t</name> <modifier>*</modifier></type><name>p_row</name> <init>= <expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_row</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name></expr>]</index></name> <operator>=</operator> <name>p_row</name> <operator>=</operator> <call><name>cea708_text_row_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_row</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>&lt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>row</name></name> <operator>&gt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_row</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>*</operator> <literal type="number">4U</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_row</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name></expr>]</index></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>pen</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>p_row</name><operator>-&gt;</operator><name>firstcol</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_row</name><operator>-&gt;</operator><name>firstcol</name></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CEA708_Window_Forward</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[0;33m%s\033[0m"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>CEA708ColorConvert</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>value</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0xFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>value</name><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>value</name><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<name><name>value</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>CEA708AlphaConvert</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <name>CEA708_OPACITY_TRANSLUCENT</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>STYLE_ALPHA_OPAQUE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>c</name> <operator>==</operator> <name>CEA708_OPACITY_TRANSPARENT</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>STYLE_ALPHA_TRANSPARENT</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>STYLE_ALPHA_OPAQUE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708PenStyleToSegment</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>cea708_pen_style_t</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>ps</name><operator>-&gt;</operator><name>background</name><operator>.</operator><name>opacity</name></name> <operator>!=</operator> <name>CEA708_OPACITY_TRANSPARENT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <call><name>CEA708AlphaConvert</name><argument_list>( <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>background</name><operator>.</operator><name>opacity</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BACKGROUND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <call><name>CEA708ColorConvert</name><argument_list>( <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>background</name><operator>.</operator><name>color</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_BACKGROUND_COLOR</name><operator>|</operator><name>STYLE_HAS_BACKGROUND_ALPHA</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ps</name><operator>-&gt;</operator><name>background</name><operator>.</operator><name>opacity</name></name> <operator>==</operator> <name>CEA708_OPACITY_FLASH</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BLINK_BACKGROUND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <call><name>CEA708ColorConvert</name><argument_list>( <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>foreground</name><operator>.</operator><name>color</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <call><name>CEA708AlphaConvert</name><argument_list>( <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>foreground</name><operator>.</operator><name>opacity</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_ALPHA</name><operator>|</operator><name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ps</name><operator>-&gt;</operator><name>foreground</name><operator>.</operator><name>opacity</name></name> <operator>==</operator> <name>CEA708_OPACITY_FLASH</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BLINK_FOREGROUND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ps</name><operator>-&gt;</operator><name>b_italics</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ps</name><operator>-&gt;</operator><name>b_underline</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>ps</name><operator>-&gt;</operator><name>font</name></name></expr> )</condition>

<block>{<block_content>

<default>default:</default>

<case>case <expr><name>CEA708_FONT_UNDEFINED</name></expr>:</case>

<case>case <expr><name>CEA708_FONT_MONOSPACED</name></expr>:</case>

<case>case <expr><name>CEA708_FONT_MONO_SANS_SERIF</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_MONOSPACED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_FONT_PROP</name></expr>:</case>

<case>case <expr><name>CEA708_FONT_PROP_SANS_SERIF</name></expr>:</case>

<case>case <expr><name>CEA708_FONT_CASUAL</name></expr>:</case>

<case>case <expr><name>CEA708_FONT_CURSIVE</name></expr>:</case>

<case>case <expr><name>CEA708_FONT_SMALL_CAPS</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>ps</name><operator>-&gt;</operator><name>size</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>CEA708_PEN_SIZE_SMALL</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>CEA708_FONTRELSIZE_SMALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_PEN_SIZE_LARGE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>CEA708_FONTRELSIZE_LARGE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>CEA708_FONTRELSIZE_STANDARD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_t</name> <modifier>*</modifier></type> <name>CEA708CharsToSegment</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>cea708_text_row_t</name> <modifier>*</modifier></type><name>p_row</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_end</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_newline</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name> <init>= <expr><call><name>text_segment_New</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_segment</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708PenStyleToSegment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_row</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>i_start</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_segment</name><operator>-&gt;</operator><name>style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">1U</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><name>b_newline</name> <operator>+</operator> <operator>(</operator><name>i_end</name> <operator>-</operator> <name>i_start</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4U</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_Delete</name><argument_list>( <argument><expr><name>p_segment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offsetw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><name>i_start</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>i_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_row</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name><index>[<expr><name>offsetw</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p_row</name><operator>-&gt;</operator><name>characters</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name><index>[<expr><name>offsetw</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_newline</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name><index>[<expr><name>offsetw</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_segment</name><operator>-&gt;</operator><name>psz_text</name><index>[<expr><name>offsetw</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>p_segment</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text_segment_t</name> <modifier>*</modifier></type> <name>CEA708RowToSegments</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>cea708_text_row_t</name> <modifier>*</modifier></type><name>p_row</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_addnewline</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name> <init>= <expr><operator>&amp;</operator><name>p_segments</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_start</name> <init>= <expr><name><name>p_row</name><operator>-&gt;</operator><name>firstcol</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><name>i_start</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name> <operator>||</operator>

<call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_row</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_row</name><operator>-&gt;</operator><name>styles</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cea708_pen_style_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <call><name>CEA708CharsToSegment</name><argument_list>( <argument><expr><name>p_row</name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>b_addnewline</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name><name>p_row</name><operator>-&gt;</operator><name>lastcol</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_last</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_last</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_start</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_segments</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708SpuConvert</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name></decl></parameter>,

<parameter><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_w</name><operator>-&gt;</operator><name>b_visible</name></name> <operator>||</operator> <call><name>CEA708_Window_RowCount</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_region</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>p_region</name> <operator>=</operator> <call><name>SubpictureUpdaterSysRegionNew</name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_w</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>scroll_direction</name></name> <operator>==</operator> <name>CEA708_WA_DIRECTION_BT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name> <operator>-</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_row_count</name></name> <operator>&lt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name> <operator>-</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_row_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name> <operator>+</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_row_count</name></name> <operator>&gt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name> <operator>+</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_row_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name> <init>= <expr><operator>&amp;</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_segments</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><name>first</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_last</name> <operator>=</operator> <call><name>CEA708RowToSegments</name><argument_list>( <argument><expr><name><name>p_w</name><operator>-&gt;</operator><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>&lt;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_last</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_last</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>b_relative</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_anchor_offset_h</name></name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p_w</name><operator>-&gt;</operator><name>anchor_point</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CEA708_ANCHOR_TOP_LEFT</name></expr>:</case>

<case>case <expr><name>CEA708_ANCHOR_TOP_CENTER</name></expr>:</case>

<case>case <expr><name>CEA708_ANCHOR_TOP_RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_anchor_offset_v</name></name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_ANCHOR_BOTTOM_LEFT</name></expr>:</case>

<case>case <expr><name>CEA708_ANCHOR_BOTTOM_CENTER</name></expr>:</case>

<case>case <expr><name>CEA708_ANCHOR_BOTTOM_RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name><name>p_w</name><operator>-&gt;</operator><name>i_anchor_offset_v</name></name> <operator>/</operator> <literal type="number">100.0</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_anchor_offset_v</name></name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_w</name><operator>-&gt;</operator><name>i_anchor_offset_h</name></name> <operator>/</operator> <name>CEA708_SCREEN_COLS_169</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_w</name><operator>-&gt;</operator><name>i_anchor_offset_v</name></name> <operator>/</operator>

<operator>(</operator><name>CEA708_SCREEN_ROWS</name> <operator>*</operator> <name>CEA708_FONT_TO_LINE_HEIGHT_RATIO</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UPDT_REGION_ORIGIN_X_IS_RATIO</name><operator>|</operator><name>UPDT_REGION_ORIGIN_Y_IS_RATIO</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name> <operator>&lt;=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_lastrow</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>origin</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>p_w</name><operator>-&gt;</operator><name>i_firstrow</name></name> <operator>*</operator> <name>CEA708_ROW_HEIGHT_STANDARD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>anchor_point</name></name> <operator>&lt;=</operator> <name>CEA708_ANCHOR_BOTTOM_RIGHT</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>vlc_subpicture_aligns</name><index>[]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><name>CEA708_ANCHOR_TOP_LEFT</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>,

<expr><index>[<expr><name>CEA708_ANCHOR_TOP_CENTER</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>,

<expr><index>[<expr><name>CEA708_ANCHOR_TOP_RIGHT</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name><operator>|</operator><name>SUBPICTURE_ALIGN_RIGHT</name></expr>,

<expr><index>[<expr><name>CEA708_ANCHOR_CENTER_LEFT</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>,

<expr><index>[<expr><name>CEA708_ANCHOR_CENTER_CENTER</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><index>[<expr><name>CEA708_ANCHOR_CENTER_RIGHT</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>,

<expr><index>[<expr><name>CEA708_ANCHOR_BOTTOM_LEFT</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>,

<expr><index>[<expr><name>CEA708_ANCHOR_BOTTOM_CENTER</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>,

<expr><index>[<expr><name>CEA708_ANCHOR_BOTTOM_RIGHT</name></expr>]</index> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name><operator>|</operator><name>SUBPICTURE_ALIGN_RIGHT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name><name>vlc_subpicture_aligns</name><index>[<expr><name><name>p_w</name><operator>-&gt;</operator><name>anchor_point</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>inner_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name><operator>|</operator><name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>CEA708_BuildSubtitle</name><parameter_list>( <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><call><name>decoder_NewSubpictureText</name><argument_list>( <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name> <init>= <expr><name><name>p_spu</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_region</name> <init>= <expr><operator>&amp;</operator><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>margin_ratio</name></name> <operator>=</operator> <name>CEA708_SCREEN_SAFE_MARGIN_RATIO</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>CEA708_WINDOWS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_window_t</name> <modifier>*</modifier></type><name>p_w</name> <init>= <expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_w</name><operator>-&gt;</operator><name>b_defined</name></name> <operator>&amp;&amp;</operator> <name><name>p_w</name><operator>-&gt;</operator><name>b_visible</name></name> <operator>&amp;&amp;</operator> <call><name>CEA708_Window_RowCount</name><argument_list>( <argument><expr><name>p_w</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>first</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>substext_updater_region_t</name> <modifier>*</modifier></type><name>p_newregion</name> <init>=

<expr><call><name>SubpictureUpdaterSysRegionNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_newregion</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SubpictureUpdaterSysRegionAdd</name><argument_list>( <argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>p_newregion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_region</name> <operator>=</operator> <name>p_newregion</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CEA708SpuConvert</name><argument_list>( <argument><expr><name>p_w</name></expr></argument>, <argument><expr><name>p_region</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_cea708</name><operator>-&gt;</operator><name>i_clock</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_cea708</name><operator>-&gt;</operator><name>i_clock</name></name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Decoder_Init</name><parameter_list>( <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>cea708_input_buffer_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>CEA708_WINDOWS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>suspended_deadline</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>i_clock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Decoder_Reset</name><parameter_list>( <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>CEA708_WINDOWS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Window_Reset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>CEA708_Decoder_Init</name><argument_list>( <argument><expr><name>p_cea708</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CEA708_Decoder_Flush</name><parameter_list>( <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CEA708_Decoder_Reset</name><argument_list>( <argument><expr><name>p_cea708</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CEA708_Decoder_Release</name><parameter_list>( <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CEA708_Decoder_Reset</name><argument_list>( <argument><expr><name>p_cea708</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_cea708</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>cea708_t</name> <modifier>*</modifier></type> <name>CEA708_Decoder_New</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cea708_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cea708</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CEA708_Decoder_Init</name><argument_list>( <argument><expr><name>p_cea708</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <name>p_dec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_cea708</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP_COMMAND</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(void) cea708_input_buffer_get( ib )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP_ARGS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(size_t pops=0; pops&lt;(size_t)n;pops++) POP_COMMAND()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUIRE_ARGS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(cea708_input_buffer_size( ib ) &lt; n + 1)return CEA708_STATUS_STARVING</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUIRE_ARGS_AND_POP_COMMAND</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REQUIRE_ARGS(n); else POP_COMMAND()</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Output</name><parameter_list>( <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"@%ld ms\n"</literal></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>i_clock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name> <init>= <expr><call><name>CEA708_BuildSubtitle</name><argument_list>( <argument><expr><name>p_cea708</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_spu</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>( <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_dec</name></name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_C0</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>u16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name> <init>= <expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>CEA708_STATUS_OK</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>code</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>CEA708_C0_NUL</name></expr>:</case>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C0_ETX</name></expr>:</case>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C0_BS</name></expr>:</case>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CEA708_Window_Backward</name><argument_list>( <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C0_FF</name></expr>:</case>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CEA708_Window_ClearText</name><argument_list>( <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C0_CR</name></expr>:</case>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>&lt;=</operator> <name>CEA708_WA_DIRECTION_RTL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CEA708_Window_CarriageReturn</name><argument_list>( <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_visible</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C0_HCR</name></expr>:</case>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>&gt;</operator> <name>CEA708_WA_DIRECTION_RTL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CEA708_Window_CarriageReturn</name><argument_list>( <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_visible</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C0_EXT1</name></expr>:</case> 

<if_stmt><if>if<condition>( <expr><call><name>cea708_input_buffer_size</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_peek</name><argument_list>( <argument><expr><name>ib</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&gt;</operator> <literal type="number">0x17</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>v</name> <operator>&gt;</operator> <literal type="number">0x0f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>v</name> <operator>&gt;</operator> <literal type="number">0x07</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>cea708_input_buffer_size</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>CEA708_STATUS_STARVING</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POP_ARGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>v</name> <operator>&gt;</operator> <literal type="number">0x7f</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <literal type="number">0xa0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&gt;</operator> <literal type="number">0x87</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>cea708_input_buffer_size</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>CEA708_STATUS_STARVING</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POP_ARGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <call><name>CEA708_Decode_G2G3</name><argument_list>( <argument><expr><name>v</name></expr></argument>, <argument><expr><name>p_cea708</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>CEA708_STATUS_STARVING</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C0_P16</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u16</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>u16</name> <operator>|=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <call><name>CEA708_Decode_P16</name><argument_list>( <argument><expr><name>u16</name></expr></argument>, <argument><expr><name>p_cea708</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[P16 %x]"</literal></expr></argument>, <argument><expr><name>u16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[UNK %2.2x]"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[C0 %x]"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_G0</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name> <init>= <expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>CEA708_STATUS_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>utf8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>code</name></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x7F</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xe2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x99</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xaa</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CEA708_Window_Write</name><argument_list>( <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>code</name> <operator>==</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator>

<name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>&amp;&amp;</operator>

<call><name>CEA708_Window_BreaksSpace</name><argument_list>( <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>|=</operator> <name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_visible</name></name></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_C1</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name> <init>= <expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>CEA708_STATUS_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name>code</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>CEA708_C1_CLW</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[CLW"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</init> <condition><expr><name>v</name></expr>;</condition> <incr><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_defined</name> <operator>&amp;&amp;</operator>

<name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_visible</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CEA708_Window_ClearText</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_DSW</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[DSW"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</init> <condition><expr><name>v</name></expr>;</condition> <incr><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_defined</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_visible</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_visible</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_HDW</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[HDW"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</init> <condition><expr><name>v</name></expr>;</condition> <incr><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_defined</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_visible</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_visible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_TGW</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[TGW"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</init> <condition><expr><name>v</name></expr>;</condition> <incr><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_defined</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_visible</name> <operator>=</operator> <operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_visible</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_DLW</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[DLW"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</init> <condition><expr><name>v</name></expr>;</condition> <incr><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_defined</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_visible</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CEA708_Window_Reset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_DLY</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>suspended_deadline</name></name> <operator>=</operator> <name><name>p_cea708</name><operator>-&gt;</operator><name>i_clock</name></name> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[DLY]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_DLC</name></expr>:</case>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>suspended_deadline</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[DLC]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_RST</name></expr>:</case>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_SPA</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>POP_ARGS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>text_tag</name></name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>b_italics</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>b_underline</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>edge_type</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[SPA]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_SPC</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>POP_ARGS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>foreground</name><operator>.</operator><name>opacity</name></name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>foreground</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>background</name><operator>.</operator><name>opacity</name></name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>background</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>edge_color</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[SPC]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_SPL</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>POP_ARGS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>%</operator> <name>CEA708_WINDOW_MAX_ROWS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>%</operator> <name>CEA708_WINDOW_MAX_COLS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[SPL r%d c%d]"</literal></expr></argument>, <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CEA708_C1_SWA</name></expr>:</case>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>POP_ARGS</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>fill_opacity</name></name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>fill_color_color</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>border_color_color</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>border_type</name></name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>border_type</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>b_word_wrap</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>print_direction</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>scroll_direction</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>justify</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>effect_speed</name></name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>effect_direction</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name><operator>.</operator><name>display_effect</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[SWA]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>( <expr><name>code</name> <operator>&gt;=</operator> <name>CEA708_C1_CW0</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <name>CEA708_C1_CW7</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[CW%d]"</literal></expr></argument>, <argument><expr><name>code</name> <operator>-</operator> <name>CEA708_C1_CW0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>code</name> <operator>-</operator> <name>CEA708_C1_CW0</name></expr>]</index></name><operator>.</operator><name>b_defined</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>code</name> <operator>-</operator> <name>CEA708_C1_CW0</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>code</name> <operator>&gt;=</operator> <name>CEA708_C1_DF0</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <name>CEA708_C1_DF7</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>REQUIRE_ARGS_AND_POP_COMMAND</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[DF%d]"</literal></expr></argument>, <argument><expr><name>code</name> <operator>-</operator> <name>CEA708_C1_DF0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>code</name> <operator>-</operator> <name>CEA708_C1_DF0</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_visible</name></name> <operator>!=</operator> <operator>!</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <name>CEA708_STATUS_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_visible</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_row_lock</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_column_lock</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_relative</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>i_anchor_offset_v</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>i_anchor_offset_h</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>anchor_point</name></name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>i_row_count</name></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>i_col_count</name></name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cea708_input_buffer_get</name><argument_list>( <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <name><name>cea708_default_window_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>pen</name></name> <operator>=</operator> <name><name>cea708_default_pen_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{%2.2x}"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_G1</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cea708_input_buffer_t</name> <modifier>*</modifier></type><name>ib</name> <init>= <expr><operator>&amp;</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>POP_COMMAND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>CEA708_STATUS_OK</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>utf8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xc0</literal> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>,

<expr><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CEA708_Window_Write</name><argument_list>( <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>|=</operator> <name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_visible</name></name></expr>;</expr_stmt>

<return>return <expr><name>CEA708_STATUS_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_G2G3</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>CEA708_STATUS_OK</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'?'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>utf8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>code2utf8</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x20</literal></expr>, <expr><block>{ <expr><literal type="number">0x20</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x21</literal></expr>, <expr><block>{ <expr><literal type="number">0x20</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x25</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0xa6</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x2a</literal></expr>, <expr><block>{ <expr><literal type="number">0xc5</literal></expr>,<expr><literal type="number">0xa0</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x2c</literal></expr>, <expr><block>{ <expr><literal type="number">0xc5</literal></expr>,<expr><literal type="number">0x92</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x88</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x31</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x98</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x32</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x99</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x33</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x9c</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x34</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x9d</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x35</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0xa2</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x39</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0xa2</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x3a</literal></expr>, <expr><block>{ <expr><literal type="number">0xc5</literal></expr>,<expr><literal type="number">0xa1</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x3c</literal></expr>, <expr><block>{ <expr><literal type="number">0xc5</literal></expr>,<expr><literal type="number">0x93</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x3d</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0xa0</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x3f</literal></expr>, <expr><block>{ <expr><literal type="number">0xc5</literal></expr>,<expr><literal type="number">0xb8</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x76</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x9b</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x77</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x9c</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x78</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x9d</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x79</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x9e</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x7a</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x82</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x7b</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x90</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x7c</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x94</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x7d</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x80</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x7e</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x98</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x7f</literal></expr>, <expr><block>{ <expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x8c</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xa0</literal></expr>, <expr><block>{ <expr><literal type="number">0xf0</literal></expr>,<expr><literal type="number">0x9f</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xb2</literal></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>code2utf8</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>code2utf8</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name> <operator>==</operator> <name>code</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>code2utf8</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>utf8</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xf0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xe0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CEA708_Window_Write</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>|=</operator> <name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_visible</name></name></expr>;</expr_stmt>

<return>return <expr><name>CEA708_STATUS_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CEA708_Decode_P16</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>ucs2</name></decl></parameter>, <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>p_cea708</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_defined</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>CEA708_STATUS_OK</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'?'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ucs2</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ucs2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>ucs2</name> <operator>&lt;=</operator> <literal type="number">0x7FF</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC0</literal> <operator>|</operator> <operator>(</operator><name>ucs2</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ucs2</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><name>ucs2</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ucs2</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ucs2</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CEA708_Window_Write</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cea708</name><operator>-&gt;</operator><name>b_text_waiting</name></name> <operator>|=</operator> <name><name>p_cea708</name><operator>-&gt;</operator><name>p_cw</name><operator>-&gt;</operator><name>b_visible</name></name></expr>;</expr_stmt>

<return>return <expr><name>CEA708_STATUS_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CEA708_Decode_ServiceBuffer</name><parameter_list>( <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_in</name> <init>= <expr><call><name>cea708_input_buffer_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_in</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name> <init>= <expr><call><name>cea708_input_buffer_peek</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>CEA708_Decode_C0</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>CEA708_Decode_G0</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x9F</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>CEA708_Decode_C1</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>CEA708_Decode_G1</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&amp;</operator> <name>CEA708_STATUS_OUTPUT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CEA708_Output</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&amp;</operator> <name>CEA708_STATUS_STARVING</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_consumed</name> <init>= <expr><name>i_in</name> <operator>-</operator> <call><name>cea708_input_buffer_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_consumed</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_clock</name></name> <operator>+=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">9600</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>i_consumed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CEA708_Decoder_Push</name><parameter_list>( <parameter><decl><type><name>cea708_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_clock</name></name> <operator>=</operator> <name>i_time</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_data</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_push</name> <init>= <expr><call><name>cea708_input_buffer_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_data</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&lt;</operator> <name>i_push</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_push</name> <operator>=</operator> <operator>(</operator><name>i_data</name> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>suspended_deadline</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>i_push</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name> <init>= <expr><name><name>p_data</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cea708_input_buffer_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>, <argument><expr><name>byte</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>suspended_deadline</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>suspended_deadline</name></name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>i_clock</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_push</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_clock</name></name> <operator>+=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1200</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>i_push</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>suspended_deadline</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CEA708_Decode_ServiceBuffer</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>i_push</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
