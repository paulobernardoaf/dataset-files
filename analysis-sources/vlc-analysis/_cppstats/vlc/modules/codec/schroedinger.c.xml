<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\schroedinger.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_timestamp_helper.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;schroedinger/schro.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-schro-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CHROMAFMT</name></cpp:macro> <cpp:value>"chroma-fmt"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CHROMAFMT_TEXT</name></cpp:macro> <cpp:value>N_("Chroma format")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CHROMAFMT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Picking chroma format will force a " "conversion of the video into that format")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_chromafmt_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"420"</literal></expr>, <expr><literal type="string">"422"</literal></expr>, <expr><literal type="string">"444"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_chromafmt_list_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"4:2:0"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"4:2:2"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"4:4:4"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_RATE_CONTROL</name></cpp:macro> <cpp:value>"rate-control"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_RATE_CONTROL_TEXT</name></cpp:macro> <cpp:value>N_("Rate control method")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_RATE_CONTROL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Method used to encode the video sequence")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_rate_control_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"constant_noise_threshold"</literal></expr>,

<expr><literal type="string">"constant_bitrate"</literal></expr>,

<expr><literal type="string">"low_delay"</literal></expr>,

<expr><literal type="string">"lossless"</literal></expr>,

<expr><literal type="string">"constant_lambda"</literal></expr>,

<expr><literal type="string">"constant_error"</literal></expr>,

<expr><literal type="string">"constant_quality"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_rate_control_list_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Constant noise threshold mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Constant bitrate mode (CBR)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Low Delay mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Lossless mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Constant lambda mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Constant error mode"</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>N_</name><argument_list>(<argument><literal type="string">"Constant quality mode"</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_GOP_STRUCTURE</name></cpp:macro> <cpp:value>"gop-structure"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_GOP_STRUCTURE_TEXT</name></cpp:macro> <cpp:value>N_("GOP structure")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_GOP_STRUCTURE_LONGTEXT</name></cpp:macro> <cpp:value>N_("GOP structure used to encode the video sequence")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_gop_structure_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"adaptive"</literal></expr>,

<expr><literal type="string">"intra_only"</literal></expr>,

<expr><literal type="string">"backref"</literal></expr>,

<expr><literal type="string">"chained_backref"</literal></expr>,

<expr><literal type="string">"biref"</literal></expr>,

<expr><literal type="string">"chained_biref"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_gop_structure_list_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"No fixed gop structure. A picture can be intra or inter and refer to previous or future pictures."</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"I-frame only sequence"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Inter pictures refere to previous pictures only"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Inter pictures refere to previous pictures only"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Inter pictures can refer to previous or future pictures"</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>N_</name><argument_list>(<argument><literal type="string">"Inter pictures can refer to previous or future pictures"</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QUALITY</name></cpp:macro> <cpp:value>"quality"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QUALITY_TEXT</name></cpp:macro> <cpp:value>N_("Constant quality factor")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QUALITY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Quality factor to use in constant quality mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_NOISE_THRESHOLD</name></cpp:macro> <cpp:value>"noise-threshold"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_NOISE_THRESHOLD_TEXT</name></cpp:macro> <cpp:value>N_("Noise Threshold")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_NOISE_THRESHOLD_LONGTEXT</name></cpp:macro> <cpp:value>N_("Noise threshold to use in constant noise threshold mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_BITRATE</name></cpp:macro> <cpp:value>"bitrate"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_BITRATE_TEXT</name></cpp:macro> <cpp:value>N_("CBR bitrate (kbps)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_BITRATE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Target bitrate in kbps when encoding in constant bitrate mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MAX_BITRATE</name></cpp:macro> <cpp:value>"max-bitrate"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MAX_BITRATE_TEXT</name></cpp:macro> <cpp:value>N_("Maximum bitrate (kbps)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MAX_BITRATE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Maximum bitrate in kbps when encoding in constant bitrate mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MIN_BITRATE</name></cpp:macro> <cpp:value>"min-bitrate"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MIN_BITRATE_TEXT</name></cpp:macro> <cpp:value>N_("Minimum bitrate (kbps)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MIN_BITRATE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Minimum bitrate in kbps when encoding in constant bitrate mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_AU_DISTANCE</name></cpp:macro> <cpp:value>"gop-length"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_AU_DISTANCE_TEXT</name></cpp:macro> <cpp:value>N_("GOP length")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_AU_DISTANCE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of pictures between successive sequence headers i.e. length of the group of pictures")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PREFILTER</name></cpp:macro> <cpp:value>"filtering"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PREFILTER_TEXT</name></cpp:macro> <cpp:value>N_("Prefilter")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PREFILTER_LONGTEXT</name></cpp:macro> <cpp:value>N_("Enable adaptive prefiltering")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_filtering_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"none"</literal></expr>,

<expr><literal type="string">"center_weighted_median"</literal></expr>,

<expr><literal type="string">"gaussian"</literal></expr>,

<expr><literal type="string">"add_noise"</literal></expr>,

<expr><literal type="string">"adaptive_gaussian"</literal></expr>,

<expr><literal type="string">"lowpass"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_filtering_list_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"No pre-filtering"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Centre Weighted Median"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Gaussian Low Pass Filter"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Add Noise"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Gaussian Adaptive Low Pass Filter"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Low Pass Filter"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PREFILTER_STRENGTH</name></cpp:macro> <cpp:value>"filter-value"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PREFILTER_STRENGTH_TEXT</name></cpp:macro> <cpp:value>N_("Amount of prefiltering")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PREFILTER_STRENGTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Higher value implies more prefiltering")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODINGMODE</name></cpp:macro> <cpp:value>"coding-mode"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODINGMODE_TEXT</name></cpp:macro> <cpp:value>N_("Picture coding mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODINGMODE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Field coding is where interlaced fields are coded" " separately as opposed to a pseudo-progressive frame")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_codingmode_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"progressive"</literal></expr>, <expr><literal type="string">"field"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_codingmode_list_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"auto - let encoder decide based upon input (Best)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"force coding frame as single picture"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"force coding frame as separate interlaced fields"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MCBLK_SIZE</name></cpp:macro> <cpp:value>"motion-block-size"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MCBLK_SIZE_TEXT</name></cpp:macro> <cpp:value>N_("Size of motion compensation blocks")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_block_size_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"automatic"</literal></expr>,

<expr><literal type="string">"small"</literal></expr>,

<expr><literal type="string">"medium"</literal></expr>,

<expr><literal type="string">"large"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_block_size_list_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"automatic - let encoder decide based upon input (Best)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"small - use small motion compensation blocks"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"medium - use medium motion compensation blocks"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"large - use large motion compensation blocks"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MCBLK_OVERLAP</name></cpp:macro> <cpp:value>"motion-block-overlap"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MCBLK_OVERLAP_TEXT</name></cpp:macro> <cpp:value>N_("Overlap of motion compensation blocks")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_block_overlap_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"automatic"</literal></expr>,

<expr><literal type="string">"none"</literal></expr>,

<expr><literal type="string">"partial"</literal></expr>,

<expr><literal type="string">"full"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_block_overlap_list_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"automatic - let encoder decide based upon input (Best)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"none - Motion compensation blocks do not overlap"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"partial - Motion compensation blocks only partially overlap"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"full - Motion compensation blocks fully overlap"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MVPREC</name></cpp:macro> <cpp:value>"mv-precision"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MVPREC_TEXT</name></cpp:macro> <cpp:value>N_("Motion Vector precision")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MVPREC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Motion Vector precision in pels")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_mvprec_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"1/2"</literal></expr>, <expr><literal type="string">"1/4"</literal></expr>, <expr><literal type="string">"1/8"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_COMBINED</name></cpp:macro> <cpp:value>"me-combined"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_COMBINED_TEXT</name></cpp:macro> <cpp:value>N_("Three component motion estimation")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_COMBINED_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use chroma as part of the motion estimation process")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DWTINTRA</name></cpp:macro> <cpp:value>"intra-wavelet"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DWTINTRA_TEXT</name></cpp:macro> <cpp:value>N_("Intra picture DWT filter")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DWTINTER</name></cpp:macro> <cpp:value>"inter-wavelet"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DWTINTER_TEXT</name></cpp:macro> <cpp:value>N_("Inter picture DWT filter")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_wavelet_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"desl_dubuc_9_7"</literal></expr>,

<expr><literal type="string">"le_gall_5_3"</literal></expr>,

<expr><literal type="string">"desl_dubuc_13_7"</literal></expr>,

<expr><literal type="string">"haar_0"</literal></expr>,

<expr><literal type="string">"haar_1"</literal></expr>,

<expr><literal type="string">"fidelity"</literal></expr>,

<expr><literal type="string">"daub_9_7"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_wavelet_list_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Deslauriers-Dubuc (9,7)"</literal></expr>,

<expr><literal type="string">"LeGall (5,3)"</literal></expr>,

<expr><literal type="string">"Deslauriers-Dubuc (13,7)"</literal></expr>,

<expr><literal type="string">"Haar with no shift"</literal></expr>,

<expr><literal type="string">"Haar with single shift per level"</literal></expr>,

<expr><literal type="string">"Fidelity filter"</literal></expr>,

<expr><literal type="string">"Daubechies (9,7) integer approximation"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DWTDEPTH</name></cpp:macro> <cpp:value>"transform-depth"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DWTDEPTH_TEXT</name></cpp:macro> <cpp:value>N_("Number of DWT iterations")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DWTDEPTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Also known as DWT levels")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MULTIQUANT</name></cpp:macro> <cpp:value>"enable-multiquant"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MULTIQUANT_TEXT</name></cpp:macro> <cpp:value>N_("Enable multiple quantizers")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MULTIQUANT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Enable multiple quantizers per subband (one per codeblock)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_NOAC</name></cpp:macro> <cpp:value>"enable-noarith"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_NOAC_TEXT</name></cpp:macro> <cpp:value>N_("Disable arithmetic coding")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_NOAC_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use variable length codes instead, useful for very high bitrates")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PWT</name></cpp:macro> <cpp:value>"perceptual-weighting"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PWT_TEXT</name></cpp:macro> <cpp:value>N_("perceptual weighting method")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_perceptual_weighting_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"none"</literal></expr>,

<expr><literal type="string">"ccir959"</literal></expr>,

<expr><literal type="string">"moo"</literal></expr>,

<expr><literal type="string">"manos_sakrison"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PDIST</name></cpp:macro> <cpp:value>"perceptual-distance"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PDIST_TEXT</name></cpp:macro> <cpp:value>N_("perceptual distance")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PDIST_LONGTEXT</name></cpp:macro> <cpp:value>N_("perceptual distance to calculate perceptual weight")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_HSLICES</name></cpp:macro> <cpp:value>"horiz-slices"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_HSLICES_TEXT</name></cpp:macro> <cpp:value>N_("Horizontal slices per frame")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_HSLICES_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of horizontal slices per frame in low delay mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_VSLICES</name></cpp:macro> <cpp:value>"vert-slices"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_VSLICES_TEXT</name></cpp:macro> <cpp:value>N_("Vertical slices per frame")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_VSLICES_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of vertical slices per frame in low delay mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_SCBLK_SIZE</name></cpp:macro> <cpp:value>"codeblock-size"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_SCBLK_SIZE_TEXT</name></cpp:macro> <cpp:value>N_("Size of code blocks in each subband")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_codeblock_size_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"automatic"</literal></expr>,

<expr><literal type="string">"small"</literal></expr>,

<expr><literal type="string">"medium"</literal></expr>,

<expr><literal type="string">"large"</literal></expr>,

<expr><literal type="string">"full"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_codeblock_size_list_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"automatic - let encoder decide based upon input (Best)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"small - use small code blocks"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"medium - use medium sized code blocks"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"large - use large code blocks"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"full - One code block per subband"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_HIERARCHICAL</name></cpp:macro> <cpp:value>"enable-hierarchical-me"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_HIERARCHICAL_TEXT</name></cpp:macro> <cpp:value>N_("Enable hierarchical Motion Estimation")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_DOWNSAMPLE_LEVELS</name></cpp:macro> <cpp:value>"downsample-levels"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_DOWNSAMPLE_LEVELS_TEXT</name></cpp:macro> <cpp:value>N_("Number of levels of downsampling")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_DOWNSAMPLE_LEVELS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of levels of downsampling in hierarchical motion estimation mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_GLOBAL_MOTION</name></cpp:macro> <cpp:value>"enable-global-me"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_GLOBAL_MOTION_TEXT</name></cpp:macro> <cpp:value>N_("Enable Global Motion Estimation")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_PHASECORR</name></cpp:macro> <cpp:value>"enable-phasecorr-me"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_ME_PHASECORR_TEXT</name></cpp:macro> <cpp:value>N_("Enable Phase Correlation Estimation")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_SCD</name></cpp:macro> <cpp:value>"enable-scd"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_SCD_TEXT</name></cpp:macro> <cpp:value>N_("Enable Scene Change Detection")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_FORCE_PROFILE</name></cpp:macro> <cpp:value>"force-profile"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_FORCE_PROFILE_TEXT</name></cpp:macro> <cpp:value>N_("Force Profile")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>enc_profile_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"auto"</literal></expr>,

<expr><literal type="string">"vc2_low_delay"</literal></expr>,

<expr><literal type="string">"vc2_simple"</literal></expr>,

<expr><literal type="string">"vc2_main"</literal></expr>,

<expr><literal type="string">"main"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_profile_list_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"automatic - let encoder decide based upon input (Best)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"VC2 Low Delay Profile"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"VC2 Simple Profile"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"VC2 Main Profile"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Main Profile"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_enc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>ENC_RATE_CONTROL</name></expr>, <expr><name>ENC_GOP_STRUCTURE</name></expr>, <expr><name>ENC_QUALITY</name></expr>, <expr><name>ENC_NOISE_THRESHOLD</name></expr>, <expr><name>ENC_BITRATE</name></expr>,

<expr><name>ENC_MIN_BITRATE</name></expr>, <expr><name>ENC_MAX_BITRATE</name></expr>, <expr><name>ENC_AU_DISTANCE</name></expr>, <expr><name>ENC_CHROMAFMT</name></expr>,

<expr><name>ENC_PREFILTER</name></expr>, <expr><name>ENC_PREFILTER_STRENGTH</name></expr>, <expr><name>ENC_CODINGMODE</name></expr>, <expr><name>ENC_MCBLK_SIZE</name></expr>,

<expr><name>ENC_MCBLK_OVERLAP</name></expr>, <expr><name>ENC_MVPREC</name></expr>, <expr><name>ENC_ME_COMBINED</name></expr>, <expr><name>ENC_DWTINTRA</name></expr>, <expr><name>ENC_DWTINTER</name></expr>,

<expr><name>ENC_DWTDEPTH</name></expr>, <expr><name>ENC_MULTIQUANT</name></expr>, <expr><name>ENC_NOAC</name></expr>, <expr><name>ENC_PWT</name></expr>, <expr><name>ENC_PDIST</name></expr>, <expr><name>ENC_HSLICES</name></expr>,

<expr><name>ENC_VSLICES</name></expr>, <expr><name>ENC_SCBLK_SIZE</name></expr>, <expr><name>ENC_ME_HIERARCHICAL</name></expr>, <expr><name>ENC_ME_DOWNSAMPLE_LEVELS</name></expr>,

<expr><name>ENC_ME_GLOBAL_MOTION</name></expr>, <expr><name>ENC_ME_PHASECORR</name></expr>, <expr><name>ENC_SCD</name></expr>, <expr><name>ENC_FORCE_PROFILE</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_VCODEC</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"Schroedinger"</literal></argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Dirac video decoder using libschroedinger"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">200</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDecoder</argument>, <argument>CloseDecoder</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"schroedinger"</literal></argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Encoding"</literal>)</argument> , <argument>NULL</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Dirac video encoder using libschroedinger"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">110</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenEncoder</argument>, <argument>CloseEncoder</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"schroedinger"</literal></argument>, <argument><literal type="string">"schro"</literal></argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_RATE_CONTROL</argument>, <argument>NULL</argument>,

<argument>ENC_RATE_CONTROL_TEXT</argument>, <argument>ENC_RATE_CONTROL_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_rate_control_list</argument>, <argument>enc_rate_control_list_text</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_QUALITY</argument>, <argument>-<literal type="number">1.</literal></argument>,

<argument>ENC_QUALITY_TEXT</argument>, <argument>ENC_QUALITY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_float_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.</literal></expr></argument>, <argument><expr><literal type="number">10.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_NOISE_THRESHOLD</argument>, <argument>-<literal type="number">1.</literal></argument>,

<argument>ENC_NOISE_THRESHOLD_TEXT</argument>, <argument>ENC_NOISE_THRESHOLD_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_float_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.</literal></expr></argument>, <argument><expr><literal type="number">100.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_BITRATE</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_BITRATE_TEXT</argument>, <argument>ENC_BITRATE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_MAX_BITRATE</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_MAX_BITRATE_TEXT</argument>, <argument>ENC_MAX_BITRATE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_MIN_BITRATE</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_MIN_BITRATE_TEXT</argument>, <argument>ENC_MIN_BITRATE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_GOP_STRUCTURE</argument>, <argument>NULL</argument>,

<argument>ENC_GOP_STRUCTURE_TEXT</argument>, <argument>ENC_GOP_STRUCTURE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_gop_structure_list</argument>, <argument>enc_gop_structure_list_text</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_AU_DISTANCE</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_AU_DISTANCE_TEXT</argument>, <argument>ENC_AU_DISTANCE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_CHROMAFMT</argument>, <argument><literal type="string">"420"</literal></argument>,

<argument>ENC_CHROMAFMT_TEXT</argument>, <argument>ENC_CHROMAFMT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_chromafmt_list</argument>, <argument>enc_chromafmt_list_text</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_CODINGMODE</argument>, <argument><literal type="string">"auto"</literal></argument>,

<argument>ENC_CODINGMODE_TEXT</argument>, <argument>ENC_CODINGMODE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_codingmode_list</argument>, <argument>enc_codingmode_list_text</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_MVPREC</argument>, <argument>NULL</argument>,

<argument>ENC_MVPREC_TEXT</argument>, <argument>ENC_MVPREC_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_mvprec_list</argument>, <argument>enc_mvprec_list</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_MCBLK_SIZE</argument>, <argument>NULL</argument>,

<argument>ENC_MCBLK_SIZE_TEXT</argument>, <argument>ENC_MCBLK_SIZE_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_block_size_list</argument>, <argument>enc_block_size_list_text</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_MCBLK_OVERLAP</argument>, <argument>NULL</argument>,

<argument>ENC_MCBLK_OVERLAP_TEXT</argument>, <argument>ENC_MCBLK_OVERLAP_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_block_overlap_list</argument>, <argument>enc_block_overlap_list_text</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_ME_COMBINED</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_ME_COMBINED_TEXT</argument>, <argument>ENC_ME_COMBINED_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_ME_HIERARCHICAL</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_ME_HIERARCHICAL_TEXT</argument>, <argument>ENC_ME_HIERARCHICAL_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_ME_DOWNSAMPLE_LEVELS</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_ME_DOWNSAMPLE_LEVELS_TEXT</argument>, <argument>ENC_ME_DOWNSAMPLE_LEVELS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_ME_GLOBAL_MOTION</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_ME_GLOBAL_MOTION_TEXT</argument>, <argument>ENC_ME_GLOBAL_MOTION_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_ME_PHASECORR</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_ME_PHASECORR_TEXT</argument>, <argument>ENC_ME_PHASECORR_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_DWTINTRA</argument>, <argument>NULL</argument>,

<argument>ENC_DWTINTRA_TEXT</argument>, <argument>ENC_DWTINTRA_TEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_wavelet_list</argument>, <argument>enc_wavelet_list_text</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_DWTINTER</argument>, <argument>NULL</argument>,

<argument>ENC_DWTINTER_TEXT</argument>, <argument>ENC_DWTINTER_TEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_wavelet_list</argument>, <argument>enc_wavelet_list_text</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_DWTDEPTH</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_DWTDEPTH_TEXT</argument>, <argument>ENC_DWTDEPTH_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SCHRO_LIMIT_ENCODER_TRANSFORM_DEPTH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_MULTIQUANT</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_MULTIQUANT_TEXT</argument>, <argument>ENC_MULTIQUANT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_SCBLK_SIZE</argument>, <argument>NULL</argument>,

<argument>ENC_SCBLK_SIZE_TEXT</argument>, <argument>ENC_SCBLK_SIZE_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_codeblock_size_list</argument>, <argument>enc_codeblock_size_list_text</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_PREFILTER</argument>, <argument>NULL</argument>,

<argument>ENC_PREFILTER_TEXT</argument>, <argument>ENC_PREFILTER_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_filtering_list</argument>, <argument>enc_filtering_list_text</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_PREFILTER_STRENGTH</argument>, <argument>-<literal type="number">1.</literal></argument>,

<argument>ENC_PREFILTER_STRENGTH_TEXT</argument>, <argument>ENC_PREFILTER_STRENGTH_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_float_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_SCD</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_SCD_TEXT</argument>, <argument>ENC_SCD_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_PWT</argument>, <argument>NULL</argument>,

<argument>ENC_PWT_TEXT</argument>, <argument>ENC_PWT_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_perceptual_weighting_list</argument>, <argument>enc_perceptual_weighting_list</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_PDIST</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_PDIST_TEXT</argument>, <argument>ENC_PDIST_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_float_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.</literal></expr></argument>, <argument><expr><literal type="number">100.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_NOAC</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_NOAC_TEXT</argument>, <argument>ENC_NOAC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_HSLICES</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_HSLICES_TEXT</argument>, <argument>ENC_HSLICES_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_VSLICES</argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>ENC_VSLICES_TEXT</argument>, <argument>ENC_VSLICES_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>change_integer_range</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX ENC_FORCE_PROFILE</argument>, <argument>NULL</argument>,

<argument>ENC_FORCE_PROFILE_TEXT</argument>, <argument>ENC_FORCE_PROFILE_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_profile_list</argument>, <argument>enc_profile_list_text</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<struct>struct <name>picture_free_t</name>

<block>{

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_lastpts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_frame_pts_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SchroDecoder</name> <modifier>*</modifier></type><name>p_schro</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SchroVideoFormat</name> <modifier>*</modifier></type><name>p_format</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SchroDecoder</name> <modifier>*</modifier></type><name>p_schro</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DIRAC</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>schro_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>p_schro</name> <operator>=</operator> <call><name>schro_decoder_new</name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name> <operator>=</operator> <name>p_schro</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_lastpts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetVideoFormat</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name> <operator>=</operator> <call><name>schro_decoder_get_video_format</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts_delta</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>frame_rate_denominator</name></name>

<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>frame_rate_numerator</name></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SCHRO_CHROMA_420</name></expr>:</case> <expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SCHRO_CHROMA_422</name></expr>:</case> <expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I422</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SCHRO_CHROMA_444</name></expr>:</case> <expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I444</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>clean_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>left_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>clean_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>top_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>aspect_ratio_numerator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>aspect_ratio_denominator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>frame_rate_numerator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>frame_rate_denominator</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SchroFrameFree</name><parameter_list>( <parameter><decl><type><name>SchroFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>picture_free_t</name></name> <modifier>*</modifier></type><name>p_free</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_free</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_free</name><operator>-&gt;</operator><name>p_pic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>frame</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SchroFrame</name> <modifier>*</modifier></type><name>CreateSchroFrameFromPic</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SchroFrame</name> <modifier>*</modifier></type><name>p_schroframe</name> <init>= <expr><call><name>schro_frame_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>picture_free_t</name></name> <modifier>*</modifier></type><name>p_free</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_schroframe</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>SCHRO_FRAME_FORMAT_U8_420</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>SCHRO_CHROMA_422</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>SCHRO_FRAME_FORMAT_U8_422</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>SCHRO_CHROMA_444</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>SCHRO_FRAME_FORMAT_U8_444</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_free</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_free</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_free</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <name>p_pic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_free</name><operator>-&gt;</operator><name>p_dec</name></name> <operator>=</operator> <name>p_dec</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_frame_set_free_callback</name><argument_list>( <argument><expr><name>p_schroframe</name></expr></argument>, <argument><expr><name>SchroFrameFree</name></expr></argument>, <argument><expr><name>p_free</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v_shift</name> <operator>=</operator>

<call><name>SCHRO_FRAME_FORMAT_V_SHIFT</name><argument_list>( <argument><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h_shift</name> <operator>=</operator>

<call><name>SCHRO_FRAME_FORMAT_H_SHIFT</name><argument_list>( <argument><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>interlaced</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>p_schroframe</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SchroBufferFree</name><parameter_list>( <parameter><decl><type><name>SchroBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>schro_decoder_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>schro_decoder_reset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_lastpts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>|</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SchroBuffer</name> <modifier>*</modifier></type><name>p_schrobuffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_schrobuffer</name> <operator>=</operator> <call><name>schro_buffer_new_with_data</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schrobuffer</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>SchroBufferFree</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schrobuffer</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>p_pts</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_pts</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pts</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_pts</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schrobuffer</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>schro_tag_new</name><argument_list>( <argument><expr><name>p_pts</name></expr></argument>, <argument><expr><name>free</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>schro_decoder_autoparse_push</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><name>p_schrobuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>SchroFrame</name> <modifier>*</modifier></type><name>p_schroframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><call><name>schro_decoder_autoparse_wait</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>state</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SCHRO_DECODER_FIRST_ACCESS_UNIT</name></expr>:</case>

<expr_stmt><expr><call><name>SetVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SCHRO_DECODER_NEED_BITS</name></expr>:</case>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

<case>case <expr><name>SCHRO_DECODER_NEED_FRAME</name></expr>:</case>

<expr_stmt><expr><name>p_schroframe</name> <operator>=</operator> <call><name>CreateSchroFrameFromPic</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_schroframe</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate picture for decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>schro_decoder_add_output_picture</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><name>p_schroframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SCHRO_DECODER_OK</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>SchroTag</name> <modifier>*</modifier></type><name>p_tag</name> <init>= <expr><call><name>schro_decoder_get_picture_tag</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_schroframe</name> <operator>=</operator> <call><name>schro_decoder_pull</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_schroframe</name> <operator>||</operator> <operator>!</operator><name><name>p_schroframe</name><operator>-&gt;</operator><name>priv</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_tag</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>schro_tag_free</name><argument_list>( <argument><expr><name>p_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_schroframe</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>schro_frame_unref</name><argument_list>( <argument><expr><name>p_schroframe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>picture_free_t</name><operator>*</operator><operator>)</operator> <name><name>p_schroframe</name><operator>-&gt;</operator><name>priv</name></name><operator>)</operator><operator>-&gt;</operator><name>p_pic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_tag</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>vlc_tick_t</name><operator>*</operator><operator>)</operator> <name><name>p_tag</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_tag_free</name><argument_list>( <argument><expr><name>p_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_lastpts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_lastpts</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts_delta</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_lastpts</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_frame_unref</name><argument_list>( <argument><expr><name>p_schroframe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>SCHRO_DECODER_EOS</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>SCHRO_DECODER_ERROR</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"SCHRO_DECODER_ERROR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pict</name></decl></parameter> )</parameter_list>;</function_decl>

<struct>struct <name>picture_pts_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>u_pnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHRO_PTS_TLB_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>SchroEncoder</name> <modifier>*</modifier></type><name>p_schro</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SchroVideoFormat</name> <modifier>*</modifier></type><name>p_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_auto_field_coding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_input_picnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timestamp_fifo_t</name> <modifier>*</modifier></type><name>p_dts_fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>picture_pts_t</name></name></type> <name><name>pts_tlb</name><index>[<expr><name>SCHRO_PTS_TLB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_field_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_eos_signalled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_eos_pulled</name></decl>;</decl_stmt>

}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<struct><specifier>static</specifier> struct

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_approx_fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SchroVideoFormatEnum</name></type> <name>i_vf</name></decl>;</decl_stmt>

}</block> <decl><name><name>schro_format_guess</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_CUSTOM</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">120</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_QSIF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">144</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_QCIF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">240</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_SIF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">288</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_CIF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">480</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_SD480I_60</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">480</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_4SIF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">576</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_4CIF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">576</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_SD576I_50</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">720</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_HD720P_50</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">720</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_HD720P_60</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1080</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_DC2K_24</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1080</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_HD1080I_50</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1080</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_HD1080I_60</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1080</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_HD1080P_50</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">1080</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_HD1080P_60</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">2160</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>SCHRO_VIDEO_FORMAT_DC4K_24</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResetPTStlb</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SCHRO_PTS_TLB_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts_tlb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_empty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>StorePicturePTS</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>u_pnum</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SCHRO_PTS_TLB_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts_tlb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_empty</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts_tlb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u_pnum</name> <operator>=</operator> <name>u_pnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts_tlb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pts</name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts_tlb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_empty</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Could not store PTS %"</literal><name>PRId64</name><literal type="string">" for frame %u"</literal></expr></argument>, <argument><expr><name>i_pts</name></expr></argument>, <argument><expr><name>u_pnum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>GetPicturePTS</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>u_pnum</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SCHRO_PTS_TLB_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts_tlb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_empty</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>pts_tlb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u_pnum</name> <operator>==</operator> <name>u_pnum</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts_tlb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_empty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts_tlb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pts</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Could not retrieve PTS for picture %u"</literal></expr></argument>, <argument><expr><name>u_pnum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>SchroSetEnum</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_list_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name_text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>list</name> <operator>&amp;&amp;</operator> <name>psz_name_text</name> <operator>&amp;&amp;</operator> <name>psz_name</name> <operator>&amp;&amp;</operator> <name>psz_value</name></expr> )</condition> <block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_list_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Invalid %s: %s"</literal></expr></argument>, <argument><expr><name>psz_name_text</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>SetEncChromaFormat</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_codec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_codec</name></expr> )</condition> <block>{<block_content>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>i_codec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>=</operator> <name>SCHRO_CHROMA_420</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_I422</name></expr>:</case>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>i_codec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>=</operator> <name>SCHRO_CHROMA_422</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_I444</name></expr>:</case>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>i_codec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>=</operator> <name>SCHRO_CHROMA_444</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHRO_SET_FLOAT</name><parameter_list>(<parameter><type><name>psz_name</name></type></parameter>, <parameter><type><name>pschro_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f_tmp = var_GetFloat( p_enc, ENC_CFG_PREFIX psz_name ); if( f_tmp &gt;= 0.0 ) schro_encoder_setting_set_double( p_sys-&gt;p_schro, pschro_name, f_tmp );</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHRO_SET_INTEGER</name><parameter_list>(<parameter><type><name>psz_name</name></type></parameter>, <parameter><type><name>pschro_name</name></type></parameter>, <parameter><type><name>ignore_val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>i_tmp = var_GetInteger( p_enc, ENC_CFG_PREFIX psz_name ); if( i_tmp &gt; ignore_val ) schro_encoder_setting_set_double( p_sys-&gt;p_schro, pschro_name, i_tmp );</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHRO_SET_ENUM</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>psz_name</name></type></parameter>, <parameter><type><name>psz_name_text</name></type></parameter>, <parameter><type><name>pschro_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>psz_tmp = var_GetString( p_enc, ENC_CFG_PREFIX psz_name ); if( !psz_tmp ) goto error; else if ( *psz_tmp != '\0' ) { int i_list_size = ARRAY_SIZE(list); if( !SchroSetEnum( p_enc, i_list_size, list, pschro_name, psz_name_text, psz_tmp ) ) { free( psz_tmp ); goto error; } } free( psz_tmp );</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DIRAC</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>||</operator> <operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>||</operator>

<operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>||</operator> <operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Framerate and picture dimensions must be non-zero"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name> <operator>=</operator> <name>Encode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_DIRAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_dts_fifo</name></name> <operator>=</operator> <call><name>timestamp_FifoNew</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseEncoder</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ResetPTStlb</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SchroVideoFormatEnum</name></type> <name>guessed_video_fmt</name> <init>= <expr><name>SCHRO_VIDEO_FORMAT_CUSTOM</name></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>schro_format_guess</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_height</name> <operator>&gt;</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>guessed_video_fmt</name> <operator>=</operator> <name><name>schro_format_guess</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_vf</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>schro_format_guess</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_height</name> <operator>!=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_fps</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>/</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta_fps</name> <init>= <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>schro_format_guess</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_approx_fps</name> <operator>-</operator> <name>src_fps</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>delta_fps</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>guessed_video_fmt</name> <operator>=</operator> <name><name>schro_format_guess</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_vf</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block> while<condition>( <expr><name><name>schro_format_guess</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>.</operator><name>i_height</name></expr> )</condition>;</do>

<expr_stmt><expr><call><name>schro_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name> <operator>=</operator> <call><name>schro_encoder_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize libschroedinger encoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>schro_encoder_set_packet_assembly</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name> <operator>=</operator> <call><name>schro_encoder_get_video_format</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Failed to get Schroedigner video format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_encoder_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>schro_video_format_set_std_video_format</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><name>guessed_video_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>frame_rate_numerator</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>frame_rate_denominator</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>u_asr_num</name></decl>, <decl><type ref="prev"/><name>u_asr_den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u_asr_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_asr_den</name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>aspect_ratio_numerator</name></name> <operator>=</operator> <name>u_asr_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>aspect_ratio_denominator</name></name> <operator>=</operator> <name>u_asr_den</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_enc_options</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_rate_control_list</argument>, <argument>ENC_RATE_CONTROL</argument>, <argument>ENC_RATE_CONTROL_TEXT</argument>, <argument><literal type="string">"rate_control"</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_gop_structure_list</argument>, <argument>ENC_GOP_STRUCTURE</argument>, <argument>ENC_GOP_STRUCTURE_TEXT</argument>, <argument><literal type="string">"gop_structure"</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <macro><name>var_GetString</name><argument_list>( <argument>p_enc</argument>, <argument>ENC_CFG_PREFIX ENC_CHROMAFMT</argument> )</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_tmp</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_codec</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"420"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>i_codec</name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"422"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>i_codec</name> <operator>=</operator> <name>VLC_CODEC_I422</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"444"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>i_codec</name> <operator>=</operator> <name>VLC_CODEC_I444</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Invalid chroma format: %s"</literal></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SetEncChromaFormat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>SCHRO_SET_FLOAT</name><argument_list>(<argument>ENC_QUALITY</argument>, <argument><literal type="string">"quality"</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_FLOAT</name><argument_list>(<argument>ENC_NOISE_THRESHOLD</argument>, <argument><literal type="string">"noise_threshold"</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <macro><name>var_GetInteger</name><argument_list>( <argument>p_enc</argument>, <argument>ENC_CFG_PREFIX ENC_BITRATE</argument> )</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tmp</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><name>i_tmp</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <call><name>schro_encoder_setting_get_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <macro><name>var_GetInteger</name><argument_list>( <argument>p_enc</argument>, <argument>ENC_CFG_PREFIX ENC_MIN_BITRATE</argument> )</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tmp</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"min_bitrate"</literal></expr></argument>, <argument><expr><name>i_tmp</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <macro><name>var_GetInteger</name><argument_list>( <argument>p_enc</argument>, <argument>ENC_CFG_PREFIX ENC_MAX_BITRATE</argument> )</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tmp</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"max_bitrate"</literal></expr></argument>, <argument><expr><name>i_tmp</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_AU_DISTANCE</argument>, <argument><literal type="string">"au_distance"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_filtering_list</argument>, <argument>ENC_PREFILTER</argument>, <argument>ENC_PREFILTER_TEXT</argument>, <argument><literal type="string">"filtering"</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_FLOAT</name><argument_list>(<argument>ENC_PREFILTER_STRENGTH</argument>, <argument><literal type="string">"filter_value"</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <macro><name>var_GetString</name><argument_list>( <argument>p_enc</argument>, <argument>ENC_CFG_PREFIX ENC_CODINGMODE</argument> )</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_tmp</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_auto_field_coding</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"progressive"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_auto_field_coding</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"interlaced_coding"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_auto_field_coding</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"interlaced_coding"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Invalid codingmode: %s"</literal></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_block_size_list</argument>, <argument>ENC_MCBLK_SIZE</argument>, <argument>ENC_MCBLK_SIZE_TEXT</argument>, <argument><literal type="string">"motion_block_size"</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_block_overlap_list</argument>, <argument>ENC_MCBLK_OVERLAP</argument>, <argument>ENC_MCBLK_OVERLAP_TEXT</argument>, <argument><literal type="string">"motion_block_overlap"</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <macro><name>var_GetString</name><argument_list>( <argument>p_enc</argument>, <argument>ENC_CFG_PREFIX ENC_MVPREC</argument> )</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_tmp</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>psz_tmp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"mv_precision"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"1/2"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"mv_precision"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"1/4"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"mv_precision"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"1/8"</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"mv_precision"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Invalid mv_precision: %s"</literal></expr></argument>, <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_ME_COMBINED</argument>, <argument><literal type="string">"enable_chroma_me"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_wavelet_list</argument>, <argument>ENC_DWTINTRA</argument>, <argument>ENC_DWTINTRA_TEXT</argument>, <argument><literal type="string">"intra_wavelet"</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_wavelet_list</argument>, <argument>ENC_DWTINTER</argument>, <argument>ENC_DWTINTER_TEXT</argument>, <argument><literal type="string">"inter_wavelet"</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_DWTDEPTH</argument>, <argument><literal type="string">"transform_depth"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_MULTIQUANT</argument>, <argument><literal type="string">"enable_multiquant"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_NOAC</argument>, <argument><literal type="string">"enable_noarith"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_perceptual_weighting_list</argument>, <argument>ENC_PWT</argument>, <argument>ENC_PWT_TEXT</argument>, <argument><literal type="string">"perceptual_weighting"</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_FLOAT</name><argument_list>(<argument>ENC_PDIST</argument>, <argument><literal type="string">"perceptual_distance"</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_HSLICES</argument>, <argument><literal type="string">"horiz_slices"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_VSLICES</argument>, <argument><literal type="string">"vert_slices"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_codeblock_size_list</argument>, <argument>ENC_SCBLK_SIZE</argument>, <argument>ENC_SCBLK_SIZE_TEXT</argument>, <argument><literal type="string">"codeblock_size"</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_ME_HIERARCHICAL</argument>, <argument><literal type="string">"enable_hierarchical_estimation"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_ME_DOWNSAMPLE_LEVELS</argument>, <argument><literal type="string">"downsample_levels"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_ME_GLOBAL_MOTION</argument>, <argument><literal type="string">"enable_global_motion"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_ME_PHASECORR</argument>, <argument><literal type="string">"enable_phasecorr_estimation"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_INTEGER</name><argument_list>(<argument>ENC_SCD</argument>, <argument><literal type="string">"enable_scene_change_detection"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>SCHRO_SET_ENUM</name><argument_list>(<argument>enc_profile_list</argument>, <argument>ENC_FORCE_PROFILE</argument>, <argument>ENC_FORCE_PROFILE_TEXT</argument>, <argument><literal type="string">"force_profile"</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>CloseEncoder</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>enc_picture_free_t</name>

<block>{

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EncSchroFrameFree</name><parameter_list>( <parameter><decl><type><name>SchroFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>enc_picture_free_t</name></name> <modifier>*</modifier></type><name>p_free</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_free</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_free</name><operator>-&gt;</operator><name>p_pic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_free</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>frame</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SchroFrame</name> <modifier>*</modifier></type><name>CreateSchroFrameFromInputPic</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SchroFrame</name> <modifier>*</modifier></type><name>p_schroframe</name> <init>= <expr><call><name>schro_frame_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>enc_picture_free_t</name></name> <modifier>*</modifier></type><name>p_free</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_schroframe</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>SCHRO_FRAME_FORMAT_U8_420</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>SCHRO_CHROMA_422</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>SCHRO_FRAME_FORMAT_U8_422</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>SCHRO_CHROMA_444</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>SCHRO_FRAME_FORMAT_U8_444</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_free</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_free</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_free</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>schro_frame_unref</name><argument_list>( <argument><expr><name>p_schroframe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_free</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <name>p_pic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_free</name><operator>-&gt;</operator><name>p_enc</name></name> <operator>=</operator> <name>p_enc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_frame_set_free_callback</name><argument_list>( <argument><expr><name>p_schroframe</name></expr></argument>, <argument><expr><name>EncSchroFrameFree</name></expr></argument>, <argument><expr><name>p_free</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v_shift</name> <operator>=</operator>

<call><name>SCHRO_FRAME_FORMAT_V_SHIFT</name><argument_list>( <argument><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h_shift</name> <operator>=</operator>

<call><name>SCHRO_FRAME_FORMAT_H_SHIFT</name><argument_list>( <argument><expr><name><name>p_schroframe</name><operator>-&gt;</operator><name>format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_schroframe</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDiracPictureNumber</name><parameter_list>( <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_picnum</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>u_pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>u_pos</name> <operator>+</operator> <literal type="number">13</literal> <operator>&lt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>u_pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_picnum</name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>u_pos</name> <operator>+</operator> <literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>u_npo</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>u_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>u_npo</name> <operator>&lt;=</operator> <name>UINT32_MAX</name> <operator>-</operator> <name>u_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>u_npo</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>u_npo</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>u_pos</name> <operator>+=</operator> <name>u_npo</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Encode</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_output_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SchroFrame</name> <modifier>*</modifier></type><name>p_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_go</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>started</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_eos_pulled</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_eos_signalled</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eos_signalled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_encoder_end_of_stream</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <operator>!</operator><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_auto_field_coding</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>schro_encoder_setting_set_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"interlaced_coding"</literal></expr></argument>, <argument><expr><operator>!</operator><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>started</name></name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>date_t</name></type> <name>date</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>chroma_in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>chroma_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_fourcc_to_char</name><argument_list>( <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name>chroma_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_fourcc_to_char</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>chroma_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Resetting chroma from %s to %s"</literal></expr></argument>, <argument><expr><name>chroma_out</name></expr></argument>, <argument><expr><name>chroma_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SetEncChromaFormat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Could not reset chroma format to %s"</literal></expr></argument>, <argument><expr><name>chroma_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_offset</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>date</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>schro_encoder_setting_get_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"interlaced_coding"</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_field_duration</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name>date</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>schro_video_format_set_std_signal_range</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument>, <argument><expr><name>SCHRO_SIGNAL_RANGE_8BIT_VIDEO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_encoder_set_video_format</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_encoder_start</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_eos_signalled</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Hold</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_frame</name> <operator>=</operator> <call><name>CreateSchroFrameFromInputPic</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_frame</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>schro_encoder_push_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StorePicturePTS</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_input_picnum</name></name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_input_picnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>timestamp_FifoPut</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dts_fifo</name></name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>schro_encoder_setting_get_double</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><literal type="string">"interlaced_coding"</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>StorePicturePTS</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_input_picnum</name></name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_field_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_input_picnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>timestamp_FifoPut</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dts_fifo</name></name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts_offset</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_field_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>SchroStateEnum</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>schro_encoder_wait</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>state</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SCHRO_STATE_NEED_FRAME</name></expr>:</case>

<expr_stmt><expr><name>b_go</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SCHRO_STATE_AGAIN</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>SCHRO_STATE_END_OF_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_eos_pulled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b_go</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SCHRO_STATE_HAVE_BUFFER</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>SchroBuffer</name> <modifier>*</modifier></type><name>p_enc_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>u_pic_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_presentation_frame</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_enc_buf</name> <operator>=</operator> <call><name>schro_encoder_pull</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_presentation_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_enc_buf</name><operator>-&gt;</operator><name>length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_enc_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>p_enc_buf</name><operator>-&gt;</operator><name>length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>schro_buffer_unref</name><argument_list>( <argument><expr><name>p_enc_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>==</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>eos</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'B'</literal></expr>,<expr><literal type="char">'B'</literal></expr>,<expr><literal type="char">'C'</literal></expr>,<expr><literal type="char">'D'</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <name>UINT32_MAX</name> <operator>-</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>eos</name></expr></argument> )</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>eos</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>eos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>eos</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eos</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>eos</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ReadDiracPictureNumber</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u_pic_num</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>timestamp_FifoGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dts_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>GetPicturePTS</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>u_pic_num</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_output_chain</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_output_chain</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> while<condition>( <expr><name>b_go</name></expr> )</condition>;</do>

<return>return <expr><name>p_output_chain</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseEncoder</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>schro_encoder_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_schro</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dts_fifo</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>timestamp_FifoRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dts_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
