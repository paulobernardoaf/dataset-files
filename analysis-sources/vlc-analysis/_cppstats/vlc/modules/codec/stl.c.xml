<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\stl.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"substext.h"</cpp:file></cpp:include> 

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"EBU STL subtitles decoder"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_SCODEC</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSI_BLOCK_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_GROUPS_MAX</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TEXTFIELD_SIZE</name></cpp:macro> <cpp:value>112</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TTI_HEADER_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TTI_SIZE</name></cpp:macro> <cpp:value>(STL_TTI_HEADER_SIZE + STL_TEXTFIELD_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_TELETEXT_FIRST</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_TELETEXT_LAST</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_CHARCODE1_FIRST</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_CHARCODE1_LAST</name></cpp:macro> <cpp:value>0x7f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_ITALICS_ON</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_ITALICS_OFF</name></cpp:macro> <cpp:value>0x81</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_UNDERLINE_ON</name></cpp:macro> <cpp:value>0x82</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_UNDERLINE_OFF</name></cpp:macro> <cpp:value>0x83</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_BOXING_ON</name></cpp:macro> <cpp:value>0x84</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_BOXING_OFF</name></cpp:macro> <cpp:value>0x85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_LINEBREAK</name></cpp:macro> <cpp:value>0x8a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_END_FILL</name></cpp:macro> <cpp:value>0x8f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_TF_CHARCODE2_FIRST</name></cpp:macro> <cpp:value>0xa1</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CCT_ISO_6937_2</name> <init>= <expr><literal type="number">0x3030</literal></expr></init></decl>, <decl><name>CCT_BEGIN</name> <init>= <expr><name>CCT_ISO_6937_2</name></expr></init></decl>,

<decl><name>CCT_ISO_8859_5</name> <init>= <expr><literal type="number">0x3031</literal></expr></init></decl>,

<decl><name>CCT_ISO_8859_6</name> <init>= <expr><literal type="number">0x3032</literal></expr></init></decl>,

<decl><name>CCT_ISO_8859_7</name> <init>= <expr><literal type="number">0x3033</literal></expr></init></decl>,

<decl><name>CCT_ISO_8859_8</name> <init>= <expr><literal type="number">0x3034</literal></expr></init></decl>, <decl><name>CCT_END</name> <init>= <expr><name>CCT_ISO_8859_8</name></expr></init></decl>

}</block></enum></type> <name>cct_number_value_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_accumulating</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_justify</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_segment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_segment_last</name></decl>;</decl_stmt>

}</block></struct></type> <name>stl_sg_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>cct_number_value_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

}</block></struct></type> <name>cct_number_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>stl_sg_t</name></type> <name><name>groups</name><index>[<expr><name>STL_GROUPS_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cct_number_value_t</name></type> <name>cct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_fps</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>cct_number_t</name></type> <name><name>cct_nums</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{<expr><name>CCT_ISO_6937_2</name></expr>, <expr><literal type="string">"ISO_6937-2"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CCT_ISO_8859_5</name></expr>, <expr><literal type="string">"ISO_8859-5"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CCT_ISO_8859_6</name></expr>, <expr><literal type="string">"ISO_8859-6"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CCT_ISO_8859_7</name></expr>, <expr><literal type="string">"ISO_8859-7"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CCT_ISO_8859_8</name></expr>, <expr><literal type="string">"ISO_8859-8"</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>text_style_t</name> <modifier>*</modifier></type> <name>CreateGroupStyle</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><call><name>text_style_Create</name><argument_list>(<argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_style</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>=</operator> <name>STYLE_HAS_FLAGS</name><operator>|</operator><name>STYLE_HAS_BACKGROUND_ALPHA</name><operator>|</operator><name>STYLE_HAS_BACKGROUND_COLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <name>STYLE_ALPHA_OPAQUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <literal type="number">0x000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>STYLE_DEFAULT_REL_FONT_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_style</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TextBufferFlush</name><parameter_list>(<parameter><decl><type><name>stl_sg_t</name> <modifier>*</modifier></type><name>p_group</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_buf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_charset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pi_buf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_utf8</name> <init>= <expr><call><name>FromCharset</name><argument_list>(<argument><expr><name>psz_charset</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>psz_utf8</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>p_group</name><operator>-&gt;</operator><name>pp_segment_last</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>(<argument><expr><name>psz_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>p_group</name><operator>-&gt;</operator><name>pp_segment_last</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name><name>p_group</name><operator>-&gt;</operator><name>pp_segment_last</name></name><operator>)</operator><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>(<argument><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>pp_segment_last</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name><name>p_group</name><operator>-&gt;</operator><name>pp_segment_last</name></name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GroupParseTeletext</name><parameter_list>(<parameter><decl><type><name>stl_sg_t</name> <modifier>*</modifier></type><name>p_group</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <call><name>CreateGroupStyle</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>colors</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0x000000</literal></expr>,

<expr><literal type="number">0xFF0000</literal></expr>,

<expr><literal type="number">0x00FF00</literal></expr>,

<expr><literal type="number">0xFFFF00</literal></expr>,

<expr><literal type="number">0x0000FF</literal></expr>,

<expr><literal type="number">0xFF00FF</literal></expr>,

<expr><literal type="number">0x00FFFF</literal></expr>,

<expr><literal type="number">0xFFFFFF</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BACKGROUND</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>code</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>STYLE_DEFAULT_REL_FONT_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>STYLE_DOUBLEWIDTH</name><operator>|</operator><name>STYLE_HALFWIDTH</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>STYLE_DEFAULT_REL_FONT_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_DOUBLEWIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_HALFWIDTH</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0e</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>STYLE_DEFAULT_REL_FONT_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_HALFWIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_DOUBLEWIDTH</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>STYLE_DEFAULT_REL_FONT_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>STYLE_DOUBLEWIDTH</name><operator>|</operator><name>STYLE_HALFWIDTH</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1d</literal></expr>:</case>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1c</literal></expr>:</case>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GroupApplyStyle</name><parameter_list>(<parameter><decl><type><name>stl_sg_t</name> <modifier>*</modifier></type><name>p_group</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <call><name>CreateGroupStyle</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>code</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>STL_TF_ITALICS_ON</name></expr>:</case>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_ITALIC</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STL_TF_ITALICS_OFF</name></expr>:</case>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_ITALIC</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STL_TF_UNDERLINE_ON</name></expr>:</case>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_UNDERLINE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STL_TF_UNDERLINE_OFF</name></expr>:</case>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_UNDERLINE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STL_TF_BOXING_ON</name></expr>:</case>

<case>case <expr><name>STL_TF_BOXING_OFF</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>ParseTimeCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>fps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator>

<name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator>

<name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator>

<name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <name>fps</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ClearTeletextStyles</name><parameter_list>(<parameter><decl><type><name>stl_sg_t</name> <modifier>*</modifier></type><name>p_group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <literal type="number">0x000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>=</operator> <name>STYLE_DEFAULT_REL_FONT_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>STYLE_DOUBLEWIDTH</name><operator>|</operator><name>STYLE_HALFWIDTH</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParseTTI</name><parameter_list>(<parameter><decl><type><name>stl_sg_t</name> <modifier>*</modifier></type><name>p_group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_charset</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>fps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_buffer</name><index>[<expr><name>STL_TEXTFIELD_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_buffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ebn</name> <init>= <expr><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ebn</name> <operator>&gt;</operator> <literal type="number">0xef</literal> <operator>&amp;&amp;</operator> <name>ebn</name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_data</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>i_justify</name></name> <operator>=</operator> <name><name>p_data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>i_accumulating</name></name> <operator>=</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal> <operator>||</operator> <name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>ParseTimeCode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>i_end</name></name> <operator>=</operator> <call><name>ParseTimeCode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>STL_TTI_HEADER_SIZE</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STL_TTI_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>code</name> <init>= <expr><name><name>p_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>code</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>STL_TF_LINEBREAK</name></expr>:</case>

<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><name>i_buffer</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TextBufferFlush</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument>, <argument><expr><name>psz_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearTeletextStyles</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STL_TF_END_FILL</name></expr>:</case>

<expr_stmt><expr><call><name>TextBufferFlush</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument>, <argument><expr><name>psz_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearTeletextStyles</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>&lt;=</operator> <name>STL_TF_TELETEXT_LAST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TextBufferFlush</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument>, <argument><expr><name>psz_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GroupParseTeletext</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>code</name> <operator>&gt;=</operator> <name>STL_TF_CHARCODE1_FIRST</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <name>STL_TF_CHARCODE1_LAST</name><operator>)</operator> <operator>||</operator>

<name>code</name> <operator>&gt;=</operator> <name>STL_TF_CHARCODE2_FIRST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><name>i_buffer</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>code</name> <operator>&gt;=</operator> <name>STL_TF_ITALICS_ON</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <name>STL_TF_BOXING_OFF</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TextBufferFlush</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument>, <argument><expr><name>psz_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GroupApplyStyle</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>TextBufferFlush</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument>, <argument><expr><name>psz_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillSubpictureUpdater</name><parameter_list>(<parameter><decl><type><name>stl_sg_t</name> <modifier>*</modifier></type><name>p_group</name></decl></parameter>, <parameter><decl><type><name>subtext_updater_sys_t</name> <modifier>*</modifier></type><name>p_spu_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>i_accumulating</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name></name> <operator>=</operator> <call><name>text_segment_Copy</name><argument_list>(<argument><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>p_segments</name></name> <operator>=</operator> <name><name>p_group</name><operator>-&gt;</operator><name>p_segment</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_segment</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>pp_segment_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_group</name><operator>-&gt;</operator><name>p_segment</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>i_justify</name></name> <operator>==</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>i_justify</name></name> <operator>==</operator> <literal type="number">0x03</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_spu_sys</name><operator>-&gt;</operator><name>region</name><operator>.</operator><name>inner_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResetGroups</name><parameter_list>(<parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>STL_GROUPS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>stl_sg_t</name> <modifier>*</modifier></type><name>p_group</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>p_segment</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_segment_ChainDelete</name><argument_list>(<argument><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_segment</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>pp_segment_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_group</name><operator>-&gt;</operator><name>p_segment</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>(<argument><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>i_accumulating</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>i_end</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_group</name><operator>-&gt;</operator><name>i_justify</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decode</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>STL_TTI_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>|</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ResetGroups</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_charset</name> <init>= <expr><name><name>cct_nums</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>cct</name></name> <operator>-</operator> <name>CCT_BEGIN</name></expr>]</index></name><operator>.</operator><name>str</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <name>STL_TTI_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>stl_sg_t</name> <modifier>*</modifier></type><name>p_group</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ParseTTI</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i</name> <operator>*</operator> <name>STL_TTI_SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_charset</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fps</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_group</name><operator>-&gt;</operator><name>p_segment</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_sub</name> <init>= <expr><call><name>decoder_NewSubpictureText</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sub</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FillSubpictureUpdater</name><argument_list>(<argument><expr><name>p_group</name></expr></argument>, <argument><expr><name><name>p_sub</name><operator>-&gt;</operator><name>updater</name><operator>.</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_group</name><operator>-&gt;</operator><name>i_end</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name><name>p_group</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_group</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_group</name><operator>-&gt;</operator><name>i_end</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sub</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ResetGroups</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseGSI</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>header</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"NULL EBU header (GSI block)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>GSI_BLOCK_SIZE</name> <operator>!=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"EBU header is not in expected size (%d)\n"</literal></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dfc_fps_str</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>, <expr><name><name>header</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>, <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fps</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>dfc_fps_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&gt;</operator> <name>fps</name> <operator>||</operator> <literal type="number">60</literal> <operator>&lt;</operator> <name>fps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"EBU header contains unsupported DFC fps ('%s'); falling back to 25\n"</literal></expr></argument>, <argument><expr><name>dfc_fps_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fps</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cct</name> <init>= <expr><operator>(</operator><name><name>header</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>header</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CCT_BEGIN</name> <operator>&gt;</operator> <name>cct</name> <operator>||</operator> <name>CCT_END</name> <operator>&lt;</operator> <name>cct</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"EBU header contains illegal CCT (0x%x)\n"</literal></expr></argument>, <argument><expr><name>cct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"DFC fps=%d, CCT=0x%x"</literal></expr></argument>, <argument><expr><name>fps</name></expr></argument>, <argument><expr><name>cct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fps</name></name> <operator>=</operator> <name>fps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cct</name></name> <operator>=</operator> <name>cct</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_EBU_STL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>ParseGSI</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>VLC_SUCCESS</name> <operator>!=</operator> <name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>STL_GROUPS_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pp_segment_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_segment</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>Decode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ResetGroups</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
