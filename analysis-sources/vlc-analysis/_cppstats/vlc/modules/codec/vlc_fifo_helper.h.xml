<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\vlc_fifo_helper.h"><typedef>typedef <type><struct>struct <name>FIFO_ITEM</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>FIFO_ITEM</name></name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

}</block></struct></type> <name>fifo_item_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>fifo_item_t</name> <modifier>*</modifier></type><name>p_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fifo_item_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_depth</name></decl>;</decl_stmt>

}</block></struct></type> <name>fifo_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fifo_Init</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fifo</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fifo</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fifo</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fifo_Release</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>fifo_GetCount</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>fifo_item_t</name> <modifier>*</modifier></type><name>fifo_Show</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fifo_item_t</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_fifo</name><operator>-&gt;</operator><name>p_first</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p_fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>fifo_item_t</name> <modifier>*</modifier></type><name>fifo_Get</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fifo_item_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fifo_Put</name><parameter_list>(<parameter><decl><type><name>fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>fifo_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>pp_last</name></name><operator>)</operator> <operator>=</operator> <name>p_item</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p_item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>i_depth</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_item</name> <operator>=</operator> <name><name>p_item</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPED_FIFO</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>prefix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void prefix ##_fifo_Init(fifo_t *p_fifo) { fifo_Init(p_fifo); } static inline void prefix ##_fifo_Release(fifo_t *p_fifo) { fifo_Release(p_fifo); } static inline void prefix ##_fifo_Put(fifo_t *p_fifo, type *p_item) { fifo_Put(p_fifo, &amp;p_item-&gt;fifo); } static inline type *prefix ##_fifo_Get(fifo_t *p_fifo) { return (type*)fifo_Get(p_fifo); } static inline type *prefix ##_fifo_Show(fifo_t *p_fifo) { return (type*)fifo_Show(p_fifo); } static inline size_t prefix ##_fifo_GetCount(fifo_t *fifo) { return fifo-&gt;i_depth; }</cpp:value></cpp:define>

</unit>
