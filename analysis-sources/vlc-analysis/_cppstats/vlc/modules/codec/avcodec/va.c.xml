<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\avcodec\va.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fourcc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/pixfmt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"va.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>vlc_va_MightDecode</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>hwfmt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>swfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>hwfmt</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_VAAPI_VLD</name></expr>:</case>

<switch>switch <condition>(<expr><name>swfmt</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<case>case <expr><name>AV_PIX_FMT_DXVA2_VLD</name></expr>:</case>

<switch>switch <condition>(<expr><name>swfmt</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P12</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P10</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P12</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P10</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P12</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_D3D11VA_VLD</name></expr>:</case>

<switch>switch <condition>(<expr><name>swfmt</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P12</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P10</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P12</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P10</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P12</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_VDPAU</name></expr>:</case>

<switch>switch <condition>(<expr><name>swfmt</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_va_Start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_va_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>AVCodecContext</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>hwfmt</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>enum <name>PixelFormat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>src_desc</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_in</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>es_format_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_decoder_device</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt_out</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>video_format_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier><modifier>*</modifier></type><name>vtcx_out</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vlc_video_context</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_va_open</name></type> <name>open</name> <init>= <expr><name>func</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>forced</name></expr>;</expr_stmt>

<return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hwfmt</name></expr></argument>, <argument><expr><name>src_desc</name></expr></argument>, <argument><expr><name>fmt_in</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>fmt_out</name></expr></argument>, <argument><expr><name>vtcx_out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>vlc_va_New</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>hwfmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>src_desc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt_in</name></decl></parameter>, <parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier><modifier>*</modifier></type><name>vtcx_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_va_t</name></name> <modifier>*</modifier></type><name>va</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>va</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>va</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_module_load</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><literal type="string">"hw decoder"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>vlc_va_Start</name></expr></argument>, <argument><expr><name>va</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>hwfmt</name></expr></argument>, <argument><expr><name>src_desc</name></expr></argument>, <argument><expr><name>fmt_in</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,

<argument><expr><name>fmt_out</name></expr></argument>, <argument><expr><name>vtcx_out</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>va</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>va</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_va_Delete</name><parameter_list>(<parameter><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>va</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>close</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>va</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
