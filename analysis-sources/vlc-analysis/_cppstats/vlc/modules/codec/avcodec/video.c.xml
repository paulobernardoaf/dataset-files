<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\avcodec\video.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/mem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/pixdesc.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBAVUTIL_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/mastering_display_metadata.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"va.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/stereo3d.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_INFO_DEPTH</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<struct>struct <name>frame_info_s</name>

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_eos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_display</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>p_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>cc_data_t</name></type> <name>cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_hurry_up</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_show_corrupted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_from_preroll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVDiscard</name></name></type> <name>i_skip_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_info_s</name></name></type> <name><name>frame_info</name><index>[<expr><name>FRAME_INFO_DEPTH</name></expr>]</index></name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>FRAMEDROP_NONE</name></decl>,

<decl><name>FRAMEDROP_NONREF</name></decl>,

<decl><name>FRAMEDROP_AGGRESSIVE_RECOVER</name></decl>,

}</block> <decl><name>framedrop</name></decl>;</enum>

<decl_stmt><decl><type><name>int</name></type> <name>i_late_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_last_output_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_late_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_direct_rendering</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_bool</name></type> <name>b_dr_failure</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_first_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>palette_sent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>p_va</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>decoder_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>decoder_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ffmpeg_InitCodec</name> <parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lavc_GetFrame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>enum</name> <name>PixelFormat</name></name></type> <name>ffmpeg_GetFormat</name><parameter_list>( <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>PixelFormat</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ffmpeg_CodecTag</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fcc</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lavc_GetVideoFormat</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>sw_pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>sw_pix_fmt</name></expr>)</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name><name>aligns</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetVlcChroma</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avcodec_align_dimensions2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><name>aligns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>width</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>width</name> <operator>&gt;</operator> <literal type="number">8192</literal> <operator>||</operator> <name>height</name> <operator>&gt;</operator> <literal type="number">8192</literal> <operator>||</operator>

<name>width</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>height</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame size %dx%d vsz %dx%d"</literal></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator>

<name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_x_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_y_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_MICRO</name> <operator>&lt;</operator> <literal type="number">100</literal></expr></cpp:if>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>*=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name>

<operator>*</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>color_range</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AVCOL_RANGE_JPEG</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_RANGE_MPEG</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_LIMITED</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AVCOL_SPC_BT709</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT709</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr>:</case>

<case>case <expr><name>AVCOL_SPC_BT470BG</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT601</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>:</case>

<case>case <expr><name>AVCOL_SPC_BT2020_CL</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_BT2020</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AVCOL_TRC_LINEAR</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_LINEAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_TRC_GAMMA22</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SRGB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_TRC_BT709</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT709</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_TRC_SMPTE170M</name></expr>:</case>

<case>case <expr><name>AVCOL_TRC_BT2020_10</name></expr>:</case>

<case>case <expr><name>AVCOL_TRC_BT2020_12</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT2020</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>LIBAVUTIL_VERSION_CHECK</name><argument_list>( <argument><expr><literal type="number">55</literal><operator>,</operator> <literal type="number">14</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">31</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>AVCOL_TRC_ARIB_STD_B67</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_ARIB_B67</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>LIBAVUTIL_VERSION_CHECK</name><argument_list>( <argument><expr><literal type="number">55</literal><operator>,</operator> <literal type="number">17</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">37</literal><operator>,</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>AVCOL_TRC_SMPTE2084</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SMPTE_ST2084</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_TRC_SMPTE240M</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SMPTE_240</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_TRC_GAMMA28</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT470_BG</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AVCOL_PRI_BT709</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT709</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT470BG</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT601_625</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_SMPTE170M</name></expr>:</case>

<case>case <expr><name>AVCOL_PRI_SMPTE240M</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT601_525</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT2020</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_BT2020</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AVCHROMA_LOC_LEFT</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <name>CHROMA_LOCATION_LEFT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCHROMA_LOC_CENTER</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <name>CHROMA_LOCATION_CENTER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCHROMA_LOC_TOPLEFT</name></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <name>CHROMA_LOCATION_TOP_LEFT</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lavc_UpdateVideoFormat</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>swfmt</name></decl></parameter>,

<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dec_device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>lavc_GetVideoFormat</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>swfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name><operator>.</operator><name>i_divider_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Change</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>fmt_out</name><operator>.</operator><name>i_frame_rate</name></name> <operator>*</operator>

<call><name>__MAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>fmt_out</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>fmt_out</name><operator>.</operator><name>i_frame_rate</name></name> <operator>*</operator>

<call><name>__MAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>fmt_out</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>swfmt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_chroma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name> <operator>=</operator> <name>fmt_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>i_chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>projection_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>pose</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>pose</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>decoder_width</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>decoder_height</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pp_dec_device</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_dec_device</name> <operator>=</operator> <call><name>decoder_GetDecoderDevice</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>pp_dec_device</name> <operator>==</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>chroma_compatible</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>compat_lists</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>VLC_CODEC_J420</name></expr>, <expr><name>VLC_CODEC_I420</name></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_J422</name></expr>, <expr><name>VLC_CODEC_I422</name></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_J440</name></expr>, <expr><name>VLC_CODEC_I440</name></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_J444</name></expr>, <expr><name>VLC_CODEC_I444</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>compat_lists</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>==</operator> <name><name>compat_lists</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>a</name> <operator>==</operator> <name><name>compat_lists</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>b</name> <operator>==</operator> <name><name>compat_lists</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>b</name> <operator>==</operator> <name><name>compat_lists</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lavc_CopyPicture</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name> <init>= <expr><call><name>FindVlcChroma</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fourcc</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"Unsupported decoded output format %d (%s)"</literal></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>chroma_compatible</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name>

<operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"dropping frame because the vout changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>src_stride</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dst_stride</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenVideoCodec</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name> <operator>||</operator>

<name><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_THEORA</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"waiting for extra data for codec %s"</literal></expr></argument>,

<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_video_color_settings</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&amp;&amp;</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>double</name><operator>)</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>/</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"low-delay"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>=</operator> <name>FF_THREAD_SLICE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffmpeg_OpenCodec</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>active_thread_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>FF_THREAD_FRAME</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using frame thread mode with %d threads"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_THREAD_SLICE</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using slice thread mode with %d threads"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"failed to enable threaded decoding"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using unknown thread mode with %d threads"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>InitVideoDec</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>p_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name> <init>= <expr><call><name>ffmpeg_AllocContext</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_codec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_context</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name> <operator>=</operator> <name>p_context</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name> <operator>=</operator> <name>p_codec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>ffmpeg_CodecTag</name><argument_list>( <argument><expr><ternary><condition><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr> ?</condition><then>

<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_original_fourcc</name></name></expr> </then><else>: <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>=</operator>

<call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-workaround-bugs"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>=</operator>

<call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-error-resilience"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"grayscale"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_OUTPUT_CORRUPT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-skiploopfilter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>=</operator> <name>AVDISCARD_ALL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>=</operator> <name>AVDISCARD_NONKEY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>=</operator> <name>AVDISCARD_BIDIR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>=</operator> <name>AVDISCARD_NONREF</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>=</operator> <name>AVDISCARD_DEFAULT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-fast"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags2</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG2_FAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hurry_up</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-hurry-up"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_show_corrupted</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-corrupted"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-skip-frame"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_skip_frame</name></name> <operator>=</operator> <name>AVDISCARD_ALL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_skip_frame</name></name> <operator>=</operator> <name>AVDISCARD_NONKEY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_skip_frame</name></name> <operator>=</operator> <name>AVDISCARD_BIDIR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_skip_frame</name></name> <operator>=</operator> <name>AVDISCARD_NONREF</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_skip_frame</name></name> <operator>=</operator> <name>AVDISCARD_NONE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_skip_frame</name></name> <operator>=</operator> <name>AVDISCARD_DEFAULT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_skip_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_val</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-skip-idct"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_val</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_idct</name></name> <operator>=</operator> <name>AVDISCARD_ALL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_idct</name></name> <operator>=</operator> <name>AVDISCARD_NONKEY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_idct</name></name> <operator>=</operator> <name>AVDISCARD_BIDIR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_idct</name></name> <operator>=</operator> <name>AVDISCARD_NONREF</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_idct</name></name> <operator>=</operator> <name>AVDISCARD_NONE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_idct</name></name> <operator>=</operator> <name>AVDISCARD_DEFAULT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_direct_rendering</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_dr_failure</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-dr"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DR1</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_TSCC</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_CSCD</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_CINEPAK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_direct_rendering</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>get_format</name></name> <operator>=</operator> <name>ffmpeg_GetFormat</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>get_buffer2</name></name> <operator>=</operator> <name>lavc_GetFrame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>p_dec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_thread_count</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-threads"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_thread_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_thread_count</name> <operator>=</operator> <call><name>vlc_GetCPUCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_thread_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_thread_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<expr_stmt><expr><name>i_thread_count</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_thread_count</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>i_thread_count</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_thread_count</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_thread_count</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_thread_count</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"allowing %d thread(s) for decoding"</literal></expr></argument>, <argument><expr><name>i_thread_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <name>i_thread_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>thread_safe_callbacks</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_codec</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FF_THREAD_SLICE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBAVCODEC_VERSION_INT</name> <operator>&lt;</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">55</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_VC1</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_WMV3</name></expr>:</case>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FF_THREAD_FRAME</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>i_extra_picture_buffers</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_context</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">30001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_frame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_late_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_from_preroll</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_output_frame</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>framedrop</name></name> <operator>=</operator> <name>FRAMEDROP_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetVlcChroma</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>palette_sent</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>video_palette_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <operator>*</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>palette_sent</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ffmpeg_InitCodec</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>OpenVideoCodec</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeVideo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>level</name></name> <operator>!=</operator> <name>FF_LEVEL_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_level</name></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_late_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>framedrop</name></name> <operator>=</operator> <name>FRAMEDROP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_AbortPictures</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>avcodec_is_open</name><argument_list>( <argument><expr><name>p_context</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>( <argument><expr><name>p_context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>decoder_AbortPictures</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>filter_earlydropped_blocks</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_PREROLL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_late_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>framedrop</name></name> <operator>=</operator> <name>FRAMEDROP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_from_preroll</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_late_delay</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_late_frames</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>framedrop</name></name> <operator>=</operator> <name>FRAMEDROP_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>framedrop</name></name> <operator>==</operator> <name>FRAMEDROP_NONE</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_late_frames</name></name> <operator>&lt;</operator> <literal type="number">11</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>block</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_output_frame</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_output_frame</name></name> <operator>&gt;</operator> <literal type="number">24</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>framedrop</name></name> <operator>=</operator> <name>FRAMEDROP_AGGRESSIVE_RECOVER</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>framedrop</name></name> <operator>==</operator> <name>FRAMEDROP_AGGRESSIVE_RECOVER</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"more than %"</literal><name>PRId64</name><literal type="string">" frames of late video -&gt; "</literal>

<literal type="string">"dropping frame (computer too slow ?)"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_output_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_late_frames</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>interpolate_next_pts</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name><operator>.</operator><name>i_divider_num</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_tick</name> <init>= <expr><name><name>p_context</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tick</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_tick</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>i_tick</name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_late_frame_count</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>current_time</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_next_pts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_fnum</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_display_date</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_PREROLL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_display_date</name> <operator>=</operator> <call><name>decoder_GetDisplayDate</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>current_time</name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_threshold</name> <init>= <expr><ternary><condition><expr><name>i_next_pts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>

?</condition><then> <expr><operator>(</operator><name>i_next_pts</name> <operator>-</operator> <name>i_pts</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_display_date</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name>i_display_date</name> <operator>+</operator> <name>i_threshold</name> <operator>&lt;=</operator> <name>current_time</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_from_preroll</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_late_delay</name></name> <operator>&gt;</operator> <name>current_time</name> <operator>-</operator> <name>i_display_date</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_late_delay</name></name> <operator>=</operator> <name>current_time</name> <operator>-</operator> <name>i_display_date</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_from_preroll</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_late_frames</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_output_frame</name></name> <operator>=</operator> <name>i_fnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_late_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeSidedata</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>format_changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBAVUTIL_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_AVRAT</name><parameter_list>(<parameter><type><name>default_factor</name></type></parameter>, <parameter><type><name>avrat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint64_t)(default_factor) * (avrat).num / (avrat).den</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrameSideData</name> <modifier>*</modifier></type><name>metadata</name> <init>=

<expr><call><name>av_frame_get_side_data</name><argument_list>( <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name>AV_FRAME_DATA_MASTERING_DISPLAY_METADATA</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>metadata</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVMasteringDisplayMetadata</name> <modifier>*</modifier></type><name>hdr_meta</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>AVMasteringDisplayMetadata</name> <operator>*</operator><operator>)</operator> <name><name>metadata</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>has_luminance</name></name></expr> )</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST2086_LUMA_FACTOR</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_LUMA_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>max_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>min_luminance</name></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_LUMA_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>min_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>has_primaries</name></name></expr> )</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST2086_RED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST2086_GREEN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST2086_BLUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAV_RED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAV_GREEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAV_BLUE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST2086_PRIM_FACTOR</name></cpp:macro> <cpp:value>50000</cpp:value></cpp:define>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><name>ST2086_RED</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_PRIM_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>LAV_RED</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><name>ST2086_RED</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_PRIM_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>LAV_RED</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><name>ST2086_GREEN</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_PRIM_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>LAV_GREEN</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><name>ST2086_GREEN</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_PRIM_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>LAV_GREEN</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><name>ST2086_BLUE</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_PRIM_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>LAV_BLUE</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><name>ST2086_BLUE</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_PRIM_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>LAV_BLUE</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_PRIM_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>FROM_AVRAT</name><argument_list>(<argument><expr><name>ST2086_PRIM_FACTOR</name></expr></argument>, <argument><expr><name><name>hdr_meta</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>format_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FROM_AVRAT</name></cpp:undef>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBAVUTIL_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name>LIBAVUTIL_VERSION_INT</name> <operator>&gt;=</operator> <call><name>AV_VERSION_INT</name><argument_list>( <argument><expr><literal type="number">55</literal><operator>,</operator> <literal type="number">60</literal><operator>,</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrameSideData</name> <modifier>*</modifier></type><name>metadata_lt</name> <init>=

<expr><call><name>av_frame_get_side_data</name><argument_list>( <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name>AV_FRAME_DATA_CONTENT_LIGHT_LEVEL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>metadata_lt</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>light_meta</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>AVContentLightMetadata</name> <operator>*</operator><operator>)</operator> <name><name>metadata_lt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name> <operator>=</operator> <name><name>light_meta</name><operator>-&gt;</operator><name>MaxCLL</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name> <operator>=</operator> <name><name>light_meta</name><operator>-&gt;</operator><name>MaxFALL</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>lighting</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>lighting</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>lighting</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>format_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrameSideData</name> <modifier>*</modifier></type><name>p_stereo3d_data</name> <init>=

<expr><call><name>av_frame_get_side_data</name><argument_list>( <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name>AV_FRAME_DATA_STEREO3D</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_stereo3d_data</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVStereo3D</name></name> <modifier>*</modifier></type><name>stereo_data</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>AVStereo3D</name> <operator>*</operator><operator>)</operator> <name><name>p_stereo3d_data</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>stereo_data</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AV_STEREO3D_SIDEBYSIDE</name></expr>:</case>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_SBS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_TOPBOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_TB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_FRAMESEQUENCE</name></expr>:</case>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_FRAME</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_COLUMNS</name></expr>:</case>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_ROW</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_LINES</name></expr>:</case>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_COL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_CHECKERBOARD</name></expr>:</case>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_CHECKERBOARD</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<case>case <expr><name>AV_STEREO3D_2D</name></expr>:</case>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_2D</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>LIBAVUTIL_VERSION_CHECK</name><argument_list>( <argument><expr><literal type="number">56</literal><operator>,</operator> <literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">4</literal><operator>,</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>b_multiview_right_eye_first</name></name> <operator>=</operator> <name><name>stereo_data</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>b_multiview_left_eye</name></name> <operator>=</operator> <operator>(</operator><name><name>stereo_data</name><operator>-&gt;</operator><name>view</name></name> <operator>==</operator> <name>AV_STEREO3D_VIEW_LEFT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>b_multiview_right_eye_first</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>b_multiview_right_eye_first</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>!=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>format_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>format_changed</name> <operator>&amp;&amp;</operator> <call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrameSideData</name> <modifier>*</modifier></type><name>p_avcc</name> <init>= <expr><call><name>av_frame_get_side_data</name><argument_list>( <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_A53_CC</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_avcc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cc_Extract</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><name>CC_PAYLOAD_RAW</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>p_avcc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>p_avcc</name><operator>-&gt;</operator><name>size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_reorder</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_cc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_reorder</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_cc</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_cc</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>decoder_cc_desc_t</name></type> <name>desc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>i_608_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_608channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>i_708_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_708channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>i_reorder_depth</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueCc</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeBlock</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_need_output_picture</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ffmpeg_InitCodec</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>avcodec_is_open</name><argument_list>( <argument><expr><name>p_context</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OpenVideoCodec</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <ternary><condition><expr><name>pp_block</name></expr> ?</condition><then> <expr><operator>*</operator><name>pp_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_block</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DELAY</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>avcodec_is_open</name><argument_list>( <argument><expr><name>p_context</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_PREROLL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_need_output_picture</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b_need_output_picture</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hurry_up</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_skip_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>b_frame_drop_allowed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>filter_earlydropped_blocks</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_need_output_picture</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>framedrop</name></name> <operator>==</operator> <name>FRAMEDROP_NONREF</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>skip_frame</name></name></expr></argument>, <argument><expr><name>AVDISCARD_NONREF</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_drain</name> <init>= <expr><operator>(</operator> <name>pp_block</name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_drained</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_first_output_sequence</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>b_drain</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><call><name>TO_AV_TS</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>AV_NOPTS_VALUE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><call><name>TO_AV_TS</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>AV_NOPTS_VALUE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b_drain</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_drained</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>palette_sent</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PALETTE</name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pal</name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>palette_sent</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avcodec_send_packet</name><argument_list>(<argument><expr><name>p_context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec_send_packet critical error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_info_s</name></name> <modifier>*</modifier></type><name>p_frame_info</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame_info</name><index>[<expr><name><name>p_context</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>%</operator> <name>FRAME_INFO_DEPTH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_frame_info</name><operator>-&gt;</operator><name>b_eos</name></name> <operator>=</operator> <name>p_block</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_END_OF_SEQUENCE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_frame_info</name><operator>-&gt;</operator><name>b_display</name></name> <operator>=</operator> <name>b_need_output_picture</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>reordered_opaque</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_used</name> <operator>=</operator> <ternary><condition><expr><name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_frame_info</name><operator>-&gt;</operator><name>b_eos</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_drained</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>avcodec_send_packet</name><argument_list>( <argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_drained</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>frame</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec_receive_frame critical error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>not_received_frame</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_used</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_used</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>not_received_frame</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_used</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame_info_s</name></name> <modifier>*</modifier></type><name>p_frame_info</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame_info</name><index>[<expr><name><name>frame</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>%</operator> <name>FRAME_INFO_DEPTH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_frame_info</name><operator>-&gt;</operator><name>b_eos</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_frame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF_API_PKT_PTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int64_t</name></type> <name>av_pts</name> <init>= <expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int64_t</name></type> <name>av_pts</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pts</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>av_pts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name>av_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_next_pts</name> <init>= <expr><call><name>interpolate_next_pts</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_first_output_sequence</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>update_late_frame_count</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i_pts</name></expr></argument>,

<argument><expr><name>i_next_pts</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_first_output_sequence</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_frame_info</name><operator>-&gt;</operator><name>b_display</name></name> <operator>||</operator>

<operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>b_frame_drop_allowed</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_FRAME_FLAG_CORRUPT</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_show_corrupted</name></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_RGBP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_palette_t</name> <modifier>*</modifier></type><name>p_palette</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_palette</name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name>

<operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>video_palette_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_palette</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_palette</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>AVPALETTE_SIZE</name></expr></argument>,

<argument><expr><literal type="string">"Palette size mismatch between vlc and libavutil"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_palette</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <name>AVPALETTE_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGBP</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>decoder_UpdateVideoFormat</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>lavc_UpdateVideoFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_context</name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,

<argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>decoder_UpdateVideoOutput</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lavc_CopyPicture</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>frame</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>picture_Clone</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_pic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name>

<operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name>

<operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_force</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_first_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DecodeSidedata</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_pts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_frame_info</name><operator>-&gt;</operator><name>b_eos</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>b_still</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_frame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_QueueVideo</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while<condition>( <expr><name>true</name></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><name>b_drained</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>b_error</name></expr> ?</condition><then> <expr><name>VLCDEC_ECRITICAL</name></expr> </then><else>: <expr><name>VLCDEC_SUCCESS</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeVideo</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name> <init>= <expr><ternary><condition><expr><name>p_block</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>p_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>&amp;&amp;</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_late_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_output_frame</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>framedrop</name></name> <operator>=</operator> <name>FRAMEDROP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>DecodeBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>EndVideoDec</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>avcodec_is_open</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_va_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ffmpeg_InitCodec</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_size</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SVQ3</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>i_size</name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator>

<call><name>av_malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator>

<name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"SVQ3"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0x5a</literal> <operator>&amp;&amp;</operator>

<call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0x56</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"SMI "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0x52</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>psz</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>atom_size</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>atom_size</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>psz</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"SMI "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">0x52</literal></expr>]</index></name></expr></argument>, <argument><expr><name>psz</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>]</index></name> <operator>-</operator> <name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz</name> <operator>+=</operator> <name>atom_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator>

<call><name>av_malloc</name><argument_list>( <argument><expr><name>i_size</name> <operator>+</operator> <name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name>i_size</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lavc_ReleaseFrame</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lavc_va_GetFrame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>decoder_NewPicture</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_va_Get</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"hardware acceleration picture allocation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lavc_ReleaseFrame</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lavc_ReleaseFrame</name><argument_list>(<argument><expr><name>pic</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lavc_dr_GetFrame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>decoder_NewPicture</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>aligns</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avcodec_align_dimensions2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><name>aligns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;=</operator> <name>width</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>&gt;=</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>%</operator> <name><name>aligns</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atomic_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>b_dr_failure</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"plane %d: pitch not aligned (%d%%%d): disabling direct rendering"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name><name>aligns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name><operator>)</operator> <operator>%</operator> <name><name>aligns</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>atomic_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>b_dr_failure</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"plane %d not aligned: disabling direct rendering"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>&lt;</operator> <name>PICTURE_PLANE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>PICTURE_PLANE_MAX</name> <operator>&lt;=</operator> <name>AV_NUM_DATA_POINTERS</name></expr></argument>, <argument><expr><literal type="string">"Oops!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>lavc_ReleaseFrame</name></expr></argument>,

<argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Hold</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lavc_GetFrame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV_NUM_DATA_POINTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>p_va</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>b_direct_rendering</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>avcodec_default_get_buffer2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lavc_UpdateVideoFormat</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>decoder_UpdateVideoOutput</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>p_va</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>lavc_va_GetFrame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>lavc_dr_GetFrame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_default_get_buffer2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>PixelFormat</name></name></type> <name>ffmpeg_GetFormat</name><parameter_list>( <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>PixelFormat</name></name> <modifier>*</modifier></type><name>pi_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name><name>p_context</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>swfmt</name> <init>= <expr><call><name>avcodec_default_get_format</name><argument_list>(<argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>pi_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_hwaccel</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pi_fmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>dsc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>pi_fmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dsc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hwaccel</name> <init>= <expr><operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"available %sware decoder output format %d (%s)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>hwaccel</name></expr> ?</condition><then> <expr><literal type="string">"hard"</literal></expr> </then><else>: <expr><literal type="string">"soft"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>pi_fmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hwaccel</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>can_hwaccel</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>no_reuse</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lavc_GetVideoFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>p_context</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name>swfmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"get format failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>no_reuse</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>decoder_width</name></name> <operator>||</operator>

<name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>decoder_height</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"mismatched dimensions %ux%u was %ux%u"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>decoder_width</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>decoder_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>no_reuse</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_context</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>profile</name></name> <operator>||</operator> <name><name>p_context</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"mismatched profile level %d/%d was %d/%d"</literal></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>,

<argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>no_reuse</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pi_fmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>pi_fmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"reusing decoder output format %d"</literal></expr></argument>, <argument><expr><name><name>pi_fmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<label><name>no_reuse</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"existing hardware acceleration cannot be reused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_va_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>hwaccel_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_hwaccel</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>swfmt</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBAVCODEC_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>LIBAVCODEC_VERSION_INT</name> <operator>&lt;</operator> <call><name>AV_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">57</literal><operator>,</operator> <literal type="number">83</literal><operator>,</operator> <literal type="number">101</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>p_context</name><operator>-&gt;</operator><name>active_thread_type</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"thread type %d: disabling hardware acceleration"</literal></expr></argument>,

<argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>active_thread_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>swfmt</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>PixelFormat</name></name></type> <name><name>hwfmts</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>AV_PIX_FMT_D3D11VA_VLD</name></expr>,

<expr><name>AV_PIX_FMT_DXVA2_VLD</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>AV_PIX_FMT_VAAPI_VLD</name></expr>,

<expr><name>AV_PIX_FMT_VDPAU</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>src_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>swfmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>hwfmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>PixelFormat</name></name></type> <name>hwfmt</name> <init>= <expr><name>AV_PIX_FMT_NONE</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>hwfmt</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name> <operator>&amp;&amp;</operator> <name><name>pi_fmt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>hwfmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pi_fmt</name><index>[<expr><name>j</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hwfmt</name> <operator>=</operator> <name><name>hwfmts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>hwfmt</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_va_MightDecode</name><argument_list>(<argument><expr><name>hwfmt</name></expr></argument>, <argument><expr><name>swfmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>p_context</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_context</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"unspecified video dimensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>dsc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>hwfmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>init_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"trying format %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>dsc</name></expr> ?</condition><then> <expr><name><name>dsc</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lavc_UpdateVideoFormat</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>hwfmt</name></expr></argument>, <argument><expr><name>swfmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>init_device</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name>init_device</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_va_t</name> <modifier>*</modifier></type><name>va</name> <init>= <expr><call><name>vlc_va_New</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>hwfmt</name></expr></argument>, <argument><expr><name>src_desc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>init_device</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vctx_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>init_device</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>init_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>va</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vctx_out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decoder_UpdateVideoOutput</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>vctx_out</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_va_Delete</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>hwaccel_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_va</name></name> <operator>=</operator> <name>va</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>hwfmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>draw_horiz_band</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hwfmt</name></expr>;</return>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>swfmt</name></expr>;</expr_stmt>

<return>return <expr><name>swfmt</name></expr>;</return>

</block_content>}</block></function>

</unit>
