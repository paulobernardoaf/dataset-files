<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\avcodec\avcodec.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MMX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chroma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcommon.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>frame_skip_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>frame_skip_list_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Non-ref"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bidir"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Non-key"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"All"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>nloopf_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>nloopf_list_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Non-ref"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bidir"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Non-key"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"All"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_hq_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"rd"</literal></expr>, <expr><literal type="string">"bits"</literal></expr>, <expr><literal type="string">"simple"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>enc_hq_list_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"rd"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"bits"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"simple"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MERGE_FFMPEG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/avformat/avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../access/avio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/avparser.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULE_DESCRIPTION</name></cpp:macro> <cpp:value>N_( "Various audio and video decoders/encoders " "delivered by the FFmpeg library. This includes (MS)MPEG4, DivX, SV1,""H261, H263, H264, WMV, WMA, AAC, AMR, DV, MJPEG and other codecs")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"FFmpeg"</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_VCODEC</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"FFmpeg audio/video decoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_help</name><argument_list>( <argument>MODULE_DESCRIPTION</argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Decoding"</literal>)</argument> , <argument>NULL</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"ffmpeg"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"video decoder"</literal></argument>, <argument><literal type="number">70</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>InitVideoDec</argument>, <argument>EndVideoDec</argument>)</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"ffmpeg"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio decoder"</literal></argument>, <argument><literal type="number">70</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>InitAudioDec</argument>, <argument>EndAudioDec</argument>)</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"ffmpeg"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"spu decoder"</literal></argument>, <argument><literal type="number">70</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>InitSubtitleDec</argument>, <argument>EndSubtitleDec</argument>)</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"ffmpeg-dr"</literal></argument> )</argument_list></macro> 

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"avcodec-dr"</literal></argument>, <argument>true</argument>, <argument>DR_TEXT</argument>, <argument>DR_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"avcodec-corrupted"</literal></argument>, <argument>true</argument>, <argument>CORRUPTED_TEXT</argument>, <argument>CORRUPTED_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name> <argument_list>( <argument><literal type="string">"ffmpeg-error-resilience"</literal></argument> )</argument_list></macro> 

<macro><name>add_integer</name> <argument_list>( <argument><literal type="string">"avcodec-error-resilience"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>ERROR_TEXT</argument>,

<argument>ERROR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name> <argument_list>( <argument><literal type="string">"ffmpeg-workaround-bugs"</literal></argument> )</argument_list></macro> 

<macro><name>add_integer</name> <argument_list>( <argument><literal type="string">"avcodec-workaround-bugs"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>BUGS_TEXT</argument>, <argument>BUGS_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"ffmpeg-hurry-up"</literal></argument> )</argument_list></macro> 

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"avcodec-hurry-up"</literal></argument>, <argument>true</argument>, <argument>HURRYUP_TEXT</argument>, <argument>HURRYUP_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"ffmpeg-skip-frame"</literal></argument>)</argument_list></macro> 

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"avcodec-skip-frame"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SKIP_FRAME_TEXT</argument>,

<argument>SKIP_FRAME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>frame_skip_list</argument>, <argument>frame_skip_list_text</argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"ffmpeg-skip-idct"</literal></argument> )</argument_list></macro> 

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"avcodec-skip-idct"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SKIP_IDCT_TEXT</argument>,

<argument>SKIP_IDCT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">4</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"ffmpeg-vismv"</literal></argument> )</argument_list></macro> 

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"avcodec-vismv"</literal></argument> )</argument_list></macro> 

<macro><name>add_obsolete_integer</name> <argument_list>( <argument><literal type="string">"ffmpeg-lowres"</literal></argument> )</argument_list></macro> 

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"ffmpeg-fast"</literal></argument> )</argument_list></macro> 

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"avcodec-fast"</literal></argument>, <argument>false</argument>, <argument>FAST_TEXT</argument>, <argument>FAST_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name> <argument_list>( <argument><literal type="string">"ffmpeg-skiploopfilter"</literal></argument> )</argument_list></macro> 

<macro><name>add_integer</name> <argument_list>( <argument><literal type="string">"avcodec-skiploopfilter"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SKIPLOOPF_TEXT</argument>,

<argument>SKIPLOOPF_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_safe</name> <argument_list>()</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>nloopf_list</argument>, <argument>nloopf_list_text</argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"ffmpeg-debug"</literal></argument> )</argument_list></macro> 

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"avcodec-debug"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>DEBUG_TEXT</argument>, <argument>DEBUG_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<macro><name>add_obsolete_string</name><argument_list>( <argument><literal type="string">"ffmpeg-codec"</literal></argument> )</argument_list></macro> 

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"avcodec-codec"</literal></argument>, <argument>NULL</argument>, <argument>CODEC_TEXT</argument>, <argument>CODEC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"ffmpeg-hw"</literal></argument> )</argument_list></macro> 

<macro><name>add_obsolete_string</name><argument_list>( <argument><literal type="string">"avcodec-hw"</literal></argument> )</argument_list></macro> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FF_THREAD_FRAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"ffmpeg-threads"</literal></argument> )</argument_list></macro> 

<expr_stmt><expr><call><name>add_integer</name><argument_list>( <argument><expr><literal type="string">"avcodec-threads"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>THREADS_TEXT</name></expr></argument>, <argument><expr><name>THREADS_LONGTEXT</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"avcodec-options"</literal></argument>, <argument>NULL</argument>, <argument>AV_OPTIONS_TEXT</argument>, <argument>AV_OPTIONS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"ffmpeg"</literal></argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Encoding"</literal>)</argument> , <argument>NULL</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"FFmpeg audio/video encoder"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"encoder"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>InitVideoEnc</argument>, <argument>EndVideoEnc</argument> )</argument_list></macro>

<macro><name>add_obsolete_string</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-codec"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_string</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-hq"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-keyint"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-bframes"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-hurry-up"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-interlace"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-interlace-me"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-vt"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-pre-me"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-rc-buffer-size"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_float</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-rc-buffer-aggressivity"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_float</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-i-quant-factor"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-noise-reduction"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-mpeg4-matrix"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-qmin"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-qmax"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-trellis"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_float</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-qscale"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-strict"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_float</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-lumi-masking"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_float</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-dark-masking"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_float</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-p-masking"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_float</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-border-masking"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-luma-elim-threshold"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-chroma-elim-threshold"</literal></argument> )</argument_list></macro>

<macro><name>add_obsolete_string</name><argument_list>( <argument><literal type="string">"sout-ffmpeg-aac-profile"</literal></argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"codec"</literal></argument>, <argument>NULL</argument>, <argument>CODEC_TEXT</argument>, <argument>CODEC_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"hq"</literal></argument>, <argument><literal type="string">"rd"</literal></argument>, <argument>ENC_HQ_TEXT</argument>,

<argument>ENC_HQ_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>enc_hq_list</argument>, <argument>enc_hq_list_text</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"keyint"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ENC_KEYINT_TEXT</argument>,

<argument>ENC_KEYINT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"bframes"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ENC_BFRAMES_TEXT</argument>,

<argument>ENC_BFRAMES_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"hurry-up"</literal></argument>, <argument>false</argument>, <argument>ENC_HURRYUP_TEXT</argument>,

<argument>ENC_HURRYUP_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"interlace"</literal></argument>, <argument>false</argument>, <argument>ENC_INTERLACE_TEXT</argument>,

<argument>ENC_INTERLACE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"interlace-me"</literal></argument>, <argument>true</argument>, <argument>ENC_INTERLACE_ME_TEXT</argument>,

<argument>ENC_INTERLACE_ME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"vt"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ENC_VT_TEXT</argument>,

<argument>ENC_VT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"pre-me"</literal></argument>, <argument>false</argument>, <argument>ENC_PRE_ME_TEXT</argument>,

<argument>ENC_PRE_ME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"rc-buffer-size"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>ENC_RC_BUF_TEXT</argument>, <argument>ENC_RC_BUF_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"rc-buffer-aggressivity"</literal></argument>, <argument><literal type="number">1.0</literal></argument>,

<argument>ENC_RC_BUF_AGGR_TEXT</argument>, <argument>ENC_RC_BUF_AGGR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"i-quant-factor"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>ENC_IQUANT_FACTOR_TEXT</argument>, <argument>ENC_IQUANT_FACTOR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"noise-reduction"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>ENC_NOISE_RED_TEXT</argument>, <argument>ENC_NOISE_RED_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"mpeg4-matrix"</literal></argument>, <argument>false</argument>,

<argument>ENC_MPEG4_MATRIX_TEXT</argument>, <argument>ENC_MPEG4_MATRIX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"qmin"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>ENC_QMIN_TEXT</argument>, <argument>ENC_QMIN_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"qmax"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>ENC_QMAX_TEXT</argument>, <argument>ENC_QMAX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"trellis"</literal></argument>, <argument>false</argument>,

<argument>ENC_TRELLIS_TEXT</argument>, <argument>ENC_TRELLIS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"qscale"</literal></argument>, <argument><literal type="number">3</literal></argument>,

<argument>ENC_QSCALE_TEXT</argument>, <argument>ENC_QSCALE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"strict"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>ENC_STRICT_TEXT</argument>, <argument>ENC_STRICT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument>-<literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"lumi-masking"</literal></argument>, <argument><literal type="number">0.0</literal></argument>,

<argument>ENC_LUMI_MASKING_TEXT</argument>, <argument>ENC_LUMI_MASKING_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"dark-masking"</literal></argument>, <argument><literal type="number">0.0</literal></argument>,

<argument>ENC_DARK_MASKING_TEXT</argument>, <argument>ENC_DARK_MASKING_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"p-masking"</literal></argument>, <argument><literal type="number">0.0</literal></argument>,

<argument>ENC_P_MASKING_TEXT</argument>, <argument>ENC_P_MASKING_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"border-masking"</literal></argument>, <argument><literal type="number">0.0</literal></argument>,

<argument>ENC_BORDER_MASKING_TEXT</argument>, <argument>ENC_BORDER_MASKING_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"luma-elim-threshold"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>ENC_LUMA_ELIM_TEXT</argument>, <argument>ENC_LUMA_ELIM_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"chroma-elim-threshold"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>ENC_CHROMA_ELIM_TEXT</argument>, <argument>ENC_CHROMA_ELIM_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"aac-profile"</literal></argument>, <argument><literal type="string">"low"</literal></argument>,

<argument>ENC_PROFILE_TEXT</argument>, <argument>ENC_PROFILE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>ENC_CFG_PREFIX <literal type="string">"options"</literal></argument>, <argument>NULL</argument>, <argument>AV_OPTIONS_TEXT</argument>, <argument>AV_OPTIONS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MERGE_FFMPEG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/avformat/avformat.c"</cpp:file></cpp:include>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<expr_stmt><expr><name>AVIO_MODULE</name>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<name>AVPARSER_MODULE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<name>AVCodecContext</name> <operator>*</operator><macro><name>ffmpeg_AllocContext</name><argument_list>( <argument>decoder_t *p_dec</argument>,

<argument>const AVCodec **restrict codecp</argument> )</argument_list></macro>

<block>{

<expr><name>unsigned</name> <name>i_codec_id</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>psz_namecodec</name></expr>;

<expr><specifier>const</specifier> <name>AVCodec</name> <operator>*</operator><name>p_codec</name> <operator>=</operator> <name>NULL</name></expr>;

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetFfmpegCodec</name><argument_list>( <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_codec_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_namecodec</name></expr></argument> )</argument_list></call> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"using %s %s"</literal></expr></argument>, <argument><expr><call><name>AVPROVIDER</name><argument_list>(<argument><expr><name>LIBAVCODEC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument> )</argument_list></call></block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_init_avcodec</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_decoder</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-codec"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_decoder</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_codec</name> <operator>=</operator> <call><name>avcodec_find_decoder_by_name</name><argument_list>( <argument><expr><name>psz_decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_codec</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Decoder `%s' not found"</literal></expr></argument>, <argument><expr><name>psz_decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_codec</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>i_codec_id</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Decoder `%s' can't handle %4.4s"</literal></expr></argument>,

<argument><expr><name>psz_decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_codec</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_codec</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_codec</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>( <argument><expr><name>i_codec_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_codec</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"codec not found (%s)"</literal></expr></argument>, <argument><expr><name>psz_namecodec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>codecp</name> <operator>=</operator> <name>p_codec</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>p_codec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>avctx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-debug"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>p_dec</name></expr>;</expr_stmt>

<return>return <expr><name>avctx</name></expr>;</return>

}

int <macro><name>ffmpeg_OpenCodec</name><argument_list>( <argument>decoder_t *p_dec</argument>, <argument>AVCodecContext *ctx</argument>,

<argument>const AVCodec *codec</argument> )</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_opts</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-options"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_opts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_av_get_options</name><argument_list>(<argument><expr><name>psz_opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>options</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Unknown option \"%s\""</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"cannot start codec (%s)"</literal></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"codec (%s) started"</literal></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

</unit>
