<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\avcodec\avcommon_compat.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVPROVIDER</name><parameter_list>(<parameter><type><name>lib</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((lib##_VERSION_MICRO &lt; 100) ? "libav" : "ffmpeg")</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBAVCODEC_AVCODEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBAVCODEC_VERSION_CHECK</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( (LIBAVCODEC_VERSION_MICRO &lt; 100 &amp;&amp; LIBAVCODEC_VERSION_INT &gt;= AV_VERSION_INT( a, b, c ) ) || (LIBAVCODEC_VERSION_MICRO &gt;= 100 &amp;&amp; LIBAVCODEC_VERSION_INT &gt;= AV_VERSION_INT( a, d, e ) ) )</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_FLAG_OUTPUT_CORRUPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_OUTPUT_CORRUPT</name></cpp:macro> <cpp:value>CODEC_FLAG_OUTPUT_CORRUPT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_FLAG_GRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_GRAY</name></cpp:macro> <cpp:value>CODEC_FLAG_GRAY</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_FLAG_DR1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_DR1</name></cpp:macro> <cpp:value>CODEC_FLAG_DR1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_FLAG_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_DELAY</name></cpp:macro> <cpp:value>CODEC_FLAG_DELAY</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_FLAG2_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG2_FAST</name></cpp:macro> <cpp:value>CODEC_FLAG2_FAST</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_INPUT_BUFFER_PADDING_SIZE</name></cpp:macro> <cpp:value>AV_INPUT_BUFFER_PADDING_SIZE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_INTERLACED_DCT</name></cpp:macro> <cpp:value>CODEC_FLAG_INTERLACED_DCT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_FLAG_INTERLACED_ME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_INTERLACED_ME</name></cpp:macro> <cpp:value>CODEC_FLAG_INTERLACED_ME</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_GLOBAL_HEADER</name></cpp:macro> <cpp:value>CODEC_FLAG_GLOBAL_HEADER</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_FLAG_LOW_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_FLAG_LOW_DELAY</name></cpp:macro> <cpp:value>CODEC_FLAG_LOW_DELAY</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></cpp:macro> <cpp:value>CODEC_CAP_SMALL_LAST_FRAME</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_INPUT_BUFFER_MIN_SIZE</name></cpp:macro> <cpp:value>FF_MIN_BUFFER_SIZE</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FF_MAX_B_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MAX_B_FRAMES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBAVUTIL_AVUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/avutil.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBAVUTIL_VERSION_CHECK</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( (LIBAVUTIL_VERSION_MICRO &lt; 100 &amp;&amp; LIBAVUTIL_VERSION_INT &gt;= AV_VERSION_INT( a, b, c ) ) || (LIBAVUTIL_VERSION_MICRO &gt;= 100 &amp;&amp; LIBAVUTIL_VERSION_INT &gt;= AV_VERSION_INT( a, d, e ) ) )</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVUTIL_VERSION_MAJOR</name> <operator>&gt;=</operator> <literal type="number">55</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_API_AUDIOCONVERT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PixelFormat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PixelFormat</name></cpp:macro> <cpp:value>AVPixelFormat</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBAVFORMAT_AVFORMAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBAVFORMAT_VERSION_CHECK</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( (LIBAVFORMAT_VERSION_MICRO &lt; 100 &amp;&amp; LIBAVFORMAT_VERSION_INT &gt;= AV_VERSION_INT( a, b, c ) ) || (LIBAVFORMAT_VERSION_MICRO &gt;= 100 &amp;&amp; LIBAVFORMAT_VERSION_INT &gt;= AV_VERSION_INT( a, d, e ) ) )</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
