<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\avcodec\subtitle.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/mem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>p_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_need_ephemer</name></decl>;</decl_stmt> 

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>ConvertSubtitle</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DecodeSubtitle</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>InitSubtitleDec</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>ffmpeg_AllocContext</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_HDMV_PGS_SUBTITLE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_XSUB</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_DVB_SUBTITLE</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"refusing to decode non validated subtitle codec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_codec</name></name> <operator>=</operator> <name>codec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_need_ephemer</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HDMV_PGS_SUBTITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>context</name><operator>-&gt;</operator><name>extradata</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>context</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>context</name><operator>-&gt;</operator><name>extradata</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>dvb</name><operator>.</operator><name>i_id</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>dvb</name><operator>.</operator><name>i_id</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVFORMAT_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr></cpp:if>

<expr_stmt><expr><call><name>av_codec_set_pkt_timebase</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_opts</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"avcodec-options"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_opts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_av_get_options</name><argument_list>(<argument><expr><name>psz_opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>options</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"Unknown option \"%s\""</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"cannot open codec (%s)"</literal></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"libavcodec codec (%s) started"</literal></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>DecodeSubtitle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>EndSubtitleDec</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>DecodeBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>block_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_ptr</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>block_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>*</operator><name>block_ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name> <operator>|</operator> <name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Flush</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>block_ptr</name> <operator>=</operator>

<name>block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name>block</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>p_codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AVSubtitle</name></type> <name>subtitle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subtitle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subtitle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <call><name>TO_AV_TS</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_subtitle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>used</name> <init>= <expr><call><name>avcodec_decode_subtitle2</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>subtitle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_subtitle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"cannot decode one subtitle (%zu bytes)"</literal></expr></argument>,

<argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>used</name> <operator>&gt;</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>used</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>spu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_subtitle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>spu</name> <operator>=</operator> <call><name>ConvertSubtitle</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtitle</name></expr></argument>,

<argument><expr><call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>subtitle</name><operator>.</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>spu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DecodeSubtitle</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>block_ptr</name> <init>= <expr><ternary><condition><expr><name>block</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>spu</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>spu</name> <operator>=</operator> <call><name>DecodeBlock</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>block_ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decoder_QueueSub</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>spu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>VLCDEC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>ConvertRegionRGBA</name><parameter_list>(<parameter><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>ffregion</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ffregion</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ffregion</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>ffregion</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>ffregion</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>subpicture_region_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>region</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>ffregion</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>ffregion</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_TOP</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ffregion</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ffregion</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>index</name> <init>= <expr><name><name>ffregion</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>ffregion</name><operator>-&gt;</operator><name>w</name></name><operator>+</operator><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>ffregion</name><operator>-&gt;</operator><name>nb_colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ffregion</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_rgba</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>color</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>color</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>color</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>color</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>region</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>ConvertSubtitle</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>ffsub</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>spu</name> <init>= <expr><call><name>decoder_NewSubpicture</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spu</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>pts</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>ffsub</name><operator>-&gt;</operator><name>start_display_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <name>pts</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>ffsub</name><operator>-&gt;</operator><name>end_display_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_need_ephemer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>=</operator>

<name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spu</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>=</operator>

<name><name>dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>region_next</name> <init>= <expr><operator>&amp;</operator><name><name>spu</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ffsub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><name><name>ffsub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ffsub</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>ConvertRegionRGBA</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="string">"unsupported subtitle type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>region</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>region</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>region_next</name> <operator>=</operator> <name>region</name></expr>;</expr_stmt>

<expr_stmt><expr><name>region_next</name> <operator>=</operator> <operator>&amp;</operator><name><name>region</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><name>ffsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>spu</name></expr>;</return>

</block_content>}</block></function>

</unit>
