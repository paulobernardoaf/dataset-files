<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\avcodec\encoder.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/channel_layout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcommon.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/channel_layout.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HURRY_UP_GUARD1</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(450)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HURRY_UP_GUARD2</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(300)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HURRY_UP_GUARD3</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAME_DELAY</name></cpp:macro> <cpp:value>(FF_MAX_B_FRAMES + 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAW_AUDIO_FRAME_SIZE</name></cpp:macro> <cpp:value>(2048)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeVideo</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeAudio</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<struct_decl>struct <name>thread_context_t</name>;</struct_decl>

<struct>struct <name>thread_context_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_object_t</name></name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>pf_func</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_work</name></decl>, <decl><type ref="prev"/><name>b_done</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>p_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_interleave_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_ref_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_buggy_pts_detect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_inited</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_sample_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_samples_delay</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_planar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_variable</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>buffer_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_channels_to_reorder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_reorder_layout</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_key_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_b_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_vtolerance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_qmin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_qmax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_hq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rc_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_rc_buffer_aggressivity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_pre_me</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_hurry_up</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_interlace</name></decl>, <name>b_interlace_me</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_i_quant_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_mpeg4_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_trellis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_quality</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>f_lumi_masking</name></decl>, <name>f_dark_masking</name>, <name>f_p_masking</name>, <name>f_border_masking</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_aac_profile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

}</block></struct></type> <name>encoder_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>pi_channels_map</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>AV_CH_FRONT_LEFT</name></expr>, <expr><name>AOUT_CHAN_LEFT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_FRONT_RIGHT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_FRONT_CENTER</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_LOW_FREQUENCY</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_BACK_LEFT</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_BACK_RIGHT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_FRONT_LEFT_OF_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_FRONT_RIGHT_OF_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_BACK_CENTER</name></expr>, <expr><name>AOUT_CHAN_REARCENTER</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_SIDE_LEFT</name></expr>, <expr><name>AOUT_CHAN_MIDDLELEFT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_SIDE_RIGHT</name></expr>, <expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_TOP_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_TOP_FRONT_LEFT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_TOP_FRONT_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_TOP_FRONT_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_TOP_BACK_LEFT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_TOP_BACK_CENTER</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_TOP_BACK_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_STEREO_LEFT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CH_STEREO_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>channel_mask</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AV_CH_LAYOUT_MONO</name></expr>}</block></expr>,

<expr><block>{<expr><name>AOUT_CHANS_STEREO</name></expr>, <expr><name>AV_CH_LAYOUT_STEREO</name></expr>}</block></expr>,

<expr><block>{<expr><name>AOUT_CHANS_2_1</name></expr>, <expr><name>AV_CH_LAYOUT_2POINT1</name></expr>}</block></expr>,

<expr><block>{<expr><name>AOUT_CHANS_4_0</name></expr>, <expr><name>AV_CH_LAYOUT_4POINT0</name></expr>}</block></expr>,

<expr><block>{<expr><name>AOUT_CHANS_4_1</name></expr>, <expr><name>AV_CH_LAYOUT_4POINT1</name></expr>}</block></expr>,

<expr><block>{<expr><name>AOUT_CHANS_5_1</name></expr>, <expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>}</block></expr>,

<expr><block>{<expr><name>AOUT_CHANS_7_0</name></expr>, <expr><name>AV_CH_LAYOUT_7POINT0</name></expr>}</block></expr>,

<expr><block>{<expr><name>AOUT_CHANS_7_1</name></expr>, <expr><name>AV_CH_LAYOUT_7POINT1</name></expr>}</block></expr>,

<expr><block>{<expr><name>AOUT_CHANS_8_1</name></expr>, <expr><name>AV_CH_LAYOUT_OCTAGONAL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_enc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"keyint"</literal></expr>, <expr><literal type="string">"bframes"</literal></expr>, <expr><literal type="string">"vt"</literal></expr>, <expr><literal type="string">"qmin"</literal></expr>, <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"codec"</literal></expr>, <expr><literal type="string">"hq"</literal></expr>,

<expr><literal type="string">"rc-buffer-size"</literal></expr>, <expr><literal type="string">"rc-buffer-aggressivity"</literal></expr>, <expr><literal type="string">"pre-me"</literal></expr>, <expr><literal type="string">"hurry-up"</literal></expr>,

<expr><literal type="string">"interlace"</literal></expr>, <expr><literal type="string">"interlace-me"</literal></expr>, <expr><literal type="string">"i-quant-factor"</literal></expr>, <expr><literal type="string">"noise-reduction"</literal></expr>, <expr><literal type="string">"mpeg4-matrix"</literal></expr>,

<expr><literal type="string">"trellis"</literal></expr>, <expr><literal type="string">"qscale"</literal></expr>, <expr><literal type="string">"strict"</literal></expr>, <expr><literal type="string">"lumi-masking"</literal></expr>, <expr><literal type="string">"dark-masking"</literal></expr>,

<expr><literal type="string">"p-masking"</literal></expr>, <expr><literal type="string">"border-masking"</literal></expr>,

<expr><literal type="string">"aac-profile"</literal></expr>, <expr><literal type="string">"options"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>mpa_bitrate_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">320</literal></expr>, <expr><literal type="number">384</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">160</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>mpa_freq_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">22050</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">16000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>mpeg4_default_intra_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>,

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>,

<expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>,

<expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>,

<expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>,

<expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>,

<expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">41</literal></expr>,

<expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">45</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>mpeg4_default_non_intra_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>,

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>,

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>,

<expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>,

<expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>,

<expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>,

<expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DEFAULT_ALIGN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>probe_video_frame_rate</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>, <parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>p_codec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> ?</condition><then> <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> ?</condition><then> <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr> </then><else>:

<expr><operator>(</operator> <ternary><condition><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4V</name></expr> ?</condition><then> <expr><literal type="number">25</literal></expr> </then><else>: <expr><name>CLOCK_FREQ</name></expr></else></ternary> <operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Time base for probing set to %d/%d"</literal></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_codec</name><operator>-&gt;</operator><name>supported_framerates</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>target</name> <init>= <expr><block>{

<expr><operator>.</operator><name>num</name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>,

<expr><operator>.</operator><name>den</name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>av_find_nearest_q_idx</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>supported_framerates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_codec</name><operator>-&gt;</operator><name>supported_framerates</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>den</name></expr> ?</condition><then>

<expr><name><name>p_codec</name><operator>-&gt;</operator><name>supported_framerates</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>den</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_codec</name><operator>-&gt;</operator><name>supported_framerates</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>den</name></expr> ?</condition><then>

<expr><name><name>p_codec</name><operator>-&gt;</operator><name>supported_framerates</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>num</name></expr> </then><else>: <expr><name>CLOCK_FREQ</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator> <name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>&lt;</operator> <name>CLOCK_FREQ</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator>

<name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator>

<name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Time base set to %d/%d"</literal></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_av_option_int</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>snprintf</name><argument_list>( <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i_value</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>av_dict_set</name><argument_list>( <argument><expr><name>pp_dict</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Failed to set encoder option %s"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_av_option_float</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>snprintf</name><argument_list>( <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>f_value</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>av_dict_set</name><argument_list>( <argument><expr><name>pp_dict</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Failed to set encoder option %s"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>InitVideoEnc</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>p_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>p_codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_codec_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_namecodec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"using %s %s"</literal></expr></argument>, <argument><expr><call><name>AVPROVIDER</name><argument_list>(<argument><expr><name>LIBAVCODEC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_init_avcodec</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_enc_options</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP1V</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_namecodec</name> <operator>=</operator> <literal type="string">"MPEG-1 video"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetFfmpegCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_codec_id</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_namecodec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FindFfmpegChroma</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_namecodec</name> <operator>=</operator> <literal type="string">"Raw video"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>GetFfmpegCodec</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_codec_id</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_namecodec</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_encoder</name> <init>= <expr><call><name>var_GetString</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"codec"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_encoder</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_encoder</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_codec</name> <operator>=</operator> <call><name>avcodec_find_encoder_by_name</name><argument_list>( <argument><expr><name>psz_encoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_codec</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Encoder `%s' not found"</literal></expr></argument>, <argument><expr><name>psz_encoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_encoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_codec</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>i_codec_id</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Encoder `%s' can't handle %4.4s"</literal></expr></argument>,

<argument><expr><name>psz_encoder</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_encoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_encoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_codec</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_codec</name> <operator>=</operator> <call><name>avcodec_find_encoder</name><argument_list>( <argument><expr><name>i_codec_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_codec</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"cannot find encoder %s\n"</literal>

<literal type="string">"*** Your Libav/FFmpeg installation is crippled. ***\n"</literal>

<literal type="string">"*** Please check with your Libav/FFmpeg packager. ***\n"</literal>

<literal type="string">"*** This is NOT a VLC media player issue. ***"</literal></expr></argument>, <argument><expr><name>psz_namecodec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Streaming / Transcoding failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"It seems your Libav/FFmpeg (libavcodec) installation lacks the following encoder:\n"</literal>

<literal type="string">"%s.\n"</literal>

<literal type="string">"If you don't know how to fix this, ask for support from your distribution.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"This is not an error inside VLC media player.\n"</literal>

<literal type="string">"Do not contact the VideoLAN project about this issue.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>psz_namecodec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name></name> <operator>=</operator> <name>p_codec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_planar</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_interleave_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_context</name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>p_codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_context</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name> <operator>=</operator> <name>p_context</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>debug</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"avcodec-debug"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_key_int</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"keyint"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_b_frames</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"bframes"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_vtolerance</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"vt"</literal></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interlace</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"interlace"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interlace_me</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"interlace-me"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_pre_me</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"pre-me"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hurry_up</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"hurry-up"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rc_buffer_size</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"rc-buffer-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rc_buffer_aggressivity</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"rc-buffer-aggressivity"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_i_quant_factor</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"i-quant-factor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg4_matrix</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"mpeg4-matrix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f_val</name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"qscale"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_quality</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>f_val</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">.01f</literal> <operator>||</operator> <name>f_val</name></expr></argument> &gt;</argument_list></name> <literal type="number">255.f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_val</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_quality</name></name> <operator>=</operator> <call><name>lroundf</name><argument_list>(<argument><expr><name>FF_QP2LAMBDA</name> <operator>*</operator> <name>f_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"hq"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hq</name></name> <operator>=</operator> <name>FF_MB_DECISION_RD</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_val</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"rd"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hq</name></name> <operator>=</operator> <name>FF_MB_DECISION_RD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"bits"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hq</name></name> <operator>=</operator> <name>FF_MB_DECISION_BITS</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"simple"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hq</name></name> <operator>=</operator> <name>FF_MB_DECISION_SIMPLE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hq</name></name> <operator>=</operator> <name>FF_MB_DECISION_RD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hq</name></name> <operator>=</operator> <name>FF_MB_DECISION_RD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_qmin</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"qmin"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_qmax</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"qmax"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_trellis</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"trellis"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"strict"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_lumi_masking</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"lumi-masking"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_dark_masking</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"dark-masking"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_p_masking</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"p-masking"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_border_masking</name></name> <operator>=</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"border-masking"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_val</name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"aac-profile"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_LOW</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_val</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_MAIN</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"low"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_LOW</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"ssr"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_SSR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"ltp"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_LTP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"hev2"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_HE_V2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"hev1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_HE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_LD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument>, <argument><expr><literal type="string">"eld"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_ELD</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"unknown AAC profile requested, setting it to low"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_LOW</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>||</operator> <operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"invalid size %ix%i"</literal></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>probe_video_frame_rate</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>p_codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_video_color_settings</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>p_context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>qblur</name></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>qcompress</name></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>b_quant_offset</name></name> <operator>=</operator> <literal type="number">1.25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>=</operator> <literal type="number">1.25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>i_quant_offset</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>=</operator> <operator>-</operator><literal type="number">0.8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>lumi_masking</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_lumi_masking</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>dark_masking</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_dark_masking</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>p_masking</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_p_masking</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_av_option_float</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"border_mask"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_border_masking</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_key_int</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_key_int</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator>

<call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_b_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FF_MAX_B_FRAMES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_context</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MPGV</name> <operator>||</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP2V</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_context</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_context</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TIFF</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetFfmpegChroma</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_codec</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>vlc_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_RGB24</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>PixelFormat</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_codec</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>vlc_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name><name>vlc_pix_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>p_codec</name><operator>-&gt;</operator><name>pix_fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetVlcChroma</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_i_quant_factor</name></name> <operator>!=</operator> <literal type="number">0.f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_i_quant_factor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"noise-reduction"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_av_option_int</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"noise_reduction"</literal></expr></argument>, <argument><expr><name>nr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mpeg4_matrix</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>intra_matrix</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpeg4_default_intra_matrix</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>, <argument><expr><name>mpeg4_default_intra_matrix</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpeg4_default_intra_matrix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>inter_matrix</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpeg4_default_non_intra_matrix</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr></argument>, <argument><expr><name>mpeg4_default_non_intra_matrix</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpeg4_default_non_intra_matrix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_pre_me</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>add_av_option_int</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"mepre"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>me_pre_cmp</name></name> <operator>=</operator> <name>FF_CMP_CHROMA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interlace</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">280</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>p_context</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,

<argument><expr><literal type="string">"disabling interlaced video because height=%d &lt;= 280"</literal></expr></argument>,

<argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interlace_me</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>trellis</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_trellis</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_qmin</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_qmin</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_qmax</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_FLV1</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_H261</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_LJPEG</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_MJPEG</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_H263</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_H263P</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_MSMPEG4V1</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_MSMPEG4V2</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_MSMPEG4V3</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_WMV1</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_WMV2</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_RV10</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_RV20</name> <operator>||</operator>

<name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_SVQ3</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>i_threads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_vtolerance</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>bit_rate_tolerance</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_vtolerance</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_qmax</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_qmin</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_qmax</name></name> <operator>=</operator> <literal type="number">51</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_qmin</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_qmin</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>qmin</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmin</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_qmin</name></name> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_av_option_int</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"lmin"</literal></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_qmax</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>qmax</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_qmax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmax</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_qmax</name></name> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_av_option_int</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"lmax"</literal></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>max_qdiff</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_hq</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_quality</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_quality</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"qsquish"</literal></expr></argument>, <argument><expr><literal type="string">"1.0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_rc_buffer_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rc_buffer_size</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"rc buffer size %d bits"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rc_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rc_buffer_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name>

<operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_rc_buffer_size</name></name> <operator>*</operator> <literal type="number">3</literal><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_av_option_float</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"rc_buffer_aggressivity"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rc_buffer_aggressivity</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name></name></expr> ?</condition><then>

<expr><name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>:

<expr><name>AV_SAMPLE_FMT_S16</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetVlcAudioFormat</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name>

<operator>&amp;&amp;</operator> <name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Trying to find more suitable sample format instead of %s"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>GetVlcAudioFormat</name><argument_list>( <argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Using %s as new sample format"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_planar</name></name> <operator>=</operator> <call><name>av_sample_fmt_is_planar</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_planar</name></name> <operator>&amp;&amp;</operator> <name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Trying to find packet sample format instead of planar %s"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>av_sample_fmt_is_planar</name><argument_list>( <argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name><name>p_codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Changing to packet format %s as new sample format"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Ended up using %s as sample format"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <call><name>GetVlcAudioFormat</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_planar</name></name> <operator>=</operator> <call><name>av_sample_fmt_is_planar</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>channel_mask</name><index>[<expr><name><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels_to_reorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_order_max</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pi_order_dst</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>order_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_channels_src</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>channel_layout</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Creating channel order for reordering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pi_channels_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pi_channels_map</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>&amp;</operator> <name><name>pi_channels_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"%d %"</literal><name>PRIx64</name><literal type="string">" mapped to %"</literal><name>PRIx64</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>i_channels_src</name></expr></argument>, <argument><expr><name><name>pi_channels_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pi_channels_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_order_dst</name><index>[<expr><name>i_channels_src</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pi_channels_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>order_mask</name> <operator>|=</operator> <name><name>pi_channels_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Creating default channel order for reordering"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_order_max</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pi_channels_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pi_channels_map</name></expr></argument>)</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"%d channel is %"</literal><name>PRIx64</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>i_channels_src</name></expr></argument>, <argument><expr><name><name>pi_channels_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_order_dst</name><index>[<expr><name>i_channels_src</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pi_channels_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>order_mask</name> <operator>|=</operator> <name><name>pi_channels_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_channels_src</name> <operator>!=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Channel layout not understood"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels_to_reorder</name></name> <operator>=</operator>

<call><name>aout_CheckChannelReorder</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pi_order_dst</name></expr></argument>, <argument><expr><name>order_mask</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_reorder_layout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4A</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_aac_profile</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>bit_rate_tolerance</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_vtolerance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"keyint"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>&gt;=</operator> <literal type="number">720</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"qmin"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>qmin</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmin</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_av_option_int</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"lmin"</literal></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"qmax"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>qmax</name></name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmax</name></name> <operator>=</operator> <literal type="number">42</literal> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_av_option_int</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"lmax"</literal></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmax</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"qmin"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>qmin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmin</name></name> <operator>=</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_av_option_int</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"lmin"</literal></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>mb_lmin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

p_context-&gt;lag = 16;

p_context-&gt;level = 216;

p_context-&gt;profile = 0;

p_context-&gt;rc_buffer_aggressivity = 0.95;

p_context-&gt;token_partitions = 4;

p_context-&gt;mb_static_threshold = 0;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetFfmpegChroma</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>i_threads</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>i_threads</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <call><name>vlc_GetCPUCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_opts</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>ENC_CFG_PREFIX</name> <literal type="string">"options"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_opts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_av_get_options</name><argument_list>(<argument><expr><name>psz_opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>( <argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>p_codec</name></expr></argument>, <argument><expr><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>options</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"Unknown option \"%s\""</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>ret</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>||</operator>

<operator>(</operator><name><name>p_context</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_MP2</name>

<operator>&amp;&amp;</operator> <name>i_codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_MP3</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<label><name>errmsg</name>:</label>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>types</name><index>[]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>UNKNOWN_ES</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>, <expr><index>[<expr><name>VIDEO_ES</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><index>[<expr><name>AUDIO_ES</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"audio"</literal></expr></argument>)</argument_list></call></expr>, <expr><index>[<expr><name>SPU_ES</name></expr>]</index> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"subpicture"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>txt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>fcc</name> <init>= <expr><block>{ <expr><operator>.</operator><name>value</name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr> }</block></expr></init></decl>;</union>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>types</name><index>[<expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"cannot open %4.4s %s encoder"</literal></expr></argument>, <argument><expr><name><name>fcc</name><operator>.</operator><name>txt</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Streaming / Transcoding failed"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC could not open the %4.4s %s encoder."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>fcc</name><operator>.</operator><name>txt</name></name></expr></argument>, <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>channel_mask</name><index>[<expr><name><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels_to_reorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"stereo mode selected (codec limitation)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_MP2</name> <operator>||</operator> <name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_frequency</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>i_frequency</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_frequency</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i_frequency</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <name><name>mpa_freq_tab</name><index>[<expr><name>i_frequency</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>( <expr><name>i_frequency</name> <operator>==</operator> <literal type="number">6</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"MPEG audio doesn't support frequency=%d"</literal></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator>

<name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name><operator>/</operator><literal type="number">1000</literal> <operator>&lt;=</operator> <name><name>mpa_bitrate_tab</name><index>[<expr><name>i_frequency</name> <operator>/</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">1000</literal> <operator>!=</operator> <name><name>mpa_bitrate_tab</name><index>[<expr><name>i_frequency</name> <operator>/</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>,

<argument><expr><literal type="string">"MPEG audio doesn't support bitrate=%d, using %d"</literal></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr></argument>,

<argument><expr><name><name>mpa_bitrate_tab</name><index>[<expr><name>i_frequency</name> <operator>/</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>mpa_bitrate_tab</name><index>[<expr><name>i_frequency</name> <operator>/</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>( <argument><expr><name>p_context</name></expr></argument>, <argument><expr><name>p_codec</name></expr></argument>, <argument><expr><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>options</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>errmsg</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_FLAC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x66</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x4C</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x61</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x43</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <call><name>GetVlcAudioFormat</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <call><name>aout_BitsPerSample</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sample_bytes</name></name> <operator>=</operator> <operator>(</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_context</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then>

<expr><name><name>p_context</name><operator>-&gt;</operator><name>frame_size</name></name></expr> </then><else>:

<expr><name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_out</name></name> <operator>=</operator> <call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>, <argument><expr><name>DEFAULT_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <call><name>aout_BitsPerSample</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_variable</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_context</name><operator>-&gt;</operator><name>frame_size</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_planar</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_interleave_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_interleave_buf</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"found encoder %s"</literal></expr></argument>, <argument><expr><name>psz_namecodec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_video</name></name> <operator>=</operator> <name>EncodeVideo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pf_encode_audio</name></name> <operator>=</operator> <name>EncodeAudio</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_interleave_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>block_t</name></type> <name>self</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>packet</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_av_packet_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlc_av_packet_Release</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_av_packet_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name></type> <name>vlc_av_packet_cbs</name> <init>=

<expr><block>{

<expr><name>vlc_av_packet_Release</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>vlc_av_packet_Wrap</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<name><name>packet</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>packet</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>

<name><name>packet</name><operator>-&gt;</operator><name>dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>vlc_av_packet_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>b</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>b</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>self</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Init</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_av_packet_cbs</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlc_av_packet_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>packet</name></name> <operator>=</operator> <operator>*</operator><name>packet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_CORRUPT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_CORRUPTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>packet</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>*</operator> <name><name>context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>*</operator> <name><name>context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_hurry_up</name><parameter_list>( <parameter><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>current_date</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>current_date</name> <operator>+</operator> <name>HURRY_UP_GUARD3</name> <operator>&gt;</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>=</operator> <name>FF_MB_DECISION_SIMPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>trellis</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"hurry up mode 3"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_hq</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>current_date</name> <operator>+</operator> <name>HURRY_UP_GUARD2</name> <operator>&gt;</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>trellis</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"hurry up mode 2"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>trellis</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_trellis</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>current_date</name> <operator>+</operator> <name>HURRY_UP_GUARD1</name> <operator>&gt;</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>encode_avframe</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>av_pkt</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>av_pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>av_pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>( <argument><expr><operator>&amp;</operator><name>av_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avcodec_send_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>frame</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"cannot send one frame to encoder %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_packet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"cannot encode one frame"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>vlc_av_packet_Wrap</name><argument_list>( <argument><expr><operator>&amp;</operator><name>av_pkt</name></expr></argument>,

<argument><expr><name><name>av_pkt</name><operator>.</operator><name>duration</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>( <argument><expr><operator>&amp;</operator><name>av_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeVideo</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pict</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_pict</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>( <argument><expr><name>frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i_plane</name></expr>]</index></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i_plane</name></expr>]</index></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <operator>!</operator><name><name>p_pict</name><operator>-&gt;</operator><name>b_progressive</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>p_pict</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name><name>p_pict</name><operator>-&gt;</operator><name>date</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>p_pict</name><operator>-&gt;</operator><name>date</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>/</operator>

<name>CLOCK_FREQ</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_hurry_up</name></name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_hurry_up</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_pts</name></name> <operator>==</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"almost fed libavcodec with two frames with "</literal>

<literal type="string">"the same PTS (%"</literal><name>PRId64</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_pts</name></name> <operator>&gt;</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"almost fed libavcodec with a frame in the "</literal>

<literal type="string">"past (current: %"</literal><name>PRId64</name> <literal type="string">", last: %"</literal><name>PRId64</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_pts</name></name> <operator>=</operator> <call><name>FROM_AV_TS</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_quality</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>encode_avframe</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>frame</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<switch>switch <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case>

<case>case <expr><name>AV_PICTURE_TYPE_SI</name></expr>:</case>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case>

<case>case <expr><name>AV_PICTURE_TYPE_SP</name></expr>:</case>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>

<case>case <expr><name>AV_PICTURE_TYPE_BI</name></expr>:</case>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_PB</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>handle_delay_buffer</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_delay</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>leftover_samples</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>leftover</name> <init>= <expr><name>leftover_samples</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sample_bytes</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>leftover_samples</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>/</operator>

<name>CLOCK_FREQ</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>p_aout_buf</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>-=</operator> <name>leftover_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>+</operator><name>buffer_delay</name></expr></argument>, <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>leftover</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_planar</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_Deinterleave</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_interleave_buf</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>buffer_delay</name></expr></argument>, <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>leftover</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>leftover</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>leftover</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>(</operator> <operator>(</operator><name>leftover</name> <operator>+</operator> <name>buffer_delay</name><operator>)</operator> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_out</name></name> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name> <operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"No small last frame support, padding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>padding_size</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_out</name></name> <operator>-</operator> <operator>(</operator><name>leftover</name><operator>+</operator><name>buffer_delay</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <operator>(</operator><name>leftover</name><operator>+</operator><name>buffer_delay</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_delay</name> <operator>+=</operator> <name>padding_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>avcodec_fill_audio_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_planar</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_interleave_buf</name></name></expr> </then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_out</name></name></expr></argument>,

<argument><expr><name>DEFAULT_ALIGN</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"filling error on fillup"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>encode_avframe</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>EncodeAudio</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_aout_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_samples_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_samples_left</name> <operator>=</operator> <ternary><condition><expr><name>p_aout_buf</name></expr> ?</condition><then> <expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_delay</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sample_bytes</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>leftover_samples</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>i_samples_left</name></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout_buf</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument>, <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Decrement</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_aout_buf</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels_to_reorder</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_ChannelReorder</name><argument_list>( <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels_to_reorder</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_reorder_layout</name></name></expr></argument>,

<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>buffer_delay</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>(</operator> <name>p_aout_buf</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>leftover_samples</name> <operator>&lt;=</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>(</operator><name>leftover_samples</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>)</operator> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>)</operator>

<operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>!</operator><name>p_aout_buf</name> <operator>)</operator>

<operator>)</operator></expr>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_chain</name> <operator>=</operator> <call><name>handle_delay_buffer</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>buffer_delay</name></expr></argument>, <argument><expr><name>p_aout_buf</name></expr></argument>, <argument><expr><name>leftover_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_delay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_chain</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_aout_buf</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>,<argument><expr><literal type="string">"Flushing.."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>encode_avframe</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_chain</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><name>p_block</name></expr> )</condition>;</do>

<return>return <expr><name>p_chain</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>(</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_variable</name></name> <operator>&amp;&amp;</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_variable</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>/</operator>

<name>CLOCK_FREQ</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>in_bytes</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sample_bytes</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_planar</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_Deinterleave</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>in_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>avcodec_fill_audio_frame</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_out</name></name></expr></argument>,

<argument><expr><name>DEFAULT_ALIGN</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"filling error on encode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>in_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>in_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>buffer_date</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>encode_avframe</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_chain</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>buffer_delay</name></expr></argument>, <argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sample_bytes</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_delay</name></name> <operator>+=</operator> <name><name>p_aout_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_chain</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>EndVideoEnc</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><operator>(</operator><name>encoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>encoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_avcodec_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_interleave_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
