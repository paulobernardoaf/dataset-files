<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\avcodec\chroma.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/avutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/pixfmt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcommon.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chroma.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_RGB_ES</name><parameter_list>( <parameter><type><name>fcc</name></type></parameter>, <parameter><type><name>leid</name></type></parameter>, <parameter><type><name>beid</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ fcc, beid, 0, 0, 0 },</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_RGB_ES</name><parameter_list>( <parameter><type><name>fcc</name></type></parameter>, <parameter><type><name>leid</name></type></parameter>, <parameter><type><name>beid</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ fcc, leid, 0, 0, 0 },</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_RGB</name><parameter_list>( <parameter><type><name>fcc</name></type></parameter>, <parameter><type><name>leid</name></type></parameter>, <parameter><type><name>beid</name></type></parameter>, <parameter><type><name>rmask</name></type></parameter>, <parameter><type><name>gmask</name></type></parameter>, <parameter><type><name>bmask</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ fcc, leid, rmask, gmask, bmask }, { fcc, beid, bmask, gmask, rmask }, VLC_RGB_ES( fcc, leid, beid )</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_chroma_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_rmask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_gmask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bmask</name></decl>;</decl_stmt>

}</block> <decl><name><name>chroma_table</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>VLC_CODEC_I444</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_J444</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I440</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_J440</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_J422</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_YV12</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_J420</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I411</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I410</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_NV12</name></expr>, <expr><name>AV_PIX_FMT_NV12</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_NV21</name></expr>, <expr><name>AV_PIX_FMT_NV21</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420_9L</name></expr>, <expr><name>AV_PIX_FMT_YUV420P9LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420_9B</name></expr>, <expr><name>AV_PIX_FMT_YUV420P9BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420_10B</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_YUV420P12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_I420_12L</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420_12B</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>VLC_CODEC_I420_16L</name></expr>, <expr><name>AV_PIX_FMT_YUV420P16LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I420_16B</name></expr>, <expr><name>AV_PIX_FMT_YUV420P16BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_P010</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_P010</name></expr>, <expr><name>AV_PIX_FMT_P010</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_P016</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_P016</name></expr>, <expr><name>AV_PIX_FMT_P016</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>VLC_CODEC_I422_9L</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422_9B</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422_10L</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422_10B</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422_16L</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422_16B</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_YUV422P12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_I422_12L</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I422_12B</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>VLC_CODEC_YUV420A</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_YUV422A</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_YUVA</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_YUVA_444_10L</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_YUVA_444_10B</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I444_9L</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I444_9B</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I444_10L</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I444_10B</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_YUV444P12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_I444_12L</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I444_12B</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>VLC_CODEC_I444_16L</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_I444_16B</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_YUYV</name></expr>, <expr><name>AV_PIX_FMT_YUYV422</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AV_PIX_FMT_YUYV422</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_UYVY</name></expr>, <expr><name>AV_PIX_FMT_UYVY422</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_YVYU</name></expr>, <expr><name>AV_PIX_FMT_YVYU422</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AV_PIX_FMT_UYYVYY411</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<macro><name>VLC_RGB</name><argument_list>( <argument>VLC_FOURCC(<literal type="char">'R'</literal>,<literal type="char">'G'</literal>,<literal type="char">'B'</literal>,<literal type="char">'4'</literal>)</argument>, <argument>AV_PIX_FMT_RGB4</argument>, <argument>AV_PIX_FMT_BGR4</argument>, <argument><literal type="number">0x10</literal></argument>, <argument><literal type="number">0x06</literal></argument>, <argument><literal type="number">0x01</literal></argument> )</argument_list></macro>

<macro><name>VLC_RGB</name><argument_list>( <argument>VLC_CODEC_RGB8</argument>, <argument>AV_PIX_FMT_RGB8</argument>, <argument>AV_PIX_FMT_BGR8</argument>, <argument><literal type="number">0xC0</literal></argument>, <argument><literal type="number">0x38</literal></argument>, <argument><literal type="number">0x07</literal></argument> )</argument_list></macro>

<macro><name>VLC_RGB</name><argument_list>( <argument>VLC_CODEC_RGB15</argument>, <argument>AV_PIX_FMT_RGB555</argument>, <argument>AV_PIX_FMT_BGR555</argument>, <argument><literal type="number">0x7c00</literal></argument>, <argument><literal type="number">0x03e0</literal></argument>, <argument><literal type="number">0x001f</literal></argument> )</argument_list></macro>

<macro><name>VLC_RGB</name><argument_list>( <argument>VLC_CODEC_RGB16</argument>, <argument>AV_PIX_FMT_RGB565</argument>, <argument>AV_PIX_FMT_BGR565</argument>, <argument><literal type="number">0xf800</literal></argument>, <argument><literal type="number">0x07e0</literal></argument>, <argument><literal type="number">0x001f</literal></argument> )</argument_list></macro>

<macro><name>VLC_RGB</name><argument_list>( <argument>VLC_CODEC_RGB24</argument>, <argument>AV_PIX_FMT_RGB24</argument>, <argument>AV_PIX_FMT_BGR24</argument>, <argument><literal type="number">0xff0000</literal></argument>, <argument><literal type="number">0x00ff00</literal></argument>, <argument><literal type="number">0x0000ff</literal></argument> )</argument_list></macro>

<macro><name>VLC_RGB</name><argument_list>( <argument>VLC_CODEC_RGB32</argument>, <argument>AV_PIX_FMT_RGB32</argument>, <argument>AV_PIX_FMT_BGR32</argument>, <argument><literal type="number">0x00ff0000</literal></argument>, <argument><literal type="number">0x0000ff00</literal></argument>, <argument><literal type="number">0x000000ff</literal></argument> )</argument_list></macro>

<macro><name>VLC_RGB</name><argument_list>( <argument>VLC_CODEC_RGB32</argument>, <argument>AV_PIX_FMT_RGB32_1</argument>, <argument>AV_PIX_FMT_BGR32_1</argument>, <argument><literal type="number">0xff000000</literal></argument>, <argument><literal type="number">0x00ff0000</literal></argument>, <argument><literal type="number">0x0000ff00</literal></argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_0BGR32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>VLC_RGB</name><argument_list>( <argument>VLC_CODEC_RGB32</argument>, <argument>AV_PIX_FMT_0BGR32</argument>, <argument>AV_PIX_FMT_0RGB32</argument>, <argument><literal type="number">0x000000ff</literal></argument>, <argument><literal type="number">0x0000ff00</literal></argument>, <argument><literal type="number">0x00ff0000</literal></argument> )</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_RGBA64</name></expr>, <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr><block>{<expr><name>VLC_CODEC_RGBA64</name></expr>, <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><block>{<expr><name>VLC_CODEC_RGBA</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_ARGB</name></expr>, <expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_BGRA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GREY</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_GRAY10</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_GREY_10L</name></expr>, <expr><name>AV_PIX_FMT_GRAY10LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GREY_10B</name></expr>, <expr><name>AV_PIX_FMT_GRAY10BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_GRAY12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_GREY_12L</name></expr>, <expr><name>AV_PIX_FMT_GRAY12LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GREY_12B</name></expr>, <expr><name>AV_PIX_FMT_GRAY12BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>VLC_CODEC_GREY_16L</name></expr>, <expr><name>AV_PIX_FMT_GRAY16LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GREY_16B</name></expr>, <expr><name>AV_PIX_FMT_GRAY16BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_RGBP</name></expr>, <expr><name>AV_PIX_FMT_PAL8</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR</name></expr>, <expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_9L</name></expr>, <expr><name>AV_PIX_FMT_GBRP9LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_9B</name></expr>, <expr><name>AV_PIX_FMT_GBRP9BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_10L</name></expr>, <expr><name>AV_PIX_FMT_GBRP10LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_10B</name></expr>, <expr><name>AV_PIX_FMT_GBRP10BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_GBRP12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_12L</name></expr>, <expr><name>AV_PIX_FMT_GBRP12LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_12B</name></expr>, <expr><name>AV_PIX_FMT_GBRP12BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_GBRP14</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_14L</name></expr>, <expr><name>AV_PIX_FMT_GBRP14LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_14B</name></expr>, <expr><name>AV_PIX_FMT_GBRP14BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_16L</name></expr>, <expr><name>AV_PIX_FMT_GBRP16LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBR_PLANAR_16B</name></expr>, <expr><name>AV_PIX_FMT_GBRP16BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBRA_PLANAR</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_GBRAP10</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_GBRA_PLANAR_10L</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBRA_PLANAR_10B</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_PIX_FMT_GBRAP12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>VLC_CODEC_GBRA_PLANAR_12L</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBRA_PLANAR_12B</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>VLC_CODEC_GBRA_PLANAR_16L</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_GBRA_PLANAR_16B</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16BE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><name>VLC_CODEC_XYZ12</name></expr>, <expr><name>AV_PIX_FMT_XYZ12</name></expr>, <expr><literal type="number">0xfff0</literal></expr>, <expr><literal type="number">0xfff0</literal></expr>, <expr><literal type="number">0xfff0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>GetFfmpegChroma</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>i_ffmpeg_chroma</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_rmask</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_gmask</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bmask</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_rmask</name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>&amp;&amp;</operator>

<name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_gmask</name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>&amp;&amp;</operator>

<name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bmask</name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>i_ffmpeg_chroma</name> <operator>=</operator> <name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma_id</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_fourcc_t</name></type> <name>FindVlcChroma</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_ffmpeg_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma_id</name> <operator>==</operator> <name>i_ffmpeg_id</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetVlcChroma</name><parameter_list>( <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_ffmpeg_chroma</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma_id</name> <operator>==</operator> <name>i_ffmpeg_chroma</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>=</operator> <name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_rmask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>=</operator> <name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_gmask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>=</operator> <name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bmask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>FindFfmpegChroma</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name> <operator>==</operator> <name>fourcc</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>chroma_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma_id</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></function>

</unit>
