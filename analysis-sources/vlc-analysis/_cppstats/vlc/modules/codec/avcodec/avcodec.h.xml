<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\codec\avcodec\avcodec.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chroma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcommon.h"</cpp:file></cpp:include>

<function_decl><type><name>bool</name></type> <name>GetFfmpegCodec</name><parameter_list>( <parameter><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_ffmpeg_codec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_name</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>vlc_fourcc_t</name></type> <name>GetVlcFourcc</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>i_ffmpeg_codec</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>vlc_fourcc_t</name></type> <name>GetVlcAudioFormat</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_sample_fmt</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>InitVideoEnc</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>EndVideoEnc</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>InitVideoDec</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>EndVideoDec</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>InitAudioDec</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>EndAudioDec</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>InitSubtitleDec</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>EndSubtitleDec</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ffmpeg_AllocContext</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ffmpeg_OpenCodec</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_TEXT</name></cpp:macro> <cpp:value>N_("Direct rendering")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORRUPTED_TEXT</name></cpp:macro> <cpp:value>N_("Show corrupted frames")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORRUPTED_LONGTEXT</name></cpp:macro> <cpp:value>N_("Prefer visual artifacts instead of missing frames")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_TEXT</name></cpp:macro> <cpp:value>N_("Error resilience")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "libavcodec can do error resilience.\n" "However, with a buggy encoder (such as the ISO MPEG-4 encoder from M$) " "this can produce a lot of errors.\n" "Valid values range from 0 to 4 (0 disables all errors resilience).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUGS_TEXT</name></cpp:macro> <cpp:value>N_("Workaround bugs")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUGS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Try to fix some bugs:\n" "1 autodetect\n" "2 old msmpeg4\n" "4 xvid interlaced\n" "8 ump4 \n" "16 no padding\n" "32 ac vlc\n" "64 Qpel chroma.\n" "This must be the sum of the values. For example, to fix \"ac vlc\" and " "\"ump4\", enter 40.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HURRYUP_TEXT</name></cpp:macro> <cpp:value>N_("Hurry up")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HURRYUP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The decoder can partially decode or skip frame(s) " "when there is not enough time. It's useful with low CPU power " "but it can produce distorted pictures.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_TEXT</name></cpp:macro> <cpp:value>N_("Allow speed tricks")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allow non specification compliant speedup tricks. Faster but error-prone.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_FRAME_TEXT</name></cpp:macro> <cpp:value>N_("Skip frame (default=0)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_FRAME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Force skipping of frames to speed up decoding " "(-1=None, 0=Default, 1=B-frames, 2=P-frames, 3=B+P frames, 4=all frames)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_IDCT_TEXT</name></cpp:macro> <cpp:value>N_("Skip idct (default=0)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_IDCT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Force skipping of idct to speed up decoding for frame types " "(-1=None, 0=Default, 1=B-frames, 2=P-frames, 3=B+P frames, 4=all frames)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_TEXT</name></cpp:macro> <cpp:value>N_( "Debug mask" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set FFmpeg debug mask" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_TEXT</name></cpp:macro> <cpp:value>N_( "Codec name" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Internal libavcodec codec name" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIPLOOPF_TEXT</name></cpp:macro> <cpp:value>N_( "Skip the loop filter for H.264 decoding" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIPLOOPF_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Skipping the loop filter (aka deblocking) " "usually has a detrimental effect on quality. However it provides a big " "speedup for high definition streams." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADS_TEXT</name></cpp:macro> <cpp:value>N_( "Threads" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of threads used for decoding, 0 meaning auto" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-avcodec-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_KEYINT_TEXT</name></cpp:macro> <cpp:value>N_( "Ratio of key frames" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_KEYINT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of frames " "that will be coded for one key frame." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_BFRAMES_TEXT</name></cpp:macro> <cpp:value>N_( "Ratio of B frames" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_BFRAMES_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Number of " "B frames that will be coded between two reference frames." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_VT_TEXT</name></cpp:macro> <cpp:value>N_( "Video bitrate tolerance" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_VT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Video bitrate tolerance in kbit/s." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_INTERLACE_TEXT</name></cpp:macro> <cpp:value>N_( "Interlaced encoding" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_INTERLACE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enable dedicated " "algorithms for interlaced frames." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_INTERLACE_ME_TEXT</name></cpp:macro> <cpp:value>N_( "Interlaced motion estimation" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_INTERLACE_ME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enable interlaced " "motion estimation algorithms. This requires more CPU." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PRE_ME_TEXT</name></cpp:macro> <cpp:value>N_( "Pre-motion estimation" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PRE_ME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enable the pre-motion " "estimation algorithm.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_RC_BUF_TEXT</name></cpp:macro> <cpp:value>N_( "Rate control buffer size" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_RC_BUF_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Rate control " "buffer size (in kbytes). A bigger buffer will allow for better rate " "control, but will cause a delay in the stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_RC_BUF_AGGR_TEXT</name></cpp:macro> <cpp:value>N_( "Rate control buffer aggressiveness" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_RC_BUF_AGGR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Rate control ""buffer aggressiveness." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_IQUANT_FACTOR_TEXT</name></cpp:macro> <cpp:value>N_( "I quantization factor" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_IQUANT_FACTOR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Quantization factor of I frames, compared with P frames (for instance " "1.0 =&gt; same qscale for I and P frames)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_NOISE_RED_TEXT</name></cpp:macro> <cpp:value>N_( "Noise reduction" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_NOISE_RED_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enable a simple noise " "reduction algorithm to lower the encoding length and bitrate, at the " "expense of lower quality frames." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MPEG4_MATRIX_TEXT</name></cpp:macro> <cpp:value>N_( "MPEG4 quantization matrix" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_MPEG4_MATRIX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Use the MPEG4 " "quantization matrix for MPEG2 encoding. This generally yields a " "better looking picture, while still retaining the compatibility with " "standard MPEG2 decoders.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_HQ_TEXT</name></cpp:macro> <cpp:value>N_( "Quality level" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_HQ_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Quality level " "for the encoding of motions vectors (this can slow down the encoding " "very much)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_HURRYUP_TEXT</name></cpp:macro> <cpp:value>N_( "Hurry up" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_HURRYUP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The encoder " "can make on-the-fly quality tradeoffs if your CPU can't keep up with " "the encoding rate. It will disable trellis quantization, then the rate " "distortion of motion vectors (hq), and raise the noise reduction " "threshold to ease the encoder's task." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QMIN_TEXT</name></cpp:macro> <cpp:value>N_( "Minimum video quantizer scale" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QMIN_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Minimum video " "quantizer scale." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QMAX_TEXT</name></cpp:macro> <cpp:value>N_( "Maximum video quantizer scale" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QMAX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Maximum video " "quantizer scale." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_TRELLIS_TEXT</name></cpp:macro> <cpp:value>N_( "Trellis quantization" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_TRELLIS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enable trellis " "quantization (rate distortion for block coefficients)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QSCALE_TEXT</name></cpp:macro> <cpp:value>N_( "Fixed quantizer scale" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_QSCALE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "A fixed video " "quantizer scale for VBR encoding (accepted values: 0.01 to 255.0)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_STRICT_TEXT</name></cpp:macro> <cpp:value>N_( "Strict standard compliance" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_STRICT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Force a strict standard " "compliance when encoding (accepted values: -2 to 2)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_LUMI_MASKING_TEXT</name></cpp:macro> <cpp:value>N_( "Luminance masking" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_LUMI_MASKING_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Raise the quantizer for " "very bright macroblocks (default: 0.0)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DARK_MASKING_TEXT</name></cpp:macro> <cpp:value>N_( "Darkness masking" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_DARK_MASKING_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Raise the quantizer for " "very dark macroblocks (default: 0.0)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_P_MASKING_TEXT</name></cpp:macro> <cpp:value>N_( "Motion masking" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_P_MASKING_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Raise the quantizer for " "macroblocks with a high temporal complexity (default: 0.0)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_BORDER_MASKING_TEXT</name></cpp:macro> <cpp:value>N_( "Border masking" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_BORDER_MASKING_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Raise the quantizer " "for macroblocks at the border of the frame (default: 0.0)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_LUMA_ELIM_TEXT</name></cpp:macro> <cpp:value>N_( "Luminance elimination" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_LUMA_ELIM_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Eliminates luminance blocks when " "the PSNR isn't much changed (default: 0.0). The H264 specification " "recommends -4." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CHROMA_ELIM_TEXT</name></cpp:macro> <cpp:value>N_( "Chrominance elimination" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CHROMA_ELIM_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Eliminates chrominance blocks when " "the PSNR isn't much changed (default: 0.0). The H264 specification " "recommends 7." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PROFILE_TEXT</name></cpp:macro> <cpp:value>N_( "Specify AAC audio profile to use" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_PROFILE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Specify the AAC audio profile to use " "for encoding the audio bitstream. It takes the following options: " "main, low, ssr (not supported),ltp, hev1, hev2 (default: low). " "hev1 and hev2 are currently supported only with libfdk-aac enabled libavcodec" )</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AV_VERSION_INT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_VERSION_INT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;&lt;16 | (b)&lt;&lt;8 | (c))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
