<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access_output\http.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_httpd.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-http-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_TEXT</name></cpp:macro> <cpp:value>N_("Username")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_LONGTEXT</name></cpp:macro> <cpp:value>N_("Username that will be " "requested to access the stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_TEXT</name></cpp:macro> <cpp:value>N_("Password")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Password that will be " "requested to access the stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIME_TEXT</name></cpp:macro> <cpp:value>N_("Mime")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIME_LONGTEXT</name></cpp:macro> <cpp:value>N_("MIME returned by the server (autodetected " "if not specified)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METACUBE_TEXT</name></cpp:macro> <cpp:value>N_("Metacube")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METACUBE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use the Metacube protocol. Needed for streaming " "to the Cubemap reflector.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"HTTP stream output"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"HTTP"</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"http"</literal></argument>, <argument><literal type="string">"https"</literal></argument>, <argument><literal type="string">"mmsh"</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_ACO</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"user"</literal></argument>, <argument><literal type="string">""</literal></argument>,

<argument>USER_TEXT</argument>, <argument>USER_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_password</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"pwd"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>PASS_TEXT</argument>, <argument>PASS_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"mime"</literal></argument>, <argument><literal type="string">""</literal></argument>,

<argument>MIME_TEXT</argument>, <argument>MIME_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"metacube"</literal></argument>, <argument>false</argument>,

<argument>METACUBE_TEXT</argument>, <argument>METACUBE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"user"</literal></expr>, <expr><literal type="string">"pwd"</literal></expr>, <expr><literal type="string">"mime"</literal></expr>, <expr><literal type="string">"metacube"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Write</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>p_httpd_host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>httpd_stream_t</name> <modifier>*</modifier></type><name>p_httpd_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_header_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_header_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_header_complete</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_metacube</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_keyframes</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_access_out_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>METACUBE2_SYNC</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'!'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METACUBE_FLAGS_HEADER</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METACUBE_FLAGS_NOT_SUITABLE_FOR_STREAM_START</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<struct>struct <name>metacube2_block_header</name>

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>sync</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>csum</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METACUBE2_CRC_POLYNOMIAL</name></cpp:macro> <cpp:value>0x8FDB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METACUBE2_CRC_START</name></cpp:macro> <cpp:value>0x1234</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>metacube2_compute_crc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>metacube2_block_header</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>data_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>hdr</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>crc</name> <init>= <expr><name>METACUBE2_CRC_START</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>data_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><name>crc</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>j</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>crc</name> <operator>^=</operator> <name>METACUBE2_CRC_POLYNOMIAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><name>crc</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>crc</name> <operator>^=</operator> <name>METACUBE2_CRC_POLYNOMIAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>crc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_pwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mime</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_sys</name> <operator>=</operator> <name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator>

<call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_access_out_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr> ;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>path</name> <operator>&gt;</operator> <name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>port</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name>port</name> <operator>!=</operator> <name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>port</name></expr> ?</condition><then> <expr><name>port</name></expr> </then><else>: <expr><name>path</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"\"%.*s\" HTTP host might be ignored in "</literal>

<literal type="string">"multiple-host configurations, use at your own risks."</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Consider passing --http-host=IP on the "</literal>

<literal type="string">"command line instead."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>host</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"http-host"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"http-host"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>port</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bind_port</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>port</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>bind_port</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><ternary><condition><expr><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_access</name></name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument> )</argument_list></call></expr>

?</condition><then> <expr><literal type="string">"http-port"</literal></expr> </then><else>: <expr><literal type="string">"https-port"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>bind_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>path</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_access</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_access</name></name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name> <operator>=</operator> <call><name>vlc_https_HostNew</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name> <operator>=</operator> <call><name>vlc_http_HostNew</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot start HTTP server"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_user</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"user"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_pwd</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"pwd"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_access</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_access</name></name></expr></argument>, <argument><expr><literal type="string">"mmsh"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_mime</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"video/x-ms-asf-stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>psz_mime</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"mime"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_metacube</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"metacube"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_keyframes</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_stream</name></name> <operator>=</operator>

<call><name>httpd_StreamNew</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>psz_mime</name></expr></argument>,

<argument><expr><name>psz_user</name></expr></argument>, <argument><expr><name>psz_pwd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_user</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_pwd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_stream</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot add stream %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_HostDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_metacube</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>httpd_header</name></type> <name><name>headers</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"Content-encoding"</literal></expr>, <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"metacube"</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>httpd_StreamSetHTTPHeaders</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_stream</name></name></expr></argument>, <argument><expr><name>headers</name></expr></argument>,

<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_allocated</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_allocated</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_complete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>=</operator> <name>Write</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>httpd_StreamDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_HostDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_host</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Close"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_access</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ACCESS_OUT_CONTROLS_PACE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Write</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_buffer</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_HEADER</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_complete</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_complete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name><operator>)</operator> <operator>&gt;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_header_allocated</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_allocated</name></name> <operator>=</operator>

<name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>+</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_allocated</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>+=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_complete</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_complete</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_metacube</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>metacube2_block_header</name></name></type> <name>hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>hdr</name><operator>.</operator><name>sync</name></name></expr></argument>, <argument><expr><name>METACUBE2_SYNC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>METACUBE2_SYNC</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>hton32</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>hton16</name><argument_list>( <argument><expr><name>METACUBE_FLAGS_HEADER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>csum</name></name> <operator>=</operator> <call><name>hton16</name><argument_list>( <argument><expr><call><name>metacube2_compute_crc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_header_size</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>hdr</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_hdr_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_header_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_hdr_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_hdr_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_hdr_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hdr</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_hdr_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>hdr</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_StreamHeader</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_stream</name></name></expr></argument>, <argument><expr><name><name>p_hdr_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_hdr_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>httpd_StreamSend</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_stream</name></name></expr></argument>, <argument><expr><name>p_hdr_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_hdr_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>httpd_StreamHeader</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_stream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_header</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_header_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>+=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_keyframes</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_metacube</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_HEADER</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>metacube2_block_header</name></name></type> <name>hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>hdr</name><operator>.</operator><name>sync</name></name></expr></argument>, <argument><expr><name>METACUBE2_SYNC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>METACUBE2_SYNC</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>hton32</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>hton16</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_HEADER</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <call><name>hton16</name><argument_list>( <argument><expr><name>METACUBE_FLAGS_HEADER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_keyframes</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <call><name>hton16</name><argument_list>( <argument><expr><name>METACUBE_FLAGS_NOT_SUITABLE_FOR_STREAM_START</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>csum</name></name> <operator>=</operator> <call><name>hton16</name><argument_list>( <argument><expr><call><name>metacube2_compute_crc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hdr</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_buffer</name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hdr</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_err</name> <operator>=</operator> <call><name>httpd_StreamSend</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_httpd_stream</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator> <ternary><condition><expr><name>i_err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>i_len</name></expr></else></ternary> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
