<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access_output\udp.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EMPTY_BLOCKS</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-udp-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHING_TEXT</name></cpp:macro> <cpp:value>N_("Caching value (ms)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHING_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Default caching value for outbound UDP streams. This " "value should be set in milliseconds." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_TEXT</name></cpp:macro> <cpp:value>N_("Group packets")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_LONGTEXT</name></cpp:macro> <cpp:value>N_("Packets can be sent one by one at the right time " "or by groups. You can choose the number " "of packets that will be sent at a time. It " "helps reducing the scheduling load on " "heavily-loaded systems." )</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"UDP stream output"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"UDP"</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_ACO</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"caching"</literal></argument>, <argument>DEFAULT_PTS_DELAY / <literal type="number">1000</literal></argument>, <argument>CACHING_TEXT</argument>, <argument>CACHING_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"group"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>GROUP_TEXT</argument>, <argument>GROUP_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"udp"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"caching"</literal></expr>,

<expr><literal type="string">"group"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_core_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"dscp"</literal></expr>,

<expr><literal type="string">"ttl"</literal></expr>,

<expr><literal type="string">"miface"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Write</name> <parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ThreadWrite</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_caching</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_mtu_warning</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_mtu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>p_fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_access_out_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PORT</name></cpp:macro> <cpp:value>1234</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dst_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_dst_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_handle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>,

<argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,

<argument><expr><name>ppsz_core_options</name></expr></argument>, <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_Create</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-port"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>var_Create</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-port"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>var_Create</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-addr"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>var_Create</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-addr"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dst_port</name> <operator>=</operator> <name>DEFAULT_PORT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name> <init>= <expr><name>psz_dst_addr</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_dst_addr</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>psz_parser</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><ternary><condition><expr><name>psz_parser</name></expr> ?</condition><then> <expr><name>psz_parser</name></expr> </then><else>: <expr><name>psz_dst_addr</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_parser</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_parser</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dst_port</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>psz_parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_handle</name> <operator>=</operator> <call><name>net_ConnectDgram</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_dst_addr</name></expr></argument>, <argument><expr><name>i_dst_port</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>IPPROTO_UDP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>psz_dst_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_handle</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"failed to create raw UDP socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>NI_MAXNUMERICHOST</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>net_GetSockAddress</name> <argument_list>(<argument><expr><name>i_handle</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"source: %s port %d"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-addr"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-port"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>net_GetPeerAddress</name> <argument_list>(<argument><expr><name>i_handle</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"destination: %s port %d"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-addr"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name> <argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-port"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>shutdown</name><argument_list>( <argument><expr><name>i_handle</name></expr></argument>, <argument><expr><name>SHUT_RD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_caching</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(

<argument><expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"caching"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name> <operator>=</operator> <name>i_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"mtu"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mtu_warning</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name> <operator>=</operator> <call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>ThreadWrite</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>,

<argument><expr><name>VLC_THREAD_PRIORITY_HIGHEST</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"cannot spawn sout access thread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>net_Close</name> <argument_list>(<argument><expr><name>i_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>=</operator> <name>Write</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_access</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ACCESS_OUT_CONTROLS_PACE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Write</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_buffer</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_packets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_mtu_warning</name></name> <operator>&amp;&amp;</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mtu</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"packet size &gt; MTU, you should probably "</literal>

<literal type="string">"increase the MTU"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_mtu_warning</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mtu</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_caching</name></name> <operator>&lt;</operator> <name>now</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"late packet for UDP input (%"</literal><name>PRId64</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name>now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_dts</name></name>

<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_caching</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>+=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_payload_size</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mtu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_write</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>i_payload_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_packets</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mtu</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_write</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_write</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CLOCK</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CLOCK</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"putting two PCRs at once"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_CLOCK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mtu</name></name> <operator>||</operator> <name>i_packets</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_caching</name></name> <operator>&lt;</operator> <name>now</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"late packet for udp input (%"</literal><name>PRId64</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name><operator>-&gt;</operator><name>i_dts</name></name>

<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_caching</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ThreadWrite</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_date_last</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_group</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>,

<argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"group"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_to_send</name> <init>= <expr><name>i_group</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_dropped_packets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pk</name> <init>= <expr><call><name>block_FifoGet</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_date</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_caching</name></name> <operator>+</operator> <name><name>p_pk</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_date_last</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_date</name> <operator>-</operator> <name>i_date_last</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_dropped_packets</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mmh, hole (%"</literal><name>PRId64</name><literal type="string">" &gt; 2s) -&gt; drop"</literal></expr></argument>,

<argument><expr><name>i_date</name> <operator>-</operator> <name>i_date_last</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_date_last</name> <operator>=</operator> <name>i_date</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dropped_packets</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_date</name> <operator>-</operator> <name>i_date_last</name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_dropped_packets</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"mmh, packets in the past (%"</literal><name>PRId64</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><name>i_date_last</name> <operator>-</operator> <name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_cleanup_push</name><argument_list>( <argument><expr><name>p_pk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_to_send</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_to_send</name> <operator>||</operator> <operator>(</operator><name><name>p_pk</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_CLOCK</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_tick_wait</name><argument_list>( <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_to_send</name> <operator>=</operator> <name>i_group</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>send</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_handle</name></name></expr></argument>, <argument><expr><name><name>p_pk</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pk</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"send error: %s"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cleanup_pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dropped_packets</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dropped %i packets"</literal></expr></argument>, <argument><expr><name>i_dropped_packets</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dropped_packets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_date_last</name> <operator>=</operator> <name>i_date</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name>i_date</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>i_date</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_date</name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"packet has been sent too late (%"</literal><name>PRId64</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
