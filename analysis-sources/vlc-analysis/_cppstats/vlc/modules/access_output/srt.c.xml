<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\access_output\srt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;srt_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>SRTSOCKET</name></type> <name>sock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_poll_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_interrupted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_access_out_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_wait_interrupted</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name> <operator>!=</operator> <name>SRT_INVALID_SOCK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interrupted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Waking up srt_epoll_wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_epoll_remove_usock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>srt_schedule_reconnect</name><parameter_list>(<parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>access_obj</name> <init>= <expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator> <name>p_access</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dst_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_dst_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_latency</name><init>=<expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SRT_PARAM_LATENCY</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_payload_size</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SRT_PARAM_PAYLOAD_SIZE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_passphrase</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SRT_PARAM_PASSPHRASE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>passphrase_needs_free</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_max_bandwidth_limit</name> <init>=

<expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SRT_PARAM_BANDWIDTH_OVERHEAD_LIMIT</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>srt_params_t</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{

<expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>,

}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_dst_port</name> <operator>=</operator> <name>SRT_DEFAULT_PORT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name> <init>= <expr><name>psz_dst_addr</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_access</name><operator>-&gt;</operator><name>psz_path</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_dst_addr</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>psz_parser</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><ternary><condition><expr><name>psz_parser</name></expr> ?</condition><then> <expr><name>psz_parser</name></expr> </then><else>: <expr><name>psz_dst_addr</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_parser</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_parser</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dst_port</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>vlc_getaddrinfo</name><argument_list>( <argument><expr><name>psz_dst_addr</name></expr></argument>, <argument><expr><name>i_dst_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>stat</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Cannot resolve [%s]:%d (reason: %s)"</literal></expr></argument>,

<argument><expr><name>psz_dst_addr</name></expr></argument>,

<argument><expr><name>i_dst_port</name></expr></argument>,

<argument><expr><call><name>gai_strerror</name><argument_list>( <argument><expr><name>stat</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name> <operator>!=</operator> <name>SRT_INVALID_SOCK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>srt_epoll_remove_usock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <call><name>srt_socket</name><argument_list>( <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name> <operator>==</operator> <name>SRT_INVALID_SOCK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to open socket."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_dst_addr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_dst_addr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>srt_parse_url</name><argument_list>( <argument><expr><name>url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>latency</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_latency</name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>latency</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>payload_size</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_payload_size</name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>payload_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>.</operator><name>passphrase</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_passphrase</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passphrase_needs_free</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_passphrase</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>params</name><operator>.</operator><name>passphrase</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>srt_setsockopt</name><argument_list>( <argument>p_sys-&gt;sock</argument>, <argument><literal type="number">0</literal></argument>, <argument>SRTO_SNDSYN</argument>,

<argument>&amp;(bool) { false }</argument>, <argument>sizeof( bool )</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>srt_setsockopt</name><argument_list>( <argument>p_sys-&gt;sock</argument>, <argument><literal type="number">0</literal></argument>, <argument>SRTO_RCVSYN</argument>,

<argument>&amp;(bool) { false }</argument>, <argument>sizeof( bool )</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>srt_setsockopt</name><argument_list>( <argument>p_sys-&gt;sock</argument>, <argument><literal type="number">0</literal></argument>, <argument>SRTO_TSBPDMODE</argument>,

<argument>&amp;(int) { <literal type="number">1</literal> }</argument>, <argument>sizeof( int )</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>srt_setsockopt</name><argument_list>( <argument>p_sys-&gt;sock</argument>, <argument><literal type="number">0</literal></argument>, <argument>SRTO_SENDER</argument>,

<argument>&amp;(int) { <literal type="number">1</literal> }</argument>, <argument>sizeof( int )</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>srt_set_socket_option</name><argument_list>( <argument><expr><name>access_obj</name></expr></argument>, <argument><expr><name>SRT_PARAM_LATENCY</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,

<argument><expr><name>SRTO_TSBPDDELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_latency</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i_latency</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_passphrase</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>psz_passphrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_key_length</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>access_obj</name></expr></argument>, <argument><expr><name>SRT_PARAM_KEY_LENGTH</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>srt_set_socket_option</name><argument_list>( <argument><expr><name>access_obj</name></expr></argument>, <argument><expr><name>SRT_PARAM_KEY_LENGTH</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,

<argument><expr><name>SRTO_PBKEYLEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_key_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i_key_length</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_set_socket_option</name><argument_list>( <argument><expr><name>access_obj</name></expr></argument>, <argument><expr><name>SRT_PARAM_PASSPHRASE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,

<argument><expr><name>SRTO_PASSPHRASE</name></expr></argument>, <argument><expr><name>psz_passphrase</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_passphrase</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>srt_set_socket_option</name><argument_list>( <argument><expr><name>access_obj</name></expr></argument>, <argument><expr><name>SRT_PARAM_PAYLOAD_SIZE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,

<argument><expr><name>SRTO_PAYLOADSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_payload_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i_payload_size</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_set_socket_option</name><argument_list>( <argument><expr><name>access_obj</name></expr></argument>, <argument><expr><name>SRT_PARAM_BANDWIDTH_OVERHEAD_LIMIT</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>SRTO_OHEADBW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_max_bandwidth_limit</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i_max_bandwidth_limit</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>srt_setsockopt</name><argument_list>( <argument>p_sys-&gt;sock</argument>, <argument><literal type="number">0</literal></argument>, <argument>SRTO_SENDER</argument>, <argument>&amp;(int) { <literal type="number">1</literal> }</argument>, <argument>sizeof(int)</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>srt_epoll_add_usock</name><argument_list>( <argument>p_sys-&gt;i_poll_id</argument>, <argument>p_sys-&gt;sock</argument>,

<argument>&amp;(int) { SRT_EPOLL_ERR | SRT_EPOLL_OUT }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Schedule SRT connect (dest addresss: %s, port: %d)."</literal></expr></argument>,

<argument><expr><name>psz_dst_addr</name></expr></argument>, <argument><expr><name>i_dst_port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>srt_connect</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>stat</name> <operator>==</operator> <name>SRT_ERROR</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to connect to server (reason: %s)"</literal></expr></argument>,

<argument><expr><call><name>srt_getlasterror_str</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<if_stmt><if>if <condition>(<expr><name>failed</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name> <operator>!=</operator> <name>SRT_INVALID_SOCK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>srt_epoll_remove_usock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_close</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <name>SRT_INVALID_SOCK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>passphrase_needs_free</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_passphrase</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dst_addr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>( <argument><expr><name>res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name>failed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Write</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_chunk_size</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SRT_PARAM_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_poll_timeout</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>SRT_PARAM_POLL_TIMEOUT</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_interrupted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_register</name><argument_list>( <argument><expr><name>srt_wait_interrupted</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_buffer</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_len</name> <operator>+=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><call><name>srt_getsockstate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SRTS_CONNECTED</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>SRTS_BROKEN</name></expr>:</case>

<case>case <expr><name>SRTS_NONEXIST</name></expr>:</case>

<case>case <expr><name>SRTS_CLOSED</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>srt_schedule_reconnect</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to schedule connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>SRTSOCKET</name></type> <name><name>ready</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>readycnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>srt_epoll_wait</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ready</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readycnt</name></expr></argument>,

<argument><expr><name>i_poll_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interrupted</name></name></expr> )</condition>

<block>{<block_content>

<macro><name>srt_epoll_add_usock</name><argument_list>( <argument>p_sys-&gt;i_poll_id</argument>, <argument>p_sys-&gt;sock</argument>,

<argument>&amp;(int) { SRT_EPOLL_ERR | SRT_EPOLL_OUT }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interrupted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_interrupted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_interrupted</name></expr> )</condition>

<block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>(</operator><name>true</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"srt_epoll_wait was interrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>readycnt</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ready</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name>

<operator>&amp;&amp;</operator> <call><name>srt_getsockstate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>SRTS_CONNECTED</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_write</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>i_chunk_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>srt_sendmsg2</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_write</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>SRT_ERROR</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"send error: %s"</literal></expr></argument>, <argument><expr><call><name>srt_getlasterror_str</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_write</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_write</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>b_interrupted</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>vlc_interrupt_unregister</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interrupted</name></name></expr> )</condition>

<block>{<block_content>

<macro><name>srt_epoll_add_usock</name><argument_list>( <argument>p_sys-&gt;i_poll_id</argument>, <argument>p_sys-&gt;sock</argument>,

<argument>&amp;(int) { SRT_EPOLL_ERR | SRT_EPOLL_OUT }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_interrupted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ACCESS_OUT_CONTROLS_PACE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_Create</name> <argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-port"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call>

<operator>||</operator> <call><name>var_Create</name> <argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-port"</literal></expr></argument>, <argument><expr><name>VLC_VAR_INTEGER</name></expr></argument> )</argument_list></call>

<operator>||</operator> <call><name>var_Create</name> <argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"dst-addr"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call>

<operator>||</operator> <call><name>var_Create</name> <argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"src-addr"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Valid network information is required."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>srt_startup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name> <operator>=</operator> <call><name>srt_epoll_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to create poll id for SRT socket (reason: %s)"</literal></expr></argument>,

<argument><expr><call><name>srt_getlasterror_str</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>srt_schedule_reconnect</name><argument_list>( <argument><expr><name>p_access</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_access</name></expr></argument>, <argument><expr><literal type="string">"Failed to schedule connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>=</operator> <name>Write</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_access</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>failed</name>:</label>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>srt_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>srt_epoll_release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>p_access</name> <init>= <expr><operator>(</operator><name>sout_access_out_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_access</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>srt_epoll_remove_usock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_epoll_release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_poll_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"SRT"</literal> )</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"SRT stream output"</literal> )</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_ACO</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SRT_PARAM_CHUNK_SIZE</argument>, <argument>SRT_DEFAULT_CHUNK_SIZE</argument>,

<argument>N_( <literal type="string">"SRT chunk size (bytes)"</literal> )</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SRT_PARAM_POLL_TIMEOUT</argument>, <argument>SRT_DEFAULT_POLL_TIMEOUT</argument>,

<argument>N_( <literal type="string">"Return poll wait after timeout milliseconds (-1 = infinite)"</literal> )</argument>,

<argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SRT_PARAM_LATENCY</argument>, <argument>SRT_DEFAULT_LATENCY</argument>, <argument>N_( <literal type="string">"SRT latency (ms)"</literal> )</argument>,

<argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_password</name><argument_list>( <argument>SRT_PARAM_PASSPHRASE</argument>, <argument><literal type="string">""</literal></argument>, <argument>N_( <literal type="string">"Password for stream encryption"</literal> )</argument>,

<argument>NULL</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SRT_PARAM_PAYLOAD_SIZE</argument>, <argument>SRT_DEFAULT_PAYLOAD_SIZE</argument>,

<argument>N_( <literal type="string">"SRT maximum payload size (bytes)"</literal> )</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SRT_PARAM_BANDWIDTH_OVERHEAD_LIMIT</argument>,

<argument>SRT_DEFAULT_BANDWIDTH_OVERHEAD_LIMIT</argument>,

<argument>N_( <literal type="string">"SRT maximum bandwidth ceiling (bytes)"</literal> )</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SRT_PARAM_KEY_LENGTH</argument>, <argument>SRT_DEFAULT_KEY_LENGTH</argument>, <argument>SRT_KEY_LENGTH_TEXT</argument>,

<argument>SRT_KEY_LENGTH_TEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>srt_key_lengths</argument>, <argument>srt_key_length_names</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout access"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"srt"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
