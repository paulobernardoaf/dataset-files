<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\control\motionlib.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TargetConditionals.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MACOS_UNIMOTION</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MACOS_UNIMOTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unimotion.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"motionlib.h"</cpp:file></cpp:include>

<struct>struct <name>motion_sensors_t</name>

<block>{

<enum>enum <block>{ <decl><name>HDAPS_SENSOR</name></decl>, <decl><name>AMS_SENSOR</name></decl>, <decl><name>APPLESMC_SENSOR</name></decl>,

<decl><name>UNIMOTION_SENSOR</name></decl> }</block> <decl><name>sensor</name></decl>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MACOS_UNIMOTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>enum</name> <name>sms_hardware</name></name></type> <name>unimotion_hw</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>i_calibrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>p_oldx</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sum</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>motion_sensors_t</name> <modifier>*</modifier></type><name>motion_create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>motion_sensors_t</name> <modifier>*</modifier></type><name>motion</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>motion_sensors_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>motion</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>access</name><argument_list>( <argument><expr><literal type="string">"/sys/devices/platform/hdaps/position"</literal></expr></argument>, <argument><expr><name>R_OK</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator> <name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><literal type="string">"/sys/devices/platform/hdaps/calibrate"</literal></expr></argument>, <argument><expr><literal type="string">"re"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>i_calibrate</name></name> <operator>=</operator> <ternary><condition><expr><call><name>fscanf</name><argument_list>( <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"(%d,%d)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>i_x</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>sensor</name></name> <operator>=</operator> <name>HDAPS_SENSOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"HDAPS motion detection correctly loaded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>access</name><argument_list>( <argument><expr><literal type="string">"/sys/devices/ams/x"</literal></expr></argument>, <argument><expr><name>R_OK</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>sensor</name></name> <operator>=</operator> <name>AMS_SENSOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"AMS motion detection correctly loaded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>access</name><argument_list>( <argument><expr><literal type="string">"/sys/devices/platform/applesmc.768/position"</literal></expr></argument>, <argument><expr><name>R_OK</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator> <name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><literal type="string">"/sys/devices/platform/applesmc.768/calibrate"</literal></expr></argument>, <argument><expr><literal type="string">"re"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>i_calibrate</name></name> <operator>=</operator> <ternary><condition><expr><call><name>fscanf</name><argument_list>( <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"(%d,%d)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>i_x</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>sensor</name></name> <operator>=</operator> <name>APPLESMC_SENSOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Apple SMC motion detection correctly loaded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MACOS_UNIMOTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>motion</name><operator>-&gt;</operator><name>unimotion_hw</name></name> <operator>=</operator> <call><name>detect_sms</name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>sensor</name></name> <operator>=</operator> <name>UNIMOTION_SENSOR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"UniMotion motion detection correctly loaded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"No motion sensor available"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>motion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>motion</name><operator>-&gt;</operator><name>p_oldx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>motion</name><operator>-&gt;</operator><name>p_oldx</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>i_sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>motion</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>motion_destroy</name><parameter_list>( <parameter><decl><type><name>motion_sensors_t</name> <modifier>*</modifier></type><name>motion</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>motion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetOrientation</name><parameter_list>( <parameter><decl><type><name>motion_sensors_t</name> <modifier>*</modifier></type><name>motion</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>motion</name><operator>-&gt;</operator><name>sensor</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>HDAPS_SENSOR</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><literal type="string">"/sys/devices/platform/hdaps/position"</literal></expr></argument>, <argument><expr><literal type="string">"re"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>f</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>fscanf</name><argument_list>( <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"(%d,%d)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator> <name>i_x</name> <operator>-</operator> <name><name>motion</name><operator>-&gt;</operator><name>i_calibrate</name></name> <operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>AMS_SENSOR</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><literal type="string">"/sys/devices/ams/x"</literal></expr></argument>, <argument><expr><literal type="string">"re"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>f</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>fscanf</name><argument_list>( <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator> <name>i_x</name> <operator>*</operator> <literal type="number">30</literal></expr>;</return></block_content></block></else></if_stmt> 

<case>case <expr><name>APPLESMC_SENSOR</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><literal type="string">"/sys/devices/platform/applesmc.768/position"</literal></expr></argument>, <argument><expr><literal type="string">"re"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>f</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>fscanf</name><argument_list>( <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"(%d,%d,%d)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator> <name>i_x</name> <operator>-</operator> <name><name>motion</name><operator>-&gt;</operator><name>i_calibrate</name></name> <operator>)</operator> <operator>*</operator> <literal type="number">10</literal></expr>;</return></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MACOS_UNIMOTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>UNIMOTION_SENSOR</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>read_sms_raw</name><argument_list>( <argument><expr><name><name>motion</name><operator>-&gt;</operator><name>unimotion_hw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_z</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d_norm</name> <init>= <expr><call><name>sqrt</name><argument_list>( <argument><expr><name>i_x</name><operator>*</operator><name>i_x</name><operator>+</operator><name>i_z</name><operator>*</operator><name>i_z</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>d_norm</name> <operator>&lt;</operator> <literal type="number">100</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d_x</name> <init>= <expr><name>i_x</name> <operator>/</operator> <name>d_norm</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_z</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><call><name>asin</name><argument_list>(<argument><expr><name>d_x</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">3600</literal><operator>/</operator><literal type="number">3.141</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">3600</literal> <operator>+</operator> <call><name>asin</name><argument_list>(<argument><expr><name>d_x</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">3600</literal><operator>/</operator><literal type="number">3.141</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>motion_get_angle</name><parameter_list>( <parameter><decl><type><name>motion_sensors_t</name> <modifier>*</modifier></type><name>motion</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter_length</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name><name>motion</name><operator>-&gt;</operator><name>p_oldx</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name> <init>= <expr><call><name>GetOrientation</name><argument_list>( <argument><expr><name>motion</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>i_sum</name></name> <operator>+=</operator> <name>i_x</name> <operator>-</operator> <name><name>motion</name><operator>-&gt;</operator><name>p_oldx</name><index>[<expr><name><name>motion</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>p_oldx</name><index>[<expr><name><name>motion</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>=</operator> <name>i_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>motion</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>(</operator> <name><name>motion</name><operator>-&gt;</operator><name>i</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>%</operator> <name>filter_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_x</name> <operator>=</operator> <name><name>motion</name><operator>-&gt;</operator><name>i_sum</name></name> <operator>/</operator> <name>filter_length</name></expr>;</expr_stmt>

<return>return <expr><name>i_x</name></expr>;</return>

</block_content>}</block></function>

</unit>
