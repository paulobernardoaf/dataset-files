<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\control\dbus\dbus_tracklist.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_tracklist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_common.h"</cpp:file></cpp:include>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>AddTrack</argument> )</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_aftertrack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_play</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_append</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_append_len</name> <init>= <expr><sizeof>sizeof<argument_list>( <argument><expr><name>DBUS_MPRIS_APPEND</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_notrack_len</name> <init>= <expr><sizeof>sizeof<argument_list>( <argument><expr><name>DBUS_MPRIS_NOTRACK</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_mrl</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_OBJECT_PATH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_aftertrack</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_play</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>DBUS_MPRIS_APPEND</name></expr></argument>, <argument><expr><name>psz_aftertrack</name></expr></argument>, <argument><expr><name>i_append_len</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_append</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>DBUS_MPRIS_NOTRACK</name></expr></argument>, <argument><expr><name>psz_aftertrack</name></expr></argument>, <argument><expr><name>i_notrack_len</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_aftertrack</name></expr></argument>, <argument><expr><name>MPRIS_TRACKID_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>,

<argument><expr><literal type="string">"AfterTrack: Invalid track ID \"%s\", appending instead"</literal></expr></argument>,

<argument><expr><name>psz_aftertrack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_append</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>input_item_New</name><argument_list>( <argument><expr><name>psz_mrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b_append</name> <operator>||</operator> <name>i_pos</name> <operator>&gt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_InsertOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_play</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_PlayAt</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>GetTracksMetadata</argument> )</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_track_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_track_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>in_args</name></decl>, <decl><type ref="prev"/><name>track_ids</name></decl>, <decl><type ref="prev"/><name>meta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_init</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>DBUS_TYPE_ARRAY</name> <operator>!=</operator> <call><name>dbus_message_iter_get_arg_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Invalid arguments"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>track_ids</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"a{sv}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>DBUS_TYPE_OBJECT_PATH</name> <operator>==</operator>

<call><name>dbus_message_iter_get_arg_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>track_ids</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>track_ids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_track_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">1</literal> <operator>!=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>psz_track_id</name></expr></argument>, <argument><expr><name>MPRIS_TRACKID_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_track_id</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid_track_id</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>id_valid</name> <init>= <expr><name>i_track_id</name> <operator>&lt;</operator> <call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id_valid</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_playlist_Get</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i_track_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetInputMeta</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id_valid</name></expr>)</condition>

<block>{<block_content>

<label><name>invalid_track_id</name>:</label>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Invalid track id: %s"</literal></expr></argument>,

<argument><expr><name>psz_track_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>track_ids</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>GoTo</argument> )</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_track_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_track_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_OBJECT_PATH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_track_id</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">1</literal> <operator>!=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>psz_track_id</name></expr></argument>, <argument><expr><name>MPRIS_TRACKID_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_track_id</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid_track_id</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>id_valid</name> <init>= <expr><name>i_track_id</name> <operator>&lt;</operator> <call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id_valid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_PlayAt</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i_track_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id_valid</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid_track_id</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>

<label><name>invalid_track_id</name>:</label>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Invalid track id %s"</literal></expr></argument>, <argument><expr><name>psz_track_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>RemoveTrack</argument> )</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_OBJECT_PATH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_id</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">1</literal> <operator>!=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>psz_id</name></expr></argument>, <argument><expr><name>MPRIS_TRACKID_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_id</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid_track_id</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>PL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>valid_id</name> <init>= <expr><name>i_id</name> <operator>&lt;</operator> <call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>valid_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_RemoveOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid_id</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid_track_id</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>

<label><name>invalid_track_id</name>:</label>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Invalid track id: %s"</literal></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalTracks</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_track_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"o"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tracks</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pl_size</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pl_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_track_id</name></expr></argument>, <argument><expr><name>MPRIS_TRACKID_FORMAT</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>

<operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tracks</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_OBJECT_PATH</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_track_id</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dbus_message_iter_abandon_container</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tracks</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_track_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tracks</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalCanEditTracks</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dbus_bool_t</name></type> <name>b_ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_ret</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_MAPPING_BEGIN</name></cpp:macro> <cpp:value>if( 0 ) {}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_GET_FUNC</name><parameter_list>( <parameter><type><name>prop</name></type></parameter>, <parameter><type><name>signature</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>else if( !strcmp( psz_property_name, #prop ) ) { if( !dbus_message_iter_open_container( &amp;args, DBUS_TYPE_VARIANT, signature, &amp;v ) ) return DBUS_HANDLER_RESULT_NEED_MEMORY; if( VLC_SUCCESS != Marshal##prop( p_this, &amp;v ) ) { dbus_message_iter_abandon_container( &amp;args, &amp;v ); return DBUS_HANDLER_RESULT_NEED_MEMORY; } if( !dbus_message_iter_close_container( &amp;args, &amp;v ) ) return DBUS_HANDLER_RESULT_NEED_MEMORY; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_SET_FUNC</name><parameter_list>( <parameter><type><name>prop</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>else if( !strcmp( psz_property_name, #prop ) ) { return prop##Set( p_conn, p_from, p_this ); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_MAPPING_END</name></cpp:macro> <cpp:value>else { return DBUS_HANDLER_RESULT_NOT_YET_HANDLED; }</cpp:value></cpp:define>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>GetProperty</argument> )</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_interface_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_property_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_property_name</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Getting property %s"</literal></expr></argument>,

<argument><expr><name>psz_property_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_interface_name</name></expr></argument>, <argument><expr><name>DBUS_MPRIS_TRACKLIST_INTERFACE</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROPERTY_MAPPING_BEGIN</name></type>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>Tracks</name></expr></argument>, <argument><expr><literal type="string">"ao"</literal></expr></argument> )</argument_list>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanEditTracks</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>

<name>PROPERTY_MAPPING_END</name>

<name>REPLY_SEND</name></decl>;</decl_stmt>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_MAPPING_BEGIN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_GET_FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_SET_FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_MAPPING_END</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_PROPERTY</name><parameter_list>( <parameter><type><name>prop</name></type></parameter>, <parameter><type><name>signature</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( VLC_SUCCESS != AddProperty( (intf_thread_t*) p_this, &amp;dict, #prop, signature, Marshal##prop ) ) { dbus_message_iter_abandon_container( &amp;args, &amp;dict ); return VLC_ENOMEM; }</cpp:value></cpp:define>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>GetAllProperties</argument> )</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>psz_interface_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"{sv}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>ADD_PROPERTY</name> <argument_list>( <argument>Tracks</argument>, <argument><literal type="string">"ao"</literal></argument> )</argument_list></macro>

<macro><name>ADD_PROPERTY</name> <argument_list>( <argument>CanEditTracks</argument>, <argument><literal type="string">"b"</literal></argument> )</argument_list></macro>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_PROPERTY</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_FUNC</name><parameter_list>( <parameter><type><name>interface</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><name>function</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>else if( dbus_message_is_method_call( p_from, interface, method ) )return function( p_conn, p_from, p_this )</cpp:value></cpp:define>

<function><type><name>DBusHandlerResult</name></type>

<name>handle_tracklist</name> <parameter_list>( <parameter><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name></decl></parameter>, <parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>p_from</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>, <argument><expr><literal type="string">"Get"</literal></expr></argument>, <argument><expr><name>GetProperty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>, <argument><expr><literal type="string">"GetAll"</literal></expr></argument>, <argument><expr><name>GetAllProperties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_TRACKLIST_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"GoTo"</literal></expr></argument>, <argument><expr><name>GoTo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_TRACKLIST_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"AddTrack"</literal></expr></argument>, <argument><expr><name>AddTrack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_TRACKLIST_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"RemoveTrack"</literal></expr></argument>, <argument><expr><name>RemoveTrack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_TRACKLIST_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"GetTracksMetadata"</literal></expr></argument>,

<argument><expr><name>GetTracksMetadata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>METHOD_FUNC</name></cpp:undef>

<function><type><specifier>static</specifier> <name>DBusHandlerResult</name></type>

<name>PropertiesChangedSignal</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,

<parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_changed_properties</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>changed_properties</name></decl>, <decl><type ref="prev"/><name>invalidated_properties</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_interface_name</name> <init>= <expr><name>DBUS_MPRIS_TRACKLIST_INTERFACE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SIGNAL_INIT</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>,

<argument><expr><name>DBUS_MPRIS_OBJECT_PATH</name></expr></argument>,

<argument><expr><literal type="string">"PropertiesChanged"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_STRING</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"{sv}"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>changed_properties</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>changed_properties</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>invalidated_properties</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_dictionary_has_key</name><argument_list>( <argument><expr><name>p_changed_properties</name></expr></argument>, <argument><expr><literal type="string">"Tracks"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<macro><name>dbus_message_iter_append_basic</name><argument_list>( <argument>&amp;invalidated_properties</argument>,

<argument>DBUS_TYPE_STRING</argument>,

<argument>&amp;(char const*){ <literal type="string">"Tracks"</literal> }</argument> )</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>invalidated_properties</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>SIGNAL_SEND</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>TrackListPropertiesChangedEmit</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type> <name>p_intf</name></decl></parameter>,

<parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type> <name>p_changed_properties</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PropertiesChangedSignal</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>p_changed_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
