<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\control\dbus\dbus_root.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_root.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ppsz_supported_uri_schemes</name><index>[]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"file"</literal></expr>, <expr><literal type="string">"http"</literal></expr>, <expr><literal type="string">"https"</literal></expr>, <expr><literal type="string">"rtsp"</literal></expr>, <expr><literal type="string">"ftp"</literal></expr>, <expr><literal type="string">"mtp"</literal></expr>, <expr><literal type="string">"smb"</literal></expr>,

<expr><literal type="string">"mms"</literal></expr>, <expr><literal type="string">"mmsu"</literal></expr>, <expr><literal type="string">"mmst"</literal></expr>, <expr><literal type="string">"mmsh"</literal></expr>, <expr><literal type="string">"unsv"</literal></expr>, <expr><literal type="string">"itpc"</literal></expr>, <expr><literal type="string">"icyx"</literal></expr>, <expr><literal type="string">"rtmp"</literal></expr>, <expr><literal type="string">"rtp"</literal></expr>,

<expr><literal type="string">"dccp"</literal></expr>, <expr><literal type="string">"dvd"</literal></expr>, <expr><literal type="string">"vcd"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ppsz_supported_mime_types</name><index>[]</index><index>[<expr><literal type="number">26</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"audio/mpeg"</literal></expr>, <expr><literal type="string">"audio/x-mpeg"</literal></expr>,

<expr><literal type="string">"video/mpeg"</literal></expr>, <expr><literal type="string">"video/x-mpeg"</literal></expr>,

<expr><literal type="string">"video/mpeg-system"</literal></expr>, <expr><literal type="string">"video/x-mpeg-system"</literal></expr>,

<expr><literal type="string">"video/mp4"</literal></expr>,

<expr><literal type="string">"audio/mp4"</literal></expr>,

<expr><literal type="string">"video/x-msvideo"</literal></expr>,

<expr><literal type="string">"video/quicktime"</literal></expr>,

<expr><literal type="string">"application/ogg"</literal></expr>, <expr><literal type="string">"application/x-ogg"</literal></expr>,

<expr><literal type="string">"video/x-ms-asf"</literal></expr>, <expr><literal type="string">"video/x-ms-asf-plugin"</literal></expr>,

<expr><literal type="string">"application/x-mplayer2"</literal></expr>,

<expr><literal type="string">"video/x-ms-wmv"</literal></expr>,

<expr><literal type="string">"video/x-google-vlc-plugin"</literal></expr>,

<expr><literal type="string">"audio/wav"</literal></expr>, <expr><literal type="string">"audio/x-wav"</literal></expr>,

<expr><literal type="string">"audio/3gpp"</literal></expr>,

<expr><literal type="string">"video/3gpp"</literal></expr>,

<expr><literal type="string">"audio/3gpp2"</literal></expr>,

<expr><literal type="string">"video/3gpp2"</literal></expr>,

<expr><literal type="string">"video/divx"</literal></expr>,

<expr><literal type="string">"video/flv"</literal></expr>, <expr><literal type="string">"video/x-flv"</literal></expr>,

<expr><literal type="string">"video/x-matroska"</literal></expr>,

<expr><literal type="string">"audio/x-matroska"</literal></expr>,

<expr><literal type="string">"application/xspf+xml"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalIdentity</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC media player"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_id</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalCanSetFullscreen</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_ret</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalFullscreen</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_fullscreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b_fullscreen</name> <operator>=</operator> <call><name>vlc_player_vout_IsFullscreen</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_fullscreen</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>FullscreenSet</argument> )</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dbus_bool_t</name></type> <name>b_fullscreen</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator> <call><name>DemarshalSetPropertyValue</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_fullscreen</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>PL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_vout_SetFullscreen</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>b_fullscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalCanQuit</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dbus_bool_t</name></type> <name>b_ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_ret</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalCanRaise</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dbus_bool_t</name></type> <name>b_ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_ret</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalHasTrackList</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dbus_bool_t</name></type> <name>b_ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_ret</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalDesktopEntry</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_ret</name> <init>= <expr><name>PACKAGE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_ret</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalSupportedMimeTypes</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><sizeof>sizeof<argument_list>( <argument><expr><name>ppsz_supported_mime_types</name></expr></argument> )</argument_list></sizeof> <operator>/</operator>

<sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>ppsz_supported_mime_types</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><name>container</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>psz_mime_type</name> <init>= <expr><name><name>ppsz_supported_mime_types</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_mime_type</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MarshalSupportedUriSchemes</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><sizeof>sizeof<argument_list>( <argument><expr><name>ppsz_supported_uri_schemes</name></expr></argument> )</argument_list></sizeof> <operator>/</operator>

<sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>ppsz_supported_uri_schemes</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><name>container</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>psz_scheme</name> <init>= <expr><name><name>ppsz_supported_uri_schemes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_scheme</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><name>container</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>Quit</argument> )</argument_list></macro>

<block>{<block_content> 

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libvlc_Quit</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>INTF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>Raise</argument> )</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>INTF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"intf-show"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_MAPPING_BEGIN</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_GET_FUNC</name><parameter_list>( <parameter><type><name>prop</name></type></parameter>, <parameter><type><name>signature</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( !strcmp( psz_property_name, #prop ) ) { if( !dbus_message_iter_open_container( &amp;args, DBUS_TYPE_VARIANT, signature, &amp;v ) ) return DBUS_HANDLER_RESULT_NEED_MEMORY; if( VLC_SUCCESS != Marshal##prop( p_this, &amp;v ) ) { dbus_message_iter_abandon_container( &amp;args, &amp;v ); return DBUS_HANDLER_RESULT_NEED_MEMORY; } if( !dbus_message_iter_close_container( &amp;args, &amp;v ) ) return DBUS_HANDLER_RESULT_NEED_MEMORY; } else</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_SET_FUNC</name><parameter_list>( <parameter><type><name>prop</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( !strcmp( psz_property_name, #prop ) ) return prop##Set( p_conn, p_from, p_this ); else</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_MAPPING_END</name></cpp:macro> <cpp:value>return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;</cpp:value></cpp:define>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>GetProperty</argument> )</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_interface_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_property_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_property_name</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Getting property %s"</literal></expr></argument>,

<argument><expr><name>psz_property_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_interface_name</name></expr></argument>, <argument><expr><name>DBUS_MPRIS_ROOT_INTERFACE</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROPERTY_MAPPING_BEGIN</name></type>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>Identity</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanSetFullscreen</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>Fullscreen</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanQuit</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>CanRaise</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>HasTrackList</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>DesktopEntry</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>SupportedMimeTypes</name></expr></argument>, <argument><expr><literal type="string">"as"</literal></expr></argument> )</argument_list>

<name>PROPERTY_GET_FUNC</name><argument_list>( <argument><expr><name>SupportedUriSchemes</name></expr></argument>, <argument><expr><literal type="string">"as"</literal></expr></argument> )</argument_list>

<name>PROPERTY_MAPPING_END</name>

<name>REPLY_SEND</name></decl>;</decl_stmt>

</block_content>}</block>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>SetProperty</argument> )</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_interface_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_property_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_property_name</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>PROPERTY_MAPPING_BEGIN</name></type>

<name>PROPERTY_SET_FUNC</name><argument_list>( <argument><expr><name>Fullscreen</name></expr></argument> )</argument_list>

<name>PROPERTY_MAPPING_END</name></decl></decl_stmt>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_MAPPING_BEGIN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_GET_FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_SET_FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROPERTY_MAPPING_END</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_PROPERTY</name><parameter_list>( <parameter><type><name>prop</name></type></parameter>, <parameter><type><name>signature</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( VLC_SUCCESS != AddProperty( (intf_thread_t*) p_this, &amp;dict, #prop, signature, Marshal##prop ) ) { dbus_message_iter_abandon_container( &amp;args, &amp;dict ); return VLC_ENOMEM; }</cpp:value></cpp:define>

<macro><name>DBUS_METHOD</name><argument_list>( <argument>GetAllProperties</argument> )</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>REPLY_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>psz_interface_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus message reading : %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"{sv}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name><argument_list>( <argument><expr><name>Identity</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name><argument_list>( <argument><expr><name>DesktopEntry</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name><argument_list>( <argument><expr><name>SupportedMimeTypes</name></expr></argument>, <argument><expr><literal type="string">"as"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name><argument_list>( <argument><expr><name>SupportedUriSchemes</name></expr></argument>, <argument><expr><literal type="string">"as"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name><argument_list>( <argument><expr><name>HasTrackList</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name><argument_list>( <argument><expr><name>CanQuit</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name><argument_list>( <argument><expr><name>CanSetFullscreen</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name><argument_list>( <argument><expr><name>Fullscreen</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_PROPERTY</name><argument_list>( <argument><expr><name>CanRaise</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>REPLY_SEND</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_PROPERTY</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_MAPPING_BEGIN</name></cpp:macro> <cpp:value>if( 0 ) {}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_FUNC</name><parameter_list>( <parameter><type><name>interface</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><name>function</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>else if( dbus_message_is_method_call( p_from, interface, method ) )return function( p_conn, p_from, p_this )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_MAPPING_END</name></cpp:macro> <cpp:value>return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;</cpp:value></cpp:define>

<function><type><name>DBusHandlerResult</name></type>

<name>handle_root</name> <parameter_list>( <parameter><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name></decl></parameter>, <parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>p_from</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>METHOD_MAPPING_BEGIN</name></type>

<name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>, <argument><expr><literal type="string">"Get"</literal></expr></argument>, <argument><expr><name>GetProperty</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>, <argument><expr><literal type="string">"Set"</literal></expr></argument>, <argument><expr><name>SetProperty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>, <argument><expr><literal type="string">"GetAll"</literal></expr></argument>, <argument><expr><name>GetAllProperties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_ROOT_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"Quit"</literal></expr></argument>, <argument><expr><name>Quit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>METHOD_FUNC</name><argument_list>( <argument><expr><name>DBUS_MPRIS_ROOT_INTERFACE</name></expr></argument>, <argument><expr><literal type="string">"Raise"</literal></expr></argument>, <argument><expr><name>Raise</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>METHOD_MAPPING_END</name></expr></expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>METHOD_MAPPING_BEGIN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>METHOD_FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>METHOD_MAPPING_END</name></cpp:undef>

<function><type><specifier>static</specifier> <name>DBusHandlerResult</name></type>

<name>PropertiesChangedSignal</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,

<parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_changed_properties</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>changed_properties</name></decl>, <decl><type ref="prev"/><name>invalidated_properties</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_interface_name</name> <init>= <expr><name>DBUS_MPRIS_ROOT_INTERFACE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SIGNAL_INIT</name><argument_list>( <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument>,

<argument><expr><name>DBUS_MPRIS_OBJECT_PATH</name></expr></argument>,

<argument><expr><literal type="string">"PropertiesChanged"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>OUT_ARGUMENTS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_STRING</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_interface_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"{sv}"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>changed_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_dictionary_has_key</name><argument_list>( <argument><expr><name>p_changed_properties</name></expr></argument>, <argument><expr><literal type="string">"Fullscreen"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>AddProperty</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>changed_properties</name></expr></argument>, <argument><expr><literal type="string">"Fullscreen"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>,

<argument><expr><name>MarshalFullscreen</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dbus_message_iter_abandon_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>changed_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>changed_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>invalidated_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>invalidated_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DBUS_HANDLER_RESULT_NEED_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>SIGNAL_SEND</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>RootPropertiesChangedEmit</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,

<parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_changed_properties</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PropertiesChangedSignal</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>p_changed_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
