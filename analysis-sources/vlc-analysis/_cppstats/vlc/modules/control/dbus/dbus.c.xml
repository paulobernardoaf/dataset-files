<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\control\dbus\dbus.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbus/dbus.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_root.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_player.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_tracklist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbus_introspect.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tick.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBUS_MPRIS_BUS_NAME</name></cpp:macro> <cpp:value>"org.mpris.MediaPlayer2.vlc"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBUS_INSTANCE_ID_PREFIX</name></cpp:macro> <cpp:value>"instance"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEEK_THRESHOLD</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENTS_DELAY</name></cpp:macro> <cpp:value>INT64_C(100000)</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>DBusHandlerResult</name></type>

<name>MPRISEntryPoint</name> <parameter_list>( <parameter><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name></decl></parameter>, <parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>p_from</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DBusObjectPathVTable</name></type> <name>dbus_mpris_vtable</name> <init>= <expr><block>{

<expr><name>NULL</name></expr>, <expr><name>MPRISEntryPoint</name></expr>, 

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>signal</name></decl>;</decl_stmt>

}</block></struct></type> <name>callback_info_t</name>;</typedef>

<enum>enum

<block>{

<decl><name>PIPE_OUT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PIPE_IN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name> <parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TrackChange</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>dbus_bool_t</name></type> <name>add_timeout</name><parameter_list>(<parameter><decl><type><name>DBusTimeout</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>remove_timeout</name><parameter_list>(<parameter><decl><type><name>DBusTimeout</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>toggle_timeout</name><parameter_list>(<parameter><decl><type><name>DBusTimeout</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>dbus_bool_t</name></type> <name>add_watch</name> <parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>remove_watch</name> <parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>watch_toggled</name> <parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>wakeup_main_loop</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ProcessEvents</name> <parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,

<parameter><decl><type><name>callback_info_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_events</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_events</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ProcessWatches</name> <parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,

<parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_watches</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_watches</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>p_fds</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_fds</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DispatchDBusMessages</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>playlist_on_items_added</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier><specifier>const</specifier> []</type></decl></parameter>,

<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>playlist_on_items_removed</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>playlist_on_playback_repeat_changed</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>playlist_on_playback_order_changed</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>playlist_on_current_index_changed</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>ssize_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>player_on_state_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>player_on_error_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_error</name></name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>player_on_rate_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>player_on_capabilities_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>player_on_position_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>player_on_media_meta_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>player_aout_on_volume_changed</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>player_aout_on_mute_changed</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>player_vout_on_fullscreen_changed</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"DBus"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INTERFACE</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"D-Bus control interface"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_threads_init_default</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>intf_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_player_caps</name></name> <operator>=</operator> <name>PLAYER_CAPS_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_playing_state</name></name> <operator>=</operator> <name>PLAYBACK_STATE_INVALID</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_pipe</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pipe_fds</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Could not create pipe"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_conn</name> <operator>=</operator> <call><name>dbus_bus_get_private</name><argument_list>( <argument><expr><name>DBUS_BUS_SESSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_conn</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Failed to connect to the D-Bus session daemon: %s"</literal></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>dbus_connection_failure</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_connection_set_exit_on_disconnect</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_connection_register_object_path</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>DBUS_MPRIS_OBJECT_PATH</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dbus_mpris_vtable</name></expr></argument>, <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>bus_flags</name> <init>= <expr><name>DBUS_NAME_FLAG_DO_NOT_QUEUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"dbus-mpris-name"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_bus_request_name</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>DBUS_MPRIS_BUS_NAME</name></expr></argument>, <argument><expr><name>bus_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>unique_service</name><index>[<expr><sizeof>sizeof<argument_list>( <argument><expr><name>DBUS_MPRIS_BUS_NAME</name></expr></argument> )</argument_list></sizeof> <operator>+</operator>

<sizeof>sizeof<argument_list>( <argument><expr><name>DBUS_INSTANCE_ID_PREFIX</name></expr></argument> )</argument_list></sizeof> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>unique_service</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>unique_service</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>DBUS_MPRIS_BUS_NAME</name><literal type="string">"."</literal><name>DBUS_INSTANCE_ID_PREFIX</name><literal type="string">"%"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_bus_request_name</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>unique_service</name></expr></argument>, <argument><expr><name>bus_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call>

<operator>==</operator> <name>DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"listening on dbus as: %s"</literal></expr></argument>, <argument><expr><name>unique_service</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"dbus-mpris-name"</literal></expr></argument>, <argument><expr><name>unique_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"listening on dbus as: %s"</literal></expr></argument>, <argument><expr><name>DBUS_MPRIS_BUS_NAME</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"dbus-mpris-name"</literal></expr></argument>, <argument><expr><name>DBUS_MPRIS_BUS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dbus_connection_flush</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name> <operator>=</operator> <name>p_conn</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>timeouts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name> <operator>=</operator> <name>playlist</name> <operator>=</operator> <call><name>vlc_intf_GetMainPlaylist</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_playlist_callbacks</name></name> <specifier>const</specifier></type> <name>playlist_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>on_items_added</name> <operator>=</operator> <name>playlist_on_items_added</name></expr>,

<expr><operator>.</operator><name>on_items_removed</name> <operator>=</operator> <name>playlist_on_items_removed</name></expr>,

<expr><operator>.</operator><name>on_playback_repeat_changed</name> <operator>=</operator> <name>playlist_on_playback_repeat_changed</name></expr>,

<expr><operator>.</operator><name>on_playback_order_changed</name> <operator>=</operator> <name>playlist_on_playback_order_changed</name></expr>,

<expr><operator>.</operator><name>on_current_index_changed</name> <operator>=</operator> <name>playlist_on_current_index_changed</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist_listener</name></name> <operator>=</operator>

<call><name>vlc_playlist_AddListener</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>playlist_cbs</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>playlist_listener_failure</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name> <specifier>const</specifier></type> <name>player_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>on_state_changed</name> <operator>=</operator> <name>player_on_state_changed</name></expr>,

<expr><operator>.</operator><name>on_error_changed</name> <operator>=</operator> <name>player_on_error_changed</name></expr>,

<expr><operator>.</operator><name>on_rate_changed</name> <operator>=</operator> <name>player_on_rate_changed</name></expr>,

<expr><operator>.</operator><name>on_capabilities_changed</name> <operator>=</operator> <name>player_on_capabilities_changed</name></expr>,

<expr><operator>.</operator><name>on_position_changed</name> <operator>=</operator> <name>player_on_position_changed</name></expr>,

<expr><operator>.</operator><name>on_media_meta_changed</name> <operator>=</operator> <name>player_on_media_meta_changed</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name> <operator>=</operator>

<call><name>vlc_player_AddListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player_cbs</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>player_listener_failure</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_player_aout_cbs</name></name> <specifier>const</specifier></type> <name>player_aout_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>on_volume_changed</name> <operator>=</operator> <name>player_aout_on_volume_changed</name></expr>,

<expr><operator>.</operator><name>on_mute_changed</name> <operator>=</operator> <name>player_aout_on_mute_changed</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_aout_listener</name></name> <operator>=</operator>

<call><name>vlc_player_aout_AddListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player_aout_cbs</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>player_aout_listener</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>player_aout_listener_failure</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_player_vout_cbs</name></name> <specifier>const</specifier></type> <name>player_vout_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>on_fullscreen_changed</name> <operator>=</operator> <name>player_vout_on_fullscreen_changed</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_vout_listener</name></name> <operator>=</operator>

<call><name>vlc_player_vout_AddListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player_vout_cbs</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>player_vout_listener</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>player_vout_listener_failure</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_connection_set_timeout_functions</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>,

<argument><expr><name>add_timeout</name></expr></argument>,

<argument><expr><name>remove_timeout</name></expr></argument>,

<argument><expr><name>toggle_timeout</name></expr></argument>,

<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>late_failure</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_connection_set_watch_functions</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>,

<argument><expr><name>add_watch</name></expr></argument>,

<argument><expr><name>remove_watch</name></expr></argument>,

<argument><expr><name>watch_toggled</name></expr></argument>,

<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>late_failure</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Run</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>late_failure</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>late_failure</name>:</label>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>player_vout_listener_failure</name>:</label>

<expr_stmt><expr><call><name>vlc_player_vout_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_vout_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>player_aout_listener_failure</name>:</label>

<expr_stmt><expr><call><name>vlc_player_aout_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_aout_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>player_listener_failure</name>:</label>

<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>playlist_listener_failure</name>:</label>

<expr_stmt><expr><call><name>vlc_playlist_RemoveListener</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><literal type="string">"dbus-mpris-name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_connection_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_connection_unref</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>dbus_connection_failure</name>:</label>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pipe_fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pipe_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_vout_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_vout_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_aout_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_aout_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_RemoveListener</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_connection_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_connection_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>callback_info_t</name><modifier>*</modifier></type> <name>info</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>timeouts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pipe_fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_pipe_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dbus_bool_t</name></type> <name>add_timeout</name><parameter_list>(<parameter><decl><type><name>DBusTimeout</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>expiry</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>expiry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>expiry</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_timeout_set_data</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>expiry</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>timeouts</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_timeout</name><parameter_list>(<parameter><decl><type><name>DBusTimeout</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>vlc_array_index_of_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>timeouts</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>timeouts</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>toggle_timeout</name><parameter_list>(<parameter><decl><type><name>DBusTimeout</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>expiry</name> <init>= <expr><call><name>dbus_timeout_get_data</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dbus_timeout_get_enabled</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>expiry</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>dbus_timeout_get_interval</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wakeup_main_loop</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>next_timeout</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>next_timeout</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>timeouts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusTimeout</name> <modifier>*</modifier></type><name>to</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>timeouts</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_timeout_get_enabled</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>expiry</name> <init>= <expr><call><name>dbus_timeout_get_data</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next_timeout</name> <operator>&gt;</operator> <operator>*</operator><name>expiry</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_timeout</name> <operator>=</operator> <operator>*</operator><name>expiry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>next_timeout</name> <operator>&gt;=</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_timeout</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_timeout</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>next_timeout</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_timeouts</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>timeouts</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusTimeout</name> <modifier>*</modifier></type><name>to</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>timeouts</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_timeout_get_enabled</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>expiry</name> <init>= <expr><call><name>dbus_timeout_get_data</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>expiry</name> <operator>&gt;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>expiry</name> <operator>+=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>dbus_timeout_get_interval</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_timeout_handle</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dbus_bool_t</name></type> <name>add_watch</name><parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>intf_sys_t</name><operator>*</operator><operator>)</operator> <name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument>, <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_watch</name><parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>intf_sys_t</name><operator>*</operator><operator>)</operator> <name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>vlc_array_index_of_item</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument>, <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>watch_toggled</name><parameter_list>( <parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_watch_get_enabled</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wakeup_main_loop</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetPollFds</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>p_fds</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_watches</name> <init>= <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fds</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_pipe_fds</name><index>[<expr><name>PIPE_OUT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLPRI</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_watches</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_watch</name> <operator>=</operator> <call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_watch_get_enabled</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_fds</name><index>[<expr><name>i_fds</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>dbus_watch_get_unix_fd</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_flags</name> <init>= <expr><call><name>dbus_watch_get_flags</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>&amp;</operator> <name>DBUS_WATCH_READABLE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fds</name><index>[<expr><name>i_fds</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLPRI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>&amp;</operator> <name>DBUS_WATCH_WRITABLE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fds</name><index>[<expr><name>i_fds</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_fds</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_fds</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ProcessEvents</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,

<parameter><decl><type><name>callback_info_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_events</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_events</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_can_play</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_can_play</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>player_properties</name></decl>, <decl><type ref="prev"/><name>tracklist_properties</name></decl>, <decl><type ref="prev"/><name>root_properties</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tracklist_properties</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>root_properties</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_events</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_events</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>signal</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SIGNAL_ITEM_CURRENT</name></expr>:</case>

<expr_stmt><expr><call><name>TrackChange</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_dictionary_has_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"Rate"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"Rate"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"Metadata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGNAL_PLAYLIST_ITEM_APPEND</name></expr>:</case>

<case>case <expr><name>SIGNAL_PLAYLIST_ITEM_DELETED</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_can_play</name> <operator>=</operator> <call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_can_play</name> <operator>!=</operator> <name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_can_play</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_can_play</name></name> <operator>=</operator> <name>b_can_play</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"CanPlay"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_dictionary_has_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tracklist_properties</name></expr></argument>, <argument><expr><literal type="string">"Tracks"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tracklist_properties</name></expr></argument>, <argument><expr><literal type="string">"Tracks"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SIGNAL_VOLUME_MUTED</name></expr>:</case>

<case>case <expr><name>SIGNAL_VOLUME_CHANGE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"Volume"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGNAL_RANDOM</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"Shuffle"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGNAL_FULLSCREEN</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>root_properties</name></expr></argument>, <argument><expr><literal type="string">"Fullscreen"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGNAL_REPEAT</name></expr>:</case>

<case>case <expr><name>SIGNAL_LOOP</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"LoopStatus"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGNAL_STATE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"PlaybackStatus"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGNAL_RATE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"Rate"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGNAL_INPUT_METADATA</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>=

<expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_item</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>,

<argument><expr><literal type="string">"Metadata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SIGNAL_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"CanSeek"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGNAL_CAN_PAUSE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><literal type="string">"CanPause"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGNAL_SEEK</name></expr>:</case>

<expr_stmt><expr><call><name>SeekedEmit</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_dictionary_is_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PlayerPropertiesChangedEmit</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_dictionary_is_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tracklist_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TrackListPropertiesChangedEmit</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tracklist_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_dictionary_is_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>root_properties</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RootPropertiesChangedEmit</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root_properties</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>player_properties</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tracklist_properties</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>root_properties</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ProcessWatches</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,

<parameter><decl><type><name>DBusWatch</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_watches</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_watches</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>p_fds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_fds</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_watches</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name>p_watch</name> <init>= <expr><name><name>p_watches</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_watch_get_enabled</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_fds</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fds</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>!=</operator> <call><name>dbus_watch_get_unix_fd</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_revents</name> <init>= <expr><name><name>p_fds</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>revents</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>DBUS_WATCH_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_revents</name> <operator>&amp;</operator> <name>POLLOUT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>DBUS_WATCH_WRITABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_revents</name> <operator>&amp;</operator> <name>POLLERR</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>DBUS_WATCH_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_revents</name> <operator>&amp;</operator> <name>POLLHUP</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name>DBUS_WATCH_HANGUP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dbus_watch_handle</name><argument_list>( <argument><expr><name>p_watch</name></expr></argument>, <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DispatchDBusMessages</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusDispatchStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dbus_connection_get_dispatch_status</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>status</name> <operator>!=</operator> <name>DBUS_DISPATCH_COMPLETE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dbus_connection_dispatch</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dbus_connection_get_dispatch_status</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><call><name>dbus_connection_has_messages_to_send</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dbus_connection_flush</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_conn</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DBusHandlerResult</name></type>

<name>MPRISEntryPoint</name> <parameter_list>( <parameter><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>p_conn</name></decl></parameter>, <parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>p_from</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_target_interface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_interface</name> <init>= <expr><call><name>dbus_message_get_interface</name><argument_list>( <argument><expr><name>p_from</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_method</name> <init>= <expr><call><name>dbus_message_get_member</name><argument_list>( <argument><expr><name>p_from</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_interface</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_interface</name></expr></argument>, <argument><expr><name>DBUS_INTERFACE_PROPERTIES</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_target_interface</name> <operator>=</operator> <name>psz_interface</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>dbus_error_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_get_args</name><argument_list>( <argument><expr><name>p_from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_target_interface</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dbus_error_is_set</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></argument>, <argument><expr><literal type="string">"D-Bus error on %s.%s: %s"</literal></expr></argument>,

<argument><expr><name>psz_interface</name></expr></argument>, <argument><expr><name>psz_method</name></expr></argument>,

<argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_target_interface</name></expr></argument>, <argument><expr><name>DBUS_INTERFACE_INTROSPECTABLE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>handle_introspect</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>p_from</name></expr></argument>, <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_target_interface</name></expr></argument>, <argument><expr><name>DBUS_MPRIS_ROOT_INTERFACE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>handle_root</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>p_from</name></expr></argument>, <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_target_interface</name></expr></argument>, <argument><expr><name>DBUS_MPRIS_PLAYER_INTERFACE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>handle_player</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>p_from</name></expr></argument>, <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_target_interface</name></expr></argument>, <argument><expr><name>DBUS_MPRIS_TRACKLIST_INTERFACE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>handle_tracklist</name><argument_list>( <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>p_from</name></expr></argument>, <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>DBUS_HANDLER_RESULT_NOT_YET_HANDLED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>events_last_date</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>events_poll_timeout</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_watches</name> <init>= <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>fds</name><index>[<expr><name>i_watches</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>fds</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fds</name> <init>= <expr><call><name>GetPollFds</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>fds</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><call><name>next_timeout</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>timeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>events_poll_timeout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>i_fds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>read</name><argument_list>( <argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_timeouts</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_watches</name> <operator>=</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DBusWatch</name> <modifier>*</modifier></type><name><name>p_watches</name><index>[<expr><ternary><condition><expr><name>i_watches</name></expr> ?</condition><then> <expr><name>i_watches</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_watches</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_watches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>watches</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_events</name> <init>= <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>callback_info_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pp_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_events</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>events_last_date</name> <operator>==</operator> <name>VLC_TICK_INVALID</name>

<operator>||</operator> <name>now</name> <operator>-</operator> <name>events_last_date</name> <operator>&gt;</operator> <name>EVENTS_DELAY</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>events_last_date</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><name>events_poll_timeout</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_info</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_events</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp_info</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_info</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_events</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp_info</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>events_poll_timeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>events_poll_timeout</name> <operator>=</operator> <operator>(</operator> <name>EVENTS_DELAY</name> <operator>-</operator> <operator>(</operator> <name>now</name> <operator>-</operator> <name>events_last_date</name> <operator>)</operator> <operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>events_poll_timeout</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_info</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ProcessEvents</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>pp_info</name></expr></argument>, <argument><expr><name>i_events</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ProcessWatches</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>p_watches</name></expr></argument>, <argument><expr><name>i_watches</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><name>i_fds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DispatchDBusMessages</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wakeup_main_loop</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>write</name><argument_list>( <argument><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_pipe_fds</name><index>[<expr><name>PIPE_IN</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"Could not wake up the main loop: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_event_locked</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>callback_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_info</name><operator>-&gt;</operator><name>signal</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>callback_info_t</name> <modifier>*</modifier></type><name>oldinfo</name> <init>=

<expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_info</name><operator>-&gt;</operator><name>signal</name></name> <operator>==</operator> <name><name>oldinfo</name><operator>-&gt;</operator><name>signal</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>callback_info_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_dup</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_dup</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_dup</name> <operator>=</operator> <operator>*</operator><name>p_info</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_append</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>p_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add_event_signal</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>callback_info_t</name> <modifier>*</modifier></type><name>p_info</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>added</name> <init>= <expr><call><name>add_event_locked</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>p_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>added</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wakeup_main_loop</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>added</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>playlist_on_items_added</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>items</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>,

<argument>&amp;(callback_info_t){ .signal = SIGNAL_PLAYLIST_ITEM_APPEND }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>playlist</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>index</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>items</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>playlist_on_items_removed</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>,

<argument>&amp;(callback_info_t){ .signal = SIGNAL_PLAYLIST_ITEM_DELETED }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>playlist</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>index</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>playlist_on_playback_repeat_changed</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>, <argument>&amp;(callback_info_t){ .signal = SIGNAL_REPEAT }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>playlist</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>repeat</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>playlist_on_playback_order_changed</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>, <argument>&amp;(callback_info_t){ .signal = SIGNAL_RANDOM }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>playlist</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>order</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>playlist_on_current_index_changed</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,

<parameter><decl><type><name>ssize_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>,

<argument>&amp;(callback_info_t){ .signal = SIGNAL_ITEM_CURRENT }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>playlist</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_state_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dbus_int32_t</name></type> <name>playing_state</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYER_STATE_STARTED</name></expr>:</case>

<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>

<expr_stmt><expr><name>playing_state</name> <operator>=</operator> <name>PLAYBACK_STATE_PLAYING</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>

<expr_stmt><expr><name>playing_state</name> <operator>=</operator> <name>PLAYBACK_STATE_PAUSED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name>playing_state</name> <operator>=</operator> <name>PLAYBACK_STATE_STOPPED</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>bool</name></type> <name>added</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>playing_state</name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_playing_state</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_playing_state</name></name> <operator>=</operator> <name>playing_state</name></expr>;</expr_stmt>

<expr_stmt><expr><name>added</name> <operator>=</operator> <macro><name>add_event_locked</name><argument_list>(<argument>intf</argument>,

<argument>&amp;(callback_info_t) { .signal = SIGNAL_STATE }</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>added</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wakeup_main_loop</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_error_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>vlc_player_error</name></name></type> <name>error</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>VLC_PLAYER_ERROR_GENERIC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>player_on_state_changed</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>VLC_PLAYER_STATE_STOPPED</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_rate_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>new_rate</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>, <argument>&amp;(callback_info_t){ .signal = SIGNAL_RATE }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>new_rate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_capabilities_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_caps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_caps</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok1</name> <init>= <macro><name>add_event_locked</name><argument_list>(<argument>intf</argument>,

<argument>&amp;(callback_info_t) { .signal = SIGNAL_CAN_SEEK }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok2</name> <init>= <macro><name>add_event_locked</name><argument_list>(<argument>intf</argument>,

<argument>&amp;(callback_info_t) { .signal = SIGNAL_CAN_PAUSE }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok1</name> <operator>||</operator> <name>ok2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wakeup_main_loop</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>old_caps</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>new_caps</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_position_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i_projected_pos</name></decl>, <decl><type ref="prev"/><name>i_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_current_rate</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>i_last_input_pos_event</name></name> <operator>||</operator>

<call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_PLAYER_STATE_PLAYING</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_last_input_pos_event</name></name> <operator>=</operator> <name>i_now</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_last_input_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f_current_rate</name> <operator>=</operator> <call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_interval</name> <operator>=</operator> <operator>(</operator> <name>i_now</name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_last_input_pos_event</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_projected_pos</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_last_input_pos</name></name> <operator>+</operator> <operator>(</operator> <name>i_interval</name> <operator>*</operator> <name>f_current_rate</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_last_input_pos_event</name></name> <operator>=</operator> <name>i_now</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_last_input_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>llabs</name><argument_list>( <argument><expr><name>pos</name> <operator>-</operator> <name>i_projected_pos</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>SEEK_THRESHOLD</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>add_event_signal</name><argument_list>(<argument>intf</argument>, <argument>&amp;(callback_info_t){ .signal = SIGNAL_SEEK }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>time</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_media_meta_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>,

<argument>&amp;(callback_info_t){ .signal = SIGNAL_INPUT_METADATA }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>item</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_aout_on_volume_changed</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>,

<argument>&amp;(callback_info_t){ .signal = SIGNAL_VOLUME_CHANGE }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>aout</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>volume</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_aout_on_mute_changed</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>muted</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>,

<argument>&amp;(callback_info_t){ .signal = SIGNAL_VOLUME_MUTED }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>aout</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>muted</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_vout_on_fullscreen_changed</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>add_event_signal</name><argument_list>(<argument>data</argument>, <argument>&amp;(callback_info_t){ .signal = SIGNAL_FULLSCREEN }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>vout</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>enabled</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TrackChange</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_dead</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>has_input</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_meta_read</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>item</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>input_item_IsPreparsed</name><argument_list>( <argument><expr><name>item</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_meta_read</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>has_input</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>DemarshalSetPropertyValue</name><parameter_list>( <parameter><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>p_msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_arg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_valid_input</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>in_args</name></decl>, <decl><type ref="prev"/><name>variant</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_init</name><argument_list>( <argument><expr><name>p_msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>dbus_message_iter_get_arg_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>DBUS_TYPE_VARIANT</name> <operator>==</operator> <name>i_type</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dbus_message_iter_recurse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>variant</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_get_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>, <argument><expr><name>p_arg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_valid_input</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><call><name>dbus_message_iter_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>in_args</name></expr></argument> )</argument_list></call></expr> )</condition>;</do>

<return>return <expr><ternary><condition><expr><name>b_valid_input</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_META</name><parameter_list>( <parameter><type><name>entry</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>data</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( data ) { dbus_message_iter_open_container( &amp;dict, DBUS_TYPE_DICT_ENTRY, NULL, &amp;dict_entry ); dbus_message_iter_append_basic( &amp;dict_entry, DBUS_TYPE_STRING, &amp;ppsz_meta_items[entry] ); dbus_message_iter_open_container( &amp;dict_entry, DBUS_TYPE_VARIANT, type##_AS_STRING, &amp;variant ); dbus_message_iter_append_basic( &amp;variant, type, &amp; data ); dbus_message_iter_close_container( &amp;dict_entry, &amp;variant ); dbus_message_iter_close_container( &amp;dict, &amp;dict_entry ); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_VLC_META_STRING</name><parameter_list>( <parameter><type><name>entry</name></type></parameter>, <parameter><type><name>item</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ char * psz = input_item_Get##item( p_input );ADD_META( entry, DBUS_TYPE_STRING, psz ); free( psz ); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_META_SINGLETON_STRING_LIST</name><parameter_list>( <parameter><type><name>entry</name></type></parameter>, <parameter><type><name>item</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ char * psz = input_item_Get##item( p_input );if( psz ) { dbus_message_iter_open_container( &amp;dict, DBUS_TYPE_DICT_ENTRY, NULL, &amp;dict_entry ); dbus_message_iter_append_basic( &amp;dict_entry, DBUS_TYPE_STRING, &amp;ppsz_meta_items[entry] ); dbus_message_iter_open_container( &amp;dict_entry, DBUS_TYPE_VARIANT, "as", &amp;variant ); dbus_message_iter_open_container( &amp;variant, DBUS_TYPE_ARRAY, "s", &amp;list ); dbus_message_iter_append_basic( &amp;list, DBUS_TYPE_STRING, &amp;psz ); dbus_message_iter_close_container( &amp;variant, &amp;list ); dbus_message_iter_close_container( &amp;dict_entry, &amp;variant ); dbus_message_iter_close_container( &amp;dict, &amp;dict_entry ); } free( psz ); }</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>GetInputMeta</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><call><name>vlc_playlist_item_GetMedia</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>dict</name></decl>, <decl><type ref="prev"/><name>dict_entry</name></decl>, <decl><type ref="prev"/><name>variant</name></decl>, <decl><type ref="prev"/><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dbus_int64_t</name></type> <name>i_mtime</name> <init>= <expr><call><name>input_item_GetDuration</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dbus_uint32_t</name></type> <name>i_time</name> <init>= <expr><name>i_mtime</name> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dbus_int64_t</name></type> <name>i_length</name> <init>= <expr><name>i_mtime</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_trackid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_trackid</name></expr></argument>, <argument><expr><name>MPRIS_TRACKID_FORMAT</name></expr></argument>,

<argument><expr><call><name>vlc_playlist_IndexOf</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>ppsz_meta_items</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"mpris:trackid"</literal></expr>, <expr><literal type="string">"xesam:url"</literal></expr>, <expr><literal type="string">"xesam:title"</literal></expr>, <expr><literal type="string">"xesam:artist"</literal></expr>,

<expr><literal type="string">"xesam:album"</literal></expr>, <expr><literal type="string">"xesam:tracknumber"</literal></expr>, <expr><literal type="string">"vlc:time"</literal></expr>, <expr><literal type="string">"mpris:length"</literal></expr>,

<expr><literal type="string">"xesam:genre"</literal></expr>, <expr><literal type="string">"xesam:userRating"</literal></expr>, <expr><literal type="string">"xesam:contentCreated"</literal></expr>,

<expr><literal type="string">"mpris:artUrl"</literal></expr>, <expr><literal type="string">"mb:trackId"</literal></expr>, <expr><literal type="string">"vlc:audio-bitrate"</literal></expr>,

<expr><literal type="string">"vlc:audio-samplerate"</literal></expr>, <expr><literal type="string">"vlc:video-bitrate"</literal></expr>, <expr><literal type="string">"vlc:audio-codec"</literal></expr>,

<expr><literal type="string">"vlc:copyright"</literal></expr>, <expr><literal type="string">"xesam:comment"</literal></expr>, <expr><literal type="string">"vlc:encodedby"</literal></expr>, <expr><literal type="string">"language"</literal></expr>,

<expr><literal type="string">"vlc:length"</literal></expr>, <expr><literal type="string">"vlc:nowplaying"</literal></expr>, <expr><literal type="string">"vlc:publisher"</literal></expr>, <expr><literal type="string">"vlc:setting"</literal></expr>,

<expr><literal type="string">"status"</literal></expr>, <expr><literal type="string">"vlc:url"</literal></expr>, <expr><literal type="string">"vlc:video-codec"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>DBUS_TYPE_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"{sv}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_META</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DBUS_TYPE_OBJECT_PATH</name></expr></argument>, <argument><expr><name>psz_trackid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>URI</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_META_SINGLETON_STRING_LIST</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>Artist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>Album</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>TrackNum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_META</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>DBUS_TYPE_UINT32</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_META</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>DBUS_TYPE_INT64</name></expr></argument>, <argument><expr><name>i_mtime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_META_SINGLETON_STRING_LIST</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Genre</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>Date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ArtURL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>TrackID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name>Copyright</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_META_SINGLETON_STRING_LIST</name><argument_list>( <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name>Description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><name>EncodedBy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>Language</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_META</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><name>DBUS_TYPE_INT64</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><name>NowPlaying</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><name>Publisher</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>Setting</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VLC_META_STRING</name><argument_list>( <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>URL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_trackid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_status</name> <init>= <expr><call><name>vlc_meta_GetStatus</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD_META</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><name>DBUS_TYPE_INT32</name></expr></argument>, <argument><expr><name>i_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>AddProperty</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter>,

<parameter><decl><type><name>DBusMessageIter</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_property_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_signature</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_marshaller</name>) <parameter_list>(<parameter><decl><type><name>intf_thread_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DBusMessageIter</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DBusMessageIter</name></type> <name>entry</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><name>p_container</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_DICT_ENTRY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_append_basic</name><argument_list>( <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_STRING</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_property_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_open_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>,

<argument><expr><name>DBUS_TYPE_VARIANT</name></expr></argument>, <argument><expr><name>psz_signature</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>v</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator> <call><name>pf_marshaller</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dbus_message_iter_close_container</name><argument_list>( <argument><expr><name>p_container</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_META</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_VLC_META_STRING</name></cpp:undef>

</unit>
