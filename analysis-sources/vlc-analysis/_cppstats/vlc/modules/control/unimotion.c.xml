<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\control\unimotion.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TargetConditionals.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_MACOS_UNIMOTION</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MACOS_UNIMOTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unimotion.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;IOKit/IOKitLib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<enum>enum <name>data_type</name> <block>{

<decl><name>PB_IB</name></decl>,

<decl><name>MBP</name></decl>

}</block>;</enum>

<struct>struct <name>pb_ib_data</name> <block>{

<decl_stmt><decl><type><name>int8_t</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>pad</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>mbp_data</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>pad</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<union>union <name>motion_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>pb_ib_data</name></name></type> <name>pb_ib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mbp_data</name></name></type> <name>mbp</name></decl>;</decl_stmt>

}</block>;</union>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_values</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kernFunc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>servMatch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dataType</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>( <expr><name>type</name></expr> )</condition> <block>{<block_content>

<case>case <expr><name>powerbook</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>kernFunc</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>servMatch</name> <operator>=</operator> <literal type="string">"IOI2CMotionSensor"</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name>PB_IB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ibook</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>kernFunc</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>servMatch</name> <operator>=</operator> <literal type="string">"IOI2CMotionSensor"</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name>PB_IB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>highrespb</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>kernFunc</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>servMatch</name> <operator>=</operator> <literal type="string">"PMUMotionSensor"</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name>PB_IB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>macbookpro</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>kernFunc</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>servMatch</name> <operator>=</operator> <literal type="string">"SMCMotionSensor"</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name>MBP</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>probe_sms</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>kernFunc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servMatch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_port_t</name></type> <name>masterPort</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>io_iterator_t</name></type> <name>iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>io_object_t</name></type> <name>aDevice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>io_connect_t</name></type> <name>dataPort</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>structureInputSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>structureOutputSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>motion_data</name></name></type> <name>inputStructure</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>motion_data</name></name> <modifier>*</modifier></type><name>outputStructure</name></decl>;</decl_stmt>

<expr_stmt><expr><name>outputStructure</name> <operator>=</operator> <operator>(</operator>union <name>motion_data</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>IOMasterPort</name><argument_list>(<argument><expr><name>MACH_PORT_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>masterPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>matchingDictionary</name> <init>= <expr><call><name>IOServiceMatching</name><argument_list>(<argument><expr><name>servMatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>IOServiceGetMatchingServices</name><argument_list>(<argument><expr><name>masterPort</name></expr></argument>, <argument><expr><name>matchingDictionary</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>aDevice</name> <operator>=</operator> <call><name>IOIteratorNext</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IOObjectRelease</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aDevice</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>IOServiceOpen</name><argument_list>(<argument><expr><name>aDevice</name></expr></argument>, <argument><expr><call><name>mach_task_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IOObjectRelease</name><argument_list>(<argument><expr><name>aDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>( <expr><name>dataType</name></expr> )</condition> <block>{<block_content>

<case>case <expr><name>PB_IB</name></expr>:</case>

<expr_stmt><expr><name>structureInputSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pb_ib_data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>structureOutputSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pb_ib_data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MBP</name></expr>:</case>

<expr_stmt><expr><name>structureInputSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>mbp_data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>structureOutputSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>mbp_data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputStructure</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>motion_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>outputStructure</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>motion_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>IOConnectCallStructMethod</name><argument_list>(<argument><expr><name>dataPort</name></expr></argument>, <argument><expr><name>kernFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputStructure</name></expr></argument>,

<argument><expr><name>structureInputSize</name></expr></argument>, <argument><expr><name>outputStructure</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>structureOutputSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IOServiceClose</name><argument_list>(<argument><expr><name>dataPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>detect_sms</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>kernFunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servMatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dataType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>motion_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>set_values</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kernFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>servMatch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataType</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>probe_sms</name><argument_list>(<argument><expr><name>kernFunc</name></expr></argument>, <argument><expr><name>servMatch</name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>unknown</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_sms_raw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>kernFunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servMatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dataType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>motion_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>set_values</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kernFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>servMatch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataType</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>probe_sms</name><argument_list>(<argument><expr><name>kernFunc</name></expr></argument>, <argument><expr><name>servMatch</name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<switch>switch <condition>( <expr><name>dataType</name></expr> )</condition> <block>{<block_content>

<case>case <expr><name>PB_IB</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>x</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>pb_ib</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>y</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>pb_ib</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>z</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>pb_ib</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>MBP</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>x</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>mbp</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>y</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>mbp</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>z</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>mbp</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_sms</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>_x</name></decl>, <decl><type ref="prev"/><name>_y</name></decl>, <decl><type ref="prev"/><name>_z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xoff</name></decl>, <decl><type ref="prev"/><name>yoff</name></decl>, <decl><type ref="prev"/><name>zoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_sms_raw</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>ret</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>app</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"com.ramsayl.UniMotion"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>xoffstr</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"x_offset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>yoffstr</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"y_offset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>zoffstr</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"z_offset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xoff</name> <operator>=</operator> <call><name>CFPreferencesGetAppIntegerValue</name><argument_list>(<argument><expr><name>xoffstr</name></expr></argument>, <argument><expr><name>app</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>ok</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>_x</name> <operator>+=</operator> <name>xoff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <call><name>CFPreferencesGetAppIntegerValue</name><argument_list>(<argument><expr><name>yoffstr</name></expr></argument>, <argument><expr><name>app</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>ok</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>_y</name> <operator>+=</operator> <name>yoff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zoff</name> <operator>=</operator> <call><name>CFPreferencesGetAppIntegerValue</name><argument_list>(<argument><expr><name>zoffstr</name></expr></argument>, <argument><expr><name>app</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>ok</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>_z</name> <operator>+=</operator> <name>zoff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>_x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>_y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name>_z</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>read_sms_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>_x</name></decl>, <decl><type ref="prev"/><name>_y</name></decl>, <decl><type ref="prev"/><name>_z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xscale</name></decl>, <decl><type ref="prev"/><name>yscale</name></decl>, <decl><type ref="prev"/><name>zscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_sms_raw</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>ret</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>app</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"com.ramsayl.UniMotion"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>xscalestr</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"x_scale"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>yscalestr</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"y_scale"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name></type> <name>zscalestr</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"z_scale"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xscale</name> <operator>=</operator> <call><name>CFPreferencesGetAppIntegerValue</name><argument_list>(<argument><expr><name>xscalestr</name></expr></argument>, <argument><expr><name>app</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>ok</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>yscale</name> <operator>=</operator> <call><name>CFPreferencesGetAppIntegerValue</name><argument_list>(<argument><expr><name>yscalestr</name></expr></argument>, <argument><expr><name>app</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>ok</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zscale</name> <operator>=</operator> <call><name>CFPreferencesGetAppIntegerValue</name><argument_list>(<argument><expr><name>zscalestr</name></expr></argument>, <argument><expr><name>app</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>ok</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>_x</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>xscale</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>_y</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>yscale</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name>_z</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>zscale</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
