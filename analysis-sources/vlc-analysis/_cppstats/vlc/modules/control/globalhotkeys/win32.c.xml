<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\control\globalhotkeys\win32.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>LRESULT</name> <name>CALLBACK</name></type> <name>WMHOTKEYPROC</name><parameter_list>( <parameter><decl><type><name>HWND</name></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Global Hotkeys"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INTERFACE</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INTERFACE_HOTKEYS</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Global Hotkeys interface"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"globalhotkeys"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<struct>struct <name>intf_sys_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hotkeyWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>wait</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>intf_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Thread</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PostMessage</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name></expr></argument>, <argument><expr><name>WM_CLOSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name> <operator>=</operator>

<operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>CreateWindow</name><argument_list>( <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"STATIC"</literal></expr></argument>)</argument_list></call></expr></argument>, 

<argument><expr><macro><name>TEXT</name><argument_list>(<argument><literal type="string">"VLC ghk "</literal></argument>)</argument_list></macro> <call><name>TEXT</name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name></expr></argument>, <argument><expr><name>GWLP_WNDPROC</name></expr></argument>,

<argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><name>WMHOTKEYPROC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>,

<argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>ppsz_keys</name> <init>= <expr><call><name>vlc_actions_get_key_names</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>

<condition><expr><operator>*</operator><name>ppsz_keys</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppsz_keys</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint_fast32_t</name> <modifier>*</modifier></type><name>p_keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_keys</name> <init>= <expr><call><name>vlc_actions_get_keycodes</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_keys</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_keys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_keys</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>i_key</name> <init>= <expr><name><name>p_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>i_keyMod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_key</name> <operator>&amp;</operator> <name>KEY_MODIFIER_SHIFT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_keyMod</name> <operator>|=</operator> <name>MOD_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_key</name> <operator>&amp;</operator> <name>KEY_MODIFIER_ALT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_keyMod</name> <operator>|=</operator> <name>MOD_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_key</name> <operator>&amp;</operator> <name>KEY_MODIFIER_CTRL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_keyMod</name> <operator>|=</operator> <name>MOD_CONTROL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE</name><parameter_list>( <parameter><type><name>key</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>case KEY_##key: i_vk = VK_##key; break</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE2</name><parameter_list>( <parameter><type><name>key</name></type></parameter>, <parameter><type><name>key2</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>case KEY_##key: i_vk = VK_##key2; break</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_SPACE</name></cpp:macro> <cpp:value>' '</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VK_VOLUME_DOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_VOLUME_DOWN</name></cpp:macro> <cpp:value>0xAE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_VOLUME_UP</name></cpp:macro> <cpp:value>0xAF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VK_MEDIA_NEXT_TRACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MEDIA_NEXT_TRACK</name></cpp:macro> <cpp:value>0xB0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MEDIA_PREV_TRACK</name></cpp:macro> <cpp:value>0xB1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MEDIA_STOP</name></cpp:macro> <cpp:value>0xB2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_MEDIA_PLAY_PAUSE</name></cpp:macro> <cpp:value>0xB3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VK_PAGEUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAGEUP</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_PAGEDOWN</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>UINT</name></type> <name>i_vk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_key</name> <operator>&amp;</operator> <operator>~</operator><name>KEY_MODIFIER</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>LEFT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>RIGHT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>UP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>DOWN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>SPACE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE2</name><argument_list>( <argument><expr><name>ESC</name></expr></argument>, <argument><expr><name>ESCAPE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE2</name><argument_list>( <argument><expr><name>ENTER</name></expr></argument>, <argument><expr><name>RETURN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F9</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F10</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F11</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>F12</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>PAGEUP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>PAGEDOWN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>HOME</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>INSERT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>DELETE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>VOLUME_DOWN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>VOLUME_UP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>MEDIA_PLAY_PAUSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>MEDIA_STOP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>MEDIA_PREV_TRACK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HANDLE</name><argument_list>( <argument><expr><name>MEDIA_NEXT_TRACK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<expr_stmt><expr><name>i_vk</name> <operator>=</operator> <call><name>toupper</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>i_key</name> <operator>&amp;</operator> <operator>~</operator><name>KEY_MODIFIER</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_vk</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HANDLE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HANDLE2</name></cpp:undef>

<decl_stmt><decl><type><name>ATOM</name></type> <name>atom</name> <init>= <expr><call><name>GlobalAddAtomA</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_keys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>atom</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>RegisterHotKey</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>i_keyMod</name></expr></argument>, <argument><expr><name>i_vk</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GlobalDeleteAtom</name><argument_list>( <argument><expr><name>atom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while<condition>( <expr><call><name>GetMessage</name><argument_list>( <argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>( <argument><expr><operator>&amp;</operator><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>ppsz_keys</name> <init>= <expr><call><name>vlc_actions_get_key_names</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>

<condition><expr><operator>*</operator><name>ppsz_keys</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppsz_keys</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ATOM</name></type> <name>atom</name> <init>= <expr><call><name>GlobalFindAtomA</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_keys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>atom</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>UnregisterHotKey</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name></expr></argument>, <argument><expr><name>atom</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GlobalDeleteAtom</name><argument_list>( <argument><expr><name>atom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hotkeyWindow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>LRESULT</name> <name>CALLBACK</name></type> <name>WMHOTKEYPROC</name><parameter_list>( <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>uMsg</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>,

<parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>uMsg</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>WM_HOTKEY</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_atomName</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG_PTR</name></type> <name>ret</name> <init>= <expr><call><name>GetWindowLongPtr</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name><operator>*</operator><operator>)</operator><name>ret</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>psz_atomName</name></expr></argument>, <argument><expr><literal type="string">"key-"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GlobalGetAtomNameA</name><argument_list>(

<argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>psz_atomName</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_atomName</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_action_id_t</name></type> <name>action</name> <init>= <expr><call><name>vlc_actions_get_id</name><argument_list>( <argument><expr><name>psz_atomName</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>action</name> <operator>!=</operator> <name>ACTIONID_NONE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>action</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>WM_DESTROY</name></expr>:</case>

<expr_stmt><expr><call><name>PostQuitMessage</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>DefWindowProc</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>uMsg</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
