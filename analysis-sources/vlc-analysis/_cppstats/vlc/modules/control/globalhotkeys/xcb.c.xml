<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\control\globalhotkeys\xcb.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb_keysyms.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/keysym.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XF86keysym.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Global Hotkeys"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INTERFACE</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INTERFACE_HOTKEYS</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Global Hotkeys interface"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"globalhotkeys"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>xcb_keycode_t</name> <modifier>*</modifier></type><name>p_keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_modifier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_vlc</name></decl>;</decl_stmt>

}</block></struct></type> <name>hotkey_mapping_t</name>;</typedef>

<struct>struct <name>intf_sys_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>p_connection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_key_symbols_t</name> <modifier>*</modifier></type><name>p_symbols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hotkey_mapping_t</name> <modifier>*</modifier></type><name>p_map</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Mapping</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Register</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_screen_default</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name> <operator>=</operator> <call><name>xcb_connect</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_screen_default</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xcb_connection_has_error</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name><modifier>*</modifier></type> <name>xcbsetup</name> <init>= <expr><call><name>xcb_get_setup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>xcbsetup</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_screen_iterator_t</name></type> <name>iter</name> <init>= <expr><call><name>xcb_setup_roots_iterator</name><argument_list>( <argument><expr><name>xcbsetup</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_screen_default</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>iter</name><operator>.</operator><name>rem</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_screen_next</name><argument_list>( <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>iter</name><operator>.</operator><name>rem</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_symbols</name></name> <operator>=</operator> <call><name>xcb_key_symbols_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_symbols</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>Mapping</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Register</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Thread</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name><operator>-&gt;</operator><name>p_keys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_symbols</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xcb_key_symbols_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_symbols</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_disconnect</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_map</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_key_symbols_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_symbols</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_disconnect</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>GetModifier</name><parameter_list>( <parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>p_connection</name></decl></parameter>, <parameter><decl><type><name>xcb_key_symbols_t</name> <modifier>*</modifier></type><name>p_symbols</name></decl></parameter>, <parameter><decl><type><name>xcb_keysym_t</name></type> <name>sym</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>pi_mask</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>XCB_MOD_MASK_SHIFT</name></expr>, <expr><name>XCB_MOD_MASK_LOCK</name></expr>, <expr><name>XCB_MOD_MASK_CONTROL</name></expr>,

<expr><name>XCB_MOD_MASK_1</name></expr>, <expr><name>XCB_MOD_MASK_2</name></expr>, <expr><name>XCB_MOD_MASK_3</name></expr>,

<expr><name>XCB_MOD_MASK_4</name></expr>, <expr><name>XCB_MOD_MASK_5</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>sym</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>xcb_get_modifier_mapping_cookie_t</name></type> <name>r</name> <init>=

<expr><call><name>xcb_get_modifier_mapping</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_modifier_mapping_reply_t</name> <modifier>*</modifier></type><name>p_map</name> <init>=

<expr><call><name>xcb_get_modifier_mapping_reply</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_map</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_keycode_t</name> <modifier>*</modifier></type><name>p_keys</name> <init>= <expr><call><name>xcb_key_symbols_get_keycode</name><argument_list>( <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>sym</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_keys</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>no_modifier</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>XCB_NO_SYMBOL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>no_modifier</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>no_modifier</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_keycode_t</name> <modifier>*</modifier></type><name>p_keycode</name> <init>= <expr><call><name>xcb_get_modifier_mapping_keycodes</name><argument_list>( <argument><expr><name>p_map</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_keycode</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_map</name><operator>-&gt;</operator><name>keycodes_per_modifier</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_keys</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <name>XCB_NO_SYMBOL</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_keycode</name><index>[<expr><name>i</name><operator>*</operator><name><name>p_map</name><operator>-&gt;</operator><name>keycodes_per_modifier</name></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <name><name>p_keys</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_map</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>pi_mask</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_map</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>GetX11Modifier</name><parameter_list>( <parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>p_connection</name></decl></parameter>,

<parameter><decl><type><name>xcb_key_symbols_t</name> <modifier>*</modifier></type><name>p_symbols</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_vlc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_vlc</name> <operator>&amp;</operator> <name>KEY_MODIFIER_ALT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_mask</name> <operator>|=</operator> <call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Alt_L</name></expr></argument> )</argument_list></call> <operator>|</operator>

<call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Alt_R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_vlc</name> <operator>&amp;</operator> <name>KEY_MODIFIER_SHIFT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_mask</name> <operator>|=</operator> <call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Shift_L</name></expr></argument> )</argument_list></call> <operator>|</operator>

<call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Shift_R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_vlc</name> <operator>&amp;</operator> <name>KEY_MODIFIER_CTRL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_mask</name> <operator>|=</operator> <call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Control_L</name></expr></argument> )</argument_list></call> <operator>|</operator>

<call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Control_R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_vlc</name> <operator>&amp;</operator> <name>KEY_MODIFIER_META</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_mask</name> <operator>|=</operator> <call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Meta_L</name></expr></argument> )</argument_list></call> <operator>|</operator>

<call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Meta_R</name></expr></argument> )</argument_list></call> <operator>|</operator>

<call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Super_L</name></expr></argument> )</argument_list></call> <operator>|</operator>

<call><name>GetModifier</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument>, <argument><expr><name>p_symbols</name></expr></argument>, <argument><expr><name>XK_Super_R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_mask</name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>xcb_keysym_t</name></type> <name>i_x11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_vlc</name></decl>;</decl_stmt>

}</block> <decl><name><name>x11keys_to_vlckeys</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_output/xcb/xcb_keysym.h"</cpp:file></cpp:include>

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>xcb_keysym_t</name></type> <name>GetX11Key</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>i_vlc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_vlc</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>i_vlc</name> <operator>&lt;=</operator> <literal type="number">127</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_vlc</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>x11keys_to_vlckeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_vlc</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>x11keys_to_vlckeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_vlc</name> <operator>==</operator> <name>i_vlc</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>x11keys_to_vlckeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_x11</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>XK_VoidSymbol</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Mapping</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xcb_keysym_t</name></type> <name><name>p_x11_modifier_ignored</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><name>XK_Num_Lock</name></expr>,

<expr><name>XK_Scroll_Lock</name></expr>,

<expr><name>XK_Caps_Lock</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_map</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>ppsz_keys</name> <init>= <expr><call><name>vlc_actions_get_key_names</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr></init></decl>;</init>

<condition><expr><operator>*</operator><name>ppsz_keys</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppsz_keys</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint_fast32_t</name> <modifier>*</modifier></type><name>p_keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_keys</name> <init>= <expr><call><name>vlc_actions_get_keycodes</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_keys</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_keys</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_keys</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>i_vlc_key</name> <init>= <expr><name><name>p_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_modifier</name> <init>= <expr><call><name>GetX11Modifier</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_symbols</name></name></expr></argument>, <argument><expr><name>i_vlc_key</name> <operator>&amp;</operator> <name>KEY_MODIFIER</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_x11_modifier_ignored</name></expr></argument>)</argument_list></sizeof> <operator>/</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_x11_modifier_ignored</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_ignored</name> <init>= <expr><call><name>GetModifier</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_symbols</name></name></expr></argument>, <argument><expr><name><name>p_x11_modifier_ignored</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>j</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_ignored</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_keycode_t</name> <modifier>*</modifier></type><name>keycodes</name> <init>= <expr><call><name>xcb_key_symbols_get_keycode</name><argument_list>(

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_symbols</name></name></expr></argument>, <argument><expr><call><name>GetX11Key</name><argument_list>( <argument><expr><name>i_vlc_key</name> <operator>&amp;</operator> <operator>~</operator><name>KEY_MODIFIER</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>keycodes</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>hotkey_mapping_t</name> <modifier>*</modifier></type><name>p_map</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_map</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_map</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>keycodes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name></name> <operator>=</operator> <name>p_map</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_map</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_map</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_map</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_map</name><operator>-&gt;</operator><name>p_keys</name></name> <operator>=</operator> <name>keycodes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_map</name><operator>-&gt;</operator><name>i_modifier</name></name> <operator>=</operator> <name>i_modifier</name><operator>|</operator><name>i_ignored</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_map</name><operator>-&gt;</operator><name>i_vlc</name></name> <operator>=</operator> <name>i_vlc_key</name></expr>;</expr_stmt>

<expr_stmt><expr><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>active</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Register</name><parameter_list>( <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_map</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>hotkey_mapping_t</name> <modifier>*</modifier></type><name>p_map</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_map</name><operator>-&gt;</operator><name>p_keys</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>XCB_NO_SYMBOL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>xcb_grab_key</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,

<argument><expr><name><name>p_map</name><operator>-&gt;</operator><name>i_modifier</name></name></expr></argument>, <argument><expr><name><name>p_map</name><operator>-&gt;</operator><name>p_keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name>XCB_GRAB_MODE_ASYNC</name></expr></argument>, <argument><expr><name>XCB_GRAB_MODE_ASYNC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>p_connection</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_connection</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_flush</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>xcb_get_file_descriptor</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>fds</name> <init>= <expr><block>{ <expr><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>, <expr><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>, }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>poll</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_generic_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>p_event</name> <operator>=</operator> <call><name>xcb_poll_for_event</name><argument_list>( <argument><expr><name>p_connection</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_event</name><operator>-&gt;</operator><name>response_type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal> <operator>)</operator> <operator>!=</operator> <name>XCB_KEY_PRESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_key_press_event_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>xcb_key_press_event_t</name> <operator>*</operator><operator>)</operator><name>p_event</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_map</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>hotkey_mapping_t</name> <modifier>*</modifier></type><name>p_map</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_map</name><operator>-&gt;</operator><name>p_keys</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>XCB_NO_SYMBOL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_map</name><operator>-&gt;</operator><name>p_keys</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>e</name><operator>-&gt;</operator><name>detail</name></name> <operator>&amp;&amp;</operator>

<name><name>p_map</name><operator>-&gt;</operator><name>i_modifier</name></name> <operator>==</operator> <name><name>e</name><operator>-&gt;</operator><name>state</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"global-key-pressed"</literal></expr></argument>, <argument><expr><name><name>p_map</name><operator>-&gt;</operator><name>i_vlc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_event</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
