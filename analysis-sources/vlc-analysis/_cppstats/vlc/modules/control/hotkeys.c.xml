<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\control\hotkeys.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_viewpoint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_actions.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math.h"</cpp:file></cpp:include>

<struct>struct <name>intf_sys_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_listener_id</name> <modifier>*</modifier></type><name>player_listener</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>btn_pressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

}</block> <decl><name>vrnav</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>audio_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>subtitle_time</name></decl>;</decl_stmt>

}</block> <decl><name>subsync</name></decl>;</struct>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>spu_channel_order</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_action</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_action_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTF_ACTION_HANDLER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void action_handler_Intf##name(intf_thread_t *intf, vlc_action_id_t action_id)</cpp:value></cpp:define>

<macro><name>INTF_ACTION_HANDLER</name><argument_list>()</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_QUIT</name></expr>:</case>

<return>return <expr><call><name>libvlc_Quit</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>ACTIONID_INTF_TOGGLE_FSC</name></expr>:</case>

<case>case <expr><name>ACTIONID_INTF_HIDE</name></expr>:</case>

<expr_stmt><expr><name>varname</name> <operator>=</operator> <literal type="string">"intf-toggle-fscontrol"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_INTF_BOSS</name></expr>:</case>

<expr_stmt><expr><name>varname</name> <operator>=</operator> <literal type="string">"intf-boss"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_INTF_POPUP_MENU</name></expr>:</case>

<expr_stmt><expr><name>varname</name> <operator>=</operator> <literal type="string">"intf-popupmenu"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>INTF_ACTION_HANDLER</name><argument_list>(<argument>ActionCombo</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>vrnav</name> <init>= <expr><call><name>var_GetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint-changeable"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_COMBO_VOL_FOV_DOWN</name></expr>:</case>

<expr_stmt><expr><name>action_id</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>vrnav</name></expr>

?</condition><then> <expr><name>ACTIONID_VOL_DOWN</name></expr>

</then><else>: <expr><name>ACTIONID_VIEWPOINT_FOV_OUT</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_COMBO_VOL_FOV_UP</name></expr>:</case>

<expr_stmt><expr><name>action_id</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>vrnav</name></expr>

?</condition><then> <expr><name>ACTIONID_VOL_UP</name></expr>

</then><else>: <expr><name>ACTIONID_VIEWPOINT_FOV_IN</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>handle_action</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAYLIST_ACTION_HANDLER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void action_handler_Playlist##name(intf_thread_t *intf, vlc_playlist_t *playlist, vlc_action_id_t action_id)</cpp:value></cpp:define>

<macro><name>PLAYLIST_ACTION_HANDLER</name><argument_list>(<argument>Interact</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_PLAY_CLEAR</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_playlist_Clear</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_PREV</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_playlist_Prev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_NEXT</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_playlist_Next</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block>

<macro><name>PLAYLIST_ACTION_HANDLER</name><argument_list>(<argument>Playback</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_LOOP</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat_mode</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>repeat_mode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr>:</case>

<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>:</case>

<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>:</case>

<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>repeat_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ACTIONID_RANDOM</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order_mode</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>order_mode</name> <operator>=</operator>

<ternary><condition><expr><name>order_mode</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr>

?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>

</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>order_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>playlist_bookmark_Set</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>,

<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>input_item_GetURI</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_PutPsz</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"setting playlist bookmark %i to %s"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>playlist_bookmark_Play</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>,

<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bookmark_uri</name> <init>= <expr><call><name>var_CreateGetString</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>plitem</name> <init>= <expr><call><name>vlc_playlist_Get</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_playlist_item_GetMedia</name><argument_list>(<argument><expr><name>plitem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item_uri</name> <init>= <expr><call><name>input_item_GetURI</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>bookmark_uri</name></expr></argument>, <argument><expr><name>item_uri</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>item_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_PlayAt</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bookmark_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<macro><name>INTF_ACTION_HANDLER</name><argument_list>(<argument>PlaylistBookmark</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>set</name> <init>= <expr><name>action_id</name> <operator>&gt;=</operator> <name>ACTIONID_SET_BOOKMARK1</name> <operator>&amp;&amp;</operator>

<name>action_id</name> <operator>&lt;=</operator> <name>ACTIONID_SET_BOOKMARK10</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><ternary><condition><expr><name>set</name></expr> ?</condition><then> <expr><name>ACTIONID_SET_BOOKMARK1</name></expr> </then><else>: <expr><name>ACTIONID_PLAY_BOOKMARK1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>-=</operator> <name>action_id</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bookmark_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bookmark_name</name></expr></argument>, <argument><expr><literal type="string">"bookmark%i"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>playlist_bookmark_Set</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>bookmark_name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>playlist_bookmark_Play</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>bookmark_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bookmark_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAYER_ACTION_HANDLER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void action_handler_Player##name(intf_thread_t *intf, vlc_player_t *player, vlc_action_id_t action_id)</cpp:value></cpp:define>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>State</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_PLAY_PAUSE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name> <init>= <expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>VLC_PLAYER_STATE_PAUSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_Resume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_Pause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ACTIONID_PLAY</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Start</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_PAUSE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Pause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_STOP</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Stop</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_FRAME_NEXT</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_NextVideoFrame</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block>

<macro><name>INTF_ACTION_HANDLER</name><argument_list>(<argument>PlayerSeek</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_player_CanSeek</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_JUMP_BACKWARD_EXTRASHORT</name></expr>:</case>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>ACTIONID_JUMP_FORWARD_EXTRASHORT</name></expr>:</case>

<expr_stmt><expr><name>varname</name> <operator>=</operator> <literal type="string">"extrashort-jump-size"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_JUMP_BACKWARD_SHORT</name></expr>:</case>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>ACTIONID_JUMP_FORWARD_SHORT</name></expr>:</case>

<expr_stmt><expr><name>varname</name> <operator>=</operator> <literal type="string">"short-jump-size"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_JUMP_BACKWARD_MEDIUM</name></expr>:</case>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>ACTIONID_JUMP_FORWARD_MEDIUM</name></expr>:</case>

<expr_stmt><expr><name>varname</name> <operator>=</operator> <literal type="string">"medium-jump-size"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_JUMP_BACKWARD_LONG</name></expr>:</case>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>ACTIONID_JUMP_FORWARD_LONG</name></expr>:</case>

<expr_stmt><expr><name>varname</name> <operator>=</operator> <literal type="string">"long-jump-size"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>jmpsz</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>jmpsz</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_JumpTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>jmpsz</name> <operator>*</operator> <name>sign</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>Position</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vout_OSDEpg</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_DisplayPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>NavigateMedia</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_PROGRAM_SID_PREV</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SelectPrevProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_PROGRAM_SID_NEXT</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SelectNextProgram</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_TITLE_PREV</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SelectPrevTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_TITLE_NEXT</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SelectNextTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_CHAPTER_PREV</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SelectPrevChapter</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_CHAPTER_NEXT</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SelectNextChapter</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_DISC_MENU</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Navigate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>VLC_PLAYER_NAV_MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CycleSecondarySubtitles</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>es_format_category_e</name></name></type> <name>cat</name> <init>= <expr><name>SPU_ES</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>cycle_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>keep_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>selected_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_GetEsIdVout</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>order</name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>spu_channel_order</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cycle_id</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>keep_id</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>selected_count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>spu_channel_order</name></name> <operator>==</operator> <name>VLC_VOUT_ORDER_PRIMARY</name>

<operator>&amp;&amp;</operator> <name>selected_count</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>selected_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SelectNextTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SelectPrevTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name> <operator>==</operator> <name>cycle_id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>true</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>selected</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cycle_id</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>next</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>count</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>next</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cycle_id</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>keep_id</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>keep_id</name> <operator>=</operator> <name>cycle_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cycle_id</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name><name>esIds</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>keep_id</name></expr>, <expr><name>cycle_id</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectEsIdList</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>esIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>Track</argument>)</argument_list></macro>

<block>{<block_content>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_AUDIO_TRACK</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_SelectNextTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_SUBTITLE_REVERSE_TRACK</name></expr>:</case>

<case>case <expr><name>ACTIONID_SUBTITLE_TRACK</name></expr>:</case>

<expr_stmt><expr><call><name>CycleSecondarySubtitles</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>player</name></expr></argument>,

<argument><expr><name>action_id</name> <operator>==</operator> <name>ACTIONID_SUBTITLE_TRACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>Delay</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>AUDIODELAY</name></decl>, <decl><name>SUBDELAY</name></decl> }</block> <decl><name>type</name></decl>;</enum>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_AUDIODELAY_DOWN</name></expr>:</case>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>-</operator><literal type="number">50</literal></expr>;</expr_stmt>

<case>case <expr><name>ACTIONID_AUDIODELAY_UP</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AUDIODELAY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_SUBDELAY_DOWN</name></expr>:</case>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>-</operator><literal type="number">50</literal></expr>;</expr_stmt>

<case>case <expr><name>ACTIONID_SUBDELAY_UP</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>SUBDELAY</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_whence</name></name></type> <name>whence</name> <init>= <expr><name>VLC_PLAYER_WHENCE_RELATIVE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AUDIODELAY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SetAudioDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>spu_channel_order</name></name> <operator>==</operator> <name>VLC_VOUT_ORDER_PRIMARY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_SetSubtitleDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_player_GetTrackCount</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_player_track</name></name> <modifier>*</modifier></type><name>track</name> <init>=

<expr><call><name>vlc_player_GetTrackAt</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_GetEsIdVout</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>order</name> <operator>==</operator> <name>VLC_VOUT_ORDER_SECONDARY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_SetEsIdDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>es_id</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type>

<name>AdjustRateFine</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>rate_min</name> <init>= <expr><name>INPUT_RATE_MIN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate_max</name> <init>= <expr><name>INPUT_RATE_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name>rate</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">0.1</literal> <operator>+</operator> <name>dir</name> <operator>+</operator> <literal type="number">0.05</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>&lt;</operator> <name>rate_min</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <name>rate_min</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>&gt;</operator> <name>rate_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <name>rate_max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rate</name> <operator>*</operator> <name>sign</name></expr>;</return>

</block_content>}</block></function>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>Rate</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_RATE_SLOWER</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_DecrementRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_RATE_FASTER</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_IncrementRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_RATE_NORMAL</name></expr>:</case>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_RATE_SLOWER_FINE</name></expr>:</case>

<case>case <expr><name>ACTIONID_RATE_FASTER_FINE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>dir</name> <init>= <expr><ternary><condition><expr><name>action_id</name> <operator>==</operator> <name>ACTIONID_RATE_SLOWER_FINE</name></expr> ?</condition><then>

<expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <call><name>vlc_player_GetRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <call><name>AdjustRateFine</name><argument_list>(<argument><expr><name>rate</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_player_ChangeRate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>ToggleSubtitle</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_ToggleSubtitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>ControlSubtitleSecondary</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_channel_order</name></name> <operator>=</operator>

<ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_channel_order</name></name> <operator>==</operator> <name>VLC_VOUT_ORDER_PRIMARY</name></expr> ?</condition><then>

<expr><name>VLC_VOUT_ORDER_SECONDARY</name></expr> </then><else>: <expr><name>VLC_VOUT_ORDER_PRIMARY</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s subtitle control"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_channel_order</name></name> <operator>==</operator> <name>VLC_VOUT_ORDER_PRIMARY</name></expr> ?</condition><then> <expr><literal type="string">"Primary"</literal></expr> </then><else>: <expr><literal type="string">"Secondary"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>SyncSubtitle</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_SUBSYNC_MARKAUDIO</name></expr>:</case>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>audio_time</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Sub sync: bookmarked audio time"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_SUBSYNC_MARKSUB</name></expr>:</case>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>subtitle_time</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Sub sync: bookmarked subtitle time"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_SUBSYNC_APPLY</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>audio_time</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>||</operator>

<name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>subtitle_time</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Sub sync: set bookmarks first!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>delay</name> <init>=

<expr><name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>audio_time</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>subtitle_time</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>audio_time</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>subtitle_time</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>previous_delay</name> <init>= <expr><call><name>vlc_player_GetSubtitleDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_SetSubtitleDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>delay_ms</name> <init>= <expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>totdelay_ms</name> <init>= <expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>previous_delay</name> <operator>+</operator> <name>delay</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Sub sync: corrected %"</literal><name>PRId64</name>

<literal type="string">" ms (total delay = %"</literal><name>PRId64</name><literal type="string">" ms)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>delay_ms</name></expr></argument>, <argument><expr><name>totdelay_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ACTIONID_SUBSYNC_RESET</name></expr>:</case>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>audio_time</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>subtitle_time</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SetSubtitleDelay</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VLC_PLAYER_WHENCE_ABSOLUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Sub sync: delay reset"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>Navigate</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_nav</name></name></type> <name>nav</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAYER_NAV_FROM_ACTION</name><parameter_list>(<parameter><type><name>navval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case ACTIONID_NAV_##navval: nav = VLC_PLAYER_NAV_##navval; break;</cpp:value></cpp:define>

<macro><name>PLAYER_NAV_FROM_ACTION</name><argument_list>(<argument>ACTIVATE</argument>)</argument_list></macro>

<macro><name>PLAYER_NAV_FROM_ACTION</name><argument_list>(<argument>UP</argument>)</argument_list></macro>

<macro><name>PLAYER_NAV_FROM_ACTION</name><argument_list>(<argument>DOWN</argument>)</argument_list></macro>

<macro><name>PLAYER_NAV_FROM_ACTION</name><argument_list>(<argument>LEFT</argument>)</argument_list></macro>

<macro><name>PLAYER_NAV_FROM_ACTION</name><argument_list>(<argument>RIGHT</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLAYER_NAV_FROM_ACTION</name></cpp:undef>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_player_Navigate</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>nav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>Viewpoint</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_viewpoint_t</name></type> <name>viewpoint</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_VIEWPOINT_FOV_IN</name></expr>:</case>

<expr_stmt><expr><name><name>viewpoint</name><operator>.</operator><name>fov</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_VIEWPOINT_FOV_OUT</name></expr>:</case>

<expr_stmt><expr><name><name>viewpoint</name><operator>.</operator><name>fov</name></name> <operator>=</operator> <operator>+</operator><literal type="number">1.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_VIEWPOINT_ROLL_CLOCK</name></expr>:</case>

<expr_stmt><expr><name><name>viewpoint</name><operator>.</operator><name>roll</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_VIEWPOINT_ROLL_ANTICLOCK</name></expr>:</case>

<expr_stmt><expr><name><name>viewpoint</name><operator>.</operator><name>roll</name></name> <operator>=</operator> <operator>+</operator><literal type="number">1.f</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_player_UpdateViewpoint</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>viewpoint</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_WHENCE_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>Record</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_ToggleRecording</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioDeviceCycle</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><call><name>aout_DeviceGet</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>device</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>aout_DevicesList</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>aout_DeviceSet</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>Aout</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_VOL_DOWN</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_aout_DecrementVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_VOL_UP</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_aout_IncrementVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_VOL_MUTE</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_aout_ToggleMute</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_AUDIODEVICE_CYCLE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><call><name>vlc_player_aout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aout</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>devname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioDeviceCycle</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>devname</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_osd_Message</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Audio device: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>devname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>devname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_Release</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block>

<macro><name>PLAYER_ACTION_HANDLER</name><argument_list>(<argument>Vouts</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_TOGGLE_FULLSCREEN</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_vout_ToggleFullscreen</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_LEAVE_FULLSCREEN</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_vout_SetFullscreen</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_SNAPSHOT</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_vout_Snapshot</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_WALLPAPER</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_vout_ToggleWallpaperMode</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOUT_ACTION_HANDLER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void action_handler_Vout##name(intf_thread_t *intf, vout_thread_t *vout, vlc_action_id_t action_id)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>vout_CycleVariable</name><parameter_list>(<parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>varname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vartype</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_choices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>choices</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_Change</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>VLC_VAR_GETCHOICES</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>num_choices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>choices</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>choice</name> <init>= <expr><name>choices</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>curidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>curidx</name> <operator>&lt;</operator> <name>num_choices</name></expr>;</condition> <incr><expr><operator>++</operator><name>curidx</name></expr><operator>,</operator> <expr><operator>++</operator><name>choice</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vartype</name> <operator>==</operator> <name>VLC_VAR_FLOAT</name> <operator>&amp;&amp;</operator>

<name><name>choice</name><operator>-&gt;</operator><name>f_float</name></name> <operator>==</operator> <name><name>val</name><operator>.</operator><name>f_float</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>vartype</name> <operator>==</operator> <name>VLC_VAR_STRING</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>choice</name><operator>-&gt;</operator><name>psz_string</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name>curidx</name> <operator>==</operator> <name>num_choices</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>next</name> <operator>&amp;&amp;</operator> <name>curidx</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <name>num_choices</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>choices</name> <operator>+</operator> <name>curidx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>==</operator> <name>choices</name> <operator>+</operator> <name>num_choices</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>choices</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vartype</name> <operator>==</operator> <name>VLC_VAR_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name><name>choice</name><operator>-&gt;</operator><name>f_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>vartype</name> <operator>==</operator> <name>VLC_VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name><name>choice</name><operator>-&gt;</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vartype</name> <operator>==</operator> <name>VLC_VAR_STRING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_choices</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>choices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vout_CycleVariable</name><parameter_list>(<parameter><type><name>vout</name></type></parameter>, <parameter><type><name>varname</name></type></parameter>, <parameter><type><name>vartype</name></type></parameter>, <parameter><type><name>next</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { static_assert(vartype == VLC_VAR_FLOAT || vartype == VLC_VAR_STRING, "vartype must be either VLC_VAR_FLOAT or VLC_VAR_STRING"); vout_CycleVariable(vout, varname, vartype, next); } while (0)</cpp:value></cpp:define>

<macro><name>VOUT_ACTION_HANDLER</name><argument_list>(<argument>AspectRatio</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_CycleVariable</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"aspect-ratio"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>VOUT_ACTION_HANDLER</name><argument_list>(<argument>Crop</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>==</operator> <name>ACTIONID_CROP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vout_CycleVariable</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"crop"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_CROP</name><parameter_list>(<parameter><type><name>crop</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case ACTIONID_CROP_##crop: case ACTIONID_UNCROP_##crop: varname = "crop-"#var; delta = action_id == ACTIONID_CROP_##crop? +1 : -1; break;</cpp:value></cpp:define>

<macro><name>CASE_CROP</name><argument_list>(<argument>TOP</argument>, <argument>top</argument>)</argument_list></macro>

<macro><name>CASE_CROP</name><argument_list>(<argument>BOTTOM</argument>, <argument>bottom</argument>)</argument_list></macro>

<macro><name>CASE_CROP</name><argument_list>(<argument>LEFT</argument>, <argument>left</argument>)</argument_list></macro>

<macro><name>CASE_CROP</name><argument_list>(<argument>RIGHT</argument>, <argument>right</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE_CROP</name></cpp:undef>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>crop</name> <init>= <expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>crop</name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>VOUT_ACTION_HANDLER</name><argument_list>(<argument>Zoom</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>varname</name> <init>= <expr><literal type="string">"zoom"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_TOGGLE_AUTOSCALE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>var_GetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_ToggleBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"autoscale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_SCALE_DOWN</name></expr>:</case>

<case>case <expr><name>ACTIONID_SCALE_UP</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>zoom</name> <init>= <expr><call><name>var_GetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delta</name> <init>= <expr><ternary><condition><expr><name>action_id</name> <operator>==</operator> <name>ACTIONID_SCALE_DOWN</name></expr> ?</condition><then>

<expr><operator>-</operator><literal type="number">.1f</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">.1f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>zoom</name> <operator>&gt;=</operator> <literal type="number">.3f</literal> <operator>||</operator> <name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>zoom</name> <operator>&lt;=</operator> <literal type="number">10.f</literal> <operator>||</operator> <name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>zoom</name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ACTIONID_ZOOM</name></expr>:</case>

<case>case <expr><name>ACTIONID_UNZOOM</name></expr>:</case>

<expr_stmt><expr><call><name>vout_CycleVariable</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>VLC_VAR_FLOAT</name></expr></argument>,

<argument><expr><name>action_id</name> <operator>==</operator> <name>ACTIONID_ZOOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name> <specifier>const</specifier></type> <name><name>zoom_modes</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">.25f</literal></expr>, <expr><literal type="number">.5f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">2.f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>,

<argument><expr><name><name>zoom_modes</name><index>[<expr><name>action_id</name> <operator>-</operator> <name>ACTIONID_ZOOM_QUARTER</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block>

<macro><name>VOUT_ACTION_HANDLER</name><argument_list>(<argument>Deinterlace</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>==</operator> <name>ACTIONID_DEINTERLACE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>var_GetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>action_id</name> <operator>==</operator> <name>ACTIONID_DEINTERLACE_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_CycleVariable</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"deinterlace-mode"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<macro><name>VOUT_ACTION_HANDLER</name><argument_list>(<argument>SubtitleDisplay</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_sub_margin</name> <init>= <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_channel_order</name></name> <operator>==</operator> <name>VLC_VOUT_ORDER_PRIMARY</name></expr> ?</condition><then>

<expr><literal type="string">"sub-margin"</literal></expr> </then><else>: <expr><literal type="string">"secondary-sub-margin"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action_id</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ACTIONID_SUBPOS_DOWN</name></expr>:</case>

<expr_stmt><expr><call><name>var_DecInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>psz_sub_margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTIONID_SUBPOS_UP</name></expr>:</case>

<expr_stmt><expr><call><name>var_IncInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>psz_sub_margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>varname</name> <init>= <expr><literal type="string">"sub-text-scale"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>==</operator> <name>ACTIONID_SUBTITLE_TEXT_SCALE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>delta</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>scale</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><name>scale</name> <operator>-</operator> <literal type="number">100</literal></expr> </then><else>: <expr><literal type="number">100</literal> <operator>-</operator> <name>scale</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">25</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <ternary><condition><expr><name>delta</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">25</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>==</operator> <name>ACTIONID_SUBTITLE_TEXT_SCALE_DOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>-</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scale</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>-=</operator> <name>scale</name> <operator>%</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block>

<struct>struct <name>vlc_action</name>

<block>{

<enum>enum

<block>{

<decl><name>NULL_ACTION</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>INTF_ACTION</name></decl>,

<decl><name>PLAYLIST_ACTION</name></decl>,

<decl><name>PLAYER_ACTION</name></decl>,

<decl><name>VOUT_ACTION</name></decl>,

}</block> <decl><name>type</name></decl>;</enum>

<struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_action_id_t</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_action_id_t</name></type> <name>last</name></decl>;</decl_stmt>

}</block> <decl><name>range</name></decl>;</struct>

<union>union

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_intf</name>)<parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_action_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_playlist</name>)<parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_action_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_player</name>)<parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_action_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_vout</name>)<parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>, <parameter><decl><type><name>vlc_action_id_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block> <decl><name>handler</name></decl>;</union>

<decl_stmt><decl><type><name>bool</name></type> <name>pl_need_lock</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_action</name></name> <specifier>const</specifier></type> <name><name>actions</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ACTION</name><parameter_list>(<parameter><type><name>typeval</name></type></parameter>, <parameter><type><name>first</name></type></parameter>, <parameter><type><name>last</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .type = typeval, .range = { ACTIONID_##first, ACTIONID_##last }, .handler.fptr = action_handler_##name, .pl_need_lock = lock },</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ACTION_INTF</name><parameter_list>(<parameter><type><name>first</name></type></parameter>, <parameter><type><name>last</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_ACTION(INTF_ACTION, first, last, Intf ##name, lock)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ACTION_PLAYLIST</name><parameter_list>(<parameter><type><name>first</name></type></parameter>, <parameter><type><name>last</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_ACTION(PLAYLIST_ACTION, first, last, Playlist ##name, true)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ACTION_PLAYER</name><parameter_list>(<parameter><type><name>first</name></type></parameter>, <parameter><type><name>last</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>lock</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_ACTION(PLAYER_ACTION, first, last, Player ##name, lock)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_ACTION_VOUT</name><parameter_list>(<parameter><type><name>first</name></type></parameter>, <parameter><type><name>last</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_ACTION(VOUT_ACTION, first, last, Vout ##name, false)</cpp:value></cpp:define>

<macro><name>VLC_ACTION_INTF</name><argument_list>(<argument>QUIT</argument>, <argument>INTF_POPUP_MENU</argument>, <argument/>, <argument>false</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_INTF</name><argument_list>(<argument>COMBO_VOL_FOV_DOWN</argument>, <argument>COMBO_VOL_FOV_UP</argument>, <argument>ActionCombo</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYLIST</name><argument_list>(<argument>PLAY_CLEAR</argument>, <argument>NEXT</argument>, <argument>Interact</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYLIST</name><argument_list>(<argument>LOOP</argument>, <argument>RANDOM</argument>, <argument>Playback</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_INTF</name><argument_list>(<argument>SET_BOOKMARK1</argument>, <argument>PLAY_BOOKMARK10</argument>, <argument>PlaylistBookmark</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>PLAY_PAUSE</argument>, <argument>FRAME_NEXT</argument>, <argument>State</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_INTF</name><argument_list>(<argument>JUMP_BACKWARD_EXTRASHORT</argument>, <argument>JUMP_FORWARD_LONG</argument>, <argument>PlayerSeek</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>POSITION</argument>, <argument>POSITION</argument>, <argument>Position</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>PROGRAM_SID_PREV</argument>, <argument>DISC_MENU</argument>, <argument>NavigateMedia</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>AUDIO_TRACK</argument>, <argument>SUBTITLE_TRACK</argument>, <argument>Track</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>AUDIODELAY_DOWN</argument>, <argument>SUBDELAY_UP</argument>, <argument>Delay</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>RATE_NORMAL</argument>, <argument>RATE_FASTER_FINE</argument>, <argument>Rate</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>SUBTITLE_TOGGLE</argument>, <argument>SUBTITLE_TOGGLE</argument>, <argument>ToggleSubtitle</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>SUBTITLE_CONTROL_SECONDARY</argument>, <argument>SUBTITLE_CONTROL_SECONDARY</argument>,

<argument>ControlSubtitleSecondary</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>SUBSYNC_MARKAUDIO</argument>, <argument>SUBSYNC_RESET</argument>, <argument>SyncSubtitle</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>NAV_ACTIVATE</argument>, <argument>NAV_RIGHT</argument>, <argument>Navigate</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>VIEWPOINT_FOV_IN</argument>, <argument>VIEWPOINT_ROLL_ANTICLOCK</argument>, <argument>Viewpoint</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>RECORD</argument>, <argument>RECORD</argument>, <argument>Record</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>VOL_DOWN</argument>, <argument>AUDIODEVICE_CYCLE</argument>, <argument>Aout</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_PLAYER</name><argument_list>(<argument>TOGGLE_FULLSCREEN</argument>, <argument>WALLPAPER</argument>, <argument>Vouts</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_VOUT</name><argument_list>(<argument>ASPECT_RATIO</argument>, <argument>ASPECT_RATIO</argument>, <argument>AspectRatio</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_VOUT</name><argument_list>(<argument>CROP</argument>, <argument>UNCROP_RIGHT</argument>, <argument>Crop</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_VOUT</name><argument_list>(<argument>TOGGLE_AUTOSCALE</argument>, <argument>ZOOM_DOUBLE</argument>, <argument>Zoom</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_VOUT</name><argument_list>(<argument>DEINTERLACE</argument>, <argument>DEINTERLACE_MODE</argument>, <argument>Deinterlace</argument>)</argument_list></macro>

<macro><name>VLC_ACTION_VOUT</name><argument_list>(<argument>SUBPOS_DOWN</argument>, <argument>SUBTITLE_TEXT_SCALE_UP</argument>, <argument>SubtitleDisplay</argument>)</argument_list></macro>

<expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>NULL_ACTION</name></expr> }</block></expr>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VLC_ACTION_VOUT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VLC_ACTION_PLAYER</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VLC_ACTION_PLAYLIST</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VLC_ACTION_INTF</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VLC_ACTION</name></cpp:undef>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>handle_action</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>vlc_action_id_t</name></type> <name>action_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>action_idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>action_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actions</name><index>[<expr><name>action_idx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>NULL_ACTION</name></expr>;</condition> <incr><expr><operator>++</operator><name>action_idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>actions</name><index>[<expr><name>action_idx</name></expr>]</index></name><operator>.</operator><name><name>range</name><operator>.</operator><name>first</name></name> <operator>&lt;=</operator> <name>action_id</name> <operator>&amp;&amp;</operator>

<name><name>actions</name><index>[<expr><name>action_idx</name></expr>]</index></name><operator>.</operator><name><name>range</name><operator>.</operator><name>last</name></name> <operator>&gt;=</operator> <name>action_id</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>actions</name><index>[<expr><name>action_idx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>NULL_ACTION</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"no handler for action %d"</literal></expr></argument>, <argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_action</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>action</name> <init>= <expr><name>actions</name> <operator>+</operator> <name>action_idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>action</name><operator>-&gt;</operator><name>pl_need_lock</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>action</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>INTF_ACTION</name></expr>:</case>

<expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>handler</name><operator>.</operator><name>pf_intf</name></name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PLAYLIST_ACTION</name></expr>:</case>

<expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>handler</name><operator>.</operator><name>pf_playlist</name></name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PLAYER_ACTION</name></expr>:</case>

<case>case <expr><name>VOUT_ACTION</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>action</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PLAYER_ACTION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>handler</name><operator>.</operator><name>pf_player</name></name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>player</name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><call><name>vlc_player_vout_Hold</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>handler</name><operator>.</operator><name>pf_vout</name></name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>vout</name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_Release</name><argument_list>(<argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>action</name><operator>-&gt;</operator><name>pl_need_lock</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MouseButtonCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><operator>(</operator><name>vout_thread_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>newval</name><operator>.</operator><name>i_int</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MOUSE_BUTTON_LEFT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>var_GetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint-changeable"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>btn_pressed</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>btn_pressed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_GetCoords</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-moved"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>btn_pressed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>pressed</name> <init>= <expr><name><name>newval</name><operator>.</operator><name>i_int</name></name> <operator>&amp;</operator> <operator>~</operator><name><name>oldval</name><operator>.</operator><name>i_int</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MOUSE_BUTTON_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"intf-popupmenu"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MOUSE_BUTTON_CENTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"intf-toggle-fscontrol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MOUSE_BUTTON_RIGHT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>oldval</name><operator>.</operator><name>i_int</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MOUSE_BUTTON_RIGHT</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>newval</name><operator>.</operator><name>i_int</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MOUSE_BUTTON_RIGHT</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"intf-popupmenu"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>MOUSE_BUTTON_WHEEL_UP</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MOUSE_BUTTON_WHEEL_RIGHT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>pressed</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>keycode</name> <init>= <expr><call><name>KEY_MOUSEWHEEL_FROM_BUTTON</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_SetInteger</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-pressed"</literal></expr></argument>, <argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MouseMovedCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>ov</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>btn_pressed</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_horizontal</name> <init>= <expr><name><name>newval</name><operator>.</operator><name>coords</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_vertical</name> <init>= <expr><name><name>newval</name><operator>.</operator><name>coords</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_viewpoint_t</name></type> <name>viewpoint</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>yaw</name> <operator>=</operator> <operator>-</operator><name>i_horizontal</name> <operator>*</operator> <literal type="number">0.05f</literal></expr>,

<expr><operator>.</operator><name>pitch</name> <operator>=</operator> <operator>-</operator><name>i_vertical</name> <operator>*</operator> <literal type="number">0.05f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_UpdateViewpoint</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>viewpoint</name></expr></argument>,

<argument><expr><name>VLC_PLAYER_WHENCE_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>coords</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>coords</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ViewpointMovedCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>ov</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_UpdateViewpoint</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>(</operator><name>vlc_viewpoint_t</name> <operator>*</operator><operator>)</operator><name><name>newval</name><operator>.</operator><name>p_address</name></name></expr></argument>,

<argument><expr><name>VLC_PLAYER_WHENCE_RELATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>player_on_vout_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_player_vout_action</name></name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>vout</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_vout_order</name></name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>vlc_es_id_t</name> <modifier>*</modifier></type><name>es_id</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_es_id_GetCat</name><argument_list>(<argument><expr><name>es_id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>vrnav</name> <init>= <expr><call><name>var_GetBool</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint-changeable"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>action</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYER_VOUT_STARTED</name></expr>:</case>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-button-down"</literal></expr></argument>, <argument><expr><name>MouseButtonCallback</name></expr></argument>, <argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-moved"</literal></expr></argument>, <argument><expr><name>MouseMovedCallback</name></expr></argument>, <argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vrnav</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint-moved"</literal></expr></argument>,

<argument><expr><name>ViewpointMovedCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_VOUT_STOPPED</name></expr>:</case>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-button-down"</literal></expr></argument>, <argument><expr><name>MouseButtonCallback</name></expr></argument>, <argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"mouse-moved"</literal></expr></argument>, <argument><expr><name>MouseMovedCallback</name></expr></argument>, <argument><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vrnav</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><literal type="string">"viewpoint-moved"</literal></expr></argument>,

<argument><expr><name>ViewpointMovedCallback</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ActionCallback</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>ov</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_action</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intf_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vrnav</name><operator>.</operator><name>btn_pressed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name> <operator>=</operator> <call><name>vlc_intf_GetMainPlaylist</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>audio_time</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>subsync</name><operator>.</operator><name>subtitle_time</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_channel_order</name></name> <operator>=</operator> <name>VLC_VOUT_ORDER_PRIMARY</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name> <specifier>const</specifier></type> <name>player_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>on_vout_changed</name> <operator>=</operator> <name>player_on_vout_changed</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>player_listener</name></name> <operator>=</operator> <call><name>vlc_player_AddListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player_cbs</name></expr></argument>, <argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ActionCallback</name></expr></argument>, <argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-action"</literal></expr></argument>, <argument><expr><name>ActionCallback</name></expr></argument>, <argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Hotkeys"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Hotkeys management interface"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INTERFACE</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INTERFACE_HOTKEYS</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
