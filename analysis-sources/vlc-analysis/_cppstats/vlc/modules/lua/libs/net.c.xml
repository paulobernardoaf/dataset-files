<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\lua\libs\net.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>vlclua_dtable_t</name> <modifier>*</modifier></type><name>vlclua_get_dtable</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlclua_get_object</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_get_dtable</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_interrupt_t</name> <modifier>*</modifier></type><name>vlclua_set_interrupt</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlclua_dtable_t</name> <modifier>*</modifier></type><name>dt</name> <init>= <expr><call><name>vlclua_get_dtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_interrupt_set</name><argument_list>( <argument><expr><name><name>dt</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_fd_map</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlclua_dtable_t</name> <modifier>*</modifier></type><name>dt</name> <init>= <expr><call><name>vlclua_get_dtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">3u</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name> <operator>&gt;=</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fdv</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>fdv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name></name> <operator>=</operator> <name>fdv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>fd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_fd_map_safe</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>luafd</name> <init>= <expr><call><name>vlclua_fd_map</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>luafd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>luafd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_fd_get</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlclua_dtable_t</name> <modifier>*</modifier></type><name>dt</name> <init>= <expr><call><name>vlclua_get_dtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>idx</name> <operator>&lt;</operator> <literal type="number">3u</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>idx</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>&lt;</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_fd_get_lua</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlclua_dtable_t</name> <modifier>*</modifier></type><name>dt</name> <init>= <expr><call><name>vlclua_get_dtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">3u</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>fd</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlclua_fd_unmap</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlclua_dtable_t</name> <modifier>*</modifier></type><name>dt</name> <init>= <expr><call><name>vlclua_get_dtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>idx</name> <operator>&lt;</operator> <literal type="number">3u</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>idx</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>idx</name> <operator>&gt;=</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>fd</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vlclua_fd_unmap_safe</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlclua_fd_get</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlclua_fd_unmap</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name>fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_listen_close</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_accept</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_fds</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_net_listen_reg</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"accept"</literal></expr>, <expr><name>vlclua_net_accept</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fds"</literal></expr>, <expr><name>vlclua_net_fds</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_listen_tcp</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_host</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_port</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_fd</name> <init>= <expr><call><name>net_ListenTCP</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_fd</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Cannot listen on %s:%d"</literal></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pi_fd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlclua_fd_map</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>pi_fd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlclua_fd_unmap</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>vlclua_fd_get_lua</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>pi_fd</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>net_ListenClose</name><argument_list>( <argument><expr><name>pi_fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Cannot listen on %s:%d"</literal></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppi_fd</name> <init>= <expr><call><name>lua_newuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ppi_fd</name> <operator>=</operator> <name>pi_fd</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>luaL_newmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"net_listen"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_net_listen_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_net_listen_close</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__gc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_listen_close</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppi_fd</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"net_listen"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_fd</name> <init>= <expr><operator>*</operator><name>ppi_fd</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>pi_fd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlclua_fd_unmap</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>vlclua_fd_get_lua</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>pi_fd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>net_ListenClose</name><argument_list>( <argument><expr><name>pi_fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_fds</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppi_fd</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"net_listen"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_fd</name> <init>= <expr><operator>*</operator><name>ppi_fd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>pi_fd</name><index>[<expr><name>i_count</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>vlclua_fd_get_lua</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>pi_fd</name><index>[<expr><name>i_count</name><operator>++</operator></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>i_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_accept</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppi_fd</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"net_listen"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name> <init>= <expr><call><name>net_Accept</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>*</operator><name>ppi_fd</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>vlclua_fd_map_safe</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_fd</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_connect_tcp</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_host</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_port</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name> <init>= <expr><call><name>net_ConnectTCP</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_host</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>vlclua_fd_map_safe</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_fd</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_close</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlclua_fd_unmap_safe</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_fd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_send</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlclua_fd_get</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_buffer</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>luaL_optinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>vlc_send</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_recv</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlclua_fd_get</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>luaL_optinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_buffer</name><index>[<expr><name>i_len</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>recv</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_net_poll</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>luaL_checktype</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LUA_TTABLE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>lua_next</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_fds</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>p_fds</name> <init>= <expr><call><name>xmalloc</name><argument_list>( <argument><expr><name>i_fds</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_fds</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>luafds</name> <init>= <expr><call><name>xmalloc</name><argument_list>( <argument><expr><name>i_fds</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>luafds</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><call><name>lua_next</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>luafds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>vlclua_fd_get</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>luafds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLOUT</name> <operator>|</operator> <name>POLLPRI</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>vlc_interrupt_t</name> <modifier>*</modifier></type><name>oint</name> <init>= <expr><call><name>vlclua_set_interrupt</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_killed</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_poll_i11e</name><argument_list>( <argument><expr><name>p_fds</name></expr></argument>, <argument><expr><name>i_fds</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while<condition>( <expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr> )</condition>;</do>

<expr_stmt><expr><call><name>vlc_interrupt_set</name><argument_list>( <argument><expr><name>oint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_fds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>luafds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>luafds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_fds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Interrupted."</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_fd_write</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlclua_fd_get</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_buffer</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>luaL_optinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>vlc_write</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_fd_read</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlclua_fd_get</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>luaL_optinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_buffer</name><index>[<expr><name>i_len</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>read</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_stat</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stat</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>S_ISREG</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>S_ISDIR</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"dir"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_ISCHR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>( <expr><call><name>S_ISCHR</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"character device"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_ISBLK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>( <expr><call><name>S_ISBLK</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"block device"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_ISFIFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>( <expr><call><name>S_ISFIFO</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"fifo"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_ISLNK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>( <expr><call><name>S_ISLNK</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"symbolic link"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_ISSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>( <expr><call><name>S_ISSOCK</name><argument_list>( <argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>st_uid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"uid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>st_gid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>st_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>st_atime</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"access_time"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>st_mtime</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"modification_time"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>st_ctime</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"creation_time"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_opendir</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_dir</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>p_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_dir</name> <operator>=</operator> <call><name>vlc_opendir</name><argument_list>( <argument><expr><name>psz_dir</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"cannot open directory `%s'."</literal></expr></argument>, <argument><expr><name>psz_dir</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name> <init>= <expr><call><name>vlc_readdir</name><argument_list>( <argument><expr><name>p_dir</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_filename</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>closedir</name><argument_list>( <argument><expr><name>p_dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_net_intf_reg</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"listen_tcp"</literal></expr>, <expr><name>vlclua_net_listen_tcp</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"connect_tcp"</literal></expr>, <expr><name>vlclua_net_connect_tcp</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"close"</literal></expr>, <expr><name>vlclua_net_close</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"send"</literal></expr>, <expr><name>vlclua_net_send</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"recv"</literal></expr>, <expr><name>vlclua_net_recv</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"poll"</literal></expr>, <expr><name>vlclua_net_poll</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"read"</literal></expr>, <expr><name>vlclua_fd_read</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"write"</literal></expr>, <expr><name>vlclua_fd_write</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"url_parse"</literal></expr>, <expr><name>vlclua_url_parse</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stat"</literal></expr>, <expr><name>vlclua_stat</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"opendir"</literal></expr>, <expr><name>vlclua_opendir</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>luaopen_net_intf</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_net_intf_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CONSTANT</name><parameter_list>( <parameter><type><name>value</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>lua_pushinteger( L, POLL##value ); lua_setfield( L, -2, "POLL"#value );</cpp:value></cpp:define>

<macro><name>ADD_CONSTANT</name><argument_list>( <argument>IN</argument> )</argument_list></macro>

<macro><name>ADD_CONSTANT</name><argument_list>( <argument>PRI</argument> )</argument_list></macro>

<macro><name>ADD_CONSTANT</name><argument_list>( <argument>OUT</argument> )</argument_list></macro>

<macro><name>ADD_CONSTANT</name><argument_list>( <argument>ERR</argument> )</argument_list></macro>

<macro><name>ADD_CONSTANT</name><argument_list>( <argument>HUP</argument> )</argument_list></macro>

<macro><name>ADD_CONSTANT</name><argument_list>( <argument>NVAL</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"net"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlclua_fd_init</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>vlclua_dtable_t</name> <modifier>*</modifier></type><name>dt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>interrupt</name></name> <operator>=</operator> <call><name>vlc_interrupt_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>dt</name><operator>-&gt;</operator><name>interrupt</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlclua_set_object</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_get_dtable</name></expr></argument>, <argument><expr><name>dt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_net_intf</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlclua_fd_interrupt</name><parameter_list>( <parameter><decl><type><name>vlclua_dtable_t</name> <modifier>*</modifier></type><name>dt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_interrupt_kill</name><argument_list>( <argument><expr><name><name>dt</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlclua_fd_cleanup</name><parameter_list>( <parameter><decl><type><name>vlclua_dtable_t</name> <modifier>*</modifier></type><name>dt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dt</name><operator>-&gt;</operator><name>fdc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>dt</name><operator>-&gt;</operator><name>fdv</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_destroy</name><argument_list>(<argument><expr><name><name>dt</name><operator>-&gt;</operator><name>interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
