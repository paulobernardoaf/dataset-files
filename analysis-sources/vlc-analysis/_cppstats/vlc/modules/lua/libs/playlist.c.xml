<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\lua\libs\playlist.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>vlclua_set_playlist_internal</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlclua_set_object</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_set_playlist_internal</name></expr></argument>, <argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>vlclua_get_playlist_internal</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlclua_get_object</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_set_playlist_internal</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_prev</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Prev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_next</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Next</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_skip</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>-</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_Prev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_Next</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_play</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_playlist_GetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_playlist_GoTo</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Start</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_pause</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_PLAYER_STATE_PAUSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_Pause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_Resume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_stop</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Stop</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_clear</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Clear</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>take_bool</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_repeat_</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>enabled_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlclua_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>enable</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>repeat</name> <operator>!=</operator> <name>enabled_mode</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <call><name>take_bool</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>new_repeat</name> <init>= <expr><ternary><condition><expr><name>enable</name></expr>

?</condition><then> <expr><name>enabled_mode</name></expr>

</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>new_repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_repeat</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlclua_playlist_repeat_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_loop</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlclua_playlist_repeat_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_get_repeat</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>repeat</name> <operator>!=</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_get_loop</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>repeat</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_random</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlclua_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>enable</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>order</name> <operator>!=</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <call><name>take_bool</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>new_order</name> <init>= <expr><ternary><condition><expr><name>enable</name></expr>

?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>

</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>new_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_get_random</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>order</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_gotoitem</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_IndexOfId</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_ENOITEM</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_GoTo</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_delete</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_IndexOfId</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_RemoveOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_move</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>item_id</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>target_id</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>item_index</name> <init>= <expr><call><name>vlc_playlist_IndexOfId</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>item_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>target_index</name> <init>= <expr><call><name>vlc_playlist_IndexOfId</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>target_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>target_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_index</name> <init>= <expr><ternary><condition><expr><name>item_index</name> <operator>&lt;=</operator> <name>target_index</name></expr> ?</condition><then> <expr><name>target_index</name></expr>

</then><else>: <expr><name>target_index</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_MoveOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>item_index</name></expr></argument>, <argument><expr><name>new_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_add_common</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>play</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_istable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Playlist should be a table."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>lua_next</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlclua_read_input_item</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_playlist_AppendOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>play</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>last</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_PlayAt</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_add</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlclua_playlist_add_common</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_enqueue</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlclua_playlist_add_common</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>push_playlist_item</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>vlc_playlist_item_GetId</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>vlc_playlist_item_GetMedia</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>input_item_GetTitleFbName</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>media</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>media</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>secf_from_vlc_tick</name><argument_list>(<argument><expr><name><name>media</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_input_item</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_get</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>item_id</name> <init>= <expr><call><name>luaL_checkinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_IndexOfId</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>item_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><ternary><condition><expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>vlc_playlist_Get</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>push_playlist_item</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_list</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>push_playlist_item</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>vlc_playlist_Get</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_current</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>current</name> <init>= <expr><call><name>vlc_playlist_GetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_playlist_Get</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>vlc_playlist_item_GetId</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_current_item</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>index</name> <init>= <expr><call><name>vlc_playlist_GetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><ternary><condition><expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>vlc_playlist_Get</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>push_playlist_item</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vlc_sort_key_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyname</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>vlc_playlist_sort_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_sort_key</name></name></type> <name>key</name></decl>;</decl_stmt>

}</block> <decl><name><name>map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"title"</literal></expr>, <expr><name>VLC_PLAYLIST_SORT_KEY_TITLE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"artist"</literal></expr>, <expr><name>VLC_PLAYLIST_SORT_KEY_ARTIST</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"genre"</literal></expr>, <expr><name>VLC_PLAYLIST_SORT_KEY_GENRE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"duration"</literal></expr>, <expr><name>VLC_PLAYLIST_SORT_KEY_DURATION</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"album"</literal></expr>, <expr><name>VLC_PLAYLIST_SORT_KEY_ALBUM</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keyname</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_sort</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyname</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr><literal type="string">"random"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Shuffle</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name></type> <name>criterion</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_sort_key_from_string</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>criterion</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Invalid search key."</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>criterion</name><operator>.</operator><name>order</name></name> <operator>=</operator> <ternary><condition><expr><call><name>luaL_optboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>VLC_PLAYLIST_SORT_ORDER_DESCENDING</name></expr>

</then><else>: <expr><name>VLC_PLAYLIST_SORT_ORDER_ASCENDING</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_playlist_Sort</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>criterion</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_playlist_status</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlclua_get_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name> <init>= <expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_STARTED</name></expr>:</case>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"playing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"paused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_STOPPING</name></expr>:</case>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"stopping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_playlist_reg</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"prev"</literal></expr>, <expr><name>vlclua_playlist_prev</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"next"</literal></expr>, <expr><name>vlclua_playlist_next</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"skip"</literal></expr>, <expr><name>vlclua_playlist_skip</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"play"</literal></expr>, <expr><name>vlclua_playlist_play</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pause"</literal></expr>, <expr><name>vlclua_playlist_pause</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stop"</literal></expr>, <expr><name>vlclua_playlist_stop</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"clear"</literal></expr>, <expr><name>vlclua_playlist_clear</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"repeat"</literal></expr>, <expr><name>vlclua_playlist_repeat</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"repeat_"</literal></expr>, <expr><name>vlclua_playlist_repeat</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"loop"</literal></expr>, <expr><name>vlclua_playlist_loop</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"random"</literal></expr>, <expr><name>vlclua_playlist_random</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get_repeat"</literal></expr>, <expr><name>vlclua_playlist_get_repeat</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get_loop"</literal></expr>, <expr><name>vlclua_playlist_get_loop</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get_random"</literal></expr>, <expr><name>vlclua_playlist_get_random</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LUA_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">502</literal></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"goto"</literal></expr>, <expr><name>vlclua_playlist_gotoitem</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"gotoitem"</literal></expr>, <expr><name>vlclua_playlist_gotoitem</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add"</literal></expr>, <expr><name>vlclua_playlist_add</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"enqueue"</literal></expr>, <expr><name>vlclua_playlist_enqueue</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get"</literal></expr>, <expr><name>vlclua_playlist_get</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"list"</literal></expr>, <expr><name>vlclua_playlist_list</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"current"</literal></expr>, <expr><name>vlclua_playlist_current</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"current_item"</literal></expr>, <expr><name>vlclua_playlist_current_item</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sort"</literal></expr>, <expr><name>vlclua_playlist_sort</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><name>vlclua_playlist_status</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"delete"</literal></expr>, <expr><name>vlclua_playlist_delete</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"move"</literal></expr>, <expr><name>vlclua_playlist_move</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>luaopen_playlist</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_playlist_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"playlist"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
