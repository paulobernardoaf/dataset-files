<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\lua\libs\dialog.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_extensions.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assert.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_create</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_delete</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_show</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_hide</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_set_title</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_update</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lua_SetDialogUpdate</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>lua_GetDialogUpdate</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>lua_DialogFlush</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_button</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_label</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_html</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_text_inner</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlclua_dialog_add_text_input</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlclua_dialog_add_text_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>EXTENSION_WIDGET_TEXT_FIELD</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlclua_dialog_add_password</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlclua_dialog_add_text_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>EXTENSION_WIDGET_PASSWORD</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlclua_dialog_add_html</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlclua_dialog_add_text_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>EXTENSION_WIDGET_HTML</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_check_box</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_list</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_dropdown</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_image</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_spin_icon</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_create_widget_inner</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_args</name></decl></parameter>,

<parameter><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_delete_widget</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_set_text</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_get_text</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_set_checked</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_get_checked</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_add_value</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_get_value</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_clear</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_get_selection</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_animate</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_stop</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AddWidget</name><parameter_list>( <parameter><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dialog</name></decl></parameter>,

<parameter><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DeleteWidget</name><parameter_list>( <parameter><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dialog</name></decl></parameter>,

<parameter><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_dialog_reg</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"show"</literal></expr>, <expr><name>vlclua_dialog_show</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hide"</literal></expr>, <expr><name>vlclua_dialog_hide</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"delete"</literal></expr>, <expr><name>vlclua_dialog_delete</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"set_title"</literal></expr>, <expr><name>vlclua_dialog_set_title</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"update"</literal></expr>, <expr><name>vlclua_dialog_update</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_button"</literal></expr>, <expr><name>vlclua_dialog_add_button</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_label"</literal></expr>, <expr><name>vlclua_dialog_add_label</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_html"</literal></expr>, <expr><name>vlclua_dialog_add_html</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_text_input"</literal></expr>, <expr><name>vlclua_dialog_add_text_input</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_password"</literal></expr>, <expr><name>vlclua_dialog_add_password</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_check_box"</literal></expr>, <expr><name>vlclua_dialog_add_check_box</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_dropdown"</literal></expr>, <expr><name>vlclua_dialog_add_dropdown</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_list"</literal></expr>, <expr><name>vlclua_dialog_add_list</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_image"</literal></expr>, <expr><name>vlclua_dialog_add_image</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_spin_icon"</literal></expr>, <expr><name>vlclua_dialog_add_spin_icon</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"del_widget"</literal></expr>, <expr><name>vlclua_dialog_delete_widget</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_widget_reg</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"set_text"</literal></expr>, <expr><name>vlclua_widget_set_text</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get_text"</literal></expr>, <expr><name>vlclua_widget_get_text</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"set_checked"</literal></expr>, <expr><name>vlclua_widget_set_checked</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get_checked"</literal></expr>, <expr><name>vlclua_widget_get_checked</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add_value"</literal></expr>, <expr><name>vlclua_widget_add_value</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get_value"</literal></expr>, <expr><name>vlclua_widget_get_value</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"clear"</literal></expr>, <expr><name>vlclua_widget_clear</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get_selection"</literal></expr>, <expr><name>vlclua_widget_get_selection</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"animate"</literal></expr>, <expr><name>vlclua_widget_animate</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stop"</literal></expr>, <expr><name>vlclua_widget_stop</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name>key_opaque</name> <init>= <expr><literal type="char">'A'</literal></expr></init></decl>,

<decl><type ref="prev"/><name>key_update</name> <init>= <expr><literal type="char">'B'</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>luaopen_dialog</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_dialog_create</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key_opaque</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_create</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc.dialog() usage: (title)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_dialog_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dlg</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"__dialog"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_topointer</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_dlg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Only one dialog allowed per extension!"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>p_object</name></name> <operator>=</operator> <name>p_this</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>b_kill</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>( <argument><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>widgets</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key_opaque</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_gettable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>lua_topointer</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_dlg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__dialog"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dlg</name> <init>= <expr><call><name>lua_newuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_dialog_t</name><operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_dlg</name> <operator>=</operator> <name>p_dlg</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>luaL_newmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_dialog_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_dialog_delete</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__gc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Creating dialog '%s'"</literal></expr></argument>, <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_delete</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_mgr</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dlg</name> <init>=

<expr><operator>(</operator><name>extension_dialog_t</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_dlg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_dlg</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to dialog"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><operator>*</operator><name>pp_dlg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_dlg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__dialog"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>b_kill</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Deleting dialog '%s'"</literal></expr></argument>, <argument><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>b_kill</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_ext_dialog_update</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_dlg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Waiting for the dialog to be deleted..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_dlg</name><operator>-&gt;</operator><name>p_sys_intf</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name></decl>;</decl_stmt>

<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_widget</argument>, <argument>p_dlg-&gt;widgets</argument> )</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_widget</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>extension_widget_value_t</name></name> <modifier>*</modifier></type><name>p_value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_value</name> <operator>=</operator> <name><name>p_widget</name><operator>-&gt;</operator><name>p_values</name></name></expr>;</init> <condition><expr><name>p_value</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_value</name> <operator>=</operator> <name>p_next</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_value</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_value</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>widgets</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_dlg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_show</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dlg</name> <init>=

<expr><operator>(</operator><name>extension_dialog_t</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_dlg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_dlg</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to dialog"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><operator>*</operator><name>pp_dlg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>b_hide</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_hide</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dlg</name> <init>=

<expr><operator>(</operator><name>extension_dialog_t</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_dlg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_dlg</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to dialog"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><operator>*</operator><name>pp_dlg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>b_hide</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_set_title</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dlg</name> <init>=

<expr><operator>(</operator><name>extension_dialog_t</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_dlg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_dlg</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to dialog"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><operator>*</operator><name>pp_dlg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_title</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dlg</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_update</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_mgr</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dlg</name> <init>=

<expr><operator>(</operator><name>extension_dialog_t</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_dlg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_dlg</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to dialog"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><operator>*</operator><name>pp_dlg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_ext_dialog_update</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_dlg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lua_SetDialogUpdate</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>flag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_GetDialogUpdate</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key_update</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_gettable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>lua_DialogFlush</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"__dialog"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><operator>(</operator> <name>extension_dialog_t</name><operator>*</operator> <operator>)</operator><call><name>lua_topointer</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dlg</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_GetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_ext_dialog_update</name><argument_list>( <argument><expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_dlg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_button</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>lua_isfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"dialog:add_button usage: (text, func)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_widget_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EXTENSION_WIDGET_BUTTON</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_create_widget_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_label</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"dialog:add_label usage: (text)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_widget_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EXTENSION_WIDGET_LABEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_create_widget_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_text_inner</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>lua_isnil</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"dialog:add_text_input usage: (text = nil)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_widget_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isnil</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlclua_create_widget_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_check_box</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"dialog:add_check_box usage: (text, checked)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_widget_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EXTENSION_WIDGET_CHECK_BOX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_checked</name></name> <operator>=</operator> <call><name>lua_toboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_create_widget_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_dropdown</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_widget_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EXTENSION_WIDGET_DROPDOWN</name></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_create_widget_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_list</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_widget_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EXTENSION_WIDGET_LIST</name></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_create_widget_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_image</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"dialog:add_image usage: (filename)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_widget_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EXTENSION_WIDGET_IMAGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_create_widget_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_add_spin_icon</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"dialog:add_image usage: (filename)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_widget_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EXTENSION_WIDGET_SPIN_ICON</name></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_create_widget_inner</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_create_widget_inner</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_args</name></decl></parameter>,

<parameter><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><name>i_args</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dlg</name> <init>=

<expr><operator>(</operator><name>extension_dialog_t</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_dlg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_dlg</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to dialog"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><operator>*</operator><name>pp_dlg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name></name> <operator>=</operator> <name>p_dlg</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_isnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_column</name></name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <goto>goto <name>end_of_args</name>;</goto></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_isnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>++</operator><name>arg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_row</name></name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <goto>goto <name>end_of_args</name>;</goto></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_isnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>++</operator><name>arg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_horiz_span</name></name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <goto>goto <name>end_of_args</name>;</goto></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_isnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>++</operator><name>arg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_vert_span</name></name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <goto>goto <name>end_of_args</name>;</goto></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_isnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>++</operator><name>arg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <goto>goto <name>end_of_args</name>;</goto></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_isnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>++</operator><name>arg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <goto>goto <name>end_of_args</name>;</goto></block_content></block></else></if_stmt>

<label><name>end_of_args</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddWidget</name><argument_list>( <argument><expr><name>p_dlg</name></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>= <expr><call><name>lua_newuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_widget_t</name><operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_widget</name> <operator>=</operator> <name>p_widget</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>luaL_newmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_widget_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_set_text</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"widget:set_text usage: (text)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>EXTENSION_WIDGET_LABEL</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_BUTTON</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_HTML</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_TEXT_FIELD</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_PASSWORD</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_DROPDOWN</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_CHECK_BOX</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>EXTENSION_WIDGET_LIST</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_IMAGE</name></expr>:</case>

<default>default:</default>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method set_text not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_get_text</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>EXTENSION_WIDGET_LABEL</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_BUTTON</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_HTML</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_TEXT_FIELD</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_PASSWORD</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_DROPDOWN</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_CHECK_BOX</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>EXTENSION_WIDGET_LIST</name></expr>:</case>

<case>case <expr><name>EXTENSION_WIDGET_IMAGE</name></expr>:</case>

<default>default:</default>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method get_text not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_get_checked</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_CHECK_BOX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method get_checked not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_checked</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_add_value</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_DROPDOWN</name>

<operator>&amp;&amp;</operator> <name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_LIST</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method add_value not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"widget:add_value usage: (text, id = 0)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>extension_widget_value_t</name></name> <modifier>*</modifier></type><name>p_value</name></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>p_new_value</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>extension_widget_value_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_new_value</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_value</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <call><name>lua_tointeger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_values</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>p_values</name></name> <operator>=</operator> <name>p_new_value</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EXTENSION_WIDGET_DROPDOWN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_new_value</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for<control>( <init><expr><name>p_value</name> <operator>=</operator> <name><name>p_widget</name><operator>-&gt;</operator><name>p_values</name></name></expr>;</init>

<condition><expr><name><name>p_value</name><operator>-&gt;</operator><name>p_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>p_value</name> <operator>=</operator> <name><name>p_value</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content> </block_content>}</block></for>

<expr_stmt><expr><name><name>p_value</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_new_value</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_get_value</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_DROPDOWN</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method get_value not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>extension_widget_value_t</name></name> <modifier>*</modifier></type><name>p_value</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_value</name> <operator>=</operator> <name><name>p_widget</name><operator>-&gt;</operator><name>p_values</name></name></expr>;</init>

<condition><expr><name>p_value</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>p_value</name> <operator>=</operator> <name><name>p_value</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_value</name><operator>-&gt;</operator><name>b_selected</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_value</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_value</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_clear</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_DROPDOWN</name>

<operator>&amp;&amp;</operator> <name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_LIST</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method clear not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>extension_widget_value_t</name></name> <modifier>*</modifier></type><name>p_value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_value</name> <operator>=</operator> <name><name>p_widget</name><operator>-&gt;</operator><name>p_values</name></name></expr>;</init>

<condition><expr><name>p_value</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>p_value</name> <operator>=</operator> <name>p_next</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_value</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_value</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>p_values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_get_selection</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_LIST</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method get_selection not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>extension_widget_value_t</name></name> <modifier>*</modifier></type><name>p_value</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_value</name> <operator>=</operator> <name><name>p_widget</name><operator>-&gt;</operator><name>p_values</name></name></expr>;</init>

<condition><expr><name>p_value</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>p_value</name> <operator>=</operator> <name><name>p_value</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_value</name><operator>-&gt;</operator><name>b_selected</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_value</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_value</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_set_checked</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_CHECK_BOX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method set_checked not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"widget:set_checked usage: (bool)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_old_check</name> <init>= <expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_checked</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_checked</name></name> <operator>=</operator> <call><name>lua_toboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_old_check</name> <operator>!=</operator> <name><name>p_widget</name><operator>-&gt;</operator><name>b_checked</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_animate</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_SPIN_ICON</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method animate not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_spin_loops</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_spin_loops</name></name> <operator>=</operator> <call><name>lua_tointeger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_widget_stop</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>EXTENSION_WIDGET_SPIN_ICON</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"method stop not valid for this widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_needs_update</name> <init>= <expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_spin_loops</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>i_spin_loops</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_widget</name><operator>-&gt;</operator><name>p_dialog</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_needs_update</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dialog_delete_widget</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dlg</name> <init>=

<expr><operator>(</operator><name>extension_dialog_t</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_dlg</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_dlg</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to dialog"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dlg</name> <init>= <expr><operator>*</operator><name>pp_dlg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Argument to del_widget is not a widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_widget</name> <init>=

<expr><operator>(</operator><name>extension_widget_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"widget"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_widget</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_widget</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Can't get pointer to widget"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><operator>*</operator><name>pp_widget</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_widget</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>EXTENSION_WIDGET_BUTTON</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_mgr</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_widget</name><operator>-&gt;</operator><name>b_kill</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_SetDialogUpdate</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_ext_dialog_update</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_dlg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Could not delete widget"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_widget</name><operator>-&gt;</operator><name>p_sys_intf</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>b_kill</name></name>

<operator>&amp;&amp;</operator> <name><name>p_dlg</name><operator>-&gt;</operator><name>p_sys_intf</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>DeleteWidget</name><argument_list>( <argument><expr><name>p_dlg</name></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dlg</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Could not remove widget from list"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddWidget</name><parameter_list>( <parameter><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dialog</name></decl></parameter>,

<parameter><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_dialog</name><operator>-&gt;</operator><name>widgets</name></name></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeleteWidget</name><parameter_list>( <parameter><decl><type><name>extension_dialog_t</name> <modifier>*</modifier></type><name>p_dialog</name></decl></parameter>,

<parameter><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_iter</name></decl>;</decl_stmt>

<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_iter</argument>, <argument>p_dialog-&gt;widgets</argument> )</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_iter</name> <operator>==</operator> <name>p_widget</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>found</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ARRAY_REMOVE</name><argument_list>( <argument><expr><name><name>p_dialog</name><operator>-&gt;</operator><name>widgets</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_widget</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>extension_widget_value_t</name></name> <modifier>*</modifier></type><name>p_value</name> <init>= <expr><name><name>p_widget</name><operator>-&gt;</operator><name>p_values</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_value</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_value</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>extension_widget_value_t</name></name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name>p_value</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_value</name> <operator>=</operator> <name><name>p_value</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>old</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_widget</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
