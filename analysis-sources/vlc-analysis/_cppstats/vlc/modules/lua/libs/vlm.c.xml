<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\lua\libs\vlm.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vlm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_vlm_delete</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_vlm_execute_command</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_vlm_reg</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"execute_command"</literal></expr>, <expr><name>vlclua_vlm_execute_command</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_vlm_new</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_t</name> <modifier>*</modifier></type><name>p_vlm</name> <init>= <expr><call><name>vlm_New</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_vlm</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Cannot start VLM."</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlm_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vlm</name> <init>= <expr><call><name>lua_newuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>vlm_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_vlm</name> <operator>=</operator> <name>p_vlm</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>luaL_newmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlm"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_vlm_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_vlm_delete</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"__gc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_vlm_delete</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vlm</name> <init>= <expr><operator>(</operator><name>vlm_t</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlm"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlm_Delete</name><argument_list>( <argument><expr><operator>*</operator><name>pp_vlm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>push_message</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>message</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_createtable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>message</name><operator>-&gt;</operator><name>i_child</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_createtable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>i_child</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>message</name><operator>-&gt;</operator><name>i_child</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_message</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"children"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>message</name><operator>-&gt;</operator><name>psz_value</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_vlm_execute_command</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlm_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vlm</name> <init>= <expr><operator>(</operator><name>vlm_t</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlm"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_command</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlm_message_t</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlm_ExecuteCommand</name><argument_list>( <argument><expr><operator>*</operator><name>pp_vlm</name></expr></argument>, <argument><expr><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_message</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlm_MessageDelete</name><argument_list>( <argument><expr><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>vlclua_push_ret</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_vlm_new</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"Cannot start VLM because it was disabled when compiling VLC."</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>luaopen_vlm</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_vlm_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"vlm"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
