<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\lua\libs\win.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>HANDLE</name></type> <name>GetConsole</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hConsoleIn</name> <init>= <expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>hConsoleIn</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"couldn't find user input handle"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hConsoleIn</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE_LENGTH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ReadWin32</name><parameter_list>( <parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>hConsoleIn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>input_record</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>i_dw</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pi_size</name> <operator>&lt;</operator> <name>MAX_LINE_LENGTH</name> <operator>-</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<call><name>ReadConsoleInput</name><argument_list>( <argument><expr><name>hConsoleIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_record</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dw</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>input_record</name><operator>.</operator><name>EventType</name></name> <operator>!=</operator> <name>KEY_EVENT</name> <operator>||</operator>

<operator>!</operator><name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name> <operator>||</operator>

<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_SHIFT</name> <operator>||</operator>

<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_CONTROL</name><operator>||</operator>

<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_MENU</name> <operator>||</operator>

<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_CAPITAL</name></expr> )</condition>

<block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator>

<name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>( <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_size</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'\b'</literal></expr>:</case>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>pi_size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>pi_size</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_size</name><operator>)</operator> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nbBytes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pi_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_size</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nbBytes</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>clz</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>~</operator><operator>(</operator><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call> <operator>==</operator> <name>nbBytes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_size</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\b \b"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>psz_winput</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>input_record</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>UnicodeChar</name></name></expr>, <expr><name>L</name><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_input</name> <init>= <expr><call><name>FromWide</name><argument_list>( <argument><expr><name>psz_winput</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>pi_size</name> <operator>+</operator> <name>input_size</name> <operator>&gt;</operator> <name>MAX_LINE_LENGTH</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buffer</name><index>[ <expr><operator>*</operator><name>pi_size</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><operator>*</operator><name>pi_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>utf8_fprintf</name><argument_list>( <argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>+=</operator> <name>input_size</name></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><name><name>p_buffer</name><index>[ <expr><operator>*</operator><name>pi_size</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_console_init</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AllocConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"CONOUT$"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"CONOUT$"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><literal type="string">"CONIN$"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_console_wait</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_timeout</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>luaL_optinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>status</name> <init>= <expr><call><name>WaitForSingleObject</name><argument_list>( <argument><expr><call><name>GetConsole</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>i_timeout</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>status</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_console_read</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_buffer</name><index>[<expr><name>MAX_LINE_LENGTH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ReadWin32</name><argument_list>( <argument><expr><call><name>GetConsole</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>psz_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_console_write</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"win.console_write usage: (text)"</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_line</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>utf8_fprintf</name><argument_list>( <argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_win_reg</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"console_init"</literal></expr>, <expr><name>vlclua_console_init</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"console_wait"</literal></expr>, <expr><name>vlclua_console_wait</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"console_read"</literal></expr>, <expr><name>vlclua_console_read</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"console_write"</literal></expr>, <expr><name>vlclua_console_write</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>luaopen_win</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_win_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"win"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
