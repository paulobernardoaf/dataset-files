<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\lua\libs\variables.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_pushvalue</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>val</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_type</name> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_VAR_BOOL</name></expr>:</case>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>b_bool</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><sizeof>sizeof<argument_list>( <argument><expr><name>lua_Integer</name></expr></argument> )</argument_list></sizeof> <operator>&lt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></sizeof> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>&lt;</operator> <name>INT32_MIN</name> <operator>||</operator> <name>INT32_MAX</name> <operator>&lt;</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_VAR_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_VAR_ADDRESS</name></expr>:</case>

<expr_stmt><expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_VAR_VOID</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_tovalue</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_type</name> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_VAR_VOID</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>VLC_VAR_BOOL</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>b_bool</name></name> <operator>=</operator> <call><name>luaL_checkboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_VAR_INTEGER</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><sizeof>sizeof<argument_list>( <argument><expr><name>lua_Integer</name></expr></argument> )</argument_list></sizeof> <operator>&lt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name></expr></argument> )</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>lua_Number</name></type> <name>f</name> <init>= <expr><call><name>luaL_checknumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>llround</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>INT32_MIN</name> <operator>&lt;</operator> <name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>&amp;&amp;</operator> <name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>&lt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>i_int</name></name> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_VAR_STRING</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>psz_string</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>VLC_VAR_FLOAT</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>f_float</name></name> <operator>=</operator> <call><name>luaL_checknumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_VAR_ADDRESS</name></expr>:</case>

<expr_stmt><expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_var_inherit</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_type</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>LUA_TNIL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <operator>*</operator><name>pp_obj</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>config_GetType</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_Inherit</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlclua_pushvalue</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>VLC_VAR_STRING</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_var_get</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>var_Type</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_Get</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlclua_pushvalue</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>VLC_VAR_STRING</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_var_set</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>var_Type</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlclua_tovalue</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>var_Set</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_var_create</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>, <decl><type ref="prev"/><name>i_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><call><name>lua_type</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>LUA_TNUMBER</name></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>VLC_VAR_FLOAT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>VLC_VAR_BOOL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LUA_TSTRING</name></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>VLC_VAR_STRING</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LUA_TNIL</name></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <name>VLC_VAR_VOID</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_ret</name> <operator>=</operator> <call><name>var_Create</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>VLC_VAR_VOID</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlclua_tovalue</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>var_Set</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_var_get_list</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_value_t</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>var_Change</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>VLC_VAR_GETCHOICES</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>var_Type</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_createtable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlclua_pushvalue</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>VLC_VAR_CLASS</name><operator>)</operator> <operator>==</operator> <name>VLC_VAR_STRING</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>lua_createtable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_settable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_libvlc_command</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cmd</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val_arg</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>luaL_optstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>var_Type</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>psz_cmd</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <operator>(</operator><name>i_type</name> <operator>&amp;</operator> <name>VLC_VAR_ISCOMMAND</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"libvlc's \"%s\" is not a command"</literal></expr></argument>,

<argument><expr><name>psz_cmd</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>var_Set</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>psz_cmd</name></expr></argument>, <argument><expr><name>val_arg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlclua_var_toggle_or_set</name></cpp:undef>

<function><type><name>int</name></type> <name>vlclua_var_toggle_or_set</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bool</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>vlclua_error</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <call><name>var_ToggleBool</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_bool</name> <operator>!=</operator> <call><name>var_GetBool</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>b_bool</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>b_bool</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_trigger_callback</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_TriggerCallback</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vlclua_push_ret</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_inc_integer</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_val</name> <init>= <expr><call><name>var_IncInteger</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dec_integer</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_val</name> <init>= <expr><call><name>var_DecInteger</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_countchoices</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><call><name>var_CountChoices</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_togglebool</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_obj</name> <init>= <expr><call><name>luaL_checkudata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vlc_object"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_var</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_val</name> <init>= <expr><call><name>var_ToggleBool</name><argument_list>( <argument><expr><operator>*</operator><name>pp_obj</name></expr></argument>, <argument><expr><name>psz_var</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>b_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>vlclua_var_reg</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"inherit"</literal></expr>, <expr><name>vlclua_var_inherit</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get"</literal></expr>, <expr><name>vlclua_var_get</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"get_list"</literal></expr>, <expr><name>vlclua_var_get_list</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"set"</literal></expr>, <expr><name>vlclua_var_set</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"create"</literal></expr>, <expr><name>vlclua_var_create</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"trigger_callback"</literal></expr>, <expr><name>vlclua_trigger_callback</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"libvlc_command"</literal></expr>, <expr><name>vlclua_libvlc_command</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"inc_integer"</literal></expr>, <expr><name>vlclua_inc_integer</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dec_integer"</literal></expr>, <expr><name>vlclua_dec_integer</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"count_choices"</literal></expr>, <expr><name>vlclua_countchoices</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"toggle_bool"</literal></expr>, <expr><name>vlclua_togglebool</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>luaopen_variables</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_newtable</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vlclua_var_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"var"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
