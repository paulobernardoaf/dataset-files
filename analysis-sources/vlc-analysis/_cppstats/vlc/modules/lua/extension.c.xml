<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\lua\extension.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extension.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_events.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>p_reg</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>caps</name><index>[]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_HAS_MENU</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define> 

<expr><literal type="string">"menu"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_TRIGGER_ONLY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 

<expr><literal type="string">"trigger"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_INPUT_LISTENER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 

<expr><literal type="string">"input-listener"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_META_LISTENER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define> 

<expr><literal type="string">"meta-listener"</literal></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_PLAYING_LISTENER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define> 

<expr><literal type="string">"playing-listener"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ScanExtensions</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ScanLuaCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_script</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>luabatch_context_t</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetMenuEntries</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz_titles</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppi_ids</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>lua_State</name><modifier>*</modifier></type> <name>GetLuaState</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,

<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TriggerMenu</name><parameter_list>( <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TriggerExtension</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,

<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WatchTimerCallback</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_extension_deactivate</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_extension_keep_alive</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_extension_dialog_callback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>inputItemMetaChanged</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>Open_Extension</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>lua_Disabled</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Opening Lua Extension module"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name> <init>= <expr><operator>(</operator> <name>extensions_manager_t</name><operator>*</operator> <operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_mgr</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mgr</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mgr</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ScanExtensions</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Can't load extensions modules"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dialog-event"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dialog-event"</literal></expr></argument>,

<argument><expr><name>vlclua_extension_dialog_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Close_Extension</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name> <init>= <expr><operator>(</operator> <name>extensions_manager_t</name><operator>*</operator> <operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"dialog-event"</literal></expr></argument>,

<argument><expr><name>vlclua_extension_dialog_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"dialog-event"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>ARRAY_FOREACH</name><argument_list>( <argument>p_ext</argument>, <argument>p_mgr-&gt;extensions</argument> )</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ext</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_exiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QueueDeactivateCommand</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlclua_fd_interrupt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_exiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>==</operator> <name>true</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlclua_fd_cleanup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_author</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_shortdescription</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_icondata</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_timer_destroy</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>p_mgr</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ScanExtensions</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>=

<expr><call><name>vlclua_scripts_batch_execute</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"extensions"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ScanLuaCallback</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_ret</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_dummy_require</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>L</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_extension_require</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_module</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name> <init>= <expr><call><name>vlclua_get_this</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><call><name>vlclua_extension_get</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"loading module '%s' from extension package"</literal></expr></argument>,

<argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fullpath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_package</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_package</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_package</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>sep</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_package</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"could not find package name"</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fullpath</name></expr></argument>,

<argument><expr><literal type="string">"%s/modules/%s.luac"</literal></expr></argument>, <argument><expr><name>psz_package</name></expr></argument>, <argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_package</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlclua_dofile</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_fullpath</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>psz_fullpath</name><index>[ <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_fullpath</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlclua_dofile</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_fullpath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_fullpath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_package</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>luaL_error</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"unable to load module '%s' from package"</literal></expr></argument>,

<argument><expr><name>psz_module</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ScanLuaCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>luabatch_context_t</name></name> <modifier>*</modifier></type><name>dummy</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name> <init>= <expr><operator>(</operator> <name>extensions_manager_t</name><operator>*</operator> <operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Scanning Lua script %s"</literal></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_flen</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_filename</name> <operator>+</operator> <name>i_flen</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".vle"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"reading Lua script in a zip archive"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_script</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_flen</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_script</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>psz_script</name></expr></argument>, <argument><expr><literal type="string">"zip://"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name><argument_list>( <argument><expr><name>psz_script</name></expr></argument>, <argument><expr><name>psz_filename</name></expr></argument>, <argument><expr><name>i_flen</name> <operator>+</operator> <literal type="number">19</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name><argument_list>( <argument><expr><name>psz_script</name></expr></argument>, <argument><expr><literal type="string">"!/script.lua"</literal></expr></argument>, <argument><expr><name>i_flen</name> <operator>+</operator> <literal type="number">19</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>psz_script</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_script</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><operator>(</operator> <name>extension_t</name><operator>*</operator> <operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ext</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_script</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>psz_script</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>extension_sys_t</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>extension_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>||</operator> <operator>!</operator><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_mgr</name></name> <operator>=</operator> <name>p_mgr</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_timer_create</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>WatchTimerCallback</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>running_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>wait</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><call><name>luaL_newstate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"require"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlclua_dummy_require</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlclua_dofile</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_script</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error loading script %s: %s"</literal></expr></argument>, <argument><expr><name>psz_script</name></expr></argument>,

<argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>

<literal type="string">"function descriptor() not found"</literal></expr></argument>, <argument><expr><name>psz_script</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_pcall</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>

<literal type="string">"function descriptor(): %s"</literal></expr></argument>, <argument><expr><name>psz_script</name></expr></argument>,

<argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>lua_istable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"capabilities"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_istable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>lua_next</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_cap</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>caps</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>caps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>caps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_cap</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>found</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Extension capability '%s' unknown in"</literal>

<literal type="string">" script %s"</literal></expr></argument>, <argument><expr><name>psz_cap</name></expr></argument>, <argument><expr><name>psz_script</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"In script %s, function descriptor() "</literal>

<literal type="string">"did not return a table of capabilities."</literal></expr></argument>,

<argument><expr><name>psz_script</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"In script %s, function descriptor() "</literal>

<literal type="string">"did not return a string as title."</literal></expr></argument>,

<argument><expr><name>psz_script</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_script</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"author"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_author</name></name> <operator>=</operator> <call><name>luaL_strdupornull</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>luaL_strdupornull</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"shortdesc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_shortdescription</name></name> <operator>=</operator> <call><name>luaL_strdupornull</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>luaL_strdupornull</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_version</name></name> <operator>=</operator> <call><name>luaL_strdupornull</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"icon"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isnil</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>lua_strlen</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_icondata</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_icondata</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_icondata_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_icondata</name></name></expr></argument>, <argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"In script %s, function descriptor() "</literal>

<literal type="string">"did not return a table!"</literal></expr></argument>, <argument><expr><name>psz_script</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Script %s went completely foobar"</literal></expr></argument>, <argument><expr><name>psz_script</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Script %s has the following capability flags: 0x%x"</literal></expr></argument>,

<argument><expr><name>psz_script</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>

<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_ok</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_author</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_shortdescription</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_mgr</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_control</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppus</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_control</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>EXTENSION_ACTIVATE</name></expr>:</case>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>Activate</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>EXTENSION_DEACTIVATE</name></expr>:</case>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>Deactivate</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>EXTENSION_IS_ACTIVATED</name></expr>:</case>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_activated</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXTENSION_HAS_MENU</name></expr>:</case>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name> <operator>&amp;</operator> <name>EXT_HAS_MENU</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXTENSION_GET_MENU</name></expr>:</case>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pppsz</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ppus</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint16_t</name><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ext</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>GetMenuEntries</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>pppsz</name></expr></argument>, <argument><expr><name>ppus</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>EXTENSION_TRIGGER_ONLY</name></expr>:</case>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name> <operator>&amp;</operator> <name>EXT_TRIGGER_ONLY</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXTENSION_TRIGGER</name></expr>:</case>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>TriggerExtension</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>EXTENSION_TRIGGER_MENU</name></expr>:</case>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>TriggerMenu</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>EXTENSION_SET_INPUT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr>struct <name>input_item_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ext</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_exiting</name></name> <operator>==</operator> <name>true</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>running_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>old</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name> <operator>&amp;</operator> <name>EXT_META_LISTENER</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_event_detach</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>old</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>,

<argument><expr><name>vlc_InputItemMetaChanged</name></expr></argument>,

<argument><expr><name>inputItemMetaChanged</name></expr></argument>,

<argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>old</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <ternary><condition><expr><name>p_item</name></expr> ?</condition><then> <expr><call><name>input_item_Hold</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name> <operator>&amp;</operator> <name>EXT_INPUT_LISTENER</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PushCommandUnique</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>CMD_SET_INPUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_item</name></name> <operator>&amp;&amp;</operator>

<name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name> <operator>&amp;</operator> <name>EXT_META_LISTENER</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_event_attach</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_item</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>,

<argument><expr><name>vlc_InputItemMetaChanged</name></expr></argument>,

<argument><expr><name>inputItemMetaChanged</name></expr></argument>,

<argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>running_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>EXTENSION_PLAYING_CHANGED</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name> <operator>&amp;</operator> <name>EXT_PLAYING_LISTENER</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PushCommand</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>CMD_PLAYING_CHANGED</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>EXTENSION_META_CHANGED</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>extension_t</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PushCommand</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>CMD_UPDATE_META</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Control '%d' not yet implemented in Extension"</literal></expr></argument>,

<argument><expr><name>i_control</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>lua_ExtensionActivate</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mgr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_ext</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lua_ExecuteFunction</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>, <argument><expr><name>LUA_END</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>lua_ExtensionDeactivate</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mgr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_ext</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>==</operator> <name>false</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlclua_fd_interrupt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_item</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name> <operator>&amp;</operator> <name>EXT_META_LISTENER</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_event_detach</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_item</name><operator>-&gt;</operator><name>event_manager</name></name></expr></argument>,

<argument><expr><name>vlc_InputItemMetaChanged</name></expr></argument>,

<argument><expr><name>inputItemMetaChanged</name></expr></argument>,

<argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>lua_ExecuteFunction</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><literal type="string">"deactivate"</literal></expr></argument>, <argument><expr><name>LUA_END</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>lua_ExtensionWidgetClick</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,

<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>,

<parameter><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><call><name>GetLuaState</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_gettable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>lua_ExecuteFunction</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LUA_END</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetMenuEntries</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pppsz_titles</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppi_ids</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>*</operator><name>pppsz_titles</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>*</operator><name>ppi_ids</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_activated</name></name> <operator>==</operator> <name>false</name> <operator>||</operator> <name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>b_exiting</name></name> <operator>==</operator> <name>true</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Can't get menu of an unactivated/dying extension!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>running_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><call><name>GetLuaState</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_capabilities</name></name> <operator>&amp;</operator> <name>EXT_HAS_MENU</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"can't get a menu from an extension without menu!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>

<literal type="string">"function menu() not found"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_pcall</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>

<literal type="string">"function menu(): %s"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>lua_istable</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><call><name>lua_objlen</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pppsz_titles</name> <operator>=</operator> <operator>(</operator> <name>char</name><operator>*</operator><operator>*</operator> <operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_size</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>char</name><operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppi_ids</name> <operator>=</operator> <operator>(</operator> <name>uint16_t</name><operator>*</operator> <operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_size</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>uint16_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>lua_next</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_idx</name> <operator>&lt;</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>!</operator><call><name>lua_isstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>lua_isnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"In script %s, an entry in "</literal>

<literal type="string">"the menu table is invalid!"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pppsz_titles</name><operator>)</operator><index>[ <expr><name>i_idx</name></expr> ]</index> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>luaL_checkstring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppi_ids</name><operator>)</operator><index>[ <expr><name>i_idx</name></expr> ]</index> <operator>=</operator> <call><name>luaL_checkinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_idx</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Function menu() in script %s "</literal>

<literal type="string">"did not return a table"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Script %s went completely foobar"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<label><name>exit</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>running_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Something went wrong in %s (%s:%d)"</literal></expr></argument>,

<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lua_State</name><modifier>*</modifier></type> <name>GetLuaState</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,

<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_ext</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>L</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>luaL_newstate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>L</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Could not create new Lua State"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlclua_set_this</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_mgr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator> <call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_mgr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><call><name>vlc_intf_GetMainPlaylist</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlclua_set_playlist_internal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlclua_extension_set</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_openlibs</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaL_register_namespace</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument>, <argument><expr><name>p_reg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_msg</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_config</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_dialog</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_input</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_msg</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlclua_fd_init</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>luaopen_object</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_osd</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_playlist</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_stream</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_strings</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_variables</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_video</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_vlm</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_volume</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_xml</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_vlcio</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_errno</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>luaopen_rand</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<expr_stmt><expr><call><name>luaopen_win</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_extension_deactivate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"deactivate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_extension_keep_alive</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_setfield</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"keep_alive"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"zip://"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_register</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"require"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlclua_extension_require</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlclua_add_modules_path</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error while setting the module "</literal>

<literal type="string">"search path for %s"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlclua_fd_cleanup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlclua_dofile</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error loading script %s: %s"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlclua_fd_cleanup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>L</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>lua_ExecuteFunction</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_function</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>psz_function</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>lua_ExecuteFunctionVa</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>psz_function</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>lua_ExecuteFunctionVa</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_function</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_args</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_mgr</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_ext</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><call><name>GetLuaState</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>L</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_function</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>psz_function</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>

<literal type="string">"function %s() not found"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>psz_function</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>lua_datatype_e</name></type> <name>type</name> <init>= <expr><name>LUA_END</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>LUA_END</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>type</name> <operator>==</operator> <name>LUA_NUM</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>( <argument><expr><name>L</name></expr></argument> , <argument><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>type</name> <operator>==</operator> <name>LUA_TEXT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>( <argument><expr><name>L</name></expr></argument> , <argument><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Undefined argument type %d to lua function %s"</literal>

<literal type="string">"from script %s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>psz_function</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_args</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_args</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><call><name>lua_pcall</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>i_args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>

<literal type="string">"function %s(): %s"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>psz_function</name></expr></argument>,

<argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <call><name>lua_DialogFlush</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>TriggerMenu</name><parameter_list>( <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>PushCommand</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>CMD_TRIGGERMENU</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>lua_ExtensionTriggerMenu</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,

<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><call><name>GetLuaState</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>L</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>luaopen_dialog</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_getglobal</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"trigger_menu"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>lua_isfunction</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>

<literal type="string">"function trigger_menu() not found"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>lua_pcall</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Error while running script %s, "</literal>

<literal type="string">"function trigger_menu(): %s"</literal></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><call><name>lua_tostring</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>|=</operator> <call><name>lua_DialogFlush</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><literal type="string">"Something went wrong in %s (%s:%d)"</literal></expr></argument>,

<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TriggerExtension</name><parameter_list>( <parameter><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name></decl></parameter>,

<parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>lua_ExecuteFunction</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><literal type="string">"trigger"</literal></expr></argument>, <argument><expr><name>LUA_END</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlclua_fd_cleanup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_close</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlclua_extension_set</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_extension_set</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_rawset</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>extension_t</name> <modifier>*</modifier></type><name>vlclua_extension_get</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lua_pushlightuserdata</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>vlclua_extension_set</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_rawget</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><operator>(</operator><name>extension_t</name><operator>*</operator><operator>)</operator> <call><name>lua_topointer</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_ext</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlclua_extension_deactivate</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><call><name>vlclua_extension_get</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><call><name>QueueDeactivateCommand</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator> <name>b_ret</name> <operator>==</operator> <name>true</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlclua_extension_keep_alive</name><parameter_list>( <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><call><name>vlclua_extension_get</name><argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_mgr</name></name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>WATCH_TIMER_PERIOD</name></expr></argument>,

<argument><expr><name>VLC_TIMER_FIRE_ONCE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlclua_extension_dialog_callback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>,

<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator> <name>void</name> <operator>)</operator> <name>psz_var</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator> <name>void</name> <operator>)</operator> <name>oldval</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator> <name>void</name> <operator>)</operator> <name>p_data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_dialog_command_t</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><name><name>newval</name><operator>.</operator><name>p_address</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>command</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>command</name><operator>-&gt;</operator><name>p_dlg</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>p_dlg</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_ext</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_widget_t</name> <modifier>*</modifier></type><name>p_widget</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>command</name><operator>-&gt;</operator><name>event</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>EXTENSION_EVENT_CLICK</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_widget</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PushCommandUnique</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>CMD_CLICK</name></expr></argument>, <argument><expr><name>p_widget</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXTENSION_EVENT_CLOSE</name></expr>:</case>

<expr_stmt><expr><call><name>PushCommandUnique</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>CMD_CLOSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Received unknown UI event %d, discarded"</literal></expr></argument>,

<argument><expr><name><name>command</name><operator>-&gt;</operator><name>event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>inputItemMetaChanged</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_event_t</name> <modifier>*</modifier></type><name>p_event</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_event</name> <operator>&amp;&amp;</operator> <name><name>p_event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>vlc_InputItemMetaChanged</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><operator>(</operator> <name>extension_t</name><operator>*</operator> <operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_ext</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PushCommandUnique</name><argument_list>( <argument><expr><name>p_ext</name></expr></argument>, <argument><expr><name>CMD_UPDATE_META</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WatchTimerCallback</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>extension_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extensions_manager_t</name> <modifier>*</modifier></type><name>p_mgr</name> <init>= <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_mgr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name><name>struct</name> <name>command_t</name></name> <modifier>*</modifier><name>cmd</name></type> <init>= <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command</name></name></expr></init></decl>;</init>

<condition><expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>cmd</name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>cmd</name><operator>-&gt;</operator><name>i_command</name></name> <operator>==</operator> <name>CMD_DEACTIVATE</name></expr> )</condition>

<block>{<block_content> 

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>KillExtension</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>=</operator>

<call><name>vlc_dialog_display_progress</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>( <argument><expr><literal type="string">"Yes"</literal></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>( <argument><expr><literal type="string">"Extension not responding!"</literal></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>( <argument><expr><literal type="string">"Extension '%s' does not respond.\n"</literal>

<literal type="string">"Do you want to kill it now? "</literal></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>KillExtension</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>VLC_TIMER_FIRE_ONCE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_dialog_is_cancelled</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dialog_release</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_progress_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>KillExtension</name><argument_list>( <argument><expr><name>p_mgr</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>VLC_TIMER_FIRE_ONCE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>command_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
