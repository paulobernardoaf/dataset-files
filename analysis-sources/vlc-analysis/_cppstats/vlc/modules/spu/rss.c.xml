<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\spu\rss.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CreateFilter</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DestroyFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>rss_feed_t</name></name> <modifier>*</modifier></type><name>FetchRSS</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FreeRSS</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>rss_feed_t</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseUrls</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Fetch</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_color_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xf0000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00808080</literal></expr>, <expr><literal type="number">0x00C0C0C0</literal></expr>,

<expr><literal type="number">0x00FFFFFF</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00FF0000</literal></expr>, <expr><literal type="number">0x00FF00FF</literal></expr>, <expr><literal type="number">0x00FFFF00</literal></expr>,

<expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00008080</literal></expr>, <expr><literal type="number">0x0000FF00</literal></expr>, <expr><literal type="number">0x00800080</literal></expr>,

<expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x000000FF</literal></expr>, <expr><literal type="number">0x0000FFFF</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_color_descriptions</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Black"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Gray"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Silver"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"White"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Maroon"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Red"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Fuchsia"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Yellow"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Olive"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Green"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Teal"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Lime"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Purple"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Navy"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Blue"</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>N_</name><argument_list>(<argument><literal type="string">"Aqua"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>rss_item_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_link</name></decl>;</decl_stmt>

}</block></struct></type> <name>rss_item_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>rss_feed_t</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_link</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rss_item_t</name> <modifier>*</modifier></type><name>p_items</name></decl>;</decl_stmt>

}</block></struct></type> <name>rss_feed_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_timer_t</name></type> <name>timer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_fetched</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_xoff</name></decl>, <name>i_yoff</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_marquee</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_feeds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_feeds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_images</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cur_feed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cur_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cur_char</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_TEXT</name></cpp:macro> <cpp:value>N_("Feed URLs")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_LONGTEXT</name></cpp:macro> <cpp:value>N_("RSS/Atom feed '|' (pipe) separated URLs.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED_TEXT</name></cpp:macro> <cpp:value>N_("Speed of feeds")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEED_LONGTEXT</name></cpp:macro> <cpp:value>N_("Speed of the RSS/Atom feeds in microseconds (bigger is slower).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LENGTH_TEXT</name></cpp:macro> <cpp:value>N_("Max length")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LENGTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Maximum number of characters displayed on the " "screen." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTL_TEXT</name></cpp:macro> <cpp:value>N_("Refresh time")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of seconds between each forced refresh " "of the feeds. 0 means that the feeds are never updated." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_TEXT</name></cpp:macro> <cpp:value>N_("Feed images")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Display feed images if available.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSX_TEXT</name></cpp:macro> <cpp:value>N_("X offset")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSX_LONGTEXT</name></cpp:macro> <cpp:value>N_("X offset, from the left screen edge." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSY_TEXT</name></cpp:macro> <cpp:value>N_("Y offset")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Y offset, down from the top." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPACITY_TEXT</name></cpp:macro> <cpp:value>N_("Opacity")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPACITY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Opacity (inverse of transparency) of " "overlay text. 0 = transparent, 255 = totally opaque." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_TEXT</name></cpp:macro> <cpp:value>N_("Font size, pixels")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Font size, in pixels. Default is 0 (use default " "font size)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_TEXT</name></cpp:macro> <cpp:value>N_("Color")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_LONGTEXT</name></cpp:macro> <cpp:value>N_("Color of the text that will be rendered on ""the video. This must be an hexadecimal (like HTML colors). The first two ""chars are for red, then green, then blue. #000000 = black, #FF0000 = red,"" #00FF00 = green, #FFFF00 = yellow (red + green), #FFFFFF = white" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_TEXT</name></cpp:macro> <cpp:value>N_("Text position")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "You can enforce the text position on the video " "(0=center, 1=left, 2=right, 4=top, 8=bottom; you can " "also use combinations of these values, eg 6 = top-right).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TITLE_TEXT</name></cpp:macro> <cpp:value>N_("Title display mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TITLE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Title display mode. Default is 0 (hidden) if the feed has an image and feed images are enabled, 1 otherwise.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSS_HELP</name></cpp:macro> <cpp:value>N_("Display a RSS or ATOM Feed on your video")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_pos_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_pos_descriptions</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Center"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Top-Right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bottom-Left"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Bottom-Right"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>title_modes</name> <block>{

<decl><name>default_title</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>hide_title</name></decl>,

<decl><name>prepend_title</name></decl>,

<decl><name>scroll_title</name></decl> }</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_title_modes</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>default_title</name></expr>, <expr><name>hide_title</name></expr>, <expr><name>prepend_title</name></expr>, <expr><name>scroll_title</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_title_modes</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Don't show"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Always visible"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Scroll with feed"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"rss-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sub source"</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"RSS / Atom"</literal>)</argument> )</argument_list></macro>

<macro><name>set_help</name><argument_list>(<argument>RSS_HELP</argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>CreateFilter</argument>, <argument>DestroyFilter</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_SUBPIC</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"urls"</literal></argument>, <argument>NULL</argument>, <argument>MSG_TEXT</argument>, <argument>MSG_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Position"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"x"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>POSX_TEXT</argument>, <argument>POSX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"y"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>POSY_TEXT</argument>, <argument>POSY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"position"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>POS_TEXT</argument>, <argument>POS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_pos_values</argument>, <argument>ppsz_pos_descriptions</argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Font"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"opacity"</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>OPACITY_TEXT</argument>, <argument>OPACITY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_rgb</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"color"</literal></argument>, <argument><literal type="number">0xFFFFFF</literal></argument>, <argument>COLOR_TEXT</argument>, <argument>COLOR_LONGTEXT</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_color_values</argument>, <argument>ppsz_color_descriptions</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"size"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>SIZE_TEXT</argument>, <argument>SIZE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">4096</literal></argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Misc"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"speed"</literal></argument>, <argument><literal type="number">100000</literal></argument>, <argument>SPEED_TEXT</argument>, <argument>SPEED_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"length"</literal></argument>, <argument><literal type="number">60</literal></argument>, <argument>LENGTH_TEXT</argument>, <argument>LENGTH_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"ttl"</literal></argument>, <argument><literal type="number">1800</literal></argument>, <argument>TTL_TEXT</argument>, <argument>TTL_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"images"</literal></argument>, <argument>true</argument>, <argument>IMAGE_TEXT</argument>, <argument>IMAGE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"title"</literal></argument>, <argument>default_title</argument>, <argument>TITLE_TEXT</argument>, <argument>TITLE_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_title_modes</argument>, <argument>ppsz_title_modes</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"RSS and Atom feed display"</literal>)</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"rss"</literal></argument>, <argument><literal type="string">"atom"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"urls"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"position"</literal></expr>, <expr><literal type="string">"opacity"</literal></expr>, <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"speed"</literal></expr>, <expr><literal type="string">"length"</literal></expr>,

<expr><literal type="string">"ttl"</literal></expr>, <expr><literal type="string">"images"</literal></expr>, <expr><literal type="string">"title"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CreateFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_urls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ttl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_urls</name> <operator>=</operator> <call><name>var_CreateGetNonEmptyString</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"urls"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_urls</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"The list of urls must not be empty"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_feed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>==</operator> <name>scroll_title</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_speed</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_US</name><argument_list>( <argument><expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"speed"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_images</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"images"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ttl</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"ttl"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_urls</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_xoff</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"x"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_yoff</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"y"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"position"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"opacity"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"color"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_ALPHA</name> <operator>|</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_images</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"rss-size wasn't specified. Feed images will thus "</literal>

<literal type="string">"be displayed without being resized"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParseUrls</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_urls</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_sub_source</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>=</operator> <operator>(</operator><name>vlc_tick_t</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fetched</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_timer_create</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>Fetch</name></expr></argument>, <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_timer_schedule_asap</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>i_ttl</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_urls</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_urls</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_timer_destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeRSS</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_feed</name></decl>, <decl><type ref="prev"/><name>i_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_feed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fetched</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_date</name></name>

<operator>+</operator> <operator>(</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name> <operator>==</operator> <operator>(</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>==</operator> <name>scroll_title</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary> <operator>)</operator>

<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_speed</name></name> <operator>&gt;</operator> <name>date</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then>

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_feed</name></name></expr>]</index></name><operator>.</operator><name><name>psz_title</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> </then><else>:

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_feed</name></name></expr>]</index></name><operator>.</operator><name><name>p_items</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name></expr>]</index></name><operator>.</operator><name><name>psz_title</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></else></ternary></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_feed</name></name></expr>]</index></name><operator>.</operator><name>i_items</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>==</operator> <name>scroll_title</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_feed</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_feed</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>%</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_spu</name> <operator>=</operator> <call><name>filter_NewSubpicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_spu</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_TEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_item</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_feed</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_feed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_feed</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name>i_feed</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>==</operator> <name>default_title</name> <operator>)</operator>

<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>==</operator> <name>hide_title</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name>i_feed</name></expr>]</index></name><operator>.</operator><name><name>p_items</name><index>[<expr><name>i_item</name></expr>]</index></name><operator>.</operator><name>psz_title</name>

<operator>+</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <operator>!</operator><name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>==</operator> <name>default_title</name> <operator>)</operator>

<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>==</operator> <name>prepend_title</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><literal type="string">"%s : %s"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name>i_feed</name></expr>]</index></name><operator>.</operator><name>psz_title</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name>i_feed</name></expr>]</index></name><operator>.</operator><name><name>p_items</name><index>[<expr><name>i_item</name></expr>]</index></name><operator>.</operator><name>psz_title</name>

<operator>+</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_item</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><literal type="string">"%s : %s"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name>i_feed</name></expr>]</index></name><operator>.</operator><name>psz_title</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name>i_feed</name></expr>]</index></name><operator>.</operator><name><name>p_items</name><index>[<expr><name>i_item</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name>i_feed</name></expr>]</index></name><operator>.</operator><name><name>p_items</name><index>[<expr><name>i_item</name></expr>]</index></name><operator>.</operator><name>psz_title</name>

<operator>+</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<while>while<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_item</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_item</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name>i_feed</name></expr>]</index></name><operator>.</operator><name>i_items</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><call><name>strchr</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><literal type="string">" - %s"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name><index>[<expr><name>i_feed</name></expr>]</index></name><operator>.</operator><name><name>p_items</name><index>[<expr><name>i_item</name></expr>]</index></name><operator>.</operator><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a2</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>*</operator><name>b</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>b</name> <operator>!=</operator> <operator>*</operator><name>a</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>a2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name></name> <operator>=</operator> <call><name>text_segment_New</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_marquee</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_ephemer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content> 

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name>SUBPICTURE_ALIGN_LEFT</name> <operator>|</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content> 

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>b_absolute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_xoff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_yoff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_text</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_region</name> <operator>=</operator> <call><name>subpicture_region_New</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate SPU region"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_region</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_spu</name><operator>-&gt;</operator><name>p_region</name><operator>-&gt;</operator><name>i_x</name></name> <operator>+=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_spu</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LoadImage</name></cpp:undef> 

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>LoadImage</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_handler</name> <init>= <expr><call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_orig</name> <operator>=</operator> <call><name>image_ReadUrl</name><argument_list>( <argument><expr><name>p_handler</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_orig</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unable to read image %s"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_orig</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_orig</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_orig</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>

<operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name><operator>/</operator><name><name>p_orig</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>image_Convert</name><argument_list>( <argument><expr><name>p_handler</name></expr></argument>, <argument><expr><name>p_orig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_orig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Error while converting %s"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <name>p_orig</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name>p_handler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>removeWhiteChars</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_src2</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>psz_clean</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_clean2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_src2</name> <operator>=</operator> <name>psz_clean</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <operator>*</operator><name>psz_clean</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>psz_clean</name> <operator>==</operator> <literal type="char">'\t'</literal>

<operator>||</operator> <operator>*</operator><name>psz_clean</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>psz_clean</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>psz_clean</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_clean</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_clean</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>--</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>psz_clean</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>psz_clean</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal>

<operator>||</operator> <name><name>psz_clean</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>psz_clean</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name><name>psz_clean</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_clean2</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_clean</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_src2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_clean2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseUrls</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_urls</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_urls2</name> <init>= <expr><name>psz_urls</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz_urls</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_urls</name> <operator>==</operator> <literal type="char">'|'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_urls</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>rss_feed_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_urls</name> <operator>=</operator> <name>psz_urls2</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>rss_feed_t</name><modifier>*</modifier></type> <name>p_feed</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_urls</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_end</name> <operator>=</operator> <name>psz_urls</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>i_items</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_urls</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_urls</name> <operator>=</operator> <name>psz_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParseFeed</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl></parameter>,

<parameter><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_feed</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_eltname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_item</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_image</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_item</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RSS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"element &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_eltname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_eltname</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>psz_eltname</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"entry"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_is_item</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>i_items</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name></name></expr></argument>,

<argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>i_items</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>rss_item_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name><name>p_feed</name><operator>-&gt;</operator><name>i_items</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_title</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name><name>p_feed</name><operator>-&gt;</operator><name>i_items</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_description</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name><name>p_feed</name><operator>-&gt;</operator><name>i_items</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_link</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_is_image</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_href</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"rel"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_rel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_rel</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"href"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_href</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_href</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>psz_rel</name> <operator>&amp;&amp;</operator> <name>psz_href</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_rel</name></expr></argument>, <argument><expr><literal type="string">"alternate"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_is_item</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name>b_is_image</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_feed</name><operator>-&gt;</operator><name>psz_link</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_link</name></name> <operator>=</operator> <name>psz_href</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_rel</name></expr></argument>, <argument><expr><literal type="string">"logo"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_rel</name></expr></argument>, <argument><expr><literal type="string">"icon"</literal></expr></argument> )</argument_list></call> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>b_is_item</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_is_image</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name> <operator>=</operator> <name>psz_href</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_href</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_href</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_rel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RSS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"element end &lt;/%s&gt;"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"entry"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_is_item</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_item</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"image"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_is_image</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>XML_READER_TEXT</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_eltname</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_eltvalue</name> <init>= <expr><call><name>removeWhiteChars</name><argument_list>( <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RSS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">" text : \"%s\""</literal></expr></argument>, <argument><expr><name>psz_eltvalue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>b_is_item</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>rss_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name></name><operator>+</operator><name>i_item</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_title</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <name>psz_eltvalue</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument> )</argument_list></call> 

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_link</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_link</name></name> <operator>=</operator> <name>psz_eltvalue</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"summary"</literal></expr></argument> )</argument_list></call> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_item</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <name>psz_eltvalue</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_eltvalue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>b_is_image</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name> <operator>=</operator> <name>psz_eltvalue</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_eltvalue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_feed</name><operator>-&gt;</operator><name>psz_title</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <name>psz_eltvalue</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_feed</name><operator>-&gt;</operator><name>psz_link</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_link</name></name> <operator>=</operator> <name>psz_eltvalue</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"subtitle"</literal></expr></argument> )</argument_list></call> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_feed</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <name>psz_eltvalue</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"logo"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument>, <argument><expr><literal type="string">"icon"</literal></expr></argument> )</argument_list></call> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name> <operator>=</operator> <name>psz_eltvalue</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_eltvalue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_eltname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>end</name>:</label>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rss_feed_t</name><modifier>*</modifier></type> <name>FetchRSS</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml_reader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_feed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_feeds</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_images</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_images</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_feeds</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_feeds</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>rss_feed_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_feeds</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i_feed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_feed</name> <operator>&lt;</operator> <name>i_feeds</name></expr>;</condition> <incr><expr><name>i_feed</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_feed</name> <init>= <expr><name>p_feeds</name> <operator>+</operator> <name>i_feed</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_old_feed</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name></name> <operator>+</operator> <name>i_feed</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_link</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>i_items</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_old_feed</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"opening %s RSS/Atom feed ..."</literal></expr></argument>, <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s for reading"</literal></expr></argument>, <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_xml_reader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_xml_reader</name> <operator>=</operator> <call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_xml_reader</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s for parsing"</literal></expr></argument>, <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ParseFeed</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_xml_reader</name></expr></argument>, <argument><expr><name>p_feed</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_images</name> <operator>&amp;&amp;</operator> <name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>=</operator> <call><name>LoadImage</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"done with %s RSS/Atom feed"</literal></expr></argument>, <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_feeds</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>FreeRSS</name><argument_list>( <argument><expr><name>p_feeds</name></expr></argument>, <argument><expr><name>i_feed</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_xml_reader</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml_reader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeRSS</name><parameter_list>( <parameter><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_feeds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_feeds</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_feed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_feed</name> <operator>&lt;</operator> <name>i_feeds</name></expr>;</condition> <incr><expr><name>i_feed</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_feed</name> <init>= <expr><name>p_feeds</name><operator>+</operator><name>i_feed</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_item</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_item</name> <operator>&lt;</operator> <name><name>p_feed</name><operator>-&gt;</operator><name>i_items</name></name></expr>;</condition> <incr><expr><name>i_item</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>rss_item_t</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name></name><operator>+</operator><name>i_item</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_link</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_item</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_items</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_link</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_image</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>p_pic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_feed</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_feeds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Fetch</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Updating the rss feeds"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_feeds</name> <init>= <expr><call><name>FetchRSS</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_feeds</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unable to fetch the feeds"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>rss_feed_t</name> <modifier>*</modifier></type><name>p_old_feeds</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_feeds</name></name> <operator>=</operator> <name>p_feeds</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fetched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_feed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_item</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_title</name></name> <operator>==</operator> <name>scroll_title</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cur_char</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_old_feeds</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeRSS</name><argument_list>( <argument><expr><name>p_old_feeds</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_feeds</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
