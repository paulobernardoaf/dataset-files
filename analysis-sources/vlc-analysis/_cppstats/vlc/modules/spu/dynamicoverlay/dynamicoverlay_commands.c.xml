<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\spu\dynamicoverlay\dynamicoverlay_commands.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SHM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/shm.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dynamicoverlay.h"</cpp:file></cpp:include>

<function><type><name>overlay_t</name> <modifier>*</modifier></type><name>OverlayCreate</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>overlay_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>b_active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ovl</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'\0'</literal></expr></argument>,<argument><expr><literal type="char">'\0'</literal></expr></argument>,<argument><expr><literal type="char">'\0'</literal></expr></argument>,<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>p_ovl</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>OverlayDestroy</name><parameter_list>( <parameter><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_space</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>psz_command</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_temp</name> <init>= <expr><operator>*</operator><name>psz_command</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><call><name>isspace</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_temp</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>psz_temp</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>psz_temp</name> <operator>==</operator> <operator>*</operator><name>psz_command</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_command</name> <operator>=</operator> <name>psz_temp</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_digit</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><call><name>strtol</name><argument_list>( <argument><expr><operator>*</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_temp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_temp</name> <operator>==</operator> <operator>*</operator><name>psz_command</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LONG_MAX</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><name>l</name> <operator>&gt;</operator> <name>INT32_MAX</name> <operator>||</operator> <name>l</name> <operator>&lt;</operator> <name>INT32_MIN</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_command</name> <operator>=</operator> <name>psz_temp</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_char</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_end</name> <operator>-</operator> <operator>*</operator><name>psz_command</name> <operator>&lt;</operator> <name>count</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument>, <argument><expr><operator>*</operator><name>psz_command</name></expr></argument>, <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_command</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_DataSharedMem</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isascii</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_char</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument> )</argument_list></call>

<operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_shmid</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_Id</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_None</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_SetAlpha</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_alpha</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_SetPosition</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_SetTextAlpha</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_params</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_alpha</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_SetTextColor</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_params</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_color</name></name> <operator>=</operator> <operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_SetTextSize</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_size</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_SetVisibility</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_command</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_vis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>parse_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_vis</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_params</name><operator>-&gt;</operator><name>b_visible</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i_vis</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unparse_default</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>,

<parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unparse_GenImage</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>,

<parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>p_results</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unparse_GetAlpha</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>,

<parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>p_results</name><operator>-&gt;</operator><name>i_alpha</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unparse_GetPosition</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>,

<parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>p_results</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>p_results</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unparse_GetTextAlpha</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>,

<parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_alpha</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unparse_GetTextColor</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>,

<parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_color</name></name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_color</name></name> <operator>&amp;</operator> <literal type="number">0x00ff00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_color</name></name> <operator>&amp;</operator> <literal type="number">0x0000ff</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unparse_GetTextSize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>,

<parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unparse_GetVisibility</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter>,

<parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>BufferPrintf</name><argument_list>( <argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>p_results</name><operator>-&gt;</operator><name>b_visible</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_DataSharedMem</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SHM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>shmid_ds</name></name></type> <name>shminfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ovl</name> <operator>=</operator> <call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Invalid overlay: %d"</literal></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>shmctl</name><argument_list>( <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_shmid</name></name></expr></argument>, <argument><expr><name>IPC_STAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shminfo</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unable to access shared memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>shminfo</name><operator>.</operator><name>shm_segsz</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_params</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>==</operator> <name>VLC_CODEC_TEXT</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_height</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"Invalid width and/or height. when specifying text height "</literal>

<literal type="string">"must be 1 and width the number of bytes in the string, "</literal>

<literal type="string">"including the null terminator"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_params</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&gt;</operator> <name>i_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"Insufficient data in shared memory. need %d, got %zu"</literal></expr></argument>,

<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_text</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_text</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate string storage"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ovl</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>VLC_CODEC_TEXT</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>shmat</name><argument_list>( <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_shmid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHM_RDONLY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_data</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unable to attach to shared memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_text</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shmdt</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_neededsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name></name> <operator>=</operator> <call><name>picture_New</name><argument_list>( <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>,

<argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>i_plane</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>i_neededsize</name> <operator>+=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>*</operator>

<name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_neededsize</name> <operator>&gt;</operator> <name>i_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"Insufficient data in shared memory. need %zu, got %zu"</literal></expr></argument>,

<argument><expr><name>i_neededsize</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>shmat</name><argument_list>( <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_shmid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SHM_RDONLY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_data</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unable to attach to shared memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>i_plane</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>

<condition><expr><name>i_line</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition>

<incr><expr><operator>++</operator><name>i_line</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>,

<argument><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>shmdt</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_updated</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>b_active</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"system doesn't support shared memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_DeleteImage</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_updated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><call><name>ListRemove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_EndAtomic</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QueueTransfer</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>atomic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_atomic</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_GenImage</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>OverlayCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_idx</name> <init>= <expr><call><name>ListAdd</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name>p_ovl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_idx</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_idx</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_GetAlpha</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>i_alpha</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_GetPosition</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_GetTextAlpha</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_alpha</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name><operator>-&gt;</operator><name>i_font_alpha</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_GetTextColor</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_color</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name><operator>-&gt;</operator><name>i_font_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_GetTextSize</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_size</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name><operator>-&gt;</operator><name>i_font_size</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_GetVisibility</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_results</name><operator>-&gt;</operator><name>b_visible</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>b_active</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_SetAlpha</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>i_alpha</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_updated</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>b_active</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_SetPosition</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_updated</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>b_active</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_SetTextAlpha</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_alpha</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_updated</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>b_active</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_SetTextColor</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FONT_COLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_updated</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>b_active</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_SetTextSize</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>p_fontstyle</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>fontstyle</name><operator>.</operator><name>i_font_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_updated</name></name> <operator>=</operator> <name><name>p_ovl</name><operator>-&gt;</operator><name>b_active</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_SetVisibility</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_ovl</name> <init>= <expr><call><name>ListGet</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name><name>p_params</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ovl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ovl</name><operator>-&gt;</operator><name>b_active</name></name> <operator>=</operator> <name><name>p_params</name><operator>-&gt;</operator><name>b_visible</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_updated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_StartAtomic</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>commandparams_t</name> <modifier>*</modifier></type><name>p_params</name></decl></parameter>,

<parameter><decl><type><name>commandparams_t</name> <modifier>*</modifier></type><name>p_results</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_atomic</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>commanddesc_static_t</name></type> <name><name>p_commands</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"DataSharedMem"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_DataSharedMem</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_DataSharedMem</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"DeleteImage"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_Id</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_DeleteImage</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"EndAtomic"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_None</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_EndAtomic</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"GenImage"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_None</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_GenImage</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_GenImage</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"GetAlpha"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_Id</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_GetAlpha</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_GetAlpha</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"GetPosition"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_Id</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_GetPosition</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_GetPosition</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"GetTextAlpha"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_Id</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_GetTextAlpha</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_GetTextAlpha</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"GetTextColor"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_Id</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_GetTextColor</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_GetTextColor</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"GetTextSize"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_Id</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_GetTextSize</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_GetTextSize</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"GetVisibility"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>false</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_Id</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_GetVisibility</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_GetVisibility</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"SetAlpha"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_SetAlpha</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_SetAlpha</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"SetPosition"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_SetPosition</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_SetPosition</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"SetTextAlpha"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_SetTextAlpha</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_SetTextAlpha</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"SetTextColor"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_SetTextColor</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_SetTextColor</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"SetTextSize"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_SetTextSize</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_SetTextSize</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"SetVisibility"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_SetVisibility</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_SetVisibility</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>psz_command</name> <operator>=</operator> <literal type="string">"StartAtomic"</literal></expr>,

<expr><operator>.</operator><name>b_atomic</name> <operator>=</operator> <name>true</name></expr>,

<expr><operator>.</operator><name>pf_parser</name> <operator>=</operator> <name>parser_None</name></expr>,

<expr><operator>.</operator><name>pf_execute</name> <operator>=</operator> <name>exec_StartAtomic</name></expr>,

<expr><operator>.</operator><name>pf_unparse</name> <operator>=</operator> <name>unparse_default</name></expr>,

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>RegisterCommand</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_commands</name></name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>p_commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name></name> <operator>=</operator> <operator>(</operator><name>commanddesc_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_commands</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>commanddesc_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_commands</name></name></expr>;</condition> <incr><expr><name>i_index</name> <operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>commanddesc_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>commanddesc_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>-&gt;</operator><name>psz_command</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>-&gt;</operator><name>b_atomic</name> <operator>=</operator> <name><name>p_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>b_atomic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>-&gt;</operator><name>pf_parser</name> <operator>=</operator> <name><name>p_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>pf_parser</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>-&gt;</operator><name>pf_execute</name> <operator>=</operator> <name><name>p_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>pf_execute</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>-&gt;</operator><name>pf_unparse</name> <operator>=</operator> <name><name>p_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>pf_unparse</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"%zu commands are available"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_commands</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_commands</name></name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>-&gt;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnregisterCommand</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_commands</name></name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>-&gt;</operator><name>psz_command</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_commands</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_commands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
