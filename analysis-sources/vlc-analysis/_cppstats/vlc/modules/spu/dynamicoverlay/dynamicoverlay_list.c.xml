<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\spu\dynamicoverlay\dynamicoverlay_list.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dynamicoverlay.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>do_ListInit</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>overlay_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_tail</name></name> <operator>=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_ListDestroy</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>overlay_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_cur</name> <init>= <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name></expr></init></decl>;</init>

<condition><expr><name>pp_cur</name> <operator>&lt;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_tail</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>pp_cur</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OverlayDestroy</name><argument_list>( <argument><expr><operator>*</operator><name>pp_cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>pp_cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>ListAdd</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>overlay_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>overlay_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_cur</name> <init>= <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name></expr></init></decl>;</init>

<condition><expr><name>pp_cur</name> <operator>&lt;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_tail</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>pp_cur</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_cur</name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt>

<return>return <expr><name>pp_cur</name> <operator>-</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_tail</name></name> <operator>-</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_newsize</name> <init>= <expr><name>i_size</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name></expr></argument>,

<argument><expr><name>i_newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>overlay_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_tail</name></name> <operator>=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name> <operator>+</operator> <name>i_newsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name> <operator>+</operator> <name>i_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>overlay_t</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name><index>[<expr><name>i_size</name></expr>]</index></name> <operator>=</operator> <name>p_new</name></expr>;</expr_stmt>

<return>return <expr><name>i_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ListRemove</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_idx</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_tail</name></name> <operator>-</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name> <operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name><index>[<expr><name>i_idx</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>OverlayDestroy</name><argument_list>( <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name><index>[<expr><name>i_idx</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name><index>[<expr><name>i_idx</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name><index>[<expr><name>i_idx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>overlay_t</name> <modifier>*</modifier></type><name>ListGet</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_idx</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_tail</name></name> <operator>-</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name> <operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name><index>[<expr><name>i_idx</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name><index>[<expr><name>i_idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>overlay_t</name> <modifier>*</modifier></type><name>ListWalk</name><parameter_list>( <parameter><decl><type><name>list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>overlay_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_cur</name> <operator>=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_head</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_cur</name> <operator>=</operator> <name>pp_cur</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>pp_cur</name> <operator>&lt;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_tail</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pp_cur</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>*</operator><name>pp_cur</name> <operator>!=</operator> <name>NULL</name> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><operator>(</operator><operator>*</operator><name>pp_cur</name><operator>)</operator><operator>-&gt;</operator><name>b_active</name></name> <operator>)</operator><operator>&amp;&amp;</operator>

<operator>(</operator> <name><operator>(</operator><operator>*</operator><name>pp_cur</name><operator>)</operator><operator>-&gt;</operator><name><name>format</name><operator>.</operator><name>i_chroma</name></name></name> <operator>!=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'\0'</literal></expr></argument>,<argument><expr><literal type="char">'\0'</literal></expr></argument>,<argument><expr><literal type="char">'\0'</literal></expr></argument>,<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><operator>*</operator><name>pp_cur</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pp_cur</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
