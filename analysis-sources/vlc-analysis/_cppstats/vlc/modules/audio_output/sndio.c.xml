<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_output\sndio.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sndio.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name> <argument_list>(<argument><literal type="string">"sndio"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"OpenBSD sndio audio output"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name> <argument_list>(<argument>CAT_AUDIO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_AUDIO_AOUT</argument>)</argument_list></macro>

<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">120</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VolumeSet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MuteSet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>VolumeChanged</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PositionChanged</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>sio_hdl</name></name> <modifier>*</modifier></type><name>hdl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mute</name></decl>;</decl_stmt>

}</block></struct></type> <name>aout_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name> <operator>=</operator> <call><name>sio_open</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SIO_PLAY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot create audio playback stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sio_par</name></name></type> <name>par</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sio_initpar</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>le</name></name> <operator>=</operator> <name>SIO_LE_NATIVE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>le</name></name> <operator>=</operator> <name>SIO_LE_NATIVE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>le</name></name> <operator>=</operator> <name>SIO_LE_NATIVE</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>pchan</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>round</name></name> <operator>=</operator> <name><name>par</name><operator>.</operator><name>rate</name></name> <operator>/</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>appbufsz</name></name> <operator>=</operator> <name><name>par</name><operator>.</operator><name>rate</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sio_setpar</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>sio_getpar</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot negotiate audio playback parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>.</operator><name>bps</name></name> <operator>!=</operator> <name><name>par</name><operator>.</operator><name>bits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>par</name><operator>.</operator><name>msb</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"unsupported audio sample format (%u bits in %u bytes)"</literal></expr></argument>,

<argument><expr><name><name>par</name><operator>.</operator><name>bits</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>.</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>.</operator><name>sig</name></name> <operator>!=</operator> <operator>(</operator><name><name>par</name><operator>.</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"unsupported audio sample format (%ssigned)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>par</name><operator>.</operator><name>sig</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"un"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>.</operator><name>bps</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>par</name><operator>.</operator><name>le</name></name> <operator>!=</operator> <name>SIO_LE_NATIVE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"unsupported audio sample format (%s endian)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>par</name><operator>.</operator><name>le</name></name></expr> ?</condition><then> <expr><literal type="string">"little"</literal></expr> </then><else>: <expr><literal type="string">"big"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>.</operator><name>bits</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"unsupported audio sample format (%u bits)"</literal></expr></argument>,

<argument><expr><name><name>par</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>par</name><operator>.</operator><name>rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name><name>par</name><operator>.</operator><name>rate</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>chans</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>.</operator><name>pchan</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>chans</name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>chans</name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>chans</name> <operator>=</operator> <name>AOUT_CHANS_4_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name>chans</name> <operator>=</operator> <name>AOUT_CHANS_5_1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>chans</name> <operator>=</operator> <name>AOUT_CHANS_7_1</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"unknown %u channels map"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>.</operator><name>pchan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>chans</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name> <argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>TimeGet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>aout_PauseDefault</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sio_onvol</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>, <argument><expr><name>VolumeChanged</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>volume_set</name></name> <operator>=</operator> <name>VolumeSet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>mute_set</name></name> <operator>=</operator> <name>MuteSet</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>volume_set</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>mute_set</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sio_onmove</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>, <argument><expr><name>PositionChanged</name></expr></argument>, <argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sio_start</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>sio_close</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sio_close</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PositionChanged</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>delay</name></name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>started</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sio_write</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>delay</name></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sio_stop</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sio_start</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VolumeChanged</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>volume</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fvol</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>volume</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>SIO_MAXVOL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>aout_VolumeReport</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>fvol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_MuteReport</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>volume</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>volume</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VolumeSet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fvol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>volume</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fvol</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fvol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fvol</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fvol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>volume</name> <operator>=</operator> <call><name>lroundf</name> <argument_list>(<argument><expr><name>fvol</name> <operator>*</operator> <name>SIO_MAXVOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>mute</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sio_setvol</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MuteSet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sio_setvol</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>mute</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>sys</name><operator>-&gt;</operator><name>volume</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <name>mute</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
