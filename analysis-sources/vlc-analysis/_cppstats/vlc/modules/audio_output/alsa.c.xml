<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_output\alsa.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alsa/asoundlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alsa/version.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>chans_table</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>chans_to_reorder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>soft_mute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>soft_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>

}</block></struct></type> <name>aout_sys_t</name>;</typedef>

<enum>enum <block>{

<decl><name>PASSTHROUGH_NONE</name></decl>,

<decl><name>PASSTHROUGH_SPDIF</name></decl>,

<decl><name>PASSTHROUGH_HDMI</name></decl>,

}</block>;</enum>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/volume.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A52_FRAME_NB</name></cpp:macro> <cpp:value>1536</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EnumDevices</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_DEV_TEXT</name></cpp:macro> <cpp:value>N_("Audio output device")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_DEV_LONGTEXT</name></cpp:macro> <cpp:value>N_("Audio output device (using ALSA syntax).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_CHAN_TEXT</name></cpp:macro> <cpp:value>N_("Audio output channels")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_CHAN_LONGTEXT</name></cpp:macro> <cpp:value>N_("Channels available for audio output. " "If the input has more channels than the output, it will be down-mixed. " "This parameter is ignored when digital pass-through is active.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>channels</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHANS_STEREO</name></expr>, <expr><name>AOUT_CHANS_4_0</name></expr>, <expr><name>AOUT_CHANS_4_1</name></expr>,

<expr><name>AOUT_CHANS_5_0</name></expr>, <expr><name>AOUT_CHANS_5_1</name></expr>, <expr><name>AOUT_CHANS_7_1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>channels_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Mono"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Stereo"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Surround 4.0"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Surround 4.1"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Surround 5.0"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Surround 5.1"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Surround 7.1"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASSTHROUGH_TEXT</name></cpp:macro> <cpp:value>N_("Audio passthrough mode")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>passthrough_modes</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>PASSTHROUGH_NONE</name></expr>, <expr><name>PASSTHROUGH_SPDIF</name></expr>, <expr><name>PASSTHROUGH_HDMI</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>passthrough_modes_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"S/PDIF"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"HDMI"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"ALSA"</literal></argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"ALSA audio output"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AOUT</argument> )</argument_list></macro>

<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"alsa-audio-device"</literal></argument>, <argument><literal type="string">"default"</literal></argument>,

<argument>AUDIO_DEV_TEXT</argument>, <argument>AUDIO_DEV_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_integer</name> <argument_list>(<argument><literal type="string">"alsa-audio-channels"</literal></argument>, <argument>AOUT_CHANS_FRONT</argument>,

<argument>AUDIO_CHAN_TEXT</argument>, <argument>AUDIO_CHAN_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_integer_list</name> <argument_list>(<argument>channels</argument>, <argument>channels_text</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"alsa-passthrough"</literal></argument>, <argument>PASSTHROUGH_NONE</argument>, <argument>PASSTHROUGH_TEXT</argument>,

<argument>PASSTHROUGH_TEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>passthrough_modes</argument>, <argument>passthrough_modes_text</argument>)</argument_list></macro>

<macro><name>add_sw_gain</name> <argument_list>()</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">150</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Dump</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>snd_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>snd_output_t</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>snd_output_buffer_open</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>cb</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot get info: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>snd_output_buffer_string</name> <argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s%.*s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_output_close</name> <argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Dump</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Dump(VLC_OBJECT(o), m, (int (*)(void *, snd_output_t *))(cb), p)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpDevice</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>snd_pcm_info_t</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>snd_pcm_dump</name></expr></argument>, <argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_info_alloca</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_info</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" device name : %s"</literal></expr></argument>, <argument><expr><call><name>snd_pcm_info_get_name</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" device ID : %s"</literal></expr></argument>, <argument><expr><call><name>snd_pcm_info_get_id</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" subdevice name: %s"</literal></expr></argument>,

<argument><expr><call><name>snd_pcm_info_get_subdevice_name</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpDeviceStatus</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>snd_pcm_status_t</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_status_alloca</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_status</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"current status:\n"</literal></expr></argument>, <argument><expr><name>snd_pcm_status_dump</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DumpDeviceStatus</name><parameter_list>(<parameter><type><name>o</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DumpDeviceStatus(VLC_OBJECT(o), p)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SND_LIB_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x01001B</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>vlc_chans</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>SND_CHMAP_MONO</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>,

<expr><index>[<expr><name>SND_CHMAP_FL</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>,

<expr><index>[<expr><name>SND_CHMAP_FR</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><index>[<expr><name>SND_CHMAP_RL</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_REARLEFT</name></expr>,

<expr><index>[<expr><name>SND_CHMAP_RR</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><index>[<expr><name>SND_CHMAP_FC</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>,

<expr><index>[<expr><name>SND_CHMAP_LFE</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><index>[<expr><name>SND_CHMAP_SL</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_MIDDLELEFT</name></expr>,

<expr><index>[<expr><name>SND_CHMAP_SR</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><index>[<expr><name>SND_CHMAP_RC</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_REARCENTER</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>AOUT_CHAN_MAX</name> <operator>==</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"Missing channel entries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Map2Mask</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>snd_pcm_chmap_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>pos</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>vlc_chan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>vlc_chans</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>vlc_chans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vlc_chan</name> <operator>=</operator> <name><name>vlc_chans</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlc_chan</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" %s channel %u position %u"</literal></expr></argument>, <argument><expr><literal type="string">"unsupported"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>vlc_chan</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" %s channel %u position %u"</literal></expr></argument>, <argument><expr><literal type="string">"duplicate"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>vlc_chan</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>mask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>SetupChannelsFixed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>snd_pcm_chmap_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>map</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>maskp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>tab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>chans_out</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>vlc_chan</name> <init>= <expr><name><name>vlc_chans</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>vlc_chan</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>vlc_chan</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>maskp</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>

<return>return <expr><call><name>aout_CheckChannelReorder</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chans_out</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>SetupChannels</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>tab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>snd_pcm_chmap_query_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>maps</name> <init>= <expr><call><name>snd_pcm_query_chmaps</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>maps</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"channels map not provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>best_offset</name></decl>, <decl><type ref="prev"/><name>best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>to_reorder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>snd_pcm_chmap_query_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>maps</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>snd_pcm_chmap_query_t</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>SND_CHMAP_TYPE_FIXED</name></expr>:</case>

<case>case <expr><name>SND_CHMAP_TYPE_PAIRED</name></expr>:</case>

<case>case <expr><name>SND_CHMAP_TYPE_VAR</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unknown channels map type %u"</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>chans</name> <init>= <expr><call><name>Map2Mask</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chans</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>score</name> <init>= <expr><operator>(</operator><call><name>vlc_popcount</name> <argument_list>(<argument><expr><name>chans</name> <operator>&amp;</operator> <operator>*</operator><name>mask</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <call><name>vlc_popcount</name> <argument_list>(<argument><expr><name>chans</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>best_score</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>best_offset</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>maps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>best_score</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot find supported channels map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>snd_pcm_chmap_t</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>&amp;</operator><name><name>maps</name><index>[<expr><name>best_offset</name></expr>]</index></name><operator>-&gt;</operator><name>map</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using channels map %u, type %u, %u channel(s)"</literal></expr></argument>, <argument><expr><name>best_offset</name></expr></argument>,

<argument><expr><name><name>maps</name><index>[<expr><name>best_offset</name></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to_reorder</name> <operator>=</operator> <call><name>SetupChannelsFixed</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>snd_pcm_free_chmaps</name> <argument_list>(<argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>to_reorder</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetupChannels</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>pcm</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>tab</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Pause</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PauseDummy</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Drain</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_format_t</name></type> <name>pcm_format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>passthrough</name> <init>= <expr><name>PASSTHROUGH_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_FLOAT64</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_FLOAT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S32</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S16</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_U8</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><call><name>AOUT_FMT_SPDIF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>passthrough</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"alsa-passthrough"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AOUT_FMT_HDMI</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>passthrough</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"alsa-passthrough"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>passthrough</name> <operator>==</operator> <name>PASSTHROUGH_SPDIF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>passthrough</name> <operator>=</operator> <name>PASSTHROUGH_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>passthrough</name> <operator>!=</operator> <name>PASSTHROUGH_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S16</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name>HAVE_FPU</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_FLOAT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S16</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sep</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>passthrough</name> <operator>!=</operator> <name>PASSTHROUGH_NONE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>device</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>passthrough</name> <operator>==</operator> <name>PASSTHROUGH_HDMI</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"hdmi"</literal></expr> </then><else>: <expr><literal type="string">"iec958"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"iec958"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <name>device</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name> <argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"hdmi"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <name>device</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>opt</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">':'</literal></expr>:</case> <expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> <expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>devbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>aes3</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS</name><parameter_list>(<parameter><type><name>freq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case freq: aes3 = IEC958_AES3_CON_FS_ ##freq; break;</cpp:value></cpp:define>

<macro><name>FS</name><argument_list>( <argument><literal type="number">44100</literal></argument>)</argument_list></macro> <macro><name>FS</name><argument_list>( <argument><literal type="number">48000</literal></argument>)</argument_list></macro> <macro><name>FS</name><argument_list>( <argument><literal type="number">32000</literal></argument>)</argument_list></macro>

<macro><name>FS</name><argument_list>( <argument><literal type="number">22050</literal></argument>)</argument_list></macro> <macro><name>FS</name><argument_list>( <argument><literal type="number">24000</literal></argument>)</argument_list></macro>

<macro><name>FS</name><argument_list>( <argument><literal type="number">88200</literal></argument>)</argument_list></macro> <macro><name>FS</name><argument_list>(<argument><literal type="number">768000</literal></argument>)</argument_list></macro> <macro><name>FS</name><argument_list>( <argument><literal type="number">96000</literal></argument>)</argument_list></macro>

<macro><name>FS</name><argument_list>(<argument><literal type="number">176400</literal></argument>)</argument_list></macro> <macro><name>FS</name><argument_list>(<argument><literal type="number">192000</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FS</name></cpp:undef>

<default>default:</default>

<expr_stmt><expr><name>aes3</name> <operator>=</operator> <name>IEC958_AES3_CON_FS_NOTID</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>devbuf</name></expr></argument>, <argument><expr><literal type="string">"%s%cAES0=0x%x,AES1=0x%x,AES2=0x%x,AES3=0x%x"</literal></expr></argument>,

<argument><expr><name>device</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>,

<argument><expr><name>IEC958_AES0_CON_EMPHASIS_NONE</name> <operator>|</operator> <name>IEC958_AES0_NONAUDIO</name></expr></argument>,

<argument><expr><name>IEC958_AES1_CON_ORIGINAL</name> <operator>|</operator> <name>IEC958_AES1_CON_PCM_CODER</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>aes3</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>device</name> <operator>=</operator> <name>devbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><name>SND_PCM_NO_AUTO_RESAMPLE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>snd_pcm_open</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pcm</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>SND_PCM_STREAM_PLAYBACK</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot open ALSA device \"%s\": %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>,

<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dialog_display_error</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Audio output failed"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The audio device \"%s\" could not be used:\n%s."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>devbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pcm</name></name> <operator>=</operator> <name>pcm</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"using ALSA device: %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>devbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DumpDevice</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>snd_pcm_hw_params_t</name> <modifier>*</modifier></type><name>hw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>param</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_hw_params_alloca</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_hw_params_any</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"initial hardware setup:\n"</literal></expr></argument>, <argument><expr><name>snd_pcm_hw_params_dump</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_rate_resample</name><argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot disable resampling: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_access</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>,

<argument><expr><name>SND_PCM_ACCESS_RW_INTERLEAVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set access mode: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_hw_params_test_format</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><name>pcm_format</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><call><name>snd_pcm_hw_params_test_format</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><name>SND_PCM_FORMAT_FLOAT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_FLOAT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><call><name>snd_pcm_hw_params_test_format</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><name>SND_PCM_FORMAT_S32</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S32N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S32</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><call><name>snd_pcm_hw_params_test_format</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><name>SND_PCM_FORMAT_S16</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pcm_format</name> <operator>=</operator> <name>SND_PCM_FORMAT_S16</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"no supported sample format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_format</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><name>pcm_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set sample format: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>passthrough</name> <operator>==</operator> <name>PASSTHROUGH_NONE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>map</name> <init>= <expr><call><name>var_InheritInteger</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"alsa-audio-channels"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator> <call><name>SetupChannels</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pcm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <call><name>vlc_popcount</name> <argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_channels</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set %u channels: %s"</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>,

<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_rate_near</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set sample rate: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if> 

<expr_stmt><expr><name>param</name> <operator>=</operator> <name>AOUT_MIN_PREPARE_TIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_period_time_near</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set period: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>param</name> <operator>=</operator> <name>AOUT_MAX_ADVANCE_TIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_buffer_time_near</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set buffer duration: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

val = snd_pcm_hw_params_get_buffer_time (hw, &amp;param, NULL);

if (val)

{

msg_Warn (aout, "cannot get buffer time: %s", snd_strerror(val));

param = AOUT_MIN_PREPARE_TIME;

}

else

param /= 2;

val = snd_pcm_hw_params_set_period_time_near (pcm, hw, &amp;param, NULL);

if (val)

{

msg_Err (aout, "cannot set period: %s", snd_strerror (val));

goto error;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_hw_params</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot commit hardware parameters: %s"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"final HW setup:\n"</literal></expr></argument>, <argument><expr><name>snd_pcm_hw_params_dump</name></expr></argument>, <argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>snd_pcm_sw_params_t</name> <modifier>*</modifier></type><name>sw</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_sw_params_alloca</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_sw_params_current</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"initial software parameters:\n"</literal></expr></argument>, <argument><expr><name>snd_pcm_sw_params_dump</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_sw_params_set_start_threshold</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"unable to set start threshold (%s)"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name><argument_list>( <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_sw_params</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot commit software parameters: %s"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Dump</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"final software parameters:\n"</literal></expr></argument>, <argument><expr><name>snd_pcm_sw_params_dump</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>snd_pcm_prepare</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot prepare device: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>passthrough</name> <operator>!=</operator> <name>PASSTHROUGH_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name>AOUT_SPDIF_SIZE</name> <operator>*</operator> <operator>(</operator><name>channels</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <name>A52_FRAME_NB</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_hw_params_can_pause</name> <argument_list>(<argument><expr><name>hw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>Pause</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>PauseDummy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"device cannot be paused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>aout_SoftVolumeStart</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>snd_pcm_close</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_sframes_t</name></type> <name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>snd_pcm_delay</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pcm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot estimate delay: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>frames</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_ChannelReorder</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chans_table</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>pcm</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>snd_pcm_sframes_t</name></type> <name>frames</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <call><name>snd_pcm_writei</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frames</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>snd_pcm_frames_to_bytes</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>-=</operator> <name>frames</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>snd_pcm_recover</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot recover playback stream: %s"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DumpDeviceStatus</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot write samples: %s"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name> <argument_list>(<argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Pause</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcm</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>snd_pcm_pause</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PauseDummy</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>pause</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PauseDummy</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcm</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snd_pcm_drop</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snd_pcm_prepare</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcm</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_drop</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_prepare</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Drain</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pcm</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_drain</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_prepare</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>pcm</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>pcm</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snd_pcm_drop</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_close</name> <argument_list>(<argument><expr><name>pcm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EnumDevices</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>varname</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>idp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>namep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>hints</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snd_device_name_hint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"pcm"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hinted_default</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>hints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hint</name> <init>= <expr><name><name>hints</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>snd_device_name_get_hint</name><argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><literal type="string">"NAME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>name</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>snd_device_name_get_hint</name><argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><literal type="string">"DESC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>xstrdup</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>lf</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>lf</name></expr>;</condition> <incr><expr><name>lf</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>lf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>lf</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ids</name> <operator>=</operator> <call><name>xrealloc</name> <argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ids</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>xrealloc</name> <argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>names</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ids</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>names</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hinted_default</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snd_device_name_free_hint</name><argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hinted_default</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ids</name> <operator>=</operator> <call><name>xrealloc</name> <argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>ids</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>xrealloc</name> <argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>names</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ids</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name> <argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>names</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>idp</name> <operator>=</operator> <name>ids</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>names</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>varname</name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<macro><name>VLC_CONFIG_STRING_ENUM</name><argument_list>(<argument>EnumDevices</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeviceSelect</name> <parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><literal type="string">"default"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>device</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_DeviceReport</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_RestartRequest</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <call><name>var_InheritString</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"alsa-audio-device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_SoftVolumeInit</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>device_select</name></name> <operator>=</operator> <name>DeviceSelect</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_DeviceReport</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ids</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>EnumDevices</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Available ALSA PCM devices:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_HotplugReport</name> <argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>TimeGet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>drain</name></name> <operator>=</operator> <name>Drain</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
