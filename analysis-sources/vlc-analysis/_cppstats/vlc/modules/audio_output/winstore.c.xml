<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_output\winstore.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITGUID</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;audiopolicy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/mmdevice.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DEFINE_GUID</name> <argument_list>(<argument><expr><name>GUID_VLC_AUD_OUT</name></expr></argument>, <argument><expr><literal type="number">0x4533f59d</literal></expr></argument>, <argument><expr><literal type="number">0x59ee</literal></expr></argument>, <argument><expr><literal type="number">0x00c6</literal></expr></argument>,

<argument><expr><literal type="number">0xad</literal></expr></argument>, <argument><expr><literal type="number">0xb2</literal></expr></argument>, <argument><expr><literal type="number">0xc6</literal></expr></argument>, <argument><expr><literal type="number">0x8b</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x1a</literal></expr></argument>, <argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EnterMTA</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>CoInitializeEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LeaveMTA</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IAudioClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

}</block></struct></type> <name>aout_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_FromHR</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>HRESULT</name></type> <name>hr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name><modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>hr</name> <operator>==</operator> <name>AUDCLNT_E_DEVICE_INVALIDATED</name> <operator>||</operator>

<name>hr</name> <operator>==</operator> <name>AUDCLNT_E_RESOURCES_INVALIDATED</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VolumeSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ISimpleAudioVolume</name> <modifier>*</modifier></type><name>pc_AudioVolume</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><literal type="number">1.f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vol</name> <operator>=</operator> <name>vol</name> <operator>*</operator> <name>vol</name> <operator>*</operator> <name>vol</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>vol</name> <operator>&gt;</operator> <literal type="number">1.f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>vol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vol</name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_GainRequest</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_GetService</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ISimpleAudioVolume</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc_AudioVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get volume service (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ISimpleAudioVolume_SetMasterVolume</name><argument_list>(<argument><expr><name>pc_AudioVolume</name></expr></argument>, <argument><expr><name>vol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set volume (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>ISimpleAudioVolume_Release</name><argument_list>(<argument><expr><name>pc_AudioVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MuteSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ISimpleAudioVolume</name> <modifier>*</modifier></type><name>pc_AudioVolume</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAudioClient_GetService</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ISimpleAudioVolume</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pc_AudioVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot get volume service (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ISimpleAudioVolume_SetMute</name><argument_list>(<argument><expr><name>pc_AudioVolume</name></expr></argument>, <argument><expr><name>mute</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"cannot set mute (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>ISimpleAudioVolume_Release</name><argument_list>(<argument><expr><name>pc_AudioVolume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>aout_stream_TimeGet</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>aout_stream_Play</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_FromHR</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Pause</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>aout_stream_Pause</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>paused</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_FromHR</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>aout_stream_Flush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_FromHR</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type> <name>ActivateDevice</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>REFIID</name></type> <name>iid</name></decl></parameter>, <parameter><decl><type><name>PROPVARIANT</name> <modifier>*</modifier></type><name>actparms</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>pv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IAudioClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsEqualIID</name><argument_list>(<argument><expr><name>iid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAudioClient</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_NOINTERFACE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>actparms</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>client</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_INVALIDARG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IAudioClient_AddRef</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pv</name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aout_stream_Start</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forced</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_stream_start_t</name></type> <name>start</name> <init>= <expr><name>func</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>aout_stream_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>audio_sample_format_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name> <modifier>*</modifier></type><name>hr</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>HRESULT</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>forced</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>hr</name> <operator>=</operator> <call><name>start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_VLC_AUD_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><operator>*</operator><name>hr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>owner</name><operator>.</operator><name>activate</name></name> <operator>=</operator> <name>ActivateDevice</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>vlc_module_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"aout stream"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name>aout_stream_Start</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>module</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnterMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_stream_Stop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LeaveMTA</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeviceSelect</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_device</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name><modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>strtoll</name><argument_list>( <argument><expr><name>psz_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_end</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <operator>(</operator><name>IAudioClient</name><operator>*</operator><operator>)</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <operator>(</operator><name>IAudioClient</name><operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"winstore-client"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_RestartRequest</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>var_CreateGetAddress</name><argument_list>( <argument><expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"winstore-client"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"Reusing previous client: %p"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>TimeGet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>volume_set</name></name> <operator>=</operator> <name>VolumeSet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>mute_set</name></name> <operator>=</operator> <name>MuteSet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>Pause</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>device_select</name></name> <operator>=</operator> <name>DeviceSelect</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"winstore"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument><literal type="string">"Windows Store audio output"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_AUDIO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_AUDIO_AOUT</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"wasapi"</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

</unit>
