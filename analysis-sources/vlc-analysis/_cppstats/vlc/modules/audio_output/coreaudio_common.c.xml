<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_output\coreaudio_common.c"><cpp:empty>#import "coreaudio_common.h"</cpp:empty>

<cpp:empty>#import &lt;CoreAudio/CoreAudioTypes.h&gt;</cpp:empty>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>

<name>BytesToFrames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>i_bytes</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type>

<name>FramesToUs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_nb_frames</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i_nb_frames</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>FramesToBytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_frames</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>i_frames</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>

<name>UsToFrames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_us</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>i_us</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type>

<name>HostTimeToTick</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_host_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>VLC_TICK_FROM_NS</name><argument_list>(<argument><expr><name>i_host_time</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tinfo</name><operator>.</operator><name>numer</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tinfo</name><operator>.</operator><name>denom</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>

<name>TickToHostTime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_us</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>NS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_us</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tinfo</name><operator>.</operator><name>denom</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tinfo</name><operator>.</operator><name>numer</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ca_ClearOutBuffers</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_chain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_out_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_chain</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>lock_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>os_unfair_lock_lock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>unfair</name></name> <operator>=</operator> <name>OS_UNFAIR_LOCK_INIT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>lock_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>os_unfair_lock_lock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_unfair_lock_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>unfair</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>lock_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>os_unfair_lock_lock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>os_unfair_lock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>unfair</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ca_Open</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mach_timebase_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>tinfo</name><operator>.</operator><name>denom</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>tinfo</name><operator>.</operator><name>numer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flush_sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_init</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_chain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>ca_Play</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>ca_Pause</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>ca_Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>ca_TimeGet</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ca_Render</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_frames</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_host_time</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_requested</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_do_flush</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ca_ClearOutBuffers</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_do_flush</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flush_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>||</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_first_render_host_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_first_render_host_time</name></name> <operator>&gt;</operator> <name>i_host_time</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_requested_us</name> <init>=

<expr><call><name>FramesToUs</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><call><name>BytesToFrames</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_requested</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_requested_host_time</name> <init>=

<expr><call><name>TickToHostTime</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_requested_us</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_first_render_host_time</name></name> <operator>&gt;=</operator> <name>i_host_time</name> <operator>+</operator> <name>i_requested_host_time</name></expr>)</condition>

<block>{<block_content>

<goto>goto <name>drop</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_silence_us</name> <init>=

<expr><call><name>HostTimeToTick</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_first_render_host_time</name></name> <operator>-</operator> <name>i_host_time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_silence_bytes</name> <init>=

<expr><call><name>FramesToBytes</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><call><name>UsToFrames</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_silence_us</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_silence_bytes</name> <operator>&lt;=</operator> <name>i_requested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_silence_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_requested</name> <operator>-=</operator> <name>i_silence_bytes</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_render_host_time</name></name> <operator>=</operator> <name>i_host_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_render_frames</name></name> <operator>=</operator> <name>i_frames</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_copied</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_chain</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p_block</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i_requested</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_tocopy</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>i_requested</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_output</name><index>[<expr><name>i_copied</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_tocopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_requested</name> <operator>-=</operator> <name>i_tocopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_copied</name> <operator>+=</operator> <name>i_tocopy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_tocopy</name> <operator>==</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_release</name> <init>= <expr><name>p_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_requested</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_tocopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_tocopy</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_chain</name></name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_chain</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_out_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_chain</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_size</name></name> <operator>-=</operator> <name>i_copied</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_requested</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_underrun_size</name></name> <operator>+=</operator> <name>i_requested</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_output</name><index>[<expr><name>i_copied</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_requested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<label><name>drop</name>:</label>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_requested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type>

<name>ca_GetLatencyLocked</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_out_frames</name> <init>= <expr><call><name>BytesToFrames</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FramesToUs</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_out_frames</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_render_frames</name></name></expr></argument>)</argument_list></call>

<operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dev_latency_us</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ca_TimeGet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_render_host_time</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_first_render_host_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_render_delay_host_time</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_render_host_time</name></name>

<operator>-</operator> <call><name>mach_absolute_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_render_delay</name> <init>=

<expr><call><name>HostTimeToTick</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_render_delay_host_time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>=</operator> <call><name>ca_GetLatencyLocked</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i_render_delay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ca_Flush</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_do_flush</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ca_ClearOutBuffers</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_do_flush</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flush_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_render_host_time</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_first_render_host_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_render_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_played</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ca_Pause</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <name>pause</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ca_Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_ChannelReorder</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chan_table</name></name></expr></argument>,

<argument><expr><name>VLC_CODEC_FL32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_render_host_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>first_render_delay</name> <init>= <expr><name>date</name> <operator>-</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call>

<operator>-</operator> <call><name>ca_GetLatencyLocked</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_first_render_host_time</name></name>

<operator>=</operator> <call><name>mach_absolute_time</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>TickToHostTime</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>first_render_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_avalaible_bytes</name> <init>=

<expr><call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_max_size</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_avalaible_bytes</name> <operator>!=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>i_avalaible_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_new</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_new</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_avalaible_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_avalaible_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_avalaible_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_out_last</name></name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_size</name></name> <operator>+=</operator> <name>i_avalaible_bytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_frame_us</name> <init>=

<expr><call><name>FramesToUs</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><call><name>BytesToFrames</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_tick_sleep</name><argument_list>(<argument><expr><name>i_frame_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_out_last</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_size</name></name> <operator>+=</operator> <name>i_avalaible_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_underrun_size</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_underrun_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_underrun_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_played</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_played</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i_underrun_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"underrun of %zu bytes"</literal></expr></argument>, <argument><expr><name>i_underrun_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ca_Initialize</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dev_latency_us</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_underrun_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_render_host_time</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_first_render_host_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_render_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_frame_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dev_latency_us</name></name> <operator>=</operator> <name>i_dev_latency_us</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_audiobuffer_size</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name>

<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_length</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>==</operator> <name>AUDIO_CHANNEL_TYPE_AMBISONICS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_max_size</name></name> <operator>=</operator> <name>i_audiobuffer_size</name> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_max_size</name></name> <operator>=</operator> <name>i_audiobuffer_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ca_ClearOutBuffers</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_played</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ca_Uninitialize</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ca_ClearOutBuffers</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_max_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ca_SetAliveState</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>alive</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_sem_post</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_paused</name></name> <operator>=</operator> <operator>!</operator><name>alive</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>alive</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_do_flush</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ca_ClearOutBuffers</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_played</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_do_flush</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_sem_post</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_sem_post</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flush_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ca_SetDeviceLatency</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dev_latency_us</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lock_lock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dev_latency_us</name></name> <operator>=</operator> <name>i_dev_latency_us</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lock_unlock</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>AudioUnit</name></type>

<name>au_NewOutputInstance</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>OSType</name></type> <name>comp_sub_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioComponentDescription</name></type> <name>desc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>componentType</name> <operator>=</operator> <name>kAudioUnitType_Output</name></expr>,

<expr><operator>.</operator><name>componentSubType</name> <operator>=</operator> <name>comp_sub_type</name></expr>,

<expr><operator>.</operator><name>componentManufacturer</name> <operator>=</operator> <name>kAudioUnitManufacturer_Apple</name></expr>,

<expr><operator>.</operator><name>componentFlags</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>componentFlagsMask</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioComponent</name></type> <name>au_component</name></decl>;</decl_stmt>

<expr_stmt><expr><name>au_component</name> <operator>=</operator> <call><name>AudioComponentFindNext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>au_component</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"cannot find any AudioComponent, PCM output failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AudioUnit</name></type> <name>au</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><call><name>AudioComponentInstanceNew</name><argument_list>(<argument><expr><name>au_component</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>au</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"cannot open AudioComponent, PCM output failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>au</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type>

<name>RenderCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>AudioUnitRenderActionFlags</name> <modifier>*</modifier></type><name>ioActionFlags</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AudioTimeStamp</name> <modifier>*</modifier></type><name>inTimeStamp</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>inBusNumber</name></decl></parameter>,

<parameter><decl><type><name>UInt32</name></type> <name>inNumberFrames</name></decl></parameter>, <parameter><decl><type><name>AudioBufferList</name> <modifier>*</modifier></type><name>ioData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>ioActionFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inTimeStamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>inBusNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_host_time</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>inTimeStamp</name><operator>-&gt;</operator><name>mFlags</name></name> <operator>&amp;</operator> <name>kAudioTimeStampHostTimeValid</name><operator>)</operator></expr>

?</condition><then> <expr><name><name>inTimeStamp</name><operator>-&gt;</operator><name>mHostTime</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ca_Render</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>inNumberFrames</name></expr></argument>, <argument><expr><name>i_host_time</name></expr></argument>, <argument><expr><name><name>ioData</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mData</name></expr></argument>,

<argument><expr><name><name>ioData</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mDataByteSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AudioChannelLayout</name> <modifier>*</modifier></type>

<name>GetLayoutDescription</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AudioChannelLayout</name> <modifier>*</modifier></type><name>outlayout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioFormatPropertyID</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outlayout</name><operator>-&gt;</operator><name>mChannelLayoutTag</name></name> <operator>==</operator> <name>kAudioChannelLayoutTag_UseChannelBitmap</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>kAudioFormatProperty_ChannelLayoutForBitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>&amp;</operator><name><name>outlayout</name><operator>-&gt;</operator><name>mChannelBitmap</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>kAudioFormatProperty_ChannelLayoutForTag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioChannelLayoutTag</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>&amp;</operator><name><name>outlayout</name><operator>-&gt;</operator><name>mChannelLayoutTag</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>param_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><call><name>AudioFormatGetPropertyInfo</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>AudioChannelLayout</name> <modifier>*</modifier></type><name>reslayout</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>param_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reslayout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioFormatGetProperty</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_size</name></expr></argument>, <argument><expr><name>reslayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name> <operator>||</operator> <name><name>reslayout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"insufficient number of output channels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reslayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>reslayout</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MapOutputLayout</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AudioChannelLayout</name> <modifier>*</modifier></type><name>outlayout</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>warn_configuration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_original</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioChannelLayout</name> <modifier>*</modifier></type><name>reslayout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>outlayout</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"not output layout, default to Stereo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outlayout</name><operator>-&gt;</operator><name>mChannelLayoutTag</name></name> <operator>!=</operator>

<name>kAudioChannelLayoutTag_UseChannelDescriptions</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>reslayout</name> <operator>=</operator> <call><name>GetLayoutDescription</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>outlayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reslayout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outlayout</name> <operator>=</operator> <name>reslayout</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_original</name> <operator>==</operator> <name>AOUT_CHAN_CENTER</name>

<operator>||</operator> <name><name>outlayout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"output layout of AUHAL has 1 channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>i_original</name> <operator>==</operator> <operator>(</operator><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name><operator>)</operator>

<operator>||</operator> <name><name>outlayout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"output layout of AUHAL is Stereo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>outlayout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"output layout of AUHAL has %i channels"</literal></expr></argument>,

<argument><expr><name><name>outlayout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>i_auhal_channel_mapping</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>kAudioChannelLabel_Left</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>,

<expr><index>[<expr><name>kAudioChannelLabel_Right</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><index>[<expr><name>kAudioChannelLabel_Center</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>,

<expr><index>[<expr><name>kAudioChannelLabel_LFEScreen</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><index>[<expr><name>kAudioChannelLabel_LeftSurround</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_REARLEFT</name></expr>,

<expr><index>[<expr><name>kAudioChannelLabel_RightSurround</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><index>[<expr><name>kAudioChannelLabel_RearSurroundLeft</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_MIDDLELEFT</name></expr>,

<expr><index>[<expr><name>kAudioChannelLabel_RearSurroundRight</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><index>[<expr><name>kAudioChannelLabel_CenterSurround</name></expr>]</index> <operator>=</operator> <name>AOUT_CHAN_REARCENTER</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>i_auhal_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>i_auhal_channel_mapping</name></expr></argument>)</argument_list></sizeof>

<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>i_auhal_channel_mapping</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>outlayout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioChannelLabel</name></type> <name>chan</name> <init>=

<expr><name><name>outlayout</name><operator>-&gt;</operator><name>mChannelDescriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mChannelLabel</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"this is channel: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>chan</name> <argument_list type="generic">&lt; <argument><expr><name>i_auhal_size</name> <operator>&amp;&amp;</operator> <name><name>i_auhal_channel_mapping</name><index>[<expr><name>chan</name></expr>]</index></name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>|=</operator> <name><name>i_auhal_channel_mapping</name><index>[<expr><name>chan</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"found nonrecognized channel %d at index "</literal>

<literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>warn_configuration</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>warn_configuration</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reslayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"selected %d physical channels for device output"</literal></expr></argument>,

<argument><expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"VLC will output: %s"</literal></expr></argument>, <argument><expr><call><name>aout_FormatPrintChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>SetupInputLayout</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>AudioChannelLayoutTag</name> <modifier>*</modifier></type><name>inlayout_tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>aout_sys_common</name></name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator>struct <name>aout_sys_common</name> <operator>*</operator><operator>)</operator> <name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>chans_out</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_Mono</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_Stereo</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_CENTER</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DVD_7</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHAN_LFE</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DVD_4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <operator>(</operator><name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DVD_10</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHANS_REAR</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DVD_3</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHANS_CENTER</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DVD_3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <operator>(</operator><name>AOUT_CHAN_CENTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DVD_19</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <operator>(</operator><name>AOUT_CHAN_LFE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DVD_18</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <operator>(</operator><name>AOUT_CHAN_LFE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DVD_20</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARLEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator>

<call><name>aout_CheckChannelReorder</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chans_out</name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chan_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"channel reordering needed for 5.1 output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_AudioUnit_6_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARLEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARCENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator>

<call><name>aout_CheckChannelReorder</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chans_out</name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chan_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"channel reordering needed for 6.0 output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_MPEG_6_1_A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARLEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARCENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator>

<call><name>aout_CheckChannelReorder</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chans_out</name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chan_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"channel reordering needed for 6.1 output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <operator>(</operator><name>AOUT_CHAN_LFE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_MPEG_7_1_C</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_MIDDLELEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARLEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DTS_8_0_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_MIDDLELEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARLEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARCENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator>

<call><name>aout_CheckChannelReorder</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chans_out</name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chan_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"channel reordering needed for 7.1 / 8.0 output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_DTS_8_1_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_MIDDLELEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARLEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARCENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chans_out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name> <operator>=</operator>

<call><name>aout_CheckChannelReorder</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chans_out</name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chan_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>chans_to_reorder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"channel reordering needed for 8.1 output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>au_Initialize</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioUnit</name></type> <name>au</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AudioChannelLayout</name> <modifier>*</modifier></type><name>outlayout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dev_latency_us</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>warn_configuration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioChannelLayoutTag</name></type> <name>inlayout_tag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>warn_configuration</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>warn_configuration</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>desc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_BitsPerSample</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MapOutputLayout</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>outlayout</name></expr></argument>, <argument><expr><name>warn_configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetupInputLayout</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inlayout_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mFormatFlags</name></name> <operator>=</operator> <name>kAudioFormatFlagsNativeFloatPacked</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mChannelsPerFrame</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mBitsPerChannel</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>AOUT_FMT_SPDIF</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>inlayout_tag</name> <operator>=</operator> <name>kAudioChannelLayoutTag_Stereo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mFormatFlags</name></name> <operator>=</operator> <name>kLinearPCMFormatFlagIsSignedInteger</name> <operator>|</operator>

<name>kLinearPCMFormatFlagIsPacked</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mChannelsPerFrame</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mBitsPerChannel</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mSampleRate</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mFormatID</name></name> <operator>=</operator> <name>kAudioFormatLinearPCM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mFramesPerPacket</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mBytesPerFrame</name></name> <operator>=</operator> <name><name>desc</name><operator>.</operator><name>mBitsPerChannel</name></name> <operator>*</operator> <name><name>desc</name><operator>.</operator><name>mChannelsPerFrame</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>mBytesPerPacket</name></name> <operator>=</operator> <name><name>desc</name><operator>.</operator><name>mBytesPerFrame</name></name> <operator>*</operator> <name><name>desc</name><operator>.</operator><name>mFramesPerPacket</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><call><name>AudioUnitSetProperty</name><argument_list>(<argument><expr><name>au</name></expr></argument>, <argument><expr><name>kAudioUnitProperty_StreamFormat</name></expr></argument>,

<argument><expr><name>kAudioUnitScope_Input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"failed to set stream format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><call><name>STREAM_FORMAT_MSG</name><argument_list>(<argument><expr><literal type="string">"Current AU format: "</literal></expr></argument> , <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <macro><name>AudioUnitGetProperty</name><argument_list>(<argument>au</argument>, <argument>kAudioUnitProperty_StreamFormat</argument>,

<argument>kAudioUnitScope_Input</argument>, <argument><literal type="number">0</literal></argument>, <argument>&amp;desc</argument>,

<argument>&amp;(UInt32) { sizeof(desc) }</argument>)</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"failed to set stream format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AURenderCallbackStruct</name></type> <name>callback</name> <init>= <expr><block>{

<expr><operator>.</operator><name>inputProc</name> <operator>=</operator> <name>RenderCallback</name></expr>,

<expr><operator>.</operator><name>inputProcRefCon</name> <operator>=</operator> <name>p_aout</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioUnitSetProperty</name><argument_list>(<argument><expr><name>au</name></expr></argument>, <argument><expr><name>kAudioUnitProperty_SetRenderCallback</name></expr></argument>,

<argument><expr><name>kAudioUnitScope_Input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"failed to setup render callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>AudioChannelLayout</name></type> <name>inlayout</name> <init>= <expr><block>{

<expr><operator>.</operator><name>mChannelLayoutTag</name> <operator>=</operator> <name>inlayout_tag</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioUnitSetProperty</name><argument_list>(<argument><expr><name>au</name></expr></argument>, <argument><expr><name>kAudioUnitProperty_AudioChannelLayout</name></expr></argument>,

<argument><expr><name>kAudioUnitScope_Input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>inlayout</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inlayout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"failed to setup input layout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AudioUnitInitialize</name><argument_list>(<argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ca_LogErr</name><argument_list>(<argument><expr><literal type="string">"AudioUnitInitialize failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ca_Initialize</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>i_dev_latency_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AudioUnitUninitialize</name><argument_list>(<argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>au_Uninitialize</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>AudioUnit</name></type> <name>au</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><call><name>AudioUnitUninitialize</name><argument_list>(<argument><expr><name>au</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ca_LogWarn</name><argument_list>(<argument><expr><literal type="string">"AudioUnitUninitialize failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ca_Uninitialize</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
