<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_output\audiotrack.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../video_output/android/utils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMOOTHPOS_SAMPLE_COUNT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMOOTHPOS_INTERVAL_US</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(30)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIOTIMESTAMP_INTERVAL_US</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(500)</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AudioTrack_Thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<enum>enum <name>at_dev</name> <block>{

<decl><name>AT_DEV_STEREO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AT_DEV_PCM</name></decl>,

<decl><name>AT_DEV_ENCODED</name></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_DEV_DEFAULT</name></cpp:macro> <cpp:value>AT_DEV_STEREO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_DEV_MAX_CHANNELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>at_dev</name></name></type> <name>at_dev</name></decl>;</decl_stmt>

}</block> <decl><name><name>at_devs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"stereo"</literal></expr>, <expr><literal type="string">"Up to 2 channels (compat mode)."</literal></expr>, <expr><name>AT_DEV_STEREO</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pcm"</literal></expr>, <expr><literal type="string">"Up to 8 channels."</literal></expr>, <expr><name>AT_DEV_PCM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"encoded"</literal></expr>, <expr><literal type="string">"Up to 8 channels, passthrough if available."</literal></expr>, <expr><name>AT_DEV_ENCODED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>AT_DEV_DEFAULT</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>at_dev</name></name></type> <name>at_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>p_audiotrack</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_sample_format_t</name></type> <name>fmt</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_channel_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

}</block> <decl><name>audiotrack_args</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_wrap_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_last</name></decl>;</decl_stmt>

}</block> <decl><name>headpos</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>jobject</name></type> <name>p_obj</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_frame_us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jlong</name></type> <name>i_frame_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_play_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_time</name></decl>;</decl_stmt>

}</block> <decl><name>timestamp</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name><name>p_us</name><index>[<expr><name>SMOOTHPOS_SAMPLE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_latency_us</name></decl>;</decl_stmt>

}</block> <decl><name>smoothpos</name></decl>;</struct>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_max_audiotrack_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i_encoding_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_passthrough</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_chans_to_reorder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_chan_table</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>WRITE_BYTEARRAY</name></decl>,

<decl><name>WRITE_BYTEARRAYV23</name></decl>,

<decl><name>WRITE_SHORTARRAYV23</name></decl>,

<decl><name>WRITE_BYTEBUFFER</name></decl>,

<decl><name>WRITE_FLOATARRAY</name></decl>

}</block> <decl><name>i_write_type</name></decl>;</enum>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>aout_cond</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>thread_cond</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_thread_running</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_thread_paused</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_thread_waiting</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_samples_written</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_audiotrack_exception</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_error</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_read</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_write</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt> 

<union>union <block>{

<decl_stmt><decl><type><name>jbyteArray</name></type> <name>p_bytearray</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfloatArray</name></type> <name>p_floatarray</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jshortArray</name></type> <name>p_shortarray</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>p_obj</name></decl>;</decl_stmt>

}</block> <decl><name>bytebuffer</name></decl>;</struct>

}</block> <decl><name>u</name></decl>;</union>

}</block> <decl><name>circular</name></decl>;</struct>

}</block></struct></type> <name>aout_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIOTRACK_NATIVE_SAMPLERATE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIOTRACK_SESSION_ID_TEXT</name></cpp:macro> <cpp:value>" Id of audio session the AudioTrack must be attached to"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"AudioTrack"</literal></argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument><literal type="string">"Android AudioTrack audio output"</literal></argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">180</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AOUT</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"audiotrack-session-id"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument>AUDIOTRACK_SESSION_ID_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_private</name><argument_list>()</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"audiotrack"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_NAME</name></cpp:macro> <cpp:value>"android_audiotrack"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ENV</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>android_getEnv( VLC_OBJECT(p_aout), THREAD_NAME )</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct

<block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>ctor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_ctor_21</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>release</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>getState</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>play</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>flush</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>pause</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>write</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>writeV23</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>writeShortV23</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>writeBufferV21</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>writeFloat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>getPlaybackHeadPosition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>getTimestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>getMinBufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>getNativeOutputSampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>setVolume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>setStereoVolume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>STATE_INITIALIZED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>MODE_STREAM</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ERROR</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ERROR_BAD_VALUE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ERROR_INVALID_OPERATION</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>WRITE_NON_BLOCKING</name></decl>;</decl_stmt>

}</block> <decl><name>AudioTrack</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>ctor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>build</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>setLegacyStreamType</name></decl>;</decl_stmt>

}</block> <decl><name>AudioAttributes_Builder</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>jint</name></type> <name>ENCODING_PCM_8BIT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ENCODING_PCM_16BIT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ENCODING_PCM_FLOAT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_ENCODING_PCM_FLOAT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ENCODING_AC3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_ENCODING_AC3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ENCODING_E_AC3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_ENCODING_E_AC3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ENCODING_DOLBY_TRUEHD</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_ENCODING_DOLBY_TRUEHD</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ENCODING_DTS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_ENCODING_DTS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ENCODING_DTS_HD</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_ENCODING_DTS_HD</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>ENCODING_IEC61937</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_ENCODING_IEC61937</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_MONO</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_STEREO</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_FRONT_LEFT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_FRONT_RIGHT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_BACK_LEFT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_BACK_RIGHT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_FRONT_CENTER</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_LOW_FREQUENCY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_BACK_CENTER</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_5POINT1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_SIDE_LEFT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>CHANNEL_OUT_SIDE_RIGHT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_CHANNEL_OUT_SIDE</name></decl>;</decl_stmt>

}</block> <decl><name>AudioFormat</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>ctor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>build</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>setChannelMask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>setEncoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>setSampleRate</name></decl>;</decl_stmt>

}</block> <decl><name>AudioFormat_Builder</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>jint</name></type> <name>ERROR_DEAD_OBJECT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_ERROR_DEAD_OBJECT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>STREAM_MUSIC</name></decl>;</decl_stmt>

}</block> <decl><name>AudioManager</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>getOutputLatency</name></decl>;</decl_stmt>

}</block> <decl><name>AudioSystem</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>ctor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>framePosition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>nanoTime</name></decl>;</decl_stmt>

}</block> <decl><name>AudioTimestamp</name></decl>;</struct>

}</block> <decl><name>jfields</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>InitJNIFields</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>JNIEnv</name><modifier>*</modifier></type> <name>env</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>i_init_state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>field</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_init_state</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EXCEPTION</name><parameter_list>( <parameter><type><name>what</name></type></parameter>, <parameter><type><name>critical</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { if( (*env)-&gt;ExceptionCheck( env ) ) { msg_Err( p_aout, "%s failed", what ); (*env)-&gt;ExceptionClear( env ); if( (critical) ) { i_init_state = 0; goto end; } } } while( 0 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CLASS</name><parameter_list>( <parameter><type><name>str</name></type></parameter>, <parameter><type><name>critical</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { clazz = (*env)-&gt;FindClass( env, (str) ); CHECK_EXCEPTION( "FindClass(" str ")", critical ); } while( 0 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ID</name><parameter_list>( <parameter><type><name>get</name></type></parameter>, <parameter><type><name>id</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>args</name></type></parameter>, <parameter><type><name>critical</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { jfields.id = (*env)-&gt;get( env, clazz, (str), (args) ); CHECK_EXCEPTION( #get "(" #id ")", critical ); } while( 0 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CONST_INT</name><parameter_list>( <parameter><type><name>id</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>critical</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { field = NULL; field = (*env)-&gt;GetStaticFieldID( env, clazz, (str), "I" ); CHECK_EXCEPTION( "GetStaticFieldID(" #id ")", critical ); if( field ) { jfields.id = (*env)-&gt;GetStaticIntField( env, clazz, field ); CHECK_EXCEPTION( #id, critical ); } } while( 0 )</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>( <argument><expr><literal type="string">"android/media/AudioTrack"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <operator>(</operator><name>jclass</name><operator>)</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"NewGlobalRef"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>ctor</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>,

<argument><expr><literal type="string">"(Landroid/media/AudioAttributes;Landroid/media/AudioFormat;III)V"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>has_ctor_21</name></name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>ctor</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>has_ctor_21</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>ctor</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"(IIIIIII)V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><literal type="string">"release"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>getState</name></name></expr></argument>, <argument><expr><literal type="string">"getState"</literal></expr></argument>, <argument><expr><literal type="string">"()I"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>play</name></name></expr></argument>, <argument><expr><literal type="string">"play"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"stop"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><literal type="string">"flush"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>pause</name></name></expr></argument>, <argument><expr><literal type="string">"pause"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>writeV23</name></name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="string">"([BIII)I"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>writeShortV23</name></name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="string">"([SIII)I"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>writeV23</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>writeBufferV21</name></name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="string">"(Ljava/nio/ByteBuffer;II)I"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>writeV23</name></name> <operator>||</operator> <name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>writeBufferV21</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>WRITE_NON_BLOCKING</name></name></expr></argument>, <argument><expr><literal type="string">"WRITE_NON_BLOCKING"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AUDIOTRACK_USE_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>writeFloat</name></name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="string">"([FIII)I"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>write</name></name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="string">"([BII)I"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>getTimestamp</name></name></expr></argument>,

<argument><expr><literal type="string">"getTimestamp"</literal></expr></argument>, <argument><expr><literal type="string">"(Landroid/media/AudioTimestamp;)Z"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>getPlaybackHeadPosition</name></name></expr></argument>,

<argument><expr><literal type="string">"getPlaybackHeadPosition"</literal></expr></argument>, <argument><expr><literal type="string">"()I"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetStaticMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>getMinBufferSize</name></name></expr></argument>, <argument><expr><literal type="string">"getMinBufferSize"</literal></expr></argument>,

<argument><expr><literal type="string">"(III)I"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AUDIOTRACK_NATIVE_SAMPLERATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetStaticMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>getNativeOutputSampleRate</name></name></expr></argument>,

<argument><expr><literal type="string">"getNativeOutputSampleRate"</literal></expr></argument>, <argument><expr><literal type="string">"(I)I"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>setVolume</name></name></expr></argument>,

<argument><expr><literal type="string">"setVolume"</literal></expr></argument>, <argument><expr><literal type="string">"(F)I"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>setVolume</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>setStereoVolume</name></name></expr></argument>,

<argument><expr><literal type="string">"setStereoVolume"</literal></expr></argument>, <argument><expr><literal type="string">"(FF)I"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>STATE_INITIALIZED</name></name></expr></argument>, <argument><expr><literal type="string">"STATE_INITIALIZED"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>MODE_STREAM</name></name></expr></argument>, <argument><expr><literal type="string">"MODE_STREAM"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><literal type="string">"ERROR"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>ERROR_BAD_VALUE</name></name></expr></argument> , <argument><expr><literal type="string">"ERROR_BAD_VALUE"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioTrack</name><operator>.</operator><name>ERROR_INVALID_OPERATION</name></name></expr></argument>,

<argument><expr><literal type="string">"ERROR_INVALID_OPERATION"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>has_ctor_21</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>( <argument><expr><literal type="string">"android/media/AudioAttributes$Builder"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioAttributes_Builder</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <operator>(</operator><name>jclass</name><operator>)</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"NewGlobalRef"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioAttributes_Builder</name><operator>.</operator><name>ctor</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>,

<argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioAttributes_Builder</name><operator>.</operator><name>build</name></name></expr></argument>, <argument><expr><literal type="string">"build"</literal></expr></argument>,

<argument><expr><literal type="string">"()Landroid/media/AudioAttributes;"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioAttributes_Builder</name><operator>.</operator><name>setLegacyStreamType</name></name></expr></argument>, <argument><expr><literal type="string">"setLegacyStreamType"</literal></expr></argument>,

<argument><expr><literal type="string">"(I)Landroid/media/AudioAttributes$Builder;"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>( <argument><expr><literal type="string">"android/media/AudioFormat$Builder"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat_Builder</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <operator>(</operator><name>jclass</name><operator>)</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"NewGlobalRef"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioFormat_Builder</name><operator>.</operator><name>ctor</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>,

<argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioFormat_Builder</name><operator>.</operator><name>build</name></name></expr></argument>, <argument><expr><literal type="string">"build"</literal></expr></argument>,

<argument><expr><literal type="string">"()Landroid/media/AudioFormat;"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioFormat_Builder</name><operator>.</operator><name>setChannelMask</name></name></expr></argument>, <argument><expr><literal type="string">"setChannelMask"</literal></expr></argument>,

<argument><expr><literal type="string">"(I)Landroid/media/AudioFormat$Builder;"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioFormat_Builder</name><operator>.</operator><name>setEncoding</name></name></expr></argument>, <argument><expr><literal type="string">"setEncoding"</literal></expr></argument>,

<argument><expr><literal type="string">"(I)Landroid/media/AudioFormat$Builder;"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioFormat_Builder</name><operator>.</operator><name>setSampleRate</name></name></expr></argument>, <argument><expr><literal type="string">"setSampleRate"</literal></expr></argument>,

<argument><expr><literal type="string">"(I)Landroid/media/AudioFormat$Builder;"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>getTimestamp</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>( <argument><expr><literal type="string">"android/media/AudioTimestamp"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioTimestamp</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <operator>(</operator><name>jclass</name><operator>)</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>,

<argument><expr><name>clazz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"NewGlobalRef"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetMethodID</name></expr></argument>, <argument><expr><name><name>AudioTimestamp</name><operator>.</operator><name>ctor</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetFieldID</name></expr></argument>, <argument><expr><name><name>AudioTimestamp</name><operator>.</operator><name>framePosition</name></name></expr></argument>,

<argument><expr><literal type="string">"framePosition"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetFieldID</name></expr></argument>, <argument><expr><name><name>AudioTimestamp</name><operator>.</operator><name>nanoTime</name></name></expr></argument>,

<argument><expr><literal type="string">"nanoTime"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AUDIOTRACK_HW_LATENCY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>( <argument><expr><literal type="string">"android/media/AudioSystem"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>clazz</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioSystem</name><operator>.</operator><name>clazz</name></name> <operator>=</operator> <operator>(</operator><name>jclass</name><operator>)</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ID</name><argument_list>( <argument><expr><name>GetStaticMethodID</name></expr></argument>, <argument><expr><name><name>AudioSystem</name><operator>.</operator><name>getOutputLatency</name></name></expr></argument>,

<argument><expr><literal type="string">"getOutputLatency"</literal></expr></argument>, <argument><expr><literal type="string">"(I)I"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>( <argument><expr><literal type="string">"android/media/AudioFormat"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>ENCODING_PCM_8BIT</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING_PCM_8BIT"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>ENCODING_PCM_16BIT</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING_PCM_16BIT"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AUDIOTRACK_USE_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>ENCODING_PCM_FLOAT</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING_PCM_FLOAT"</literal></expr></argument>,

<argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_PCM_FLOAT</name></name> <operator>=</operator> <name>field</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>writeFloat</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_PCM_FLOAT</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>writeShortV23</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>ENCODING_IEC61937</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING_IEC61937"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_IEC61937</name></name> <operator>=</operator> <name>field</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_IEC61937</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>ENCODING_AC3</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING_AC3"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_AC3</name></name> <operator>=</operator> <name>field</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>ENCODING_E_AC3</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING_E_AC3"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_E_AC3</name></name> <operator>=</operator> <name>field</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>ENCODING_DTS</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING_DTS"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_DTS</name></name> <operator>=</operator> <name>field</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>ENCODING_DTS_HD</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING_DTS_HD"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_DTS_HD</name></name> <operator>=</operator> <name>field</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>ENCODING_DOLBY_TRUEHD</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING_DOLBY_TRUEHD"</literal></expr></argument>,

<argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_DOLBY_TRUEHD</name></name> <operator>=</operator> <name>field</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_MONO</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_MONO"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_STEREO</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_STEREO"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_FRONT_LEFT</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_FRONT_LEFT"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_FRONT_RIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_FRONT_RIGHT"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_5POINT1</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_5POINT1"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_BACK_LEFT</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_BACK_LEFT"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_BACK_RIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_BACK_RIGHT"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_FRONT_CENTER</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_FRONT_CENTER"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_LOW_FREQUENCY</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_LOW_FREQUENCY"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_BACK_CENTER</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_BACK_CENTER"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_SIDE_LEFT</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_SIDE_LEFT"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>field</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_SIDE_RIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"CHANNEL_OUT_SIDE_RIGHT"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_CHANNEL_OUT_SIDE</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_CHANNEL_OUT_SIDE</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GET_CLASS</name><argument_list>( <argument><expr><literal type="string">"android/media/AudioManager"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioManager</name><operator>.</operator><name>ERROR_DEAD_OBJECT</name></name></expr></argument>, <argument><expr><literal type="string">"ERROR_DEAD_OBJECT"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jfields</name><operator>.</operator><name>AudioManager</name><operator>.</operator><name>has_ERROR_DEAD_OBJECT</name></name> <operator>=</operator> <name>field</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_CONST_INT</name><argument_list>( <argument><expr><name><name>AudioManager</name><operator>.</operator><name>STREAM_MUSIC</name></name></expr></argument>, <argument><expr><literal type="string">"STREAM_MUSIC"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_EXCEPTION</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_CLASS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_ID</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_CONST_INT</name></cpp:undef>

<expr_stmt><expr><name>i_init_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>i_init_state</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>ret</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"AudioTrack jni init failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>

<name>check_exception</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>( <argument><expr><name>env</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_audiotrack_exception</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionDescribe</name></name><argument_list>( <argument><expr><name>env</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>( <argument><expr><name>env</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"%s.%s triggered an exception !"</literal></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>method</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EXCEPTION</name><parameter_list>( <parameter><type><name>class</name></type></parameter>, <parameter><type><name>method</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>check_exception( env, p_aout, class, method )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_AT_EXCEPTION</name><parameter_list>( <parameter><type><name>method</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>check_exception( env, p_aout, "AudioTrack", method )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_CALL</name><parameter_list>( <parameter><type><name>what</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(*env)-&gt;what( env, obj, method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_CALL_INT</name><parameter_list>( <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL( CallIntMethod, obj, method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_CALL_BOOL</name><parameter_list>( <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL( CallBooleanMethod, obj, method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_CALL_OBJECT</name><parameter_list>( <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL( CallObjectMethod, obj, method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_CALL_VOID</name><parameter_list>( <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL( CallVoidMethod, obj, method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_CALL_STATIC_INT</name><parameter_list>( <parameter><type><name>clazz</name></type></parameter>, <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL( CallStaticIntMethod, clazz, method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_AT_NEW</name><parameter_list>( <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL( NewObject, jfields.AudioTrack.clazz, jfields.AudioTrack.ctor, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_AT_CALL_INT</name><parameter_list>( <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL_INT( p_sys-&gt;p_audiotrack, jfields.AudioTrack.method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_AT_CALL_BOOL</name><parameter_list>( <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL_BOOL( p_sys-&gt;p_audiotrack, jfields.AudioTrack.method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_AT_CALL_VOID</name><parameter_list>( <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL_VOID( p_sys-&gt;p_audiotrack, jfields.AudioTrack.method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_AT_CALL_STATIC_INT</name><parameter_list>( <parameter><type><name>method</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL( CallStaticIntMethod, jfields.AudioTrack.clazz, jfields.AudioTrack.method, ##__VA_ARGS__ )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_AUDIOTIMESTAMP_GET_LONG</name><parameter_list>( <parameter><type><name>field</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>JNI_CALL( GetLongField, p_sys-&gt;timestamp.p_obj, jfields.AudioTimestamp.field )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type>

<name>frames_to_us</name><parameter_list>( <parameter><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_nb_frames</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i_nb_frames</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAMES_TO_US</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>frames_to_us( p_sys, (x) )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>

<name>bytes_to_frames</name><parameter_list>( <parameter><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name>i_bytes</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_frame_length</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TO_FRAMES</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bytes_to_frames( p_sys, (x) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TO_US</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>frames_to_us( p_sys, bytes_to_frames( p_sys, (x) ) )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>

<name>frames_to_bytes</name><parameter_list>( <parameter><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_frames</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name>i_frames</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_frame_length</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAMES_TO_BYTES</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>frames_to_bytes( p_sys, (x) )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>

<name>AudioTrack_getPlaybackHeadPosition</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <literal type="number">0xFFFFFFFFL</literal> <operator>&amp;</operator> <call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>getPlaybackHeadPosition</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>headpos</name><operator>.</operator><name>i_last</name></name> <operator>&gt;</operator> <name>i_pos</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>headpos</name><operator>.</operator><name>i_wrap_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>headpos</name><operator>.</operator><name>i_last</name></name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>headpos</name><operator>.</operator><name>i_last</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>headpos</name><operator>.</operator><name>i_wrap_count</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>AudioTrack_ResetPlaybackHeadPosition</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>env</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>headpos</name><operator>.</operator><name>i_last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>headpos</name><operator>.</operator><name>i_wrap_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>AudioTrack_ResetPositions</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>env</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_play_time</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_last_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_us</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_last_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_us</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_latency_us</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>AudioTrack_Reset</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AudioTrack_ResetPositions</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AudioTrack_ResetPlaybackHeadPosition</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type>

<name>AudioTrack_GetSmoothPositionUs</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_audiotrack_us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_last_time</name></name> <operator>&gt;=</operator> <name>SMOOTHPOS_INTERVAL_US</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_audiotrack_us</name> <operator>=</operator> <call><name>FRAMES_TO_US</name><argument_list>( <argument><expr><call><name>AudioTrack_getPlaybackHeadPosition</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_last_time</name></name> <operator>=</operator> <name>i_now</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>p_us</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_idx</name></name></expr>]</index></name> <operator>=</operator> <name>i_audiotrack_us</name> <operator>-</operator> <name>i_now</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_idx</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_idx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>

<operator>%</operator> <name>SMOOTHPOS_SAMPLE_COUNT</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_count</name></name> <operator>&lt;</operator> <name>SMOOTHPOS_SAMPLE_COUNT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_us</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_us</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>p_us</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_us</name></name> <operator>/=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioSystem</name><operator>.</operator><name>getOutputLatency</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_latency_ms</name> <init>= <expr><call><name>JNI_CALL</name><argument_list>( <argument><expr><name>CallStaticIntMethod</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioSystem</name><operator>.</operator><name>clazz</name></name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioSystem</name><operator>.</operator><name>getOutputLatency</name></name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioManager</name><operator>.</operator><name>STREAM_MUSIC</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_latency_us</name></name> <operator>=</operator> <ternary><condition><expr><name>i_latency_ms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><name>i_latency_ms</name> <operator>*</operator> <literal type="number">1000L</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_us</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_us</name></name> <operator>+</operator> <name>i_now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>smoothpos</name><operator>.</operator><name>i_latency_us</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type>

<name>AudioTrack_GetTimestampPositionUs</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_now</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>p_obj</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_now</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_last_time</name></name> <operator>&gt;=</operator> <name>AUDIOTIMESTAMP_INTERVAL_US</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_last_time</name></name> <operator>=</operator> <name>i_now</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>JNI_AT_CALL_BOOL</name><argument_list>( <argument><expr><name>getTimestamp</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>p_obj</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_us</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_NS</name><argument_list>(<argument><expr><call><name>JNI_AUDIOTIMESTAMP_GET_LONG</name><argument_list>( <argument><expr><name>nanoTime</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_pos</name></name> <operator>=</operator> <call><name>JNI_AUDIOTIMESTAMP_GET_LONG</name><argument_list>( <argument><expr><name>framePosition</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_us</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_us</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_pos</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_us</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_play_time</name></name>

<operator>&amp;&amp;</operator> <name>i_now</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_us</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator> <name>i_now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_us</name></name> <operator>)</operator> <operator>&lt;=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time_diff</name> <init>= <expr><name>i_now</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_us</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jlong</name></type> <name>i_frames_diff</name> <init>= <expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>i_time_diff</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FRAMES_TO_US</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>i_frame_pos</name></name> <operator>+</operator> <name>i_frames_diff</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>TimeGet</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_delay</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_audiotrack_us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_passthrough</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_written</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator> <name>env</name> <operator>=</operator> <call><name>GET_ENV</name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_audiotrack_us</name> <operator>=</operator> <call><name>AudioTrack_GetTimestampPositionUs</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_audiotrack_us</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_audiotrack_us</name> <operator>=</operator> <call><name>AudioTrack_GetSmoothPositionUs</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{

vlc_tick_t i_written_us = FRAMES_TO_US( p_sys-&gt;i_samples_written );

vlc_tick_t i_ts_us = AudioTrack_GetTimestampPositionUs( env, p_aout );

vlc_tick_t i_smooth_us = 0;

if( i_ts_us &gt; 0 )

i_smooth_us = AudioTrack_GetSmoothPositionUs(env, p_aout );

else if ( p_sys-&gt;smoothpos.i_us != 0 )

i_smooth_us = p_sys-&gt;smoothpos.i_us + vlc_tick_now()

- p_sys-&gt;smoothpos.i_latency_us;

msg_Err( p_aout, "TimeGet: TimeStamp: %lld, Smooth: %lld (latency: %lld)",

i_ts_us ? i_written_us - i_ts_us : 0,

i_smooth_us ? i_written_us - i_smooth_us : 0,

p_sys-&gt;smoothpos.i_latency_us );

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>i_audiotrack_us</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_delay</name> <init>= <expr><call><name>FRAMES_TO_US</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_written</name></name></expr></argument> )</argument_list></call>

<operator>-</operator> <name>i_audiotrack_us</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_delay</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_delay</name> <operator>+=</operator> <call><name>BYTES_TO_US</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_write</name></name>

<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_read</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_delay</name> <operator>=</operator> <name>i_delay</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"timing screwed, reset positions"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AudioTrack_ResetPositions</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>bailout</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>AudioTrack_GetChanOrder</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>i_physical_channels</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name><name>p_chans_out</name><index>[]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_CHAN</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ( i_physical_channels &amp; (x) ) == (x) )</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HAS_CHAN</name><argument_list>( <argument><expr><name>AOUT_CHAN_LEFT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chans_out</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HAS_CHAN</name><argument_list>( <argument><expr><name>AOUT_CHAN_RIGHT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chans_out</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HAS_CHAN</name><argument_list>( <argument><expr><name>AOUT_CHAN_CENTER</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chans_out</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HAS_CHAN</name><argument_list>( <argument><expr><name>AOUT_CHAN_LFE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chans_out</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HAS_CHAN</name><argument_list>( <argument><expr><name>AOUT_CHAN_REARLEFT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chans_out</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARLEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HAS_CHAN</name><argument_list>( <argument><expr><name>AOUT_CHAN_REARRIGHT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chans_out</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HAS_CHAN</name><argument_list>( <argument><expr><name>AOUT_CHAN_REARCENTER</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chans_out</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_REARCENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HAS_CHAN</name><argument_list>( <argument><expr><name>AOUT_CHAN_MIDDLELEFT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chans_out</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_MIDDLELEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>HAS_CHAN</name><argument_list>( <argument><expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chans_out</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name> <operator>&lt;=</operator> <name>AOUT_CHAN_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAS_CHAN</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jobject</name></type>

<name>AudioTrack_New21</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_channel_config</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><name>jint</name></type> <name>session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jobject</name></type> <name>p_audiotrack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>p_aattr_builder</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>p_audio_attributes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>p_afmt_builder</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>p_audio_format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>ref</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_aattr_builder</name> <operator>=</operator>

<call><name>JNI_CALL</name><argument_list>( <argument><expr><name>NewObject</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioAttributes_Builder</name><operator>.</operator><name>clazz</name></name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioAttributes_Builder</name><operator>.</operator><name>ctor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_aattr_builder</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>JNI_CALL_OBJECT</name><argument_list>( <argument><expr><name>p_aattr_builder</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioAttributes_Builder</name><operator>.</operator><name>setLegacyStreamType</name></name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioManager</name><operator>.</operator><name>STREAM_MUSIC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_audio_attributes</name> <operator>=</operator>

<call><name>JNI_CALL_OBJECT</name><argument_list>( <argument><expr><name>p_aattr_builder</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioAttributes_Builder</name><operator>.</operator><name>build</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_audio_attributes</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>del_local_refs</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_afmt_builder</name> <operator>=</operator> <call><name>JNI_CALL</name><argument_list>( <argument><expr><name>NewObject</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat_Builder</name><operator>.</operator><name>clazz</name></name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat_Builder</name><operator>.</operator><name>ctor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_afmt_builder</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>del_local_refs</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>JNI_CALL_OBJECT</name><argument_list>( <argument><expr><name>p_afmt_builder</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat_Builder</name><operator>.</operator><name>setChannelMask</name></name></expr></argument>,

<argument><expr><name>i_channel_config</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CHECK_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"AudioFormat.Builder"</literal></expr></argument>, <argument><expr><literal type="string">"setChannelMask"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>del_local_refs</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>JNI_CALL_OBJECT</name><argument_list>( <argument><expr><name>p_afmt_builder</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat_Builder</name><operator>.</operator><name>setEncoding</name></name></expr></argument>,

<argument><expr><name>i_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CHECK_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"AudioFormat.Builder"</literal></expr></argument>, <argument><expr><literal type="string">"setEncoding"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>del_local_refs</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>JNI_CALL_OBJECT</name><argument_list>( <argument><expr><name>p_afmt_builder</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat_Builder</name><operator>.</operator><name>setSampleRate</name></name></expr></argument>,

<argument><expr><name>i_rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CHECK_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"AudioFormat.Builder"</literal></expr></argument>, <argument><expr><literal type="string">"setSampleRate"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>del_local_refs</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_audio_format</name> <operator>=</operator> <call><name>JNI_CALL_OBJECT</name><argument_list>( <argument><expr><name>p_afmt_builder</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat_Builder</name><operator>.</operator><name>build</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_audio_format</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>del_local_refs</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_audiotrack</name> <operator>=</operator> <call><name>JNI_AT_NEW</name><argument_list>( <argument><expr><name>p_audio_attributes</name></expr></argument>, <argument><expr><name>p_audio_format</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>MODE_STREAM</name></name></expr></argument>, <argument><expr><name>session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>del_local_refs</name>:</label>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aattr_builder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_audio_attributes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_afmt_builder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_audio_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_audiotrack</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jobject</name></type>

<name>AudioTrack_NewLegacy</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_channel_config</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><name>jint</name></type> <name>session_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>JNI_AT_NEW</name><argument_list>( <argument><expr><name><name>jfields</name><operator>.</operator><name>AudioManager</name><operator>.</operator><name>STREAM_MUSIC</name></name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument>,

<argument><expr><name>i_channel_config</name></expr></argument>, <argument><expr><name>i_format</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>MODE_STREAM</name></name></expr></argument>, <argument><expr><name>session_id</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioTrack_New</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_channel_config</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jint</name></type> <name>session_id</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audiotrack-session-id"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>p_audiotrack</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>has_ctor_21</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_audiotrack</name> <operator>=</operator> <call><name>AudioTrack_New21</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument>, <argument><expr><name>i_channel_config</name></expr></argument>,

<argument><expr><name>i_format</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_audiotrack</name> <operator>=</operator> <call><name>AudioTrack_NewLegacy</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument>,

<argument><expr><name>i_channel_config</name></expr></argument>, <argument><expr><name>i_format</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>,

<argument><expr><name>session_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"AudioTrack&lt;init&gt;"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><name>p_audiotrack</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"AudioTrack Init failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>JNI_CALL_INT</name><argument_list>( <argument><expr><name>p_audiotrack</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>getState</name></name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>STATE_INITIALIZED</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>JNI_CALL_VOID</name><argument_list>( <argument><expr><name>p_audiotrack</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>release</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_audiotrack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"AudioTrack getState failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audiotrack</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_audiotrack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_audiotrack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_audiotrack</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioTrack_Recreate</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>release</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audiotrack</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audiotrack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>AudioTrack_New</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audiotrack_args</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audiotrack_args</name><operator>.</operator><name>i_channel_config</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audiotrack_args</name><operator>.</operator><name>i_format</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audiotrack_args</name><operator>.</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioTrack_Create</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_format</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>i_physical_channels</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>, <decl><type ref="prev"/><name>i_min_buffer_size</name></decl>, <decl><type ref="prev"/><name>i_channel_config</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_physical_channels</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AOUT_CHANS_7_1</name></expr>:</case>

<expr_stmt><expr><name>i_channel_config</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_5POINT1</name></name> <operator>|</operator>

<name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_SIDE_LEFT</name></name> <operator>|</operator>

<name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_SIDE_RIGHT</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOUT_CHANS_5_1</name></expr>:</case>

<expr_stmt><expr><name>i_channel_config</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_5POINT1</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOUT_CHAN_LEFT</name></expr>:</case>

<expr_stmt><expr><name>i_channel_config</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_MONO</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOUT_CHANS_STEREO</name></expr>:</case>

<expr_stmt><expr><name>i_channel_config</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>CHANNEL_OUT_STEREO</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>i_min_buffer_size</name> <operator>=</operator> <call><name>JNI_AT_CALL_STATIC_INT</name><argument_list>( <argument><expr><name>getMinBufferSize</name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument>,

<argument><expr><name>i_channel_config</name></expr></argument>, <argument><expr><name>i_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_min_buffer_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"getMinBufferSize returned an invalid size"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name>i_min_buffer_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AudioTrack_New</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_rate</name></expr></argument>, <argument><expr><name>i_channel_config</name></expr></argument>,

<argument><expr><name>i_format</name></expr></argument> , <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audiotrack_args</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name>i_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audiotrack_args</name><operator>.</operator><name>i_channel_config</name></name> <operator>=</operator> <name>i_channel_config</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audiotrack_args</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>i_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audiotrack_args</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>AudioTrack_HasEncoding</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_format</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_ENCODING_FLAG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>jfields.AudioFormat.has_##x &amp;&amp; ( p_sys-&gt;i_encoding_flags == 0 || p_sys-&gt;i_encoding_flags &amp; (1 &lt;&lt; jfields.AudioFormat.x) )</cpp:value></cpp:define>

<switch>switch<condition>( <expr><name>i_format</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_DTSHD</name></expr>:</case>

<return>return <expr><call><name>MATCH_ENCODING_FLAG</name><argument_list>( <argument><expr><name>ENCODING_DTS_HD</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>

<return>return <expr><call><name>MATCH_ENCODING_FLAG</name><argument_list>( <argument><expr><name>ENCODING_DTS</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>

<return>return <expr><call><name>MATCH_ENCODING_FLAG</name><argument_list>( <argument><expr><name>ENCODING_AC3</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>

<return>return <expr><call><name>MATCH_ENCODING_FLAG</name><argument_list>( <argument><expr><name>ENCODING_E_AC3</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>VLC_CODEC_TRUEHD</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MLP</name></expr>:</case>

<return>return <expr><call><name>MATCH_ENCODING_FLAG</name><argument_list>( <argument><expr><name>ENCODING_DOLBY_TRUEHD</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>StartPassthrough</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_at_format</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AudioTrack_HasEncoding</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_IEC61937</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_at_format</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>ENCODING_IEC61937</name></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_TRUEHD</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MLP</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">192000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_7_1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DTSHD</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">192000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">192000</literal></expr>;</expr_stmt>

<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_AC3</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_at_format</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>ENCODING_AC3</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_E_AC3</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_at_format</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>ENCODING_E_AC3</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_DTS</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_at_format</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>ENCODING_DTS</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_SPDIFB</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>AudioTrack_Create</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name>i_at_format</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"SPDIF configuration failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_passthrough</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>StartPCM</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_max_channels</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_nb_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_at_format</name></decl>, <decl><type ref="prev"/><name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>getNativeOutputSampleRate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator>

<call><name>JNI_AT_CALL_STATIC_INT</name><argument_list>( <argument><expr><name>getNativeOutputSampleRate</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioManager</name><operator>.</operator><name>STREAM_MUSIC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">4000</literal></expr></argument>, <argument><expr><literal type="number">48000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<do>do

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>

<expr_stmt><expr><name>i_at_format</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>ENCODING_PCM_8BIT</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>

<expr_stmt><expr><name>i_at_format</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>ENCODING_PCM_16BIT</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_PCM_FLOAT</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_at_format</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>ENCODING_PCM_FLOAT</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_at_format</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>ENCODING_PCM_16BIT</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_at_format</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>ENCODING_PCM_16BIT</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>i_nb_channels</name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nb_channels</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AOUT_FMT_LINEAR</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_nb_channels</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_max_channels</name></expr></argument>, <argument><expr><name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nb_channels</name> <operator>&gt;</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_nb_channels</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_CHANNEL_OUT_SIDE</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_7_1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_5_1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_nb_channels</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AudioTrack_Create</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name>i_at_format</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>==</operator> <name>VLC_CODEC_FL32</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"FL32 configuration failed, "</literal>

<literal type="string">"fallback to S16N PCM"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name>AOUT_CHANS_5_1</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"5.1 or 7.1 configuration failed, "</literal>

<literal type="string">"fallback to Stereo"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>p_chans_out</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_chans_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_chans_out</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AudioTrack_GetChanOrder</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument>, <argument><expr><name>p_chans_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name> <operator>=</operator>

<call><name>aout_CheckChannelReorder</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_chans_out</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chan_table</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Start</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_try_passthrough</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_max_channels</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>at_dev</name></name> <operator>==</operator> <name>AT_DEV_ENCODED</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_try_passthrough</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_max_channels</name> <operator>=</operator> <name>AT_DEV_MAX_CHANNELS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>b_try_passthrough</name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"spdif"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_max_channels</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>at_dev</name></name> <operator>==</operator> <name>AT_DEV_STEREO</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>AT_DEV_MAX_CHANNELS</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>env</name> <operator>=</operator> <call><name>GET_ENV</name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <operator>*</operator><name>p_fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrint</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"VLC is looking for:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>low_latency</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>channel_type</name></name> <operator>==</operator> <name>AUDIO_CHANNEL_TYPE_AMBISONICS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low_latency</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AOUT_FMT_LINEAR</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>StartPCM</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_max_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>b_try_passthrough</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>StartPassthrough</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_audiotrack_samples</name></name> <operator>=</operator> <call><name>BYTES_TO_FRAMES</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>audiotrack_args</name><operator>.</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AUDIOTRACK_HW_LATENCY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTimestamp</name><operator>.</operator><name>clazz</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>jobject</name></type> <name>p_obj</name> <init>= <expr><call><name>JNI_CALL</name><argument_list>( <argument><expr><name>NewObject</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTimestamp</name><operator>.</operator><name>clazz</name></name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTimestamp</name><operator>.</operator><name>ctor</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_obj</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>p_obj</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>p_obj</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AudioTrack_Reset</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>==</operator> <name>VLC_CODEC_FL32</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"using WRITE_FLOATARRAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name> <operator>=</operator> <name>WRITE_FLOATARRAY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>==</operator> <name>VLC_CODEC_SPDIFL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>jfields</name><operator>.</operator><name>AudioFormat</name><operator>.</operator><name>has_ENCODING_IEC61937</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"using WRITE_SHORTARRAYV23"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name> <operator>=</operator> <name>WRITE_SHORTARRAYV23</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>writeV23</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"using WRITE_BYTEARRAYV23"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name> <operator>=</operator> <name>WRITE_BYTEARRAYV23</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>writeBufferV21</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"using WRITE_BYTEBUFFER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name> <operator>=</operator> <name>WRITE_BYTEBUFFER</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"using WRITE_BYTEARRAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name> <operator>=</operator> <name>WRITE_BYTEARRAY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_read</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_rate</name></name>

<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bytes_per_frame</name></name>

<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>low_latency</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name> <operator>/</operator> <literal type="number">25</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>AOUT_MAX_PREPARE_TIME</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>WRITE_BYTEARRAY</name></expr>:</case>

<case>case <expr><name>WRITE_BYTEARRAYV23</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>jbyteArray</name></type> <name>p_bytearray</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_bytearray</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewByteArray</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_bytearray</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_bytearray</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_bytearray</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_bytearray</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_bytearray</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"byte array allocation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WRITE_SHORTARRAYV23</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>jshortArray</name></type> <name>p_shortarray</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_shortarray</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewShortArray</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_shortarray</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_shortarray</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_shortarray</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_shortarray</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_shortarray</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"short array allocation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WRITE_FLOATARRAY</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>jfloatArray</name></type> <name>p_floatarray</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_floatarray</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewFloatArray</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_floatarray</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_floatarray</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_floatarray</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_floatarray</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_floatarray</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"float array allocation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WRITE_BYTEBUFFER</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_data</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"bytebuffer allocation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>AudioTrack_Thread</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>,

<argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"vlc clone failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>play</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"play"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_fmt</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_aout</name><operator>-&gt;</operator><name>volume_set</name></name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>mute</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_aout</name><operator>-&gt;</operator><name>mute_set</name></name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aout_FormatPrint</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"VLC will output:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>Stop</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Stop</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>env</name> <operator>=</operator> <call><name>GET_ENV</name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread_cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audiotrack</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_audiotrack_exception</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>stop</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"stop"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>release</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audiotrack</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_audiotrack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>p_obj</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>p_obj</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>timestamp</name><operator>.</operator><name>p_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>WRITE_BYTEARRAY</name></expr>:</case>

<case>case <expr><name>WRITE_BYTEARRAYV23</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_bytearray</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_bytearray</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_bytearray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_SHORTARRAYV23</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_shortarray</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_shortarray</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_shortarray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_FLOATARRAY</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_floatarray</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_floatarray</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_floatarray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_BYTEBUFFER</name></expr>:</case>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_audiotrack_exception</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_passthrough</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioTrack_PlayByteArray</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_data_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data_offset</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_force</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_audiotrack_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_samples_pending</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_audiotrack_pos</name> <operator>=</operator> <call><name>AudioTrack_getPlaybackHeadPosition</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_audiotrack_pos</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_written</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_audiotrack_pos</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_written</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"audiotrack position is ahead. Should NOT happen"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_samples_pending</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_written</name></name> <operator>-</operator> <name>i_audiotrack_pos</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_force</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Force write. It may block..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samples_pending</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><name>i_samples_pending</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_max_audiotrack_samples</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_samples</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_audiotrack_samples</name></name> <operator>-</operator> <name>i_samples_pending</name></expr></argument>,

<argument><expr><call><name>BYTES_TO_FRAMES</name><argument_list>( <argument><expr><name>i_data_size</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data_size</name> <operator>=</operator> <call><name>FRAMES_TO_BYTES</name><argument_list>( <argument><expr><name>i_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>write</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_bytearray</name></name></expr></argument>,

<argument><expr><name>i_data_offset</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioTrack_PlayByteArrayV23</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_data_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>writeV23</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_bytearray</name></name></expr></argument>,

<argument><expr><name>i_data_offset</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>WRITE_NON_BLOCKING</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioTrack_PlayByteBuffer</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_data_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data_offset</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_obj</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_obj</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_obj</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewDirectByteBuffer</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_data</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_obj</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>( <argument><expr><name>env</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>( <argument><expr><name>env</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>ERROR</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>writeBufferV21</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_obj</name></name></expr></argument>,

<argument><expr><name>i_data_size</name></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>WRITE_NON_BLOCKING</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioTrack_PlayShortArrayV23</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_data_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>writeShortV23</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_shortarray</name></name></expr></argument>,

<argument><expr><name>i_data_offset</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_data_size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>WRITE_NON_BLOCKING</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name> <operator>*</operator> <literal type="number">2</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioTrack_PlayFloatArray</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_data_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>writeFloat</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_floatarray</name></name></expr></argument>,

<argument><expr><name>i_data_offset</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>i_data_size</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>WRITE_NON_BLOCKING</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name> <operator>*</operator> <literal type="number">4</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AudioTrack_Play</name><parameter_list>( <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data_size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_data_offset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_force</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>WRITE_BYTEARRAYV23</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AudioTrack_PlayByteArrayV23</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument>,

<argument><expr><name>i_data_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_BYTEBUFFER</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AudioTrack_PlayByteBuffer</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument>,

<argument><expr><name>i_data_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_SHORTARRAYV23</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AudioTrack_PlayShortArrayV23</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument>,

<argument><expr><name>i_data_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_BYTEARRAY</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AudioTrack_PlayByteArray</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument>,

<argument><expr><name>i_data_offset</name></expr></argument>, <argument><expr><name>b_force</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_FLOATARRAY</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AudioTrack_PlayFloatArray</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument>,

<argument><expr><name>i_data_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioManager</name><operator>.</operator><name>has_ERROR_DEAD_OBJECT</name></name>

<operator>&amp;&amp;</operator> <name>i_ret</name> <operator>==</operator> <name><name>jfields</name><operator>.</operator><name>AudioManager</name><operator>.</operator><name>ERROR_DEAD_OBJECT</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"ERROR_DEAD_OBJECT: "</literal>

<literal type="string">"try recreating AudioTrack"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_ret</name> <operator>=</operator> <call><name>AudioTrack_Recreate</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AudioTrack_Reset</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>play</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"play"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>ERROR_INVALID_OPERATION</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"ERROR_INVALID_OPERATION"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>ERROR_BAD_VALUE</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"ERROR_BAD_VALUE"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"Write failed: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_written</name></name> <operator>+=</operator> <call><name>BYTES_TO_FRAMES</name><argument_list>( <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>AudioTrack_Thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_play_deadline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_time_blocked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>env</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_forced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_play_deadline</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>i_play_deadline</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_waiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>&amp;&amp;</operator> <name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>vlc_cond_timedwait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread_cond</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,

<argument><expr><name>i_play_deadline</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>i_play_deadline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_waiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_paused</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_last_time_blocked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name>

<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_read</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_write</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_running</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_last_time_blocked</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_forced</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name>i_last_time_blocked</name> <operator>&gt;</operator>

<call><name>FRAMES_TO_US</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_audiotrack_samples</name></name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b_forced</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i_data_offset</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_read</name></name> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data_size</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name> <operator>-</operator> <name>i_data_offset</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_write</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_read</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AudioTrack_Play</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument>, <argument><expr><name>i_data_offset</name></expr></argument>,

<argument><expr><name>b_forced</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name> <operator>==</operator> <name>WRITE_BYTEARRAY</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_time_blocked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_last_time_blocked</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_time_blocked</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_play_deadline</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><call><name>FRAMES_TO_US</name><argument_list>(

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_audiotrack_samples</name></name> <operator>/</operator> <literal type="number">5</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_read</name></name> <operator>+=</operator> <name>i_ret</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>aout_cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_obj</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_obj</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ConvertFromIEC61937</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_length_mul</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<expr_stmt><expr><name>i_length_mul</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x15</literal></expr>:</case> 

<expr_stmt><expr><name>i_length_mul</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0B</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0C</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0D</literal></expr>:</case> 

<expr_stmt><expr><name>i_length_mul</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<expr_stmt><expr><name>i_length_mul</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_length</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_length</name> <operator>/=</operator> <name>i_length_mul</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&gt;</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Play</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_passthrough</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name> <operator>==</operator> <name>VLC_CODEC_SPDIFB</name>

<operator>&amp;&amp;</operator> <call><name>ConvertFromIEC61937</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator> <name>env</name> <operator>=</operator> <call><name>GET_ENV</name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_ChannelReorder</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_chan_table</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name>i_buffer_offset</name> <operator>&lt;</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_circular_free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data_size</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_circular_free</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name> <operator>-</operator>

<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_write</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_read</name></name> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>aout_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_data_offset</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_write</name></name> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data_size</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_buffer_offset</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_size</name></name> <operator>-</operator> <name>i_data_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data_size</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_data_size</name></expr></argument>, <argument><expr><name>i_circular_free</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_write_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>WRITE_BYTEARRAY</name></expr>:</case>

<case>case <expr><name>WRITE_BYTEARRAYV23</name></expr>:</case>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetByteArrayRegion</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_bytearray</name></name></expr></argument>,

<argument><expr><name>i_data_offset</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument>,

<argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name>

<operator>+</operator> <name>i_buffer_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_SHORTARRAYV23</name></expr>:</case>

<expr_stmt><expr><name>i_data_offset</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data_size</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetShortArrayRegion</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_shortarray</name></name></expr></argument>,

<argument><expr><name>i_data_offset</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i_data_size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><operator>(</operator><name>jshort</name> <operator>*</operator><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name>

<operator>+</operator> <name>i_buffer_offset</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_FLOATARRAY</name></expr>:</case>

<expr_stmt><expr><name>i_data_offset</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data_size</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetFloatArrayRegion</name></name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>p_floatarray</name></name></expr></argument>,

<argument><expr><name>i_data_offset</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>i_data_size</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><operator>(</operator><name>jfloat</name> <operator>*</operator><operator>)</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name>

<operator>+</operator> <name>i_buffer_offset</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WRITE_BYTEBUFFER</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>u</name><operator>.</operator><name>bytebuffer</name><operator>.</operator><name>p_data</name></name> <operator>+</operator> <name>i_data_offset</name></expr></argument>,

<argument><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_buffer_offset</name></expr></argument>, <argument><expr><name>i_data_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>i_buffer_offset</name> <operator>+=</operator> <name>i_data_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_write</name></name> <operator>+=</operator> <name>i_data_size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_waiting</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread_cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<label><name>bailout</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>i_date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Pause</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_pause</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator> <name>env</name> <operator>=</operator> <call><name>GET_ENV</name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_pause</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_paused</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>pause</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"pause"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_thread_paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AudioTrack_ResetPositions</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>play</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"play"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>bailout</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Flush</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator> <name>env</name> <operator>=</operator> <call><name>GET_ENV</name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>pause</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"pause"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>flush</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_read</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>circular</name><operator>.</operator><name>i_write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>jfields</name><operator>.</operator><name>AudioTimestamp</name><operator>.</operator><name>clazz</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_samples_written</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>AudioTrack_Recreate</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>bailout</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AudioTrack_Reset</name><argument_list>( <argument><expr><name>env</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_AT_CALL_VOID</name><argument_list>( <argument><expr><name>play</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"play"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>bailout</name>:</label>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>VolumeSet</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>volume</name> <operator>&gt;</operator> <literal type="number">1.f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <name>volume</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_audiotrack</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>env</name> <operator>=</operator> <call><name>GET_ENV</name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>setVolume</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>setVolume</name></expr></argument>, <argument><expr><name>volume</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"setVolume"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<expr_stmt><expr><call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>setStereoVolume</name></expr></argument>, <argument><expr><name>volume</name></expr></argument>, <argument><expr><name>volume</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"setStereoVolume"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_VolumeReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_GainRequest</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>gain</name> <operator>*</operator> <name>gain</name> <operator>*</operator> <name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>MuteSet</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <name>mute</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_audiotrack</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>env</name> <operator>=</operator> <call><name>GET_ENV</name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>jfields</name><operator>.</operator><name>AudioTrack</name><operator>.</operator><name>setVolume</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>setVolume</name></expr></argument>, <argument><expr><ternary><condition><expr><name>mute</name></expr> ?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>volume</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"setVolume"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<block>{<block_content>

<expr_stmt><expr><call><name>JNI_AT_CALL_INT</name><argument_list>( <argument><expr><name>setStereoVolume</name></expr></argument>, <argument><expr><ternary><condition><expr><name>mute</name></expr> ?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>volume</name></name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>mute</name></expr> ?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>volume</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_AT_EXCEPTION</name><argument_list>( <argument><expr><literal type="string">"setStereoVolume"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_MuteReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>mute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DeviceSelect</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>at_dev</name></name></type> <name>at_dev</name> <init>= <expr><name>AT_DEV_DEFAULT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_id</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>at_devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>( <argument><expr><name>p_id</name></expr></argument>, <argument><expr><name><name>at_devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>at_devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>at_dev</name> <operator>=</operator> <name><name>at_devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>at_dev</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i_encoding_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>at_dev</name> <operator>==</operator> <name>AT_DEV_ENCODED</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_prefix_size</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"encoded:"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>( <argument><expr><name>p_id</name></expr></argument>, <argument><expr><literal type="string">"encoded:"</literal></expr></argument>, <argument><expr><name>i_prefix_size</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_encoding_flags</name> <operator>=</operator> <call><name>atoll</name><argument_list>( <argument><expr><name>p_id</name> <operator>+</operator> <name>i_prefix_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>at_dev</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>at_dev</name></name> <operator>||</operator> <name>i_encoding_flags</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_encoding_flags</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>at_dev</name></name> <operator>=</operator> <name>at_dev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_encoding_flags</name></name> <operator>=</operator> <name>i_encoding_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_RestartRequest</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>AOUT_RESTART_OUTPUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"selected device: %s"</literal></expr></argument>, <argument><expr><name>p_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>at_dev</name> <operator>==</operator> <name>AT_DEV_ENCODED</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>enc_fourccs</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VLC_CODEC_DTS</name></expr>, <expr><name>VLC_CODEC_DTSHD</name></expr>, <expr><name>VLC_CODEC_A52</name></expr>, <expr><name>VLC_CODEC_EAC3</name></expr>,

<expr><name>VLC_CODEC_TRUEHD</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>enc_fourccs</name></expr></argument> )</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>enc_fourccs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>AudioTrack_HasEncoding</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>enc_fourccs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"device has %4.4s passthrough support"</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>enc_fourccs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_DeviceReport</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>p_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>GET_ENV</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>env</name> <operator>||</operator> <operator>!</operator><call><name>InitJNIFields</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>env</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>aout_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>at_dev</name></name> <operator>=</operator> <name>AT_DEV_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>aout_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>Pause</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>TimeGet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>device_select</name></name> <operator>=</operator> <name>DeviceSelect</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>at_devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_HotplugReport</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name><name>at_devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name><name>at_devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>volume_set</name></name> <operator>=</operator> <name>VolumeSet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>mute_set</name></name> <operator>=</operator> <name>MuteSet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>volume</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
