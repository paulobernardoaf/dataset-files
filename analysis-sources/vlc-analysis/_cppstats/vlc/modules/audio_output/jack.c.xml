<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_output\jack.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jack/jack.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jack/ringbuffer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 

<typedef>typedef <type><name>jack_default_audio_sample_t</name></type> <name>jack_sample_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>jack_ringbuffer_t</name> <modifier>*</modifier></type><name>p_jack_ringbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jack_client_t</name> <modifier>*</modifier></type><name>p_jack_client</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jack_port_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_jack_ports</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jack_sample_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_jack_buffers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jack_nframes_t</name></type> <name>latency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>soft_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>soft_mute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>paused</name></decl>;</decl_stmt> 

}</block></struct></type> <name>aout_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Play</name> <parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Pause</name> <parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name> <parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name> <parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Process</name> <parameter_list>( <parameter><decl><type><name>jack_nframes_t</name></type> <name>i_frames</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_arg</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GraphChange</name> <parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_arg</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/volume.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_CONNECT_OPTION</name></cpp:macro> <cpp:value>"jack-auto-connect"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_CONNECT_TEXT</name></cpp:macro> <cpp:value>N_("Automatically connect to writable clients")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_CONNECT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If enabled, this option will automatically connect sound output to the " "first writable JACK clients found." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECT_REGEX_OPTION</name></cpp:macro> <cpp:value>"jack-connect-regex"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECT_REGEX_TEXT</name></cpp:macro> <cpp:value>N_("Connect to clients matching")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECT_REGEX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If automatic connection is enabled, only JACK clients whose names " "match this regular expression will be considered for connection." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JACK_NAME_TEXT</name></cpp:macro> <cpp:value>N_( "JACK client name" )</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"JACK"</literal></argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"JACK audio output"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AOUT</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>AUTO_CONNECT_OPTION</argument>, <argument>true</argument>, <argument>AUTO_CONNECT_TEXT</argument>,

<argument>AUTO_CONNECT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>CONNECT_REGEX_OPTION</argument>, <argument><literal type="string">"system"</literal></argument>, <argument>CONNECT_REGEX_TEXT</argument>,

<argument>CONNECT_REGEX_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"jack-name"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>JACK_NAME_TEXT</argument>, <argument>JACK_NAME_TEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_sw_gain</name><argument_list>( )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_error</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"jack-name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>psz_name</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"vlc_%d"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name> <operator>=</operator> <call><name>jack_client_open</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument>,

<argument><expr><name>JackNullOption</name> <operator>|</operator> <name>JackNoStartServer</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to connect to JACK server"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>jack_set_process_callback</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument>, <argument><expr><name>Process</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jack_set_graph_order_callback</name> <argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument>, <argument><expr><name>GraphChange</name></expr></argument>, <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <call><name>jack_get_sample_rate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>Pause</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>TimeGet</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_SoftVolumeStart</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ports</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>jack_port_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ports</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_buffers</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>jack_sample_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_buffers</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buf_sz</name> <init>=

<expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>AOUT_MAX_ADVANCE_TIME</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name> <operator>=</operator> <call><name>jack_ringbuffer_create</name><argument_list>( <argument><expr><name>buf_sz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>jack_ringbuffer_mlock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to lock JACK ringbuffer in memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name_output</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name_output</name></expr></argument>, <argument><expr><literal type="string">"%s_out_%d"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ports</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>jack_port_register</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument>,

<argument><expr><name>psz_name_output</name></expr></argument>, <argument><expr><name>JACK_DEFAULT_AUDIO_TYPE</name></expr></argument>, <argument><expr><name>JackPortIsOutput</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name_output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ports</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to register a JACK port"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <call><name>jack_activate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_error</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to activate JACK client (error %d)"</literal></expr></argument>, <argument><expr><name>i_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>AUTO_CONNECT_OPTION</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_in_ports</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_regex</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><name>CONNECT_REGEX_OPTION</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_in_ports</name> <init>= <expr><call><name>jack_get_ports</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument>,

<argument><expr><name>psz_regex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>JackPortIsInput</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_regex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_in_ports</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name>pp_in_ports</name> <operator>&amp;&amp;</operator> <name><name>pp_in_ports</name><index>[<expr><name>i_in_ports</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_in_ports</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_in_ports</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_in</name> <init>= <expr><name><name>pp_in_ports</name><index>[<expr><name>i</name> <operator>%</operator> <name>i_in_ports</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_out</name> <init>= <expr><call><name>jack_port_name</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <call><name>jack_connect</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument>, <argument><expr><name>psz_out</name></expr></argument>, <argument><expr><name>psz_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_error</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"failed to connect port %s to port %s (error %d)"</literal></expr></argument>,

<argument><expr><name>psz_out</name></expr></argument>, <argument><expr><name>psz_in</name></expr></argument>, <argument><expr><name>i_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"connecting port %s to port %s"</literal></expr></argument>,

<argument><expr><name>psz_out</name></expr></argument>, <argument><expr><name>psz_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_in_ports</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"JACK audio output initialized (%d channels, rate=%d)"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>

<label><name>error_out</name>:</label>

<if_stmt><if>if<condition>( <expr><name>status</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>jack_deactivate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jack_client_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>jack_ringbuffer_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ports</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_buffers</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type> <name>p_aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_block</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jack_ringbuffer_t</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bytes_per_frame</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jack_sample_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>write_space</name> <init>= <expr><call><name>jack_ringbuffer_write_space</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bytes</name> <init>= <expr><ternary><condition><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>write_space</name></expr> ?</condition><then>

<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> </then><else>: <expr><name>write_space</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIuPTR</name> <literal type="string">" frames of audio dropped"</literal></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <name>bytes_per_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>jack_ringbuffer_write</name><argument_list>( <argument><expr><name>rb</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Pause</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>paused</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>date</name> <operator>-=</operator> <name><name>sys</name><operator>-&gt;</operator><name>paused</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"resuming after %"</literal><name>PRId64</name><literal type="string">" us"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jack_ringbuffer_t</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jack_ringbuffer_reset</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>delay</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jack_ringbuffer_t</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bytes_per_frame</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jack_sample_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>delay</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>latency</name></name> <operator>+</operator>

<call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><call><name>jack_ringbuffer_read_space</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>bytes_per_frame</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Process</name><parameter_list>( <parameter><decl><type><name>jack_nframes_t</name></type> <name>i_frames</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_arg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>frames_from_rb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>frames_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name><operator>*</operator><operator>)</operator> <name>p_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>paused</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frames_from_rb</name> <operator>=</operator> <name>i_frames</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>jack_port_get_buffer</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>i_frames</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>frames_from_rb</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>jack_sample_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>+=</operator> <call><name>jack_ringbuffer_read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p_dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jack_sample_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>frames_read</name> <operator>=</operator> <operator>(</operator><name>bytes_read</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jack_sample_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>frames_read</name> <operator>&lt;</operator> <name>i_frames</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>frames_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>jack_sample_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>i_frames</name> <operator>-</operator> <name>frames_read</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GraphChange</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_arg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name><operator>*</operator><operator>)</operator> <name>p_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jack_latency_range_t</name></type> <name>port_latency</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>jack_port_get_latency_range</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ports</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JackPlaybackLatency</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>port_latency</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>latency</name></name></expr></argument>, <argument><expr><name><name>port_latency</name><operator>.</operator><name>max</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"JACK graph reordered. Our maximum latency=%d."</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>latency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>( <parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>p_aout</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <call><name>jack_deactivate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_error</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"jack_deactivate failed (error %d)"</literal></expr></argument>, <argument><expr><name>i_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <call><name>jack_client_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_error</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_aout</name></expr></argument>, <argument><expr><literal type="string">"jack_client_close failed (error %d)"</literal></expr></argument>, <argument><expr><name>i_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ports</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_buffers</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jack_ringbuffer_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_jack_ringbuffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_SoftVolumeInit</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
