<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_output\opensles_android.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SLES/OpenSLES.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SLES/OpenSLES_Android.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>android_getEnv</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_thread_name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSLES_BUFFERS</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSLES_BUFLEN</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_OPENSL_ERROR</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (unlikely(result != SL_RESULT_SUCCESS)) { msg_Err(aout, msg" (%" PRIu32 ")", (uint32_t)result); goto error; }</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>SLresult</name></type> (<modifier>*</modifier><name>slCreateEngine_t</name>)<parameter_list>(

<parameter><decl><type><name>SLObjectItf</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SLuint32</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SLEngineOption</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SLuint32</name></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>SLInterfaceID</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SLboolean</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Destroy</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;Destroy(a);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetPlayState</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;SetPlayState(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RegisterCallback</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;RegisterCallback(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetInterface</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;GetInterface(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Realize</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;Realize(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CreateOutputMix</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;CreateOutputMix(a, b, c, d, e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CreateAudioPlayer</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;CreateAudioPlayer(a, b, c, d, e, f, g)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Enqueue</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;Enqueue(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Clear</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;Clear(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetState</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;GetState(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetPositionUpdatePeriod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;SetPositionUpdatePeriod(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetVolumeLevel</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;SetVolumeLevel(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetMute</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*a)-&gt;SetMute(a, b)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>SLObjectItf</name></type> <name>engineObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLObjectItf</name></type> <name>outputMixObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLAndroidSimpleBufferQueueItf</name></type> <name>playerBufferQueue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLObjectItf</name></type> <name>playerObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLVolumeItf</name></type> <name>volumeItf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLEngineItf</name></type> <name>engineEngine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLPlayItf</name></type> <name>playerPlay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_so_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>slCreateEngine_t</name></type> <name>slCreateEnginePtr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLInterfaceID</name></type> <name>SL_IID_ENGINE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLInterfaceID</name></type> <name>SL_IID_ANDROIDSIMPLEBUFFERQUEUE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLInterfaceID</name></type> <name>SL_IID_VOLUME</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLInterfaceID</name></type> <name>SL_IID_PLAY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>samples_per_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer_chain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>samples</name></decl>;</decl_stmt>

}</block></struct></type> <name>aout_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument><literal type="string">"OpenSLES audio output"</literal></argument>)</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"OpenSLES"</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_AUDIO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_AUDIO_AOUT</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio output"</literal></argument>, <argument><literal type="number">170</literal></argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"opensles"</literal></argument>, <argument><literal type="string">"android"</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bytesPerSample</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal></expr> ;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TimeGet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name><modifier>*</modifier></type> <name>aout</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>drift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLAndroidSimpleBufferQueueState</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLresult</name></type> <name>res</name> <init>= <expr><call><name>GetState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"Could not query buffer queue state in TimeGet (%"</literal> <name>PRIu32</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>started</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>started</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>started</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>drift</name> <operator>=</operator> <name>OPENSLES_BUFLEN</name> <operator>*</operator> <name><name>st</name><operator>.</operator><name>count</name></name>

<operator>+</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPlayState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerPlay</name></name></expr></argument>, <argument><expr><name>SL_PLAYSTATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Clear</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPlayState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerPlay</name></name></expr></argument>, <argument><expr><name>SL_PLAYSTATE_PLAYING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_buffer_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_buffer_chain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pp_buffer_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>p_buffer_chain</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VolumeSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>volumeItf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vol</name> <operator>=</operator> <name>vol</name> <operator>*</operator> <name>vol</name> <operator>*</operator> <name>vol</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb</name> <init>= <expr><call><name>lroundf</name><argument_list>(<argument><expr><literal type="number">2000.f</literal> <operator>*</operator> <call><name>log10f</name><argument_list>(<argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mb</name> <operator>&lt;</operator> <name>SL_MILLIBEL_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name>SL_MILLIBEL_MIN</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>SLresult</name></type> <name>r</name> <init>= <expr><call><name>SetVolumeLevel</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volumeItf</name></name></expr></argument>, <argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <name>SL_RESULT_SUCCESS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MuteSet</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mute</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>volumeItf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>SLresult</name></type> <name>r</name> <init>= <expr><call><name>SetMute</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>volumeItf</name></name></expr></argument>, <argument><expr><name>mute</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <name>SL_RESULT_SUCCESS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Pause</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>date</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetPlayState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerPlay</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>pause</name></expr> ?</condition><then> <expr><name>SL_PLAYSTATE_PAUSED</name></expr> </then><else>: <expr><name>SL_PLAYSTATE_PLAYING</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WriteBuffer</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>unit_size</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>samples_per_buf</name></name> <operator>*</operator> <call><name>bytesPerSample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>p_buffer_chain</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>unit_size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>p_next</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>needed</name> <init>= <expr><name>unit_size</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>block_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</init> <condition><expr><name>next</name></expr>;</condition> <incr><expr><name>next</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>needed</name> <operator>-=</operator> <name><name>next</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SLAndroidSimpleBufferQueueState</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLresult</name></type> <name>res</name> <init>= <expr><call><name>GetState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"Could not query buffer queue state in %s (%"</literal> <name>PRIu32</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name>__func__</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>count</name></name> <operator>==</operator> <name>OPENSLES_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>done</name> <operator>&lt;</operator> <name>unit_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cur</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&gt;</operator> <name>unit_size</name> <operator>-</operator> <name>done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>unit_size</name> <operator>-</operator> <name>done</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>unit_size</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>next_buf</name></name> <operator>+</operator> <name>done</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>+=</operator> <name>cur</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name> <operator>==</operator> <name>unit_size</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_buffer_chain</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pp_buffer_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>p_buffer_chain</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>SLresult</name></type> <name>r</name> <init>= <expr><call><name>Enqueue</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>unit_size</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>next_buf</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>unit_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>samples</name></name> <operator>-=</operator> <name><name>sys</name><operator>-&gt;</operator><name>samples_per_buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SL_RESULT_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>sys</name><operator>-&gt;</operator><name>next_buf</name></name> <operator>==</operator> <name>OPENSLES_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>next_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"error %"</literal> <name>PRIu32</name> <literal type="string">" when writing %zu bytes %s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>r</name> <operator>==</operator> <name>SL_RESULT_BUFFER_INSUFFICIENT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" (buffer insufficient)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Play</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>samples</name></name> <operator>+=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <call><name>bytesPerSample</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pp_buffer_last</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>WriteBuffer</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlayedCallback</name> <parameter_list>(<parameter><decl><type><name>SLAndroidSimpleBufferQueueItf</name></type> <name>caller</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>caller</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><name>pContext</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>caller</name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aout_get_native_sample_rate</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>p_env</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p_env</name> <operator>=</operator> <call><name>android_getEnv</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"opensles"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>cls</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name> <argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><literal type="string">"android/media/AudioTrack"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>method</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticMethodID</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>,

<argument><expr><literal type="string">"getNativeOutputSampleRate"</literal></expr></argument>,

<argument><expr><literal type="string">"(I)I"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticIntMethod</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>p_env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>p_env</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"%s: %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sample_rate</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>, <parameter><decl><type><name>audio_sample_format_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>AOUT_FMT_LINEAR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>SLresult</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLDataLocator_AndroidSimpleBufferQueue</name></type> <name>loc_bufq</name> <init>= <expr><block>{

<expr><name>SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE</name></expr>,

<expr><name>OPENSLES_BUFFERS</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLDataFormat_PCM</name></type> <name>format_pcm</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>format_pcm</name><operator>.</operator><name>formatType</name></name> <operator>=</operator> <name>SL_DATAFORMAT_PCM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format_pcm</name><operator>.</operator><name>numChannels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format_pcm</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SLuint32</name><operator>)</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>format_pcm</name><operator>.</operator><name>bitsPerSample</name></name> <operator>=</operator> <name>SL_PCMSAMPLEFORMAT_FIXED_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format_pcm</name><operator>.</operator><name>containerSize</name></name> <operator>=</operator> <name>SL_PCMSAMPLEFORMAT_FIXED_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format_pcm</name><operator>.</operator><name>channelMask</name></name> <operator>=</operator> <name>SL_SPEAKER_FRONT_LEFT</name> <operator>|</operator> <name>SL_SPEAKER_FRONT_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format_pcm</name><operator>.</operator><name>endianness</name></name> <operator>=</operator> <name>SL_BYTEORDER_LITTLEENDIAN</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SLDataSource</name></type> <name>audioSrc</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>loc_bufq</name></expr>, <expr><operator>&amp;</operator><name>format_pcm</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLDataLocator_OutputMix</name></type> <name>loc_outmix</name> <init>= <expr><block>{

<expr><name>SL_DATALOCATOR_OUTPUTMIX</name></expr>,

<expr><name><name>sys</name><operator>-&gt;</operator><name>outputMixObject</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLDataSink</name></type> <name>audioSnk</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>loc_outmix</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SLInterfaceID</name></type> <name><name>ids2</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>sys</name><operator>-&gt;</operator><name>SL_IID_ANDROIDSIMPLEBUFFERQUEUE</name></name></expr>, <expr><name><name>sys</name><operator>-&gt;</operator><name>SL_IID_VOLUME</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SLboolean</name></type> <name><name>req2</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>SL_BOOLEAN_TRUE</name></expr>, <expr><name>SL_BOOLEAN_TRUE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aout_get_native_sample_rate</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CreateAudioPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>engineEngine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audioSrc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>audioSnk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ids2</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ids2</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ids2</name></expr></argument>, <argument><expr><name>req2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>SL_RESULT_UNKNOWN_ERROR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>SL_RESULT_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format_pcm</name><operator>.</operator><name>samplesPerSec</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SLuint32</name><operator>)</operator> <literal type="number">44100</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr> ;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CreateAudioPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>engineEngine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>audioSrc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>audioSnk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ids2</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ids2</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ids2</name></expr></argument>, <argument><expr><name>req2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create audio player"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Realize</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name></expr></argument>, <argument><expr><name>SL_BOOLEAN_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to realize player object."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetInterface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>SL_IID_PLAY</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>playerPlay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to get player interface."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetInterface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>SL_IID_VOLUME</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>volumeItf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to get volume interface."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetInterface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>SL_IID_ANDROIDSIMPLEBUFFERQUEUE</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to get buff queue interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>RegisterCallback</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name></expr></argument>, <argument><expr><name>PlayedCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to register buff queue callback."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>SetPlayState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerPlay</name></name></expr></argument>, <argument><expr><name>SL_PLAYSTATE_PLAYING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to switch to playing state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>samples_per_buf</name></name> <operator>=</operator> <call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>OPENSLES_BUFLEN</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>samples_per_buf</name></name> <operator>*</operator> <call><name>bytesPerSample</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>OPENSLES_BUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>next_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_buffer_chain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pp_buffer_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>p_buffer_chain</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_S16N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_BITMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPositionUpdatePeriod</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerPlay</name></name></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>AOUT_MIN_PREPARE_TIME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>volumeItf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>playerPlay</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Stop</name><parameter_list>(<parameter><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetPlayState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerPlay</name></name></expr></argument>, <argument><expr><name>SL_PLAYSTATE_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Clear</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_buffer_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>playerObject</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>playerBufferQueue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>volumeItf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>playerPlay</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outputMixObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>engineObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_so_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_output_t</name> <modifier>*</modifier></type><name>aout</name> <init>= <expr><operator>(</operator><name>audio_output_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aout_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SLresult</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_so_handle</name></name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"libOpenSLES.so"</literal></expr></argument>, <argument><expr><name>RTLD_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>p_so_handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"Failed to load libOpenSLES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>slCreateEnginePtr</name></name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_so_handle</name></name></expr></argument>, <argument><expr><literal type="string">"slCreateEngine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>slCreateEnginePtr</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><literal type="string">"Failed to load symbol slCreateEngine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSL_DLSYM</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const SLInterfaceID *sym = dlsym(sys-&gt;p_so_handle, "SL_IID_"name); if (unlikely(sym == NULL)) { msg_Err(aout, "Failed to load symbol SL_IID_"name); goto error; } sys-&gt;dest = *sym; } while(0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>OPENSL_DLSYM</name><argument_list>(<argument><expr><name>SL_IID_ANDROIDSIMPLEBUFFERQUEUE</name></expr></argument>, <argument><expr><literal type="string">"ANDROIDSIMPLEBUFFERQUEUE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OPENSL_DLSYM</name><argument_list>(<argument><expr><name>SL_IID_ENGINE</name></expr></argument>, <argument><expr><literal type="string">"ENGINE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OPENSL_DLSYM</name><argument_list>(<argument><expr><name>SL_IID_PLAY</name></expr></argument>, <argument><expr><literal type="string">"PLAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OPENSL_DLSYM</name><argument_list>(<argument><expr><name>SL_IID_VOLUME</name></expr></argument>, <argument><expr><literal type="string">"VOLUME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OPENSL_DLSYM</name></cpp:undef>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>sys</name><operator>-&gt;</operator><name>slCreateEnginePtr</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>engineObject</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Realize</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>engineObject</name></name></expr></argument>, <argument><expr><name>SL_BOOLEAN_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to realize engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetInterface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>engineObject</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>SL_IID_ENGINE</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>engineEngine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to get the engine interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SLInterfaceID</name></type> <name><name>ids1</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>sys</name><operator>-&gt;</operator><name>SL_IID_VOLUME</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SLboolean</name></type> <name><name>req1</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>SL_BOOLEAN_FALSE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CreateOutputMix</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>engineEngine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>outputMixObject</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ids1</name></expr></argument>, <argument><expr><name>req1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create output mix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Realize</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outputMixObject</name></name></expr></argument>, <argument><expr><name>SL_BOOLEAN_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_OPENSL_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to realize output mix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>Stop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>time_get</name></name> <operator>=</operator> <name>TimeGet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>play</name></name> <operator>=</operator> <name>Play</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>pause</name></name> <operator>=</operator> <name>Pause</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>mute_set</name></name> <operator>=</operator> <name>MuteSet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aout</name><operator>-&gt;</operator><name>volume_set</name></name> <operator>=</operator> <name>VolumeSet</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>outputMixObject</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outputMixObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>engineObject</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>engineObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>p_so_handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_so_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

</unit>
