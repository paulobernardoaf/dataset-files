<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_output\vlcpulse.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/pulseaudio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_output/vlcpulse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>vlc_module_name</name><index>[]</index></name> <init>= <expr><literal type="string">"vlcpulse"</literal></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_pa_error</name></cpp:undef>

<function><type><name>void</name></type> <name>vlc_pa_error</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>pa_strerror</name> <argument_list>(<argument><expr><call><name>pa_context_errno</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>context_state_cb</name> <parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>pa_context_get_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>PA_CONTEXT_READY</name></expr>:</case>

<case>case <expr><name>PA_CONTEXT_FAILED</name></expr>:</case>

<case>case <expr><name>PA_CONTEXT_TERMINATED</name></expr>:</case>

<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>context_wait</name> <parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pa_context_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>pa_context_get_state</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>PA_CONTEXT_READY</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>PA_CONTEXT_FAILED</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>PA_CONTEXT_TERMINATED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>context_event_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>pa_proplist</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unhandled context event \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>pl</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>pa_context</name> <modifier>*</modifier></type><name>vlc_pa_connect</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier><modifier>*</modifier></type><name>mlp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using library version %s"</literal></expr></argument>, <argument><expr><call><name>pa_get_library_version</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" (compiled with version %s, protocol %u)"</literal></expr></argument>,

<argument><expr><call><name>pa_get_headers_version</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PA_PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name> <init>= <expr><call><name>pa_threaded_mainloop_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>mainloop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_threaded_mainloop_start</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_threaded_mainloop_free</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ua</name> <init>= <expr><call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"user-agent"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_proplist</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>pa_proplist_new</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>props</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ua</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pa_proplist_sets</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_NAME</name></expr></argument>, <argument><expr><name>ua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"app-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_proplist_sets</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_ID</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"app-version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_proplist_sets</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_VERSION</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>var_InheritString</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"app-icon-name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_proplist_sets</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_ICON_NAME</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pa_proplist_sets</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_LANGUAGE</name></expr></argument>,

<argument><expr><call><name>setlocale</name> <argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_proplist_setf</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_PROCESS_ID</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>getpid</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>max</name> <init>= <expr><call><name>sysconf</name> <argument_list>(<argument><expr><name>_SC_GETPW_R_SIZE_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name>max</name> <operator>%</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">1024</literal></expr></init></decl>;</init>

<condition><expr><name>len</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>len</name> <operator>+=</operator> <literal type="number">1024</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name></type> <name>pwbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getpwuid_r</name> <argument_list>(<argument><expr><call><name>getuid</name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pwbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pw</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pa_proplist_sets</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_PROCESS_USER</name></expr></argument>,

<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>max</name> <init>= <expr><call><name>sysconf</name> <argument_list>(<argument><expr><name>_SC_HOST_NAME_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name>max</name> <operator>%</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">1024</literal></expr></init></decl>;</init>

<condition><expr><name>len</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>len</name> <operator>+=</operator> <literal type="number">1024</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>len</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gethostname</name> <argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_proplist_sets</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_PROCESS_HOST</name></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><call><name>getenv</name> <argument_list>(<argument><expr><literal type="string">"XDG_SESSION_COOKIE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>session</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_proplist_setf</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_PROCESS_MACHINE_ID</name></expr></argument>,

<argument><expr><literal type="string">"%.32s"</literal></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>pa_proplist_sets</name> <argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>PA_PROP_APPLICATION_PROCESS_SESSION_ID</name></expr></argument>,

<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_mainloop_api</name> <modifier>*</modifier></type><name>api</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>api</name> <operator>=</operator> <call><name>pa_threaded_mainloop_get_api</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>pa_context_new_with_proplist</name> <argument_list>(<argument><expr><name>api</name></expr></argument>, <argument><expr><name>ua</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>props</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pa_proplist_free</name> <argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pa_context_set_state_callback</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>context_state_cb</name></expr></argument>, <argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_set_event_callback</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>context_event_cb</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_context_connect</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>context_wait</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_pa_error</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"PulseAudio server connection failure"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_unref</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"connected %s to %s as client #%"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>pa_context_is_local</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"locally"</literal></expr> </then><else>: <expr><literal type="string">"remotely"</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>pa_context_get_server</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pa_context_get_index</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using protocol %"</literal><name>PRIu32</name><literal type="string">", server protocol %"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><call><name>pa_context_get_protocol_version</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>pa_context_get_server_protocol_version</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mlp</name> <operator>=</operator> <name>mainloop</name></expr>;</expr_stmt>

<return>return <expr><name>ctx</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_stop</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_free</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_pa_disconnect</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_disconnect</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_set_event_callback</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_set_state_callback</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_unref</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_stop</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_free</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>obj</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vlc_pa_rttime_free</name> <parameter_list>(<parameter><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name></decl></parameter>, <parameter><decl><type><name>pa_time_event</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pa_mainloop_api</name> <modifier>*</modifier></type><name>api</name> <init>= <expr><call><name>pa_threaded_mainloop_get_api</name> <argument_list>(<argument><expr><name>mainloop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>api</name><operator>-&gt;</operator><name>time_free</name></name> <argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_pa_get_latency</name></cpp:undef>

<function><type><name>vlc_tick_t</name></type> <name>vlc_pa_get_latency</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>pa_sample_spec</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>pa_stream_get_sample_spec</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pa_timing_info</name> <modifier>*</modifier></type><name>ti</name> <init>= <expr><call><name>pa_stream_get_timing_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ti</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"no timing infos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>write_index_corrupt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"write index corrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>pa_usec_t</name></type> <name>wt</name> <init>= <expr><call><name>pa_bytes_to_usec</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ti</name><operator>-&gt;</operator><name>write_index</name></name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_usec_t</name></type> <name>rt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_get_time</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pa_context_errno</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PA_ERR_NODATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_pa_error</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unknown time"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name></decl>;</decl_stmt> }</block> <decl><name>d</name></decl>;</union>

<expr_stmt><expr><name><name>d</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name>wt</name> <operator>-</operator> <name>rt</name></expr>;</expr_stmt>

<return>return <expr><name><name>d</name><operator>.</operator><name>s</name></name></expr>;</return> 

</block_content>}</block></function>

</unit>
