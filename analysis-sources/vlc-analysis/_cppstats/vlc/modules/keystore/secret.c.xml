<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\keystore\secret.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libsecret/secret.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gio/gdbusnamewatching.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"libsecret keystore"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Secrets are stored via libsecret"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"keystore"</literal></argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>cannot_unload_broken_library</name><argument_list>()</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_keys</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"protocol"</literal></expr>,

<expr><literal type="string">"user"</literal></expr>,

<expr><literal type="string">"server"</literal></expr>,

<expr><literal type="string">"path"</literal></expr>,

<expr><literal type="string">"port"</literal></expr>,

<expr><literal type="string">"realm"</literal></expr>,

<expr><literal type="string">"authtype"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ppsz_keys</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ppsz_keys</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>KEY_MAX</name></expr></argument>, <argument><expr><literal type="string">"key mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>str2key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cancellable_interrupted</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GCancellable</name> <modifier>*</modifier></type><name>p_canc</name> <init>= <expr><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>g_cancellable_cancel</name><argument_list>(<argument><expr><name>p_canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GCancellable</name> <modifier>*</modifier></type><name>cancellable_register</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GCancellable</name> <modifier>*</modifier></type><name>p_canc</name> <init>= <expr><call><name>g_cancellable_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_canc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_interrupt_register</name><argument_list>(<argument><expr><name>cancellable_interrupted</name></expr></argument>, <argument><expr><name>p_canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_canc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cancellable_unregister</name><parameter_list>(<parameter><decl><type><name>GCancellable</name> <modifier>*</modifier></type><name>p_canc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_canc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_interrupt_unregister</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>p_canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GHashTable</name> <modifier>*</modifier></type>

<name>values_to_ghashtable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>p_hash</name> <init>= <expr><call><name>g_hash_table_new_full</name><argument_list>(<argument><expr><name>g_str_hash</name></expr></argument>, <argument><expr><name>g_str_equal</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_hash</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ppsz_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>p_hash</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator> <name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator> <name><name>ppsz_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_hash</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ghash_to_value</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_values</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_key</name> <init>= <expr><call><name>str2key</name><argument_list>(<argument><expr><name>psz_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_key</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>i_key</name> <operator>&gt;=</operator> <name>KEY_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ppsz_values</name><index>[<expr><name>i_key</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ghashtable_to_values</name><parameter_list>(<parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>g_hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>g_hash_table_foreach</name><argument_list>(<argument><expr><name>g_hash</name></expr></argument>, <argument><expr><name>ghash_to_value</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ghashtable_insert_vlc_id</name><parameter_list>(<parameter><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>g_hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>g_hash_table_insert</name><argument_list>(<argument><expr><name>g_hash</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator> <literal type="string">".created_by"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator> <name>VLC_KEYSTORE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Store</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_secret_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SecretService</name> <modifier>*</modifier></type><name>p_ss</name> <init>= <expr><operator>(</operator><name>SecretService</name> <operator>*</operator><operator>)</operator> <name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>p_hash</name> <init>= <expr><call><name>values_to_ghashtable</name><argument_list>(<argument><expr><name>ppsz_values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_hash</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ghashtable_insert_vlc_id</name><argument_list>(<argument><expr><name>p_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SecretValue</name> <modifier>*</modifier></type><name>p_sv</name> <init>= <expr><call><name>secret_value_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>p_secret</name></expr></argument>, <argument><expr><name>i_secret_len</name></expr></argument>,

<argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sv</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>g_hash_table_unref</name><argument_list>(<argument><expr><name>p_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GCancellable</name> <modifier>*</modifier></type><name>p_canc</name> <init>= <expr><call><name>cancellable_register</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gboolean</name></type> <name>b_ret</name> <init>= <expr><call><name>secret_service_store_sync</name><argument_list>(<argument><expr><name>p_ss</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_hash</name></expr></argument>,

<argument><expr><name>SECRET_COLLECTION_DEFAULT</name></expr></argument>,

<argument><expr><name>psz_label</name></expr></argument>, <argument><expr><name>p_sv</name></expr></argument>, <argument><expr><name>p_canc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cancellable_unregister</name><argument_list>(<argument><expr><name>p_canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>secret_value_unref</name><argument_list>(<argument><expr><name>p_sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_hash_table_unref</name><argument_list>(<argument><expr><name>p_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>b_ret</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GList</name><modifier>*</modifier></type>

<name>items_search</name><parameter_list>(<parameter><decl><type><name>SecretService</name> <modifier>*</modifier></type><name>p_ss</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_safe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>p_hash</name> <init>= <expr><call><name>values_to_ghashtable</name><argument_list>(<argument><expr><name>ppsz_values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_hash</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_safe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ghashtable_insert_vlc_id</name><argument_list>(<argument><expr><name>p_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>GCancellable</name> <modifier>*</modifier></type><name>p_canc</name> <init>= <expr><call><name>cancellable_register</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><call><name>secret_service_search_sync</name><argument_list>(<argument><expr><name>p_ss</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_hash</name></expr></argument>,

<argument><expr><name>SECRET_SEARCH_ALL</name>

<operator>|</operator> <name>SECRET_SEARCH_UNLOCK</name>

<operator>|</operator> <name>SECRET_SEARCH_LOAD_SECRETS</name></expr></argument>,

<argument><expr><name>p_canc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cancellable_unregister</name><argument_list>(<argument><expr><name>p_canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_hash_table_unref</name><argument_list>(<argument><expr><name>p_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>

<name>Find</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_entries</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SecretService</name> <modifier>*</modifier></type><name>p_ss</name> <init>= <expr><operator>(</operator><name>SecretService</name> <operator>*</operator><operator>)</operator> <name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><call><name>items_search</name><argument_list>(<argument><expr><name>p_ss</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_found_count</name> <init>= <expr><call><name>g_list_length</name><argument_list>(<argument><expr><name>p_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_entry_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entries</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>i_found_count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_keystore_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_entries</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>p_list</name></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>SecretItem</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><operator>(</operator><name>SecretItem</name> <operator>*</operator><operator>)</operator> <name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GHashTable</name> <modifier>*</modifier></type><name>p_attrs</name> <init>= <expr><call><name>secret_item_get_attributes</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><operator>&amp;</operator><name><name>p_entries</name><index>[<expr><name>i_entry_count</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ghashtable_to_values</name><argument_list>(<argument><expr><name>p_attrs</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>g_hash_table_unref</name><argument_list>(<argument><expr><name>p_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_hash_table_unref</name><argument_list>(<argument><expr><name>p_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SecretValue</name> <modifier>*</modifier></type><name>p_secret_value</name> <init>= <expr><call><name>secret_item_get_secret</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gsize</name></type> <name>i_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>secret_value_get</name><argument_list>(<argument><expr><name>p_secret_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_keystore_entry_set_secret</name><argument_list>(<argument><expr><name>p_entry</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>psz_value</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>secret_value_unref</name><argument_list>(<argument><expr><name>p_secret_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>secret_value_unref</name><argument_list>(<argument><expr><name>p_secret_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>p_list</name></expr></argument>, <argument><expr><name>g_object_unref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_entries</name> <operator>=</operator> <name>p_entries</name></expr>;</expr_stmt>

<return>return <expr><name>i_entry_count</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>p_list</name></expr></argument>, <argument><expr><name>g_object_unref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_entry_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_keystore_release_entries</name><argument_list>(<argument><expr><name>p_entries</name></expr></argument>, <argument><expr><name>i_entry_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>

<name>Remove</name><parameter_list>(<parameter><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SecretService</name> <modifier>*</modifier></type><name>p_ss</name> <init>= <expr><operator>(</operator><name>SecretService</name> <operator>*</operator><operator>)</operator> <name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><call><name>items_search</name><argument_list>(<argument><expr><name>p_ss</name></expr></argument>, <argument><expr><name>ppsz_values</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_entry_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>GList</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>p_list</name></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>SecretItem</name> <modifier>*</modifier></type><name>p_item</name> <init>= <expr><operator>(</operator><name>SecretItem</name> <operator>*</operator><operator>)</operator> <name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>secret_item_delete</name><argument_list>(<argument><expr><name>p_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_entry_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>g_list_free_full</name><argument_list>(<argument><expr><name>p_list</name></expr></argument>, <argument><expr><name>g_object_unref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_entry_count</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>secrets_watch_data</name>

<block>{

<decl_stmt><decl><type><name>vlc_sem_t</name></type> <name>sem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_running</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dbus_appeared_cb</name><parameter_list>(<parameter><decl><type><name>GDBusConnection</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>name_owner</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>connection</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>name</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name_owner</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>secrets_watch_data</name></name> <modifier>*</modifier></type><name>p_watch_data</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_watch_data</name><operator>-&gt;</operator><name>b_running</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_watch_data</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dbus_vanished_cb</name><parameter_list>(<parameter><decl><type><name>GDBusConnection</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>connection</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>name</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>secrets_watch_data</name></name> <modifier>*</modifier></type><name>p_watch_data</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_watch_data</name><operator>-&gt;</operator><name>b_running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_watch_data</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_this</name><operator>-&gt;</operator><name>force</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>secrets_watch_data</name></name></type> <name>watch_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>watch_data</name><operator>.</operator><name>b_running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>watch_data</name><operator>.</operator><name>sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>i_id</name> <init>= <expr><call><name>g_bus_watch_name</name><argument_list>(<argument><expr><name>G_BUS_TYPE_SESSION</name></expr></argument>,

<argument><expr><literal type="string">"org.freedesktop.secrets"</literal></expr></argument>,

<argument><expr><name>G_BUS_NAME_WATCHER_FLAGS_NONE</name></expr></argument>,

<argument><expr><name>dbus_appeared_cb</name></expr></argument>, <argument><expr><name>dbus_vanished_cb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>watch_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_sem_wait_i11e</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>watch_data</name><operator>.</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_bus_unwatch_name</name><argument_list>(<argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>watch_data</name><operator>.</operator><name>b_running</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GCancellable</name> <modifier>*</modifier></type><name>p_canc</name> <init>= <expr><call><name>cancellable_register</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecretService</name> <modifier>*</modifier></type><name>p_ss</name> <init>= <expr><call><name>secret_service_get_sync</name><argument_list>(<argument><expr><name>SECRET_SERVICE_NONE</name></expr></argument>,

<argument><expr><name>p_canc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cancellable_unregister</name><argument_list>(<argument><expr><name>p_canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ss</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><operator>(</operator><name>vlc_keystore</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>vlc_keystore_sys</name> <operator>*</operator><operator>)</operator> <name>p_ss</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_store</name></name> <operator>=</operator> <name>Store</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_find</name></name> <operator>=</operator> <name>Find</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_keystore</name><operator>-&gt;</operator><name>pf_remove</name></name> <operator>=</operator> <name>Remove</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_keystore</name> <modifier>*</modifier></type><name>p_keystore</name> <init>= <expr><operator>(</operator><name>vlc_keystore</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecretService</name> <modifier>*</modifier></type><name>p_ss</name> <init>= <expr><operator>(</operator><name>SecretService</name> <operator>*</operator><operator>)</operator> <name><name>p_keystore</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>p_ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>secret_service_disconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
