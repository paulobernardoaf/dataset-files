<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\keystore\list_util.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_keystore.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list_util.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>

<name>ks_list_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ks_list</name></name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_keystore_release_entries</name><argument_list>(<argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>, <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ks_values_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>ppsz_dst</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_src</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ppsz_src</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ppsz_dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>ppsz_src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ppsz_dst</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type>

<name>ks_list_new_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ks_list</name></name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_list</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_max</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_max</name></name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entries</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>, <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_max</name></name>

<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_list</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_entries</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ks_list_free</name><argument_list>(<argument><expr><name>p_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <name>p_entries</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name><name>p_list</name><operator>-&gt;</operator><name>i_count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_KEYSTORE_VALUES_INIT</name><argument_list>(<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>p_entry</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type>

<name>ks_list_find_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ks_list</name></name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_values</name><index>[<expr><name>KEY_MAX</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>p_start_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name>p_start_index</name></expr> ?</condition><then> <expr><operator>*</operator><name>p_start_index</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_keystore_entry</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_entry</name><operator>-&gt;</operator><name>p_secret</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_match</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>KEY_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value1</name> <init>= <expr><name><name>ppsz_values</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value2</name> <init>= <expr><name><name>p_entry</name><operator>-&gt;</operator><name>ppsz_values</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_value1</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psz_value2</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>psz_value1</name></expr></argument>, <argument><expr><name>psz_value2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>b_match</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_start_index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_start_index</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_entry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
