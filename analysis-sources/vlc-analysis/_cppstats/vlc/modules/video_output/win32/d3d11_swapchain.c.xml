<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\win32\d3d11_swapchain.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_WIN32_WINNT</name> <operator>&lt;</operator> <literal type="number">0x0601</literal></expr></cpp:if> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WIN32_WINNT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0601</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DXGI1_6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxgi1_6.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxgi1_5.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_swapchain.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_shaders.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>video_color_axis</name> <block>{

<decl><name>COLOR_AXIS_RGB</name></decl>,

<decl><name>COLOR_AXIS_YCBCR</name></decl>,

}</block></enum></type> <name>video_color_axis</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>DXGI_COLOR_SPACE_TYPE</name></type> <name>dxgi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_color_axis</name></type> <name>axis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_color_primaries_t</name></type> <name>primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_transfer_func_t</name></type> <name>transfer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_color_space_t</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_full_range</name></decl>;</decl_stmt>

}</block></struct></type> <name>dxgi_color_space</name>;</typedef>

<struct>struct <name>d3d11_local_swapchain</name>

<block>{

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>pixelFormat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dxgi_color_space</name> <modifier>*</modifier></type><name>colorspace</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<decl_stmt><decl><type><name>HWND</name></type> <name>swapchainHwnd</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>IDXGISwapChain1</name> <modifier>*</modifier></type><name>dxgiswapChain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>IDXGISwapChain4</name> <modifier>*</modifier></type><name>dxgiswapChain4</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>send_metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXGI_HDR_METADATA_HDR10</name></type> <name>hdr10</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11RenderTargetView</name> <modifier>*</modifier></type><name><name>swapchainTargetView</name><index>[<expr><name>D3D11_MAX_RENDER_TARGET</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>logged_capabilities</name></decl>;</decl_stmt>

}</block>;</struct>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SWAPCHAIN_WIDTH</name></expr></argument>, <argument><expr><literal type="number">0xf1b59347</literal></expr></argument>, <argument><expr><literal type="number">0x1643</literal></expr></argument>, <argument><expr><literal type="number">0x411a</literal></expr></argument>, <argument><expr><literal type="number">0xad</literal></expr></argument>, <argument><expr><literal type="number">0x6b</literal></expr></argument>, <argument><expr><literal type="number">0xc7</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0x7a</literal></expr></argument>, <argument><expr><literal type="number">0x06</literal></expr></argument>, <argument><expr><literal type="number">0xb6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>GUID_SWAPCHAIN_HEIGHT</name></expr></argument>, <argument><expr><literal type="number">0x6ea976a0</literal></expr></argument>, <argument><expr><literal type="number">0x9d60</literal></expr></argument>, <argument><expr><literal type="number">0x4bb7</literal></expr></argument>, <argument><expr><literal type="number">0xa5</literal></expr></argument>, <argument><expr><literal type="number">0xa9</literal></expr></argument>, <argument><expr><literal type="number">0x7d</literal></expr></argument>, <argument><expr><literal type="number">0xd1</literal></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>, <argument><expr><literal type="number">0x7f</literal></expr></argument>, <argument><expr><literal type="number">0xc9</literal></expr></argument>, <argument><expr><literal type="number">0xbd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXGI_COLOR_RANGE_FULL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXGI_COLOR_RANGE_STUDIO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_10</name></cpp:macro> <cpp:value>TRANSFER_FUNC_LINEAR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_22</name></cpp:macro> <cpp:value>TRANSFER_FUNC_SRGB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_FUNC_2084</name></cpp:macro> <cpp:value>TRANSFER_FUNC_SMPTE_ST2084</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_PRIMARIES_BT601</name></cpp:macro> <cpp:value>COLOR_PRIMARIES_BT601_525</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dxgi_color_space</name></type> <name><name>color_spaces</name><index>[]</index></name> <init>= <expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXGIMAP</name><parameter_list>(<parameter><type><name>AXIS</name></type></parameter>, <parameter><type><name>RANGE</name></type></parameter>, <parameter><type><name>GAMMA</name></type></parameter>, <parameter><type><name>SITTING</name></type></parameter>, <parameter><type><name>PRIMARIES</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ DXGI_COLOR_SPACE_##AXIS##_##RANGE##_G##GAMMA##_##SITTING##_P##PRIMARIES, #AXIS " Rec." #PRIMARIES " gamma:" #GAMMA " range:" #RANGE, COLOR_AXIS_##AXIS, COLOR_PRIMARIES_BT##PRIMARIES, TRANSFER_FUNC_##GAMMA, COLOR_SPACE_BT##PRIMARIES, DXGI_COLOR_RANGE_##RANGE},</cpp:value></cpp:define>

<macro><name>DXGIMAP</name><argument_list>(<argument>RGB</argument>, <argument>FULL</argument>, <argument><literal type="number">22</literal></argument>, <argument>NONE</argument>, <argument><literal type="number">709</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>STUDIO</argument>, <argument><literal type="number">22</literal></argument>, <argument>LEFT</argument>, <argument><literal type="number">601</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>FULL</argument>, <argument><literal type="number">22</literal></argument>, <argument>LEFT</argument>, <argument><literal type="number">601</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>RGB</argument>, <argument>FULL</argument>, <argument><literal type="number">10</literal></argument>, <argument>NONE</argument>, <argument><literal type="number">709</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>RGB</argument>, <argument>STUDIO</argument>, <argument><literal type="number">22</literal></argument>, <argument>NONE</argument>, <argument><literal type="number">709</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>STUDIO</argument>, <argument><literal type="number">22</literal></argument>, <argument>LEFT</argument>, <argument><literal type="number">709</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>FULL</argument>, <argument><literal type="number">22</literal></argument>, <argument>LEFT</argument>, <argument><literal type="number">709</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>RGB</argument>, <argument>STUDIO</argument>, <argument><literal type="number">22</literal></argument>, <argument>NONE</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>STUDIO</argument>, <argument><literal type="number">22</literal></argument>, <argument>LEFT</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>FULL</argument>, <argument><literal type="number">22</literal></argument>, <argument>LEFT</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>STUDIO</argument>, <argument><literal type="number">22</literal></argument>, <argument>TOPLEFT</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>RGB</argument>, <argument>FULL</argument>, <argument><literal type="number">22</literal></argument>, <argument>NONE</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>RGB</argument>, <argument>FULL</argument>, <argument><literal type="number">2084</literal></argument>, <argument>NONE</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>STUDIO</argument>, <argument><literal type="number">2084</literal></argument>, <argument>LEFT</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>RGB</argument>, <argument>STUDIO</argument>, <argument><literal type="number">2084</literal></argument>, <argument>NONE</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>STUDIO</argument>, <argument><literal type="number">2084</literal></argument>, <argument>TOPLEFT</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>STUDIO</argument>, <argument>HLG</argument>, <argument>TOPLEFT</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<macro><name>DXGIMAP</name><argument_list>(<argument>YCBCR</argument>, <argument>FULL</argument>, <argument>HLG</argument>, <argument>TOPLEFT</argument>, <argument><literal type="number">2020</literal></argument>)</argument_list></macro>

<expr><block>{<expr><name>DXGI_COLOR_SPACE_RESERVED</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DXGIMAP</name></cpp:undef>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DXGI1_6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>canHandleConversion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dxgi_color_space</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dxgi_color_space</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_BT2020</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>transfer</name></name> <operator>==</operator> <name>TRANSFER_FUNC_BT709</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><name>false</name></expr>;</return> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SelectSwapchainColorspace</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_video_render_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>, <decl><type ref="prev"/><name>best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>support</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDXGISwapChain3</name> <modifier>*</modifier></type><name>dxgiswapChain3</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGISwapChain_QueryInterface</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDXGISwapChain3</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dxgiswapChain3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"could not get a IDXGISwapChain3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGISwapChain3_CheckColorSpaceSupport</name><argument_list>(<argument><expr><name>dxgiswapChain3</name></expr></argument>, <argument><expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dxgi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>support</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>support</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>display</name><operator>-&gt;</operator><name>logged_capabilities</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"supports colorspace %s"</literal></expr></argument>, <argument><expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>primaries</name> <operator>==</operator> <operator>(</operator><name>video_color_primaries_t</name><operator>)</operator> <name><name>cfg</name><operator>-&gt;</operator><name>primaries</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>==</operator> <operator>(</operator><name>video_color_space_t</name><operator>)</operator> <name><name>cfg</name><operator>-&gt;</operator><name>colorspace</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>transfer</name> <operator>==</operator> <operator>(</operator><name>video_transfer_func_t</name><operator>)</operator> <name><name>cfg</name><operator>-&gt;</operator><name>transfer</name></name> <operator>||</operator>

<operator>(</operator><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>transfer</name> <operator>==</operator> <name>TRANSFER_FUNC_SMPTE_ST2084</name> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>transfer</name></name> <operator>==</operator> <name>TRANSFER_FUNC_HLG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_full_range</name> <operator>==</operator> <name><name>cfg</name><operator>-&gt;</operator><name>full_range</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>best_score</name> <operator>||</operator> <operator>(</operator><name>score</name> <operator>&amp;&amp;</operator> <name>best</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>logged_capabilities</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>best</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>best</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"no matching colorspace found force %s"</literal></expr></argument>, <argument><expr><name><name>color_spaces</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IDXGISwapChain_QueryInterface</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDXGISwapChain4</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DXGI1_6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>IDXGIOutput</name> <modifier>*</modifier></type><name>dxgiOutput</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>IDXGISwapChain_GetContainingOutput</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxgiOutput</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>IDXGIOutput6</name> <modifier>*</modifier></type><name>dxgiOutput6</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>IDXGIOutput_QueryInterface</name><argument_list>( <argument><expr><name>dxgiOutput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDXGIOutput6</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dxgiOutput6</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DXGI_OUTPUT_DESC1</name></type> <name>desc1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>IDXGIOutput6_GetDesc1</name><argument_list>( <argument><expr><name>dxgiOutput6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc1</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dxgi_color_space</name> <modifier>*</modifier></type><name>csp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dxgi</name> <operator>==</operator> <name><name>desc1</name><operator>.</operator><name>ColorSpace</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>canHandleConversion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>color_spaces</name><index>[<expr><name>best</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Can't handle conversion to screen format %s"</literal></expr></argument>, <argument><expr><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>csp</name> <operator>=</operator> <operator>&amp;</operator><name><name>color_spaces</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Output max luminance: %.1f, colorspace %s, bits per pixel %d"</literal></expr></argument>, <argument><expr><name><name>desc1</name><operator>.</operator><name>MaxFullFrameLuminance</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>csp</name></expr>?</condition><then><expr><name><name>csp</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>:<expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>desc1</name><operator>.</operator><name>BitsPerColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IDXGIOutput6_Release</name><argument_list>( <argument><expr><name>dxgiOutput6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IDXGIOutput_Release</name><argument_list>( <argument><expr><name>dxgiOutput</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGISwapChain3_SetColorSpace1</name><argument_list>(<argument><expr><name>dxgiswapChain3</name></expr></argument>, <argument><expr><name><name>color_spaces</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><name>dxgi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"using colorspace %s"</literal></expr></argument>, <argument><expr><name><name>color_spaces</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to set colorspace %s. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name><name>color_spaces</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>color_spaces</name><index>[<expr><name>best</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>send_metadata</name></name> <operator>=</operator> <name><name>color_spaces</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><name>transfer</name> <operator>==</operator> <operator>(</operator><name>video_transfer_func_t</name><operator>)</operator> <name><name>cfg</name><operator>-&gt;</operator><name>transfer</name></name> <operator>&amp;&amp;</operator>

<name><name>color_spaces</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><name>primaries</name> <operator>==</operator> <operator>(</operator><name>video_color_primaries_t</name><operator>)</operator> <name><name>cfg</name><operator>-&gt;</operator><name>primaries</name></name> <operator>&amp;&amp;</operator>

<name><name>color_spaces</name><index>[<expr><name>best</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>==</operator> <operator>(</operator><name>video_color_space_t</name><operator>)</operator> <name><name>cfg</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dxgiswapChain3</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDXGISwapChain3_Release</name><argument_list>(<argument><expr><name>dxgiswapChain3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillSwapChainDesc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>DXGI_SWAP_CHAIN_DESC1</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>BufferCount</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>BufferUsage</name></name> <operator>=</operator> <name>DXGI_USAGE_RENDER_TARGET_OUTPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>SampleDesc</name><operator>.</operator><name>Count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>SampleDesc</name><operator>.</operator><name>Quality</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>Width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>Height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>Format</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>pixelFormat</name><operator>-&gt;</operator><name>formatTexture</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isWin10OrGreater</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>hKernel32</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>hKernel32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>isWin10OrGreater</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hKernel32</name></expr></argument>, <argument><expr><literal type="string">"GetSystemCpuSetInformation"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>isWin10OrGreater</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>SwapEffect</name></name> <operator>=</operator> <name>DXGI_SWAP_EFFECT_FLIP_DISCARD</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>isWin80OrGreater</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>hKernel32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>isWin80OrGreater</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hKernel32</name></expr></argument>, <argument><expr><literal type="string">"CheckTokenCapability"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>isWin80OrGreater</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>SwapEffect</name></name> <operator>=</operator> <name>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>SwapEffect</name></name> <operator>=</operator> <name>DXGI_SWAP_EFFECT_DISCARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>BufferCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CreateSwapchain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>swapchainHwnd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"missing a HWND to create the swapchain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DXGI_SWAP_CHAIN_DESC1</name></type> <name>scd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FillSwapChainDesc</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>dxgiadapter</name> <init>= <expr><call><name>D3D11DeviceAdapter</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dxgiadapter</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Could not get the DXGI Adapter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IDXGIFactory2</name> <modifier>*</modifier></type><name>dxgifactory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDXGIAdapter_GetParent</name><argument_list>(<argument><expr><name>dxgiadapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDXGIFactory2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dxgifactory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IDXGIAdapter_Release</name><argument_list>(<argument><expr><name>dxgiadapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Could not get the DXGI Factory. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIFactory2_CreateSwapChainForHwnd</name><argument_list>(<argument><expr><name>dxgifactory</name></expr></argument>, <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>,

<argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainHwnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>DXGI_ERROR_INVALID_CALL</name> <operator>&amp;&amp;</operator> <name><name>scd</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <name>DXGI_FORMAT_R10G10B10A2_UNORM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"10 bits swapchain failed, try 8 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scd</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name>DXGI_FORMAT_R8G8B8A8_UNORM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIFactory2_CreateSwapChainForHwnd</name><argument_list>(<argument><expr><name>dxgifactory</name></expr></argument>, <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>,

<argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainHwnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IDXGIFactory2_Release</name><argument_list>(<argument><expr><name>dxgifactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Could not create the SwapChain. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>bool</name></type> <name>UpdateSwapchain</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_video_render_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ID3D11Texture2D</name><modifier>*</modifier></type> <name>pBackBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>dsc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bitsPerChannel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ID3D11Resource</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ID3D11RenderTargetView_GetResource</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>res</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>( <argument><expr><operator>(</operator><name>ID3D11Texture2D</name><operator>*</operator><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11Resource_Release</name><argument_list>( <argument><expr><name>res</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>pixelFormat</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name><name>dsc</name><operator>.</operator><name>Format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitsPerChannel</name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>pixelFormat</name><operator>-&gt;</operator><name>bitsPerChannel</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>dsc</name><operator>.</operator><name>Width</name></name> <operator>==</operator> <name><name>cfg</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>dsc</name><operator>.</operator><name>Height</name></name> <operator>==</operator> <name><name>cfg</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <name><name>cfg</name><operator>-&gt;</operator><name>bitdepth</name></name> <operator>&lt;=</operator> <name>bitsPerChannel</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> 

<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ID3D11RenderTargetView_Release</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>newPixelFormat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"winrt-swapchain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DXGI_SWAP_CHAIN_DESC1</name></type> <name>scd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>IDXGISwapChain1_GetDesc</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>output_format</name> <init>= <expr><call><name>GetRenderFormatList</name><argument_list>()</argument_list></call></expr></init></decl>;</init>

<condition><expr><name><name>output_format</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>output_format</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>output_format</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name><name>scd</name><operator>.</operator><name>Format</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>newPixelFormat</name> <operator>=</operator> <name>output_format</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><name>newPixelFormat</name> <operator>=</operator> <call><name>FindD3D11Format</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_RGB_FORMAT</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>cfg</name><operator>-&gt;</operator><name>bitdepth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>D3D11_CHROMA_CPU</name></expr></argument>, <argument><expr><name>D3D11_FORMAT_SUPPORT_DISPLAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>newPixelFormat</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>newPixelFormat</name> <operator>=</operator> <call><name>FindD3D11Format</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_YUV_FORMAT</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>cfg</name><operator>-&gt;</operator><name>bitdepth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>D3D11_CHROMA_CPU</name></expr></argument>, <argument><expr><name>D3D11_FORMAT_SUPPORT_DISPLAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>newPixelFormat</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Could not get the SwapChain format."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>pixelFormat</name></name> <operator>!=</operator> <name>newPixelFormat</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDXGISwapChain_Release</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>logged_capabilities</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>pixelFormat</name></name> <operator>=</operator> <name>newPixelFormat</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CreateSwapchain</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGISwapChain_ResizeBuffers</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name>DXGI_FORMAT_UNKNOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>FAILED</name><argument_list>( <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to resize the backbuffer. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGISwapChain_GetBuffer</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D11Texture2D</name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pBackBuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>FAILED</name><argument_list>( <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Could not get the backbuffer for the Swapchain. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>D3D11_CreateRenderTargets</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator> <name>pBackBuffer</name></expr></argument>,

<argument><expr><name><name>display</name><operator>-&gt;</operator><name>pixelFormat</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>( <argument><expr><name>pBackBuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>FAILED</name><argument_list>( <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to create the target view. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>D3D11_ClearRenderTargets</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>pixelFormat</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectSwapchainColorspace</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>LocalSwapchainCleanupDevice</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ID3D11RenderTargetView_Release</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain4</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDXGISwapChain4_Release</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain4</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDXGISwapChain_Release</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>LocalSwapchainSwap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXGI_PRESENT_PARAMETERS</name></type> <name>presentParams</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDXGISwapChain1_Present1</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>presentParams</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>hr</name> <operator>==</operator> <name>DXGI_ERROR_DEVICE_REMOVED</name> <operator>||</operator> <name>hr</name> <operator>==</operator> <name>DXGI_ERROR_DEVICE_RESET</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"SwapChain Present failed. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>LocalSwapchainUpdateOutput</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_video_render_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>libvlc_video_output_cfg_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>UpdateSwapchain</name><argument_list>( <argument><expr><name>display</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>dxgi_format</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>pixelFormat</name><operator>-&gt;</operator><name>formatTexture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>full_range</name></name> <operator>=</operator> <name><name>display</name><operator>-&gt;</operator><name>colorspace</name><operator>-&gt;</operator><name>b_full_range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <operator>(</operator><name>libvlc_video_color_space_t</name><operator>)</operator> <name><name>display</name><operator>-&gt;</operator><name>colorspace</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <operator>(</operator><name>libvlc_video_color_primaries_t</name><operator>)</operator> <name><name>display</name><operator>-&gt;</operator><name>colorspace</name><operator>-&gt;</operator><name>primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <operator>(</operator><name>libvlc_video_transfer_func_t</name><operator>)</operator> <name><name>display</name><operator>-&gt;</operator><name>colorspace</name><operator>-&gt;</operator><name>transfer</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>LocalSwapchainStartEndRendering</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>enter</name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>dataSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>i_width</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDXGISwapChain_GetPrivateData</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_SWAPCHAIN_WIDTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dataSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>i_height</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGISwapChain_GetPrivateData</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>GUID_SWAPCHAIN_HEIGHT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_width</name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>||</operator> <name>i_height</name> <operator>!=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vout_display_SetSize</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>D3D11_ClearRenderTargets</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>pixelFormat</name></name></expr></argument>, <argument><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>LocalSwapchainSetMetadata</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>libvlc_video_metadata_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>metadata</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>libvlc_video_metadata_frame_hdr10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>type</name> <operator>==</operator> <name>libvlc_video_metadata_frame_hdr10</name> <operator>&amp;&amp;</operator> <name>metadata</name> <operator>&amp;&amp;</operator>

<name><name>display</name><operator>-&gt;</operator><name>send_metadata</name></name> <operator>&amp;&amp;</operator> <name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain4</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>libvlc_video_frame_hdr10_metadata_t</name> <modifier>*</modifier></type><name>p_hdr10</name> <init>= <expr><name>metadata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXGI_HDR_METADATA_HDR10</name></type> <name>hdr10</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>GreenPrimary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>GreenPrimary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>GreenPrimary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>GreenPrimary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>BluePrimary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>BluePrimary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>BluePrimary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>BluePrimary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>RedPrimary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>RedPrimary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>RedPrimary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>RedPrimary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>WhitePoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>WhitePoint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>MinMasteringLuminance</name></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>MinMasteringLuminance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>MaxMasteringLuminance</name></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>MaxMasteringLuminance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>MaxContentLightLevel</name></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>MaxContentLightLevel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>MaxFrameAverageLightLevel</name></name> <operator>=</operator> <name><name>p_hdr10</name><operator>-&gt;</operator><name>MaxFrameAverageLightLevel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>hdr10</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr10</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr10</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>hdr10</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr10</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr10</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDXGISwapChain4_SetHDRMetaData</name><argument_list>( <argument><expr><name><name>display</name><operator>-&gt;</operator><name>dxgiswapChain4</name></name></expr></argument>, <argument><expr><name>DXGI_HDR_METADATA_TYPE_HDR10</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>hdr10</name></name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>hdr10</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>LocalSwapchainSelectPlane</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plane</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_OMSetRenderTargets</name><argument_list>(<argument><expr><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>display</name><operator>-&gt;</operator><name>swapchainTargetView</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>CreateLocalSwapchainHandle</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d11_local_swapchain</name></name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>display</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>display</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>swapchainHwnd</name></name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>display</name><operator>-&gt;</operator><name>d3d_dev</name></name> <operator>=</operator> <name>d3d_dev</name></expr>;</expr_stmt>

<return>return <expr><name>display</name></expr>;</return>

</block_content>}</block></function>

</unit>
