<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\win32\direct3d11.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_WIN32_WINNT</name> <operator>&lt;</operator> <literal type="number">0x0601</literal></expr></cpp:if> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WIN32_WINNT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0601</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/d3d11_fmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_quad.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_shaders.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_swapchain.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/copy.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D11_HELP</name></cpp:macro> <cpp:value>N_("Recommended video output for Windows 8 and later versions")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HW_BLENDING_TEXT</name></cpp:macro> <cpp:value>N_("Use hardware blending support")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HW_BLENDING_LONGTEXT</name></cpp:macro> <cpp:value>N_("Try to use hardware acceleration for subtitle/OSD blending.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"Direct3D11"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Direct3D11 video output"</literal>)</argument>)</argument_list></macro>

<macro><name>set_help</name><argument_list>(<argument>D3D11_HELP</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"direct3d11-hw-blending"</literal></argument>, <argument>true</argument>, <argument>HW_BLENDING_TEXT</argument>, <argument>HW_BLENDING_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"winrt-swapchain"</literal></argument>, <argument><literal type="number">0x0</literal></argument>, <argument>NULL</argument>, <argument>NULL</argument>, <argument>true</argument>)</argument_list></macro> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"direct3d11"</literal></argument>)</argument_list></macro>

<macro><name>set_callback_display</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">300</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<struct>struct <name>vout_display_sys_t</name>

<block>{

<decl_stmt><decl><type><name>vout_display_sys_win32_t</name></type> <name>sys</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>display_win32_area_t</name></type> <name>area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sensors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>display_info_t</name></type> <name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>local_d3d_dev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>d3d11_shaders_t</name></type> <name>shaders</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d_quad_t</name></type> <name>picQuad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11Query</name> <modifier>*</modifier></type><name>prepareWait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_sys_d3d11_t</name></type> <name>stagingSys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name></type> <name><name>stagingPlanes</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d_vshader_t</name></type> <name>projectionVShader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d_vshader_t</name></type> <name>flatVShader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>legacy_shader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name><name>pSubpictureChromas</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d_quad_t</name></type> <name>regionQuad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d3dregion_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>d3dregions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outside_opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_update_output_cb</name></type> <name>updateOutputCb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_swap_cb</name></type> <name>swapCb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_makeCurrent_cb</name></type> <name>startEndRenderingCb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_frameMetadata_cb</name></type> <name>sendMetadataCb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_output_select_plane_cb</name></type> <name>selectPlaneCb</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D11Open</name> <parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D11Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SetupOutputFormat</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D11CreateFormatResources</name> <parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D11CreateGenericResources</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D11DestroyResources</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D11DeleteRegions</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D11MapSubpicture</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetQuadVSProjection</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdatePicQuadPosition</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>UpdateDisplayFormat</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>libvlc_video_output_cfg_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>input_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>display_info_t</name></type> <name>new_display</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>output_format</name> <init>= <expr><call><name>GetRenderFormatList</name><argument_list>()</argument_list></call></expr></init></decl>;</init>

<condition><expr><name><name>output_format</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>output_format</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>output_format</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <operator>(</operator><name>DXGI_FORMAT</name><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>dxgi_format</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>new_display</name><operator>.</operator><name>pixelFormat</name></name> <operator>=</operator> <name>output_format</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>new_display</name><operator>.</operator><name>pixelFormat</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Could not find the output format."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>new_display</name><operator>.</operator><name>color</name></name> <operator>=</operator> <operator>(</operator><name>video_color_space_t</name><operator>)</operator> <name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_display</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <operator>(</operator><name>video_transfer_func_t</name><operator>)</operator> <name><name>out</name><operator>-&gt;</operator><name>transfer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_display</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <operator>(</operator><name>video_color_primaries_t</name><operator>)</operator> <name><name>out</name><operator>-&gt;</operator><name>primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_display</name><operator>.</operator><name>b_full_range</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>full_range</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>transfer</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>TRANSFER_FUNC_LINEAR</name></expr>:</case>

<case>case <expr><name>TRANSFER_FUNC_SRGB</name></expr>:</case>

<expr_stmt><expr><name><name>new_display</name><operator>.</operator><name>luminance_peak</name></name> <operator>=</operator> <name>DEFAULT_SRGB_BRIGHTNESS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TRANSFER_FUNC_SMPTE_ST2084</name></expr>:</case>

<expr_stmt><expr><name><name>new_display</name><operator>.</operator><name>luminance_peak</name></name> <operator>=</operator> <name>MAX_PQ_BRIGHTNESS</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>new_display</name><operator>.</operator><name>luminance_peak</name></name> <operator>=</operator> <name>DEFAULT_SRGB_BRIGHTNESS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>pixelFormat</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<operator>(</operator> <name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>pixelFormat</name></name> <operator>!=</operator> <name><name>new_display</name><operator>.</operator><name>pixelFormat</name></name> <operator>||</operator>

<name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>luminance_peak</name></name> <operator>!=</operator> <name><name>new_display</name><operator>.</operator><name>luminance_peak</name></name> <operator>||</operator>

<name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>color</name></name> <operator>!=</operator> <name><name>new_display</name><operator>.</operator><name>color</name></name> <operator>||</operator>

<name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>transfer</name></name> <operator>!=</operator> <name><name>new_display</name><operator>.</operator><name>transfer</name></name> <operator>||</operator>

<name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>primaries</name></name> <operator>!=</operator> <name><name>new_display</name><operator>.</operator><name>primaries</name></name> <operator>||</operator>

<name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>b_full_range</name></name> <operator>!=</operator> <name><name>new_display</name><operator>.</operator><name>b_full_range</name></name> <operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>new_display</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Direct3D11CreateFormatResources</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>input_fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate format resources"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>QueryDisplayFormat</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_render_cfg_t</name></type> <name>cfg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_D3D11_OPAQUE</name></expr>:</case>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_D3D11_OPAQUE_RGBA</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_D3D11_OPAQUE_BGRA</name></expr>:</case>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_D3D11_OPAQUE_10B</name></expr>:</case>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_format</name> <init>= <expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_format</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_format</name><operator>-&gt;</operator><name>pixel_bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name><name>p_format</name><operator>-&gt;</operator><name>pixel_bits</name></name> <operator>/</operator>

<operator>(</operator><ternary><condition><expr><name><name>p_format</name><operator>-&gt;</operator><name>plane_count</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>p_format</name><operator>-&gt;</operator><name>pixel_size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>full_range</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name> <operator>||</operator>

<call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <operator>(</operator><name>libvlc_video_color_primaries_t</name><operator>)</operator> <name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>colorspace</name></name> <operator>=</operator> <operator>(</operator><name>libvlc_video_color_space_t</name><operator>)</operator> <name><name>fmt</name><operator>-&gt;</operator><name>space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <operator>(</operator><name>libvlc_video_transfer_func_t</name><operator>)</operator> <name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_video_output_cfg_t</name></type> <name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sys</name><operator>-&gt;</operator><name>updateOutputCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to set format %dx%d %d bits on output"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>UpdateDisplayFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateSize</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Detected size change %dx%d"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>QueryDisplayFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d3d11_device_lock</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdatePicQuadPosition</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>source_rect</name> <init>= <expr><block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_x_offset</name></name></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_y_offset</name></name></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>D3D11_UpdateQuadPosition</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_rect</name></expr></argument>,

<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d3d11_device_unlock</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vout_display_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>D3D11_InitShaders</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>shaders</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CommonInit</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-opaque"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>updateOutputCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-update-output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-swap"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-make-current"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sendMetadataCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-metadata"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>selectPlaneCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-select-plane"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>d3d11_decoder_device_t</name> <modifier>*</modifier></type><name>dev_sys</name> <init>= <expr><call><name>GetD3D11OpaqueContext</name><argument_list>( <argument><expr><name>context</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>dev_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>local_d3d_dev</name></name> <operator>=</operator> <call><name>D3D11_CreateDevice</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>local_d3d_dev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Could not Create the D3D11 device."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dev_sys</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>local_d3d_dev</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>dev_sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>updateOutputCb</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>CommonWindowInit</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>,

<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>projection_mode</name></name> <operator>!=</operator> <name>PROJECTION_MODE_RECTANGULAR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name> <operator>=</operator> <call><name>CreateLocalSwapchainHandle</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sys</name><operator>.</operator><name>hvideownd</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>updateOutputCb</name></name> <operator>=</operator> <name>LocalSwapchainUpdateOutput</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>=</operator> <name>LocalSwapchainSwap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name> <operator>=</operator> <name>LocalSwapchainStartEndRendering</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sendMetadataCb</name></name> <operator>=</operator> <name>LocalSwapchainSetMetadata</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>selectPlaneCb</name></name> <operator>=</operator> <name>LocalSwapchainSelectPlane</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>projection_mode</name></name> <operator>!=</operator> <name>PROJECTION_MODE_RECTANGULAR</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>sys</name><operator>.</operator><name>hvideownd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_sensors</name></name> <operator>=</operator> <call><name>HookWindowsSensors</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sys</name><operator>.</operator><name>hvideownd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Direct3D11Open</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>fmtp</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D11 could not be opened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_window_SetTitle</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>VOUT_TITLE</name> <literal type="string">" (Direct3D11 output)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D11 display adapter successfully initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>can_scale_spu</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"direct3d11-hw-blending"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pSubpictureChromas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name><operator>-&gt;</operator><name>fourcc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pSubpictureChromas</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pSubpictureChromas</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Prepare</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>Display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D11 Open Succeeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>D3D11_ReleaseShaders</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>shaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Direct3D11Close</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnhookWindowsSensors</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>p_sensors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<expr_stmt><expr><call><name>CommonWindowClean</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getZoomMatrix</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>zoom</name></decl></parameter>, <parameter><decl><type><name>FLOAT</name></type> <name><name>matrix</name><index>[<expr><specifier>static</specifier> <literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>FLOAT</name></type> <name><name>m</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,

<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,

<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,

<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><name>zoom</name></expr>, <expr><literal type="number">1.0f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getProjectionMatrix</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>sar</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fovy</name></decl></parameter>, <parameter><decl><type><name>FLOAT</name></type> <name><name>matrix</name><index>[<expr><specifier>static</specifier> <literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>zFar</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>zNear</name> <init>= <expr><literal type="number">0.01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.f</literal> <operator>/</operator> <call><name>tanf</name><argument_list>(<argument><expr><name>fovy</name> <operator>/</operator> <literal type="number">2.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>FLOAT</name></type> <name><name>m</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>f</name> <operator>/</operator> <name>sar</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><name>f</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>(</operator><name>zNear</name> <operator>+</operator> <name>zFar</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>zNear</name> <operator>-</operator> <name>zFar</name><operator>)</operator></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>zNear</name> <operator>*</operator> <name>zFar</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>zNear</name> <operator>-</operator> <name>zFar</name><operator>)</operator></expr>, <expr><literal type="number">0.f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>UpdateFOVy</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f_fovx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_sar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">2</literal> <operator>*</operator> <call><name>atanf</name><argument_list>(<argument><expr><call><name>tanf</name><argument_list>(<argument><expr><name>f_fovx</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name>f_sar</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>UpdateZ</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f_fovx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_fovy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>tan_fovx_2</name> <init>= <expr><call><name>tanf</name><argument_list>(<argument><expr><name>f_fovx</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tan_fovy_2</name> <init>= <expr><call><name>tanf</name><argument_list>(<argument><expr><name>f_fovy</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z_min</name> <init>= <expr><operator>-</operator> <name>SPHERE_RADIUS</name> <operator>/</operator> <call><name>sinf</name><argument_list>(<argument><expr><call><name>atanf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(

<argument><expr><name>tan_fovx_2</name> <operator>*</operator> <name>tan_fovx_2</name> <operator>+</operator> <name>tan_fovy_2</name> <operator>*</operator> <name>tan_fovy_2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>z_thresh</name> <init>= <expr><literal type="number">90.f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_z</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f_fovx</name> <operator>&lt;=</operator> <name>z_thresh</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name>z_min</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>FIELD_OF_VIEW_DEGREES_MAX</name> <operator>-</operator> <name>z_thresh</name><operator>)</operator> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_z</name> <operator>=</operator> <name>f</name> <operator>*</operator> <name>f_fovx</name> <operator>-</operator> <name>f</name> <operator>*</operator> <name>z_thresh</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f_z</name> <operator>&lt;</operator> <name>z_min</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_z</name> <operator>=</operator> <name>z_min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>f_z</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetQuadVSProjection</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_viewpoint_t</name> <modifier>*</modifier></type><name>p_vp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexShaderConstants</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_fovx</name> <init>= <expr><name><name>p_vp</name><operator>-&gt;</operator><name>fov</name></name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>M_PI</name> <operator>/</operator> <literal type="number">180.f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>f_fovx</name> <operator>&gt;</operator> <name>FIELD_OF_VIEW_DEGREES_MAX</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180</literal> <operator>+</operator> <literal type="number">0.001f</literal> <operator>||</operator>

<name>f_fovx</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0.001f</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_sar</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_fovy</name> <init>= <expr><call><name>UpdateFOVy</name><argument_list>(<argument><expr><name>f_fovx</name></expr></argument>, <argument><expr><name>f_sar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_z</name> <init>= <expr><call><name>UpdateZ</name><argument_list>(<argument><expr><name>f_fovx</name></expr></argument>, <argument><expr><name>f_fovy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_MAPPED_SUBRESOURCE</name></type> <name>mapped</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexShaderConstants</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_WRITE_DISCARD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VS_PROJECTION_CONST</name> <modifier>*</modifier></type><name>dst_data</name> <init>= <expr><name><name>mapped</name><operator>.</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getZoomMatrix</name><argument_list>(<argument><expr><name>SPHERE_RADIUS</name> <operator>*</operator> <name>f_z</name></expr></argument>, <argument><expr><name><name>dst_data</name><operator>-&gt;</operator><name>Zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getProjectionMatrix</name><argument_list>(<argument><expr><name>f_sar</name></expr></argument>, <argument><expr><name>f_fovy</name></expr></argument>, <argument><expr><name><name>dst_data</name><operator>-&gt;</operator><name>Projection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_viewpoint_t</name></type> <name>vp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_viewpoint_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vp</name></expr></argument>, <argument><expr><name>p_vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_viewpoint_to_4x4</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vp</name></expr></argument>, <argument><expr><name><name>dst_data</name><operator>-&gt;</operator><name>View</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexShaderConstants</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>CommonControl</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>query</name> <operator>==</operator> <name>VOUT_DISPLAY_CHANGE_VIEWPOINT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vout_display_cfg_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>pVertexShaderConstants</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetQuadVSProjection</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg</name><operator>-&gt;</operator><name>viewpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place_changed</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateSize</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place_changed</name></name> <operator>=</operator><name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>SelectRenderPlane</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plane</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>sys</name><operator>-&gt;</operator><name>selectPlaneCb</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PreparePicture</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>d3d11_device_lock</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name>DXGI_FORMAT_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>D3D11_MAPPED_SUBRESOURCE</name></type> <name>mappedResource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_mapped</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>resource</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_WRITE_DISCARD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mappedResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>resource</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>b_mapped</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingPlanes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <name><name>mappedResource</name><operator>.</operator><name>RowPitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingPlanes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <name><name>mappedResource</name><operator>.</operator><name>pData</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>b_mapped</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>stagingPlanes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>resource</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>D3D11_MAPPED_SUBRESOURCE</name></type> <name>mappedResource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>resource</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_WRITE_DISCARD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mappedResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to map the %4.4s staging picture. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>mappedResource</name><operator>.</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingPlanes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <name><name>mappedResource</name><operator>.</operator><name>RowPitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingPlanes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>stagingPlanes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>stagingPlanes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>stagingPlanes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>resource</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>ActiveD3D11PictureSys</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>legacy_shader</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>srcDesc</name></decl>,<decl><type ref="prev"/><name>texDesc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>texture</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>texture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D3D11_BOX</name></type> <name>box</name> <init>= <expr><block>{

<expr><operator>.</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>srcDesc</name><operator>.</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>texDesc</name><operator>.</operator><name>Height</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>srcDesc</name><operator>.</operator><name>Width</name></name></expr></argument>, <argument><expr><name><name>texDesc</name><operator>.</operator><name>Width</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>back</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_CopySubresourceRegion</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>resource</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>resource</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>slice_index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>texture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texDesc</name><operator>.</operator><name>BindFlags</name></name> <operator>&amp;</operator> <name>D3D11_BIND_SHADER_RESOURCE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>renderSrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_height</name></name> <operator>!=</operator> <name><name>texDesc</name><operator>.</operator><name>Height</name></name> <operator>||</operator>

<name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_width</name></name> <operator>!=</operator> <name><name>texDesc</name><operator>.</operator><name>Width</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>texture_source</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>texDesc</name><operator>.</operator><name>Height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>texture_source</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>texDesc</name><operator>.</operator><name>Width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CommonPlacePicture</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateSize</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subpicture</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>subpicture_region_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>subpicture_regions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Direct3D11MapSubpicture</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subpicture_region_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subpicture_regions</name></expr></argument>, <argument><expr><name>subpicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Direct3D11DeleteRegions</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name> <operator>=</operator> <name>subpicture_region_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregions</name></name> <operator>=</operator> <name>subpicture_regions</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>D3D11_UpdateQuadLuminanceScale</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>luminance_peak</name></name> <operator>/</operator> <call><name>GetFormatLuminance</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ID3D11ShaderResourceView</name> <modifier>*</modifier><modifier>*</modifier></type><name>renderSrc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>legacy_shader</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>renderSrc</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>renderSrc</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>picture_sys_d3d11_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>ActiveD3D11PictureSys</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>renderSrc</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>renderSrc</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>D3D11_RenderQuad</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>projection_mode</name></name> <operator>==</operator> <name>PROJECTION_MODE_RECTANGULAR</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>flatVShader</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>projectionVShader</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name>renderSrc</name></expr></argument>, <argument><expr><name>SelectRenderPlane</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subpicture</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregions</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name> <init>= <expr><operator>(</operator><name>d3d_quad_t</name> <operator>*</operator><operator>)</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3dregions</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>D3D11_RenderQuad</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>flatVShader</name></name></expr></argument>,

<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>picSys</name><operator>.</operator><name>renderSrc</name></name></expr></argument>, <argument><expr><name>SelectRenderPlane</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>prepareWait</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxWait</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_End</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Asynchronous</name><operator>*</operator><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>prepareWait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>S_FALSE</name> <operator>==</operator> <call><name>ID3D11DeviceContext_GetData</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>ID3D11Asynchronous</name><operator>*</operator><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>prepareWait</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>--</operator><name>maxWait</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SleepEx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>d3d11_device_unlock</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>,

<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d3d11_device_lock</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>sendMetadataCb</name></name> <operator>&amp;&amp;</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_video_frame_hdr10_metadata_t</name></type> <name>hdr10</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>GreenPrimary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>GreenPrimary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>BluePrimary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>BluePrimary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>RedPrimary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>RedPrimary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>MinMasteringLuminance</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>min_luminance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>MaxMasteringLuminance</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>MaxContentLightLevel</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr10</name><operator>.</operator><name>MaxFrameAverageLightLevel</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>sendMetadataCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument>, <argument><expr><name>libvlc_video_metadata_frame_hdr10</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr10</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PreparePicture</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><name>subpicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>d3d11_device_unlock</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d3d11_device_lock</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d3d11_device_unlock</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>GetDirectRenderingFormat</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_src_chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>supportFlags</name> <init>= <expr><name>D3D11_FORMAT_SUPPORT_SHADER_LOAD</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name>i_src_chroma</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>supportFlags</name> <operator>|=</operator> <name>D3D11_FORMAT_SUPPORT_DECODER_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>FindD3D11Format</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>i_src_chroma</name></expr></argument>, <argument><expr><name>D3D11_RGB_FORMAT</name><operator>|</operator><name>D3D11_YUV_FORMAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name>i_src_chroma</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>D3D11_CHROMA_GPU</name></expr> </then><else>: <expr><name>D3D11_CHROMA_CPU</name></expr></else></ternary></expr></argument>, <argument><expr><name>supportFlags</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>GetDirectDecoderFormat</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_src_chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>supportFlags</name> <init>= <expr><name>D3D11_FORMAT_SUPPORT_DECODER_OUTPUT</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FindD3D11Format</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>i_src_chroma</name></expr></argument>, <argument><expr><name>D3D11_RGB_FORMAT</name><operator>|</operator><name>D3D11_YUV_FORMAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>D3D11_CHROMA_GPU</name></expr></argument>, <argument><expr><name>supportFlags</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>GetDisplayFormatByDepth</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bit_depth</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>widthDenominator</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>heightDenominator</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>from_processor</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>rgb_yuv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>supportFlags</name> <init>= <expr><name>D3D11_FORMAT_SUPPORT_SHADER_LOAD</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>from_processor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>supportFlags</name> <operator>|=</operator> <name>D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>FindD3D11Format</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rgb_yuv</name></expr></argument>,

<argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>widthDenominator</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>heightDenominator</name><operator>+</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>D3D11_CHROMA_CPU</name></expr></argument>, <argument><expr><name>supportFlags</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>GetBlendableFormat</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_src_chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>supportFlags</name> <init>= <expr><name>D3D11_FORMAT_SUPPORT_SHADER_LOAD</name> <operator>|</operator> <name>D3D11_FORMAT_SUPPORT_BLENDABLE</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FindD3D11Format</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>i_src_chroma</name></expr></argument>, <argument><expr><name>D3D11_RGB_FORMAT</name><operator>|</operator><name>D3D11_YUV_FORMAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_CHROMA_CPU</name></expr></argument>, <argument><expr><name>supportFlags</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D11Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>SetupOutputFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<operator>&amp;&amp;</operator> <name><name>vd</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><ternary><condition><expr><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>vlc_fourcc_GetYUVFallback</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>vlc_fourcc_GetRGBFallback</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SetupOutputFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>==</operator> <name>LocalSwapchainSwap</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LocalSwapchainCleanupDevice</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>legacy_shader</name></name> <operator>&amp;&amp;</operator> <call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_width</name></name> <operator>+</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_height</name></name> <operator>+</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7F</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>!=</operator> <name>DXGI_FORMAT_R8G8B8A8_UNORM</name> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>!=</operator> <name>DXGI_FORMAT_B5G6R5_UNORM</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_width</name></name> <operator>+</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_height</name></name> <operator>+</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x01</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>texture_source</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>texture_source</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CommonPlacePicture</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>QueryDisplayFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Could not update the backbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Direct3D11CreateGenericResources</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate resources"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>==</operator> <name>LocalSwapchainSwap</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LocalSwapchainCleanupDevice</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><name>fmtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fmtp</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetupOutputFormat</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d11_video_context_t</name> <modifier>*</modifier></type><name>vtcx_sys</name> <init>= <expr><call><name>GetD3D11ContextPrivate</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vtcx_sys</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<call><name>DeviceSupportsFormat</name><argument_list>( <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name><name>vtcx_sys</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>D3D11_FORMAT_SUPPORT_SHADER_LOAD</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>output_format</name> <init>= <expr><call><name>GetRenderFormatList</name><argument_list>()</argument_list></call></expr></init></decl>;</init>

<condition><expr><name><name>output_format</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>output_format</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>output_format</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name><name>vtcx_sys</name><operator>-&gt;</operator><name>format</name></name> <operator>&amp;&amp;</operator>

<call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>output_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>=</operator> <name>output_format</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>=</operator> <call><name>GetDirectRenderingFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>decoder_format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bits_per_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>widthDenominator</name></decl>, <decl><type ref="prev"/><name>heightDenominator</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_D3D11_OPAQUE</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE</name></expr>:</case>

<expr_stmt><expr><name>bits_per_channel</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>widthDenominator</name> <operator>=</operator> <name>heightDenominator</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_D3D11_OPAQUE_RGBA</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_D3D11_OPAQUE_BGRA</name></expr>:</case>

<expr_stmt><expr><name>bits_per_channel</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>widthDenominator</name> <operator>=</operator> <name>heightDenominator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_D3D11_OPAQUE_10B</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_10B</name></expr>:</case>

<expr_stmt><expr><name>bits_per_channel</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>widthDenominator</name> <operator>=</operator> <name>heightDenominator</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_16B</name></expr>:</case>

<expr_stmt><expr><name>bits_per_channel</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>widthDenominator</name> <operator>=</operator> <name>heightDenominator</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_444</name></expr>:</case>

<expr_stmt><expr><name>bits_per_channel</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>widthDenominator</name> <operator>=</operator> <name>heightDenominator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_NVDEC_OPAQUE_444_16B</name></expr>:</case>

<expr_stmt><expr><name>bits_per_channel</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>widthDenominator</name> <operator>=</operator> <name>heightDenominator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_format</name> <init>= <expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_format</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bits_per_channel</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>widthDenominator</name> <operator>=</operator> <name>heightDenominator</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>bits_per_channel</name> <operator>=</operator> <ternary><condition><expr><name><name>p_format</name><operator>-&gt;</operator><name>pixel_bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name><name>p_format</name><operator>-&gt;</operator><name>pixel_bits</name></name> <operator>/</operator>

<operator>(</operator><ternary><condition><expr><name><name>p_format</name><operator>-&gt;</operator><name>plane_count</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>p_format</name><operator>-&gt;</operator><name>pixel_size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>widthDenominator</name> <operator>=</operator> <name>heightDenominator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_format</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>widthDenominator</name> <operator>&lt;</operator> <name><name>p_format</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>widthDenominator</name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>heightDenominator</name> <operator>&lt;</operator> <name><name>p_format</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>heightDenominator</name> <operator>=</operator> <name><name>p_format</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>( <expr><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>decoder_format</name> <operator>=</operator> <call><name>GetDirectDecoderFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>decoder_format</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_rgb</name> <init>= <expr><operator>!</operator><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>=</operator> <call><name>GetDisplayFormatByDepth</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>bits_per_channel</name></expr></argument>,

<argument><expr><name>widthDenominator</name></expr></argument>, <argument><expr><name>heightDenominator</name></expr></argument>,

<argument><expr><name>decoder_format</name><operator>!=</operator><name>NULL</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_rgb</name></expr> ?</condition><then> <expr><name>D3D11_RGB_FORMAT</name></expr> </then><else>: <expr><name>D3D11_YUV_FORMAT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>=</operator> <call><name>GetDisplayFormatByDepth</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>bits_per_channel</name></expr></argument>,

<argument><expr><name>widthDenominator</name></expr></argument>, <argument><expr><name>heightDenominator</name></expr></argument>,

<argument><expr><name>decoder_format</name><operator>!=</operator><name>NULL</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_rgb</name></expr> ?</condition><then> <expr><name>D3D11_YUV_FORMAT</name></expr> </then><else>: <expr><name>D3D11_RGB_FORMAT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>=</operator> <call><name>GetDisplayFormatByDepth</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Could not get a suitable texture pixel format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Using pixel format %s for chroma %4.4s"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <ternary><condition><expr><name>decoder_format</name></expr> ?</condition><then> <expr><name><name>decoder_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr> </then><else>: <expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name><operator>-&gt;</operator><name>fourcc</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DxgiFormatMask</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name><operator>-&gt;</operator><name>formatTexture</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>=</operator> <call><name>GetBlendableFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>VLC_CODEC_RGBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>=</operator> <call><name>GetBlendableFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>VLC_CODEC_BGRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D11Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Direct3D11DestroyResources</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>==</operator> <name>LocalSwapchainSwap</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LocalSwapchainCleanupDevice</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>local_d3d_dev</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>D3D11_ReleaseDevice</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>local_d3d_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D11 display adapter closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdatePicQuadPosition</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect_dst</name> <init>= <expr><block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>x</name></name></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>y</name></name></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>height</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>D3D11_UpdateViewport</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect_dst</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>pixelFormat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQuadVSProjection</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>viewpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"picQuad position (%.02f,%.02f) %.02fx%.02f"</literal></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>TopLeftX</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>TopLeftY</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Width</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CanUseTextureArray</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ID3D11VIDEODECODER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>vd</name></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>wddm_version</name></name></type> <name>WDDM_os</name> <init>= <expr><block>{

<expr><operator>.</operator><name>wddm</name> <operator>=</operator> <literal type="number">21</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>D3D11CheckDriverVersion</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>GPU_MANUFACTURER_AMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>WDDM_os</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"AMD driver too old, fallback to legacy shader mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>wddm_version</name></name></type> <name>WDDM_build</name> <init>= <expr><block>{

<expr><operator>.</operator><name>revision</name> <operator>=</operator> <literal type="number">162</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>D3D11CheckDriverVersion</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>GPU_MANUFACTURER_AMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>WDDM_build</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Bogus AMD driver detected, fallback to legacy shader mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>BogusZeroCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>VendorId</name></name> <operator>!=</operator> <name>GPU_MANUFACTURER_AMD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>adapterDesc</name><operator>.</operator><name>DeviceId</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x687F</literal></expr>:</case> 

<case>case <expr><literal type="number">0x6863</literal></expr>:</case> 

<case>case <expr><literal type="number">0x15DD</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wddm_version</name></name></type> <name>WDDM</name> <init>= <expr><block>{

<expr><operator>.</operator><name>revision</name> <operator>=</operator> <literal type="number">14011</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>D3D11CheckDriverVersion</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>GPU_MANUFACTURER_AMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>WDDM</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D11CreateFormatResources</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>legacy_shader</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>feature_level</name></name> <operator>&lt;</operator> <name>D3D_FEATURE_LEVEL_10_0</name> <operator>||</operator> <operator>!</operator><call><name>CanUseTextureArray</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>BogusZeroCopy</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>D3D11_CompilePixelShader</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>shaders</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>legacy_shader</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the pixel shader. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>D3D11_AllocateQuad</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>projection_mode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate quad buffers."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>source_rect</name> <init>= <expr><block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_x_offset</name></name></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_y_offset</name></name></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>D3D11_SetupQuad</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>texture_source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>source_rect</name></expr></argument>,

<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>orientation</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Could not Create the main quad picture."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>projection_mode</name></name> <operator>==</operator> <name>PROJECTION_MODE_EQUIRECTANGULAR</name> <operator>||</operator>

<name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>projection_mode</name></name> <operator>==</operator> <name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetQuadVSProjection</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>viewpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ID3D10Multithread</name> <modifier>*</modifier></type><name>pMultithread</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_QueryInterface</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D10Multithread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pMultithread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ID3D10Multithread_SetMultithreadProtected</name><argument_list>(<argument><expr><name>pMultithread</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D10Multithread_Release</name><argument_list>(<argument><expr><name>pMultithread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ID3D11VIDEODECODER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>legacy_shader</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name><name>textures</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_d3d11_opaque</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>texture_source</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name><operator>-&gt;</operator><name>fourcc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AllocateTextures</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>texture_source</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>textures</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingPlanes</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate the staging texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>D3D11_AllocateResourceView</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name><operator>.</operator><name>textureFormat</name></name></expr></argument>,

<argument><expr><name>textures</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>renderSrc</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate the staging shader view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name><operator>.</operator><name>texture</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>textures</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D11CreateGenericResources</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_QUERY_DESC</name></type> <name>query</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>query</name><operator>.</operator><name>Query</name></name> <operator>=</operator> <name>D3D11_QUERY_EVENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateQuery</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>prepareWait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ID3D11BlendState</name> <modifier>*</modifier></type><name>pSpuBlendState</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_BLEND_DESC</name></type> <name>spuBlendDesc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spuBlendDesc</name><operator>.</operator><name>RenderTarget</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BlendEnable</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuBlendDesc</name><operator>.</operator><name>RenderTarget</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>RenderTargetWriteMask</name> <operator>=</operator> <name>D3D11_COLOR_WRITE_ENABLE_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuBlendDesc</name><operator>.</operator><name>RenderTarget</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BlendOp</name> <operator>=</operator> <name>D3D11_BLEND_OP_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuBlendDesc</name><operator>.</operator><name>RenderTarget</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>SrcBlend</name> <operator>=</operator> <name>D3D11_BLEND_SRC_ALPHA</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>spuBlendDesc</name><operator>.</operator><name>RenderTarget</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>DestBlend</name> <operator>=</operator> <name>D3D11_BLEND_INV_SRC_ALPHA</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>spuBlendDesc</name><operator>.</operator><name>RenderTarget</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BlendOpAlpha</name> <operator>=</operator> <name>D3D11_BLEND_OP_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuBlendDesc</name><operator>.</operator><name>RenderTarget</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>SrcBlendAlpha</name> <operator>=</operator> <name>D3D11_BLEND_ONE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>spuBlendDesc</name><operator>.</operator><name>RenderTarget</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>DestBlendAlpha</name> <operator>=</operator> <name>D3D11_BLEND_ZERO</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateBlendState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spuBlendDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSpuBlendState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Could not create SPU blend state. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_OMSetBlendState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name>pSpuBlendState</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11BlendState_Release</name><argument_list>(<argument><expr><name>pSpuBlendState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D3D11_DEPTH_STENCIL_DESC</name></type> <name>stencilDesc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stencilDesc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stencilDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ID3D11DepthStencilState</name> <modifier>*</modifier></type><name>pDepthStencilState</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateDepthStencilState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stencilDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDepthStencilState</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ID3D11DeviceContext_OMSetDepthStencilState</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name>pDepthStencilState</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DepthStencilState_Release</name><argument_list>(<argument><expr><name>pDepthStencilState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>D3D11_CompilePixelShader</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>shaders</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>legacy_shader</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>TRANSFER_FUNC_SRGB</name></expr></argument>, <argument><expr><name>COLOR_PRIMARIES_SRGB</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>D3D11_ReleasePixelShader</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the SPU pixel shader. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>D3D11_CompileFlatVertexShader</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>shaders</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>flatVShader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the vertex input layout. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>D3D11_CompileProjectionVertexShader</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>shaders</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>projectionVShader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the projection vertex shader. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UpdatePicQuadPosition</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D11 resources created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D11DestroyResources</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>D3D11_ReleaseQuad</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>picQuad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Direct3D11DeleteRegions</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>D3D11_ReleaseQuad</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseD3D11PictureSys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>stagingSys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>D3D11_ReleaseVertexShader</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>flatVShader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>D3D11_ReleaseVertexShader</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>projectionVShader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>prepareWait</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Query_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>prepareWait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>prepareWait</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D11 resources destroyed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D11DeleteRegions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>region</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>region</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>region</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyPictureQuad</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>D3D11_ReleaseQuad</name><argument_list>( <argument><expr><operator>(</operator><name>d3d_quad_t</name> <operator>*</operator><operator>)</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D11MapSubpicture</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>subpicture_region_count</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>region</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_MAPPED_SUBRESOURCE</name></type> <name>mappedResource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpicture</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>region</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>picture_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>region</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>subpicture_region_count</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpicture</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>||</operator> <operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregions</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>d3d_quad_t</name> <operator>*</operator><operator>)</operator> <name><name>cache</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator><operator>-&gt;</operator><name><name>picSys</name><operator>.</operator><name>texture</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>d3d_quad_t</name> <operator>*</operator><operator>)</operator> <name><name>cache</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator><operator>-&gt;</operator><name><name>picSys</name><operator>.</operator><name>texture</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texDesc</name><operator>.</operator><name>Format</name></name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>&amp;&amp;</operator>

<name><name>texDesc</name><operator>.</operator><name>Width</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_width</name></name> <operator>&amp;&amp;</operator>

<name><name>texDesc</name><operator>.</operator><name>Height</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3dregions</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>RECT</name></type> <name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_x_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>quad_picture</name> <init>= <expr><operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>quad_picture</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>d3dquad</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d3dquad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>d3dquad</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AllocateTextures</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>d3dquad</name><operator>-&gt;</operator><name>picSys</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate %dx%d texture for OSD"</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>d3dquad</name><operator>-&gt;</operator><name>picSys</name><operator>.</operator><name>texture</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name><name>d3dquad</name><operator>-&gt;</operator><name>picSys</name><operator>.</operator><name>texture</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d3dquad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>D3D11_AllocateResourceView</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name></name></expr></argument>,

<argument><expr><name><name>d3dquad</name><operator>-&gt;</operator><name>picSys</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>d3dquad</name><operator>-&gt;</operator><name>picSys</name><operator>.</operator><name>renderSrc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create %dx%d shader view for OSD"</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d3dquad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d3dquad</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dquad</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dquad</name><operator>-&gt;</operator><name>textureFormat</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>textureFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>D3D11_AllocateQuad</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>PROJECTION_MODE_RECTANGULAR</name></expr></argument>, <argument><expr><name>d3dquad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate %dx%d quad for OSD"</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d3dquad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>D3D11_SetupQuad</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>d3dquad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>,

<argument><expr><name>ORIENT_NORMAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to setup %dx%d quad for OSD"</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d3dquad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>picres</name> <init>= <expr><block>{

<expr><operator>.</operator><name>p_sys</name> <operator>=</operator> <operator>(</operator><name>picture_sys_d3d11_t</name> <operator>*</operator><operator>)</operator> <name>d3dquad</name></expr>,

<expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>DestroyPictureQuad</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>picture_NewFromResource</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>picres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create %dx%d picture for OSD"</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>D3D11_ReleaseQuad</name><argument_list>(<argument><expr><name>d3dquad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>quad_picture</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>d3dpixelShader</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>d3dquad</name><operator>-&gt;</operator><name>d3dpixelShader</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>regionQuad</name><operator>.</operator><name>d3dpixelShader</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11PixelShader_AddRef</name><argument_list>(<argument><expr><name><name>d3dquad</name><operator>-&gt;</operator><name>d3dpixelShader</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>D3D11_UpdateQuadPosition</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><operator>(</operator><name>d3d_quad_t</name> <operator>*</operator><operator>)</operator> <name><name>quad_picture</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>ORIENT_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>d3d_quad_t</name> <operator>*</operator><operator>)</operator> <name><name>quad_picture</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator><operator>-&gt;</operator><name><name>picSys</name><operator>.</operator><name>resource</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_WRITE_DISCARD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mappedResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>picture_UpdatePlanes</name><argument_list>(<argument><expr><name>quad_picture</name></expr></argument>, <argument><expr><name><name>mappedResource</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>mappedResource</name><operator>.</operator><name>RowPitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to set the buffer on the SPU picture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>d3d_quad_t</name> <operator>*</operator><operator>)</operator> <name><name>quad_picture</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator><operator>-&gt;</operator><name><name>picSys</name><operator>.</operator><name>resource</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>quad_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>quad_picture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>(<argument><expr><name>quad_picture</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>d3d_quad_t</name> <operator>*</operator><operator>)</operator> <name><name>quad_picture</name><operator>-&gt;</operator><name>p_sys</name></name><operator>)</operator><operator>-&gt;</operator><name><name>picSys</name><operator>.</operator><name>resource</name><index>[<expr><name>KNOWN_DXGI_INDEX</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to map the SPU texture (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>quad_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>quad_picture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name> <init>= <expr><operator>(</operator><name>d3d_quad_t</name> <operator>*</operator><operator>)</operator> <name><name>quad_picture</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>spuViewport</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>i_x</name></name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>i_y</name></name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>i_x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>zoom_h</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_h</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <name><name>spuViewport</name><operator>.</operator><name>left</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_h</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_h</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <name><name>spuViewport</name><operator>.</operator><name>right</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_h</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_h</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>zoom_v</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_v</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <name><name>spuViewport</name><operator>.</operator><name>top</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_v</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_v</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <name><name>spuViewport</name><operator>.</operator><name>bottom</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_v</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>r</name><operator>-&gt;</operator><name>zoom_v</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>left</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>right</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>top</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spuViewport</name><operator>.</operator><name>bottom</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>D3D11_UpdateViewport</name><argument_list>( <argument><expr><name>quad</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spuViewport</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>pixelFormat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>D3D11_UpdateQuadOpacity</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d_dev</name></name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>/</operator> <literal type="number">255.0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
