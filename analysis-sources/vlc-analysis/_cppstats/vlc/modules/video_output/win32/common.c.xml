<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\win32\common.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shobjidl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/copy.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>CommonInit</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>display_win32_area_t</name> <modifier>*</modifier></type><name>area</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>vdcfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>place_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name></name> <operator>=</operator> <operator>*</operator><name>vdcfg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>texture_source</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"disable-screensaver"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name> <operator>|</operator> <name>VLC_VAR_DOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CommonChangeThumbnailClip</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vout_display_sys_win32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>CommonWindowInit</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>display_win32_area_t</name> <modifier>*</modifier></type><name>area</name></decl></parameter>,

<parameter><decl><type><name>vout_display_sys_win32_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>projection_gestures</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name><operator>.</operator><name>window</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DXGIDEBUG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dxgidebug_dll</name></name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"DXGIDEBUG.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hvideownd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hparent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <call><name>EventThreadCreate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>event_cfg_t</name></type> <name>cfg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>area</name><operator>-&gt;</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>is_projected</name></name> <operator>=</operator> <name>projection_gestures</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>event_hwnd_t</name></type> <name>hwnd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EventThreadStart</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hparent</name></name> <operator>=</operator> <name><name>hwnd</name><operator>.</operator><name>hparent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hvideownd</name></name> <operator>=</operator> <name><name>hwnd</name><operator>.</operator><name>hvideownd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CommonPlacePicture</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>CommonPlacePicture</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>display_win32_area_t</name> <modifier>*</modifier></type><name>area</name></decl></parameter>, <parameter><decl><type><name>vout_display_sys_win32_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_cfg_t</name></type> <name>place_cfg</name> <init>= <expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MODULE_NAME_IS_glwin32</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>place_cfg</name><operator>.</operator><name>align</name><operator>.</operator><name>vertical</name></name> <operator>==</operator> <name>VLC_VIDEO_ALIGN_TOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>place_cfg</name><operator>.</operator><name>align</name><operator>.</operator><name>vertical</name></name> <operator>=</operator> <name>VLC_VIDEO_ALIGN_BOTTOM</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>place_cfg</name><operator>.</operator><name>align</name><operator>.</operator><name>vertical</name></name> <operator>==</operator> <name>VLC_VIDEO_ALIGN_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>place_cfg</name><operator>.</operator><name>align</name><operator>.</operator><name>vertical</name></name> <operator>=</operator> <name>VLC_VIDEO_ALIGN_TOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>before_place</name> <init>= <expr><name><name>area</name><operator>-&gt;</operator><name>place</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>area</name><operator>-&gt;</operator><name>place</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>area</name><operator>-&gt;</operator><name>texture_source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>place_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vout_display_PlaceEquals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>before_place</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>area</name><operator>-&gt;</operator><name>place</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>place_changed</name></name> <operator>|=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"UpdateRects source offset: %i,%i visible: %ix%i decoded: %ix%i"</literal></expr></argument>,

<argument><expr><name><name>area</name><operator>-&gt;</operator><name>texture_source</name><operator>.</operator><name>i_x_offset</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>-&gt;</operator><name>texture_source</name><operator>.</operator><name>i_y_offset</name></name></expr></argument>,

<argument><expr><name><name>area</name><operator>-&gt;</operator><name>texture_source</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>-&gt;</operator><name>texture_source</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>area</name><operator>-&gt;</operator><name>texture_source</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>-&gt;</operator><name>texture_source</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"UpdateRects image_dst coords: %i,%i %ix%i"</literal></expr></argument>,

<argument><expr><name><name>area</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>event</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CommonChangeThumbnailClip</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<function><type><name>void</name></type> <name>CommonWindowClean</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>vout_display_sys_win32_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CommonChangeThumbnailClip</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EventThreadStop</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EventThreadDestroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CommonChangeThumbnailClip</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>vout_display_sys_win32_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>show</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSVERSIONINFO</name></type> <name>winVer</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>winVer</name><operator>.</operator><name>dwOSVersionInfoSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSVERSIONINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetVersionEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winVer</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>winVer</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>CoInitializeEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>S_OK</name> <operator>==</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_TaskbarList</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_ITaskbarList3</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ITaskbarList3</name> <modifier>*</modifier></type><name>taskbl</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>taskbl</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>HrInit</name></name><argument_list>(<argument><expr><name>taskbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hroot</name> <init>= <expr><call><name>GetAncestor</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument>, <argument><expr><name>GA_ROOT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>video</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>show</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hparent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>POINT</name></type> <name>client</name> <init>= <expr><block>{<expr><name><name>video</name><operator>.</operator><name>left</name></name></expr>, <expr><name><name>video</name><operator>.</operator><name>top</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ScreenToClient</name><argument_list>(<argument><expr><name>hroot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>client</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name> <init>= <expr><call><name>RECTWidth</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name> <init>= <expr><call><name>RECTHeight</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>video</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>client</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>client</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>video</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>video</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>taskbl</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>SetThumbnailClip</name></name><argument_list>(<argument><expr><name>taskbl</name></expr></argument>, <argument><expr><name>hroot</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>show</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>video</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"SetThumbNailClip failed: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>taskbl</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>taskbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type> <name>CommonControl</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>display_win32_area_t</name> <modifier>*</modifier></type><name>area</name></decl></parameter>, <parameter><decl><type><name>vout_display_sys_win32_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_FILLED</name></expr>:</case> 

<case>case <expr><name>VOUT_DISPLAY_CHANGE_ZOOM</name></expr>:</case> 

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_ASPECT</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_CROP</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name></name> <operator>=</operator> <operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vout_display_cfg_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CommonPlacePicture</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_SIZE</name></expr>:</case> 

<block>{<block_content> 

<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name></name> <operator>=</operator> <operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vout_display_cfg_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>event</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>clientRect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hparent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clientRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>RECTWidth</name><argument_list>(<argument><expr><name>clientRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>RECTHeight</name><argument_list>(<argument><expr><name>clientRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hvideownd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>area</name><operator>-&gt;</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>SWP_NOZORDER</name><operator>|</operator><name>SWP_NOMOVE</name><operator>|</operator><name>SWP_NOACTIVATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>CommonPlacePicture</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VOUT_DISPLAY_RESET_PICTURES</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
