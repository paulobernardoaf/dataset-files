<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\win32\d3d11_quad.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_WIN32_WINNT</name> <operator>&lt;</operator> <literal type="number">0x0601</literal></expr></cpp:if> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WIN32_WINNT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0601</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d11_quad.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPHERE_SLICES</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nbLatBands</name></cpp:macro> <cpp:value>SPHERE_SLICES</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nbLonBands</name></cpp:macro> <cpp:value>SPHERE_SLICES</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>D3D11_RenderQuad</name><parameter_list>(<parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>, <parameter><decl><type><name>d3d_vshader_t</name> <modifier>*</modifier></type><name>vsshader</name></decl></parameter>,

<parameter><decl><type><name>ID3D11ShaderResourceView</name> <modifier>*</modifier></type><name><name>resourceView</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>d3d11_select_plane_t</name></type> <name>selectPlane</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>selectOpaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_IASetPrimitiveTopology</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name>D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_IASetInputLayout</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>vsshader</name><operator>-&gt;</operator><name>layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_IASetVertexBuffers</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>vertexStride</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_IASetIndexBuffer</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pIndexBuffer</name></name></expr></argument>, <argument><expr><name>DXGI_FORMAT_R16_UINT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexShaderConstants</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ID3D11DeviceContext_VSSetConstantBuffers</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexShaderConstants</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_VSSetShader</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>vsshader</name><operator>-&gt;</operator><name>shader</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>d3dsampState</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ID3D11DeviceContext_PSSetSamplers</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>quad</name><operator>-&gt;</operator><name>d3dsampState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_PSSetConstantBuffers</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>resourceCount</name></name> <operator>&lt;=</operator> <name>D3D11_MAX_SHADER_VIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_PSSetShaderResources</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>quad</name><operator>-&gt;</operator><name>resourceCount</name></name></expr></argument>, <argument><expr><name>resourceView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>quad</name><operator>-&gt;</operator><name>d3dpixelShader</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>selectPlane</name><argument_list>(<argument><expr><name>selectOpaque</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_PSSetShader</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>quad</name><operator>-&gt;</operator><name>d3dpixelShader</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_RSSetViewports</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_DrawIndexed</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><name><name>quad</name><operator>-&gt;</operator><name>indexCount</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>ID3D11ShaderResourceView</name> <modifier>*</modifier></type><name><name>reset</name><index>[<expr><name>D3D11_MAX_SHADER_VIEW</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_PSSetShaderResources</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>quad</name><operator>-&gt;</operator><name>resourceCount</name></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>AllocQuadVertices</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>, <parameter><decl><type><name>video_projection_mode_t</name></type> <name>projection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>projection</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>PROJECTION_MODE_RECTANGULAR</name></expr>:</case>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>vertexCount</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>indexCount</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PROJECTION_MODE_EQUIRECTANGULAR</name></expr>:</case>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>vertexCount</name></name> <operator>=</operator> <operator>(</operator><name>SPHERE_SLICES</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>SPHERE_SLICES</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>indexCount</name></name> <operator>=</operator> <name>nbLatBands</name> <operator>*</operator> <name>nbLonBands</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name></expr>:</case>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>vertexCount</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>indexCount</name></name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Projection mode %d not handled"</literal></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>vertexStride</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>d3d_vertex_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D3D11_BUFFER_DESC</name></type> <name>bd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <name>D3D11_USAGE_DYNAMIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>ByteWidth</name></name> <operator>=</operator> <name><name>quad</name><operator>-&gt;</operator><name>vertexStride</name></name> <operator>*</operator> <name><name>quad</name><operator>-&gt;</operator><name>vertexCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>BindFlags</name></name> <operator>=</operator> <name>D3D11_BIND_VERTEX_BUFFER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>CPUAccessFlags</name></name> <operator>=</operator> <name>D3D11_CPU_ACCESS_WRITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateBuffer</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Failed to create vertex buffer. (hr=%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3D11_BUFFER_DESC</name></type> <name>quadDesc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>Usage</name> <operator>=</operator> <name>D3D11_USAGE_DYNAMIC</name></expr>,

<expr><operator>.</operator><name>ByteWidth</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WORD</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>quad</name><operator>-&gt;</operator><name>indexCount</name></name></expr>,

<expr><operator>.</operator><name>BindFlags</name> <operator>=</operator> <name>D3D11_BIND_INDEX_BUFFER</name></expr>,

<expr><operator>.</operator><name>CPUAccessFlags</name> <operator>=</operator> <name>D3D11_CPU_ACCESS_WRITE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateBuffer</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>quadDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>pIndexBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Could not create the quad indices. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Buffer_Release</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Buffer_Release</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pIndexBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>pIndexBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D11_ReleaseQuad</name><parameter_list>(<parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>PS_CONST_LUMI_BOUNDS</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Buffer_Release</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>PS_CONST_LUMI_BOUNDS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>PS_CONST_LUMI_BOUNDS</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>PS_CONST_COLORSPACE</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Buffer_Release</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>PS_CONST_COLORSPACE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>PS_CONST_COLORSPACE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Buffer_Release</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>pIndexBuffer</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Buffer_Release</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pIndexBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>pIndexBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexShaderConstants</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Buffer_Release</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexShaderConstants</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexShaderConstants</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>D3D11_ReleasePixelShader</name><argument_list>(<argument><expr><name>quad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>d3dsampState</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ID3D11SamplerState_Release</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>d3dsampState</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>d3dsampState</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ReleaseD3D11PictureSys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>picSys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>orientationVertexOrder</name><parameter_list>(<parameter><decl><type><name>video_orientation_t</name></type> <name>orientation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>vertex_order</name><index>[<expr><specifier>static</specifier> <literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>orientation</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ORIENT_ROTATED_90</name></expr>:</case>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_ROTATED_270</name></expr>:</case>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_ROTATED_180</name></expr>:</case>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_TRANSPOSED</name></expr>:</case>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_HFLIPPED</name></expr>:</case>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_VFLIPPED</name></expr>:</case>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_ANTI_TRANSPOSED</name></expr>:</case> 

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupQuadFlat</name><parameter_list>(<parameter><decl><type><name>d3d_vertex_t</name> <modifier>*</modifier></type><name>dst_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>,

<parameter><decl><type><name>WORD</name> <modifier>*</modifier></type><name>triangle_pos</name></decl></parameter>, <parameter><decl><type><name>video_orientation_t</name></type> <name>orientation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>src_width</name> <init>= <expr><name><name>quad</name><operator>-&gt;</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>src_height</name> <init>= <expr><name><name>quad</name><operator>-&gt;</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>MidX</name></decl>,<decl><type ref="prev"/><name>MidY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>orientation</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ORIENT_ROTATED_90</name></expr>:</case> 

<expr_stmt><expr><name>MidY</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>MidX</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>bottom</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>MidY</name> <operator>/</operator> <operator>(</operator><name>MidY</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>src_height</name> <operator>-</operator> <name>MidX</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name>src_height</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <name>MidX</name> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <operator>(</operator><name>src_width</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_ROTATED_180</name></expr>:</case> 

<expr_stmt><expr><name>MidY</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>bottom</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>MidX</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name>src_height</name> <operator>-</operator> <name>MidY</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name>MidY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <operator>-</operator><name>MidY</name> <operator>/</operator> <operator>(</operator><name>MidY</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><name>MidX</name> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name>src_width</name> <operator>-</operator> <name>MidX</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name>MidX</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_ROTATED_270</name></expr>:</case> 

<expr_stmt><expr><name>MidY</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>MidX</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>bottom</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name>src_width</name> <operator>-</operator> <name>MidX</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name>MidX</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <operator>-</operator><name>MidY</name> <operator>/</operator> <operator>(</operator><name>MidY</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><name>MidX</name> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name>src_height</name> <operator>-</operator> <name>MidY</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name>MidY</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_ANTI_TRANSPOSED</name></expr>:</case>

<expr_stmt><expr><name>MidY</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>MidX</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>bottom</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name>src_width</name> <operator>-</operator> <name>MidX</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name>MidX</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <operator>-</operator><name>MidY</name> <operator>/</operator> <operator>(</operator><name>MidY</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>src_height</name> <operator>-</operator> <name>MidY</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name>MidY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <name>MidX</name> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_TRANSPOSED</name></expr>:</case>

<expr_stmt><expr><name>MidY</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>MidX</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>bottom</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name>src_width</name> <operator>-</operator> <name>MidX</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name>MidX</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <operator>-</operator><name>MidY</name> <operator>/</operator> <operator>(</operator><name>MidY</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><name>MidX</name> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name>src_height</name> <operator>-</operator> <name>MidY</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name>MidY</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_VFLIPPED</name></expr>:</case>

<expr_stmt><expr><name>MidY</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>bottom</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>MidX</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name>src_height</name> <operator>-</operator> <name>MidY</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name>MidY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <operator>-</operator><name>MidY</name> <operator>/</operator> <operator>(</operator><name>MidY</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><name>MidX</name> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name>src_width</name> <operator>-</operator> <name>MidX</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name>MidX</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_HFLIPPED</name></expr>:</case>

<expr_stmt><expr><name>MidY</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>bottom</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>MidX</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>MidY</name> <operator>/</operator> <operator>(</operator><name>MidY</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>src_height</name> <operator>-</operator> <name>MidY</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name>MidY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>src_width</name> <operator>-</operator> <name>MidX</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name>MidX</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <name>MidX</name> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_NORMAL</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name>MidY</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>bottom</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>MidX</name> <operator>=</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>output</name><operator>-&gt;</operator><name>right</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>MidY</name> <operator>/</operator> <operator>(</operator><name>MidY</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>src_height</name> <operator>-</operator> <name>MidY</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name>MidY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><name>MidX</name> <operator>/</operator> <operator>(</operator><name>MidX</name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name>src_width</name> <operator>-</operator> <name>MidX</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name>MidX</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>vertices_coords</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>left</name></expr>, <expr><name>bottom</name></expr> }</block></expr>,

<expr><block>{ <expr><name>right</name></expr>, <expr><name>bottom</name></expr> }</block></expr>,

<expr><block>{ <expr><name>right</name></expr>, <expr><name>top</name></expr> }</block></expr>,

<expr><block>{ <expr><name>left</name></expr>, <expr><name>top</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>vertex_order</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>orientationVertexOrder</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>vertex_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>vertices_coords</name><index>[<expr><name><name>vertex_order</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>vertices_coords</name><index>[<expr><name><name>vertex_order</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>orientation</name> <operator>==</operator> <name>ORIENT_TOP_RIGHT</name> <operator>||</operator> <name>orientation</name> <operator>==</operator> <name>ORIENT_BOTTOM_LEFT</name>

<operator>||</operator> <name>orientation</name> <operator>==</operator> <name>ORIENT_LEFT_TOP</name> <operator>||</operator> <name>orientation</name> <operator>==</operator> <name>ORIENT_RIGHT_BOTTOM</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupQuadSphere</name><parameter_list>(<parameter><decl><type><name>d3d_vertex_t</name> <modifier>*</modifier></type><name>dst_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>, <parameter><decl><type><name>WORD</name> <modifier>*</modifier></type><name>triangle_pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scaleX</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>RECTWidth</name><argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name><name>quad</name><operator>-&gt;</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scaleY</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name>RECTHeight</name><argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name><name>quad</name><operator>-&gt;</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>lat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lat</name> <operator>&lt;=</operator> <name>nbLatBands</name></expr>;</condition> <incr><expr><name>lat</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>theta</name> <init>= <expr><name>lat</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>/</operator> <name>nbLatBands</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sinTheta</name></decl>, <decl><type ref="prev"/><name>cosTheta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sincosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sinTheta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cosTheta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>lon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lon</name> <operator>&lt;=</operator> <name>nbLonBands</name></expr>;</condition> <incr><expr><name>lon</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>phi</name> <init>= <expr><name>lon</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>M_PI</name> <operator>/</operator> <name>nbLonBands</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sinPhi</name></decl>, <decl><type ref="prev"/><name>cosPhi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sincosf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sinPhi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cosPhi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name>cosPhi</name> <operator>*</operator> <name>sinTheta</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name>cosTheta</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name>sinPhi</name> <operator>*</operator> <name>sinTheta</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off1</name> <init>= <expr><name>lat</name> <operator>*</operator> <operator>(</operator><name>nbLonBands</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>lon</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>off1</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>SPHERE_RADIUS</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>off1</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>SPHERE_RADIUS</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>off1</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>SPHERE_RADIUS</name> <operator>*</operator> <name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>off1</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>scaleX</name> <operator>*</operator> <name>lon</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>nbLonBands</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>off1</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>scaleY</name> <operator>*</operator> <name>lat</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>nbLatBands</name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>lat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lat</name> <operator>&lt;</operator> <name>nbLatBands</name></expr>;</condition> <incr><expr><name>lat</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>lon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lon</name> <operator>&lt;</operator> <name>nbLonBands</name></expr>;</condition> <incr><expr><name>lon</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>first</name> <init>= <expr><operator>(</operator><name>lat</name> <operator>*</operator> <operator>(</operator><name>nbLonBands</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>lon</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>second</name> <init>= <expr><name>first</name> <operator>+</operator> <name>nbLonBands</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>lat</name> <operator>*</operator> <name>nbLatBands</name> <operator>+</operator> <name>lon</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>first</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>second</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>second</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>first</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangle_pos</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>second</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupQuadCube</name><parameter_list>(<parameter><decl><type><name>d3d_vertex_t</name> <modifier>*</modifier></type><name>dst_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>, <parameter><decl><type><name>WORD</name> <modifier>*</modifier></type><name>triangle_pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>coord</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, 

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, 

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, 

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, 

<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, 

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, 

<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,

<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scaleX</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator> <operator>/</operator> <name><name>quad</name><operator>-&gt;</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scaleY</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name><name>output</name><operator>-&gt;</operator><name>top</name></name><operator>)</operator> <operator>/</operator> <name><name>quad</name><operator>-&gt;</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>col</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.f</literal></expr>, <expr><name>scaleX</name> <operator>/</operator> <literal type="number">3</literal></expr>, <expr><name>scaleX</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal></expr>, <expr><name>scaleX</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>row</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.f</literal></expr>, <expr><name>scaleY</name> <operator>/</operator> <literal type="number">2</literal></expr>, <expr><name>scaleY</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>tex</name><index>[]</index></name> <init>= <expr><block>{

<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, 

<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, 

<expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, 

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, 

<expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, 

<expr><name><name>col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, 

<expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>, <expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_nbVertices</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>coord</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>i_nbVertices</name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>coord</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>v</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>coord</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>coord</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>tex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>tex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>WORD</name></type> <name><name>ind</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, 

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, 

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, 

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, 

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr>, 

<expr><literal type="number">22</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>triangle_pos</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ind</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D3D11_UpdateQuadPosition</name></cpp:undef>

<function><type><name>bool</name></type> <name>D3D11_UpdateQuadPosition</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>video_orientation_t</name></type> <name>orientation</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3D11_MAPPED_SUBRESOURCE</name></type> <name>mappedResource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d_vertex_t</name> <modifier>*</modifier></type><name>dst_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_WRITE_DISCARD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mappedResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Failed to lock the vertex buffer (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <name><name>mappedResource</name><operator>.</operator><name>pData</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>quad</name><operator>-&gt;</operator><name>pIndexBuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_WRITE_DISCARD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mappedResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Failed to lock the index buffer (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>projection</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>PROJECTION_MODE_RECTANGULAR</name></expr>:</case>

<expr_stmt><expr><call><name>SetupQuadFlat</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name><name>mappedResource</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PROJECTION_MODE_EQUIRECTANGULAR</name></expr>:</case>

<expr_stmt><expr><call><name>SetupQuadSphere</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name><name>mappedResource</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name></expr>:</case>

<expr_stmt><expr><call><name>SetupQuadCube</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name><name>mappedResource</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Projection mode %d not handled"</literal></expr></argument>, <argument><expr><name><name>quad</name><operator>-&gt;</operator><name>projection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>quad</name><operator>-&gt;</operator><name>pIndexBuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexBuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ShaderUpdateConstants</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>new_buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>D3D11_MAPPED_SUBRESOURCE</name></type> <name>mappedResource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_WRITE_DISCARD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mappedResource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Failed to lock the picture shader constants (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>PS_CONST_LUMI_BOUNDS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mappedResource</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name>new_buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PS_CONSTANT_BUFFER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mappedResource</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name>new_buf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PS_COLOR_TRANSFORM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3dcontext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D3D11_UpdateQuadOpacity</name></cpp:undef>

<function><type><name>void</name></type> <name>D3D11_UpdateQuadOpacity</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>opacity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>Opacity</name></name> <operator>==</operator> <name>opacity</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>old</name> <init>= <expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>Opacity</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>Opacity</name></name> <operator>=</operator> <name>opacity</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ShaderUpdateConstants</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>d3d_dev</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name>PS_CONST_LUMI_BOUNDS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>Opacity</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D3D11_UpdateQuadLuminanceScale</name></cpp:undef>

<function><type><name>void</name></type> <name>D3D11_UpdateQuadLuminanceScale</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>luminanceScale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>LuminanceScale</name></name> <operator>==</operator> <name>luminanceScale</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>old</name> <init>= <expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>LuminanceScale</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>LuminanceScale</name></name> <operator>=</operator> <name>luminanceScale</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ShaderUpdateConstants</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>d3d_dev</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name>PS_CONST_LUMI_BOUNDS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>LuminanceScale</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D3D11_AllocateQuad</name></cpp:undef>

<function><type><name>int</name></type> <name>D3D11_AllocateQuad</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>,

<parameter><decl><type><name>video_projection_mode_t</name></type> <name>projection</name></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PS_CONSTANT_BUFFER</name></expr></argument>)</argument_list></sizeof><operator>%</operator><literal type="number">16</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="string">"Constant buffers require 16-byte alignment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D3D11_BUFFER_DESC</name></type> <name>constantDesc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>Usage</name> <operator>=</operator> <name>D3D11_USAGE_DYNAMIC</name></expr>,

<expr><operator>.</operator><name>ByteWidth</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PS_CONSTANT_BUFFER</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>BindFlags</name> <operator>=</operator> <name>D3D11_BIND_CONSTANT_BUFFER</name></expr>,

<expr><operator>.</operator><name>CPUAccessFlags</name> <operator>=</operator> <name>D3D11_CPU_ACCESS_WRITE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateBuffer</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>constantDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>PS_CONST_LUMI_BOUNDS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Could not create the pixel shader constant buffer. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PS_COLOR_TRANSFORM</name></expr></argument>)</argument_list></sizeof><operator>%</operator><literal type="number">16</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="string">"Constant buffers require 16-byte alignment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constantDesc</name><operator>.</operator><name>ByteWidth</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PS_COLOR_TRANSFORM</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateBuffer</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>constantDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>pPixelShaderConstants</name><index>[<expr><name>PS_CONST_COLORSPACE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Could not create the pixel shader colorspace buffer. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>projection</name> <operator>==</operator> <name>PROJECTION_MODE_EQUIRECTANGULAR</name> <operator>||</operator> <name>projection</name> <operator>==</operator> <name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VS_PROJECTION_CONST</name></expr></argument>)</argument_list></sizeof><operator>%</operator><literal type="number">16</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="string">"Constant buffers require 16-byte alignment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constantDesc</name><operator>.</operator><name>ByteWidth</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VS_PROJECTION_CONST</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateBuffer</name><argument_list>(<argument><expr><name><name>d3d_dev</name><operator>-&gt;</operator><name>d3ddevice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>constantDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>pVertexShaderConstants</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Could not create the vertex shader constant buffer. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocQuadVertices</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>d3d_dev</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>projection</name></name> <operator>=</operator> <name>projection</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>D3D11_ReleaseQuad</name><argument_list>(<argument><expr><name>quad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>xy_primary</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>cie1931_primaries</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>xy_primary</name></name></type> <name>red</name></decl>, <decl><type ref="prev"/><name>green</name></decl>, <decl><type ref="prev"/><name>blue</name></decl>, <decl><type ref="prev"/><name>white</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>cie1931_primaries</name></name></type> <name><name>STANDARD_PRIMARIES</name><index>[]</index></name> <init>= <expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIE_D65</name></cpp:macro> <cpp:value>{0.31271, 0.32902}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIE_C</name></cpp:macro> <cpp:value>{0.31006, 0.31616}</cpp:value></cpp:define>

<expr><index>[<expr><name>COLOR_PRIMARIES_BT601_525</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>red</name> <operator>=</operator> <block>{<expr><literal type="number">0.630</literal></expr>, <expr><literal type="number">0.340</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>green</name> <operator>=</operator> <block>{<expr><literal type="number">0.310</literal></expr>, <expr><literal type="number">0.595</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>blue</name> <operator>=</operator> <block>{<expr><literal type="number">0.155</literal></expr>, <expr><literal type="number">0.070</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>white</name> <operator>=</operator> <name>CIE_D65</name></expr>

}</block></expr>,

<expr><index>[<expr><name>COLOR_PRIMARIES_BT601_625</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>red</name> <operator>=</operator> <block>{<expr><literal type="number">0.640</literal></expr>, <expr><literal type="number">0.330</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>green</name> <operator>=</operator> <block>{<expr><literal type="number">0.290</literal></expr>, <expr><literal type="number">0.600</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>blue</name> <operator>=</operator> <block>{<expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>white</name> <operator>=</operator> <name>CIE_D65</name></expr>

}</block></expr>,

<expr><index>[<expr><name>COLOR_PRIMARIES_BT709</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>red</name> <operator>=</operator> <block>{<expr><literal type="number">0.640</literal></expr>, <expr><literal type="number">0.330</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>green</name> <operator>=</operator> <block>{<expr><literal type="number">0.300</literal></expr>, <expr><literal type="number">0.600</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>blue</name> <operator>=</operator> <block>{<expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>white</name> <operator>=</operator> <name>CIE_D65</name></expr>

}</block></expr>,

<expr><index>[<expr><name>COLOR_PRIMARIES_BT2020</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>red</name> <operator>=</operator> <block>{<expr><literal type="number">0.708</literal></expr>, <expr><literal type="number">0.292</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>green</name> <operator>=</operator> <block>{<expr><literal type="number">0.170</literal></expr>, <expr><literal type="number">0.797</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>blue</name> <operator>=</operator> <block>{<expr><literal type="number">0.131</literal></expr>, <expr><literal type="number">0.046</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>white</name> <operator>=</operator> <name>CIE_D65</name></expr>

}</block></expr>,

<expr><index>[<expr><name>COLOR_PRIMARIES_DCI_P3</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>red</name> <operator>=</operator> <block>{<expr><literal type="number">0.680</literal></expr>, <expr><literal type="number">0.320</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>green</name> <operator>=</operator> <block>{<expr><literal type="number">0.265</literal></expr>, <expr><literal type="number">0.690</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>blue</name> <operator>=</operator> <block>{<expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>white</name> <operator>=</operator> <name>CIE_D65</name></expr>

}</block></expr>,

<expr><index>[<expr><name>COLOR_PRIMARIES_FCC1953</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>red</name> <operator>=</operator> <block>{<expr><literal type="number">0.670</literal></expr>, <expr><literal type="number">0.330</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>green</name> <operator>=</operator> <block>{<expr><literal type="number">0.210</literal></expr>, <expr><literal type="number">0.710</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>blue</name> <operator>=</operator> <block>{<expr><literal type="number">0.140</literal></expr>, <expr><literal type="number">0.080</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>white</name> <operator>=</operator> <name>CIE_C</name></expr>

}</block></expr>,

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CIE_D65</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CIE_C</name></cpp:undef>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ChromaticAdaptation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>xy_primary</name></name> <modifier>*</modifier></type><name>src_white</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>xy_primary</name></name> <modifier>*</modifier></type><name>dst_white</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name><name>in_out</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>src_white</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>dst_white</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1e-6</literal> <operator>&amp;&amp;</operator>

<call><name>fabs</name><argument_list>(<argument><expr><name><name>src_white</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>dst_white</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1e-6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Float3x3Inverse</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name><name>in_out</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>m00</name> <init>= <expr><name><name>in_out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m01</name> <init>= <expr><name><name>in_out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m02</name> <init>= <expr><name><name>in_out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"/><name>m10</name> <init>= <expr><name><name>in_out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m11</name> <init>= <expr><name><name>in_out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m12</name> <init>= <expr><name><name>in_out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"/><name>m20</name> <init>= <expr><name><name>in_out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m21</name> <init>= <expr><name><name>in_out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m22</name> <init>= <expr><name><name>in_out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m11</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m21</name> <operator>*</operator> <name>m12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m01</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m21</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m01</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m11</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m10</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m12</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m00</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m00</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m10</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m10</name> <operator>*</operator> <name>m21</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m11</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m00</name> <operator>*</operator> <name>m21</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m01</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m00</name> <operator>*</operator> <name>m11</name> <operator>-</operator> <name>m10</name> <operator>*</operator> <name>m01</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>det</name> <init>= <expr><name>m00</name> <operator>*</operator> <name><name>in_out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>m10</name> <operator>*</operator> <name><name>in_out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>m20</name> <operator>*</operator> <name><name>in_out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>det</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_out</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>*=</operator> <name>det</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Float3x3Multiply</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name><name>m1</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>m2</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>a00</name> <init>= <expr><name><name>m1</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a01</name> <init>= <expr><name><name>m1</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a02</name> <init>= <expr><name><name>m1</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"/><name>a10</name> <init>= <expr><name><name>m1</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a11</name> <init>= <expr><name><name>m1</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a12</name> <init>= <expr><name><name>m1</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"/><name>a20</name> <init>= <expr><name><name>m1</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a21</name> <init>= <expr><name><name>m1</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a22</name> <init>= <expr><name><name>m1</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>m1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a00</name> <operator>*</operator> <name><name>m2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>a01</name> <operator>*</operator> <name><name>m2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>a02</name> <operator>*</operator> <name><name>m2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a10</name> <operator>*</operator> <name><name>m2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>a11</name> <operator>*</operator> <name><name>m2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>a12</name> <operator>*</operator> <name><name>m2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a20</name> <operator>*</operator> <name><name>m2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>a21</name> <operator>*</operator> <name><name>m2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>a22</name> <operator>*</operator> <name><name>m2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Float3Multiply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>mult</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mult</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>mult</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>mult</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetRGB2XYZMatrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cie1931_primaries</name></name> <modifier>*</modifier></type><name>primaries</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name><name>out</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>double</name></type> <name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>W</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>W_TO_S</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>=</operator> <name><name>primaries</name><operator>-&gt;</operator><name>red</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>primaries</name><operator>-&gt;</operator><name>red</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>primaries</name><operator>-&gt;</operator><name>red</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>primaries</name><operator>-&gt;</operator><name>red</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>/</operator> <name><name>primaries</name><operator>-&gt;</operator><name>red</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>=</operator> <name><name>primaries</name><operator>-&gt;</operator><name>green</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>primaries</name><operator>-&gt;</operator><name>green</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>primaries</name><operator>-&gt;</operator><name>green</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>primaries</name><operator>-&gt;</operator><name>green</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>/</operator> <name><name>primaries</name><operator>-&gt;</operator><name>green</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Z</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>=</operator> <name><name>primaries</name><operator>-&gt;</operator><name>blue</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>primaries</name><operator>-&gt;</operator><name>blue</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Z</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Z</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>primaries</name><operator>-&gt;</operator><name>blue</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>primaries</name><operator>-&gt;</operator><name>blue</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>/</operator> <name><name>primaries</name><operator>-&gt;</operator><name>blue</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W_TO_S</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><name>RED</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W_TO_S</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><name>GREEN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W_TO_S</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><name>BLUE</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W_TO_S</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>RED</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W_TO_S</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>GREEN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W_TO_S</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>BLUE</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W_TO_S</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Z</name><index>[<expr><name>RED</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W_TO_S</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Z</name><index>[<expr><name>GREEN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W_TO_S</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Z</name><index>[<expr><name>BLUE</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Float3x3Inverse</name><argument_list>(<argument><expr><name>W_TO_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>primaries</name><operator>-&gt;</operator><name>white</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>primaries</name><operator>-&gt;</operator><name>white</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>W</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>primaries</name><operator>-&gt;</operator><name>white</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>primaries</name><operator>-&gt;</operator><name>white</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>/</operator> <name><name>primaries</name><operator>-&gt;</operator><name>white</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Float3Multiply</name><argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>W_TO_S</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>*</operator> <name><name>X</name><index>[<expr><name>RED</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>*</operator> <name><name>Y</name><index>[<expr><name>RED</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>*</operator> <name><name>Z</name><index>[<expr><name>RED</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>*</operator> <name><name>X</name><index>[<expr><name>GREEN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>*</operator> <name><name>Y</name><index>[<expr><name>GREEN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>*</operator> <name><name>Z</name><index>[<expr><name>GREEN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>*</operator> <name><name>X</name><index>[<expr><name>BLUE</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>*</operator> <name><name>Y</name><index>[<expr><name>BLUE</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>*</operator> <name><name>Z</name><index>[<expr><name>BLUE</name></expr> ]</index></name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RED</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GREEN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BLUE</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetXYZ2RGBMatrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cie1931_primaries</name></name> <modifier>*</modifier></type><name>primaries</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name><name>out</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>GetRGB2XYZMatrix</name><argument_list>(<argument><expr><name>primaries</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Float3x3Inverse</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetPrimariesTransform</name><parameter_list>(<parameter><decl><type><name>FLOAT</name></type> <name><name>Primaries</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>video_color_primaries_t</name></type> <name>src</name></decl></parameter>,

<parameter><decl><type><name>video_color_primaries_t</name></type> <name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cie1931_primaries</name></name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>&amp;</operator><name><name>STANDARD_PRIMARIES</name><index>[<expr><name>src</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cie1931_primaries</name></name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><operator>&amp;</operator><name><name>STANDARD_PRIMARIES</name><index>[<expr><name>dst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>rgb2xyz</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>xyz2rgb</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetRGB2XYZMatrix</name><argument_list>(<argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ChromaticAdaptation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_src</name><operator>-&gt;</operator><name>white</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>white</name></name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetXYZ2RGBMatrix</name><argument_list>(<argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>xyz2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Float3x3Multiply</name><argument_list>(<argument><expr><name>xyz2rgb</name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Primaries</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>xyz2rgb</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>Primaries</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Primaries</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>==</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D3D11_SetupQuad</name></cpp:undef>

<function><type><name>int</name></type> <name>D3D11_SetupQuad</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d11_device_t</name> <modifier>*</modifier></type><name>d3d_dev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>display_info_t</name> <modifier>*</modifier></type><name>displayFormat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,

<parameter><decl><type><name>video_orientation_t</name></type> <name>orientation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>RGB_src_shader</name> <init>= <expr><call><name>IsRGBShader</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>textureFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>LuminanceScale</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>displayFormat</name><operator>-&gt;</operator><name>luminance_peak</name></name> <operator>/</operator> <call><name>GetFormatLuminance</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>Opacity</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>BoundaryX</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>BoundaryX</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>==</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>BoundaryY</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name><operator>.</operator><name>BoundaryY</name></name> <operator>=</operator> <operator>(</operator><name>FLOAT</name><operator>)</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ShaderUpdateConstants</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>d3d_dev</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name>PS_CONST_LUMI_BOUNDS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>quad</name><operator>-&gt;</operator><name>shaderConstants</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FLOAT</name></type> <name>itu_black_level</name> <init>= <expr><literal type="number">0.f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FLOAT</name></type> <name>itu_achromacy</name> <init>= <expr><literal type="number">0.f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>RGB_src_shader</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>quad</name><operator>-&gt;</operator><name>textureFormat</name><operator>-&gt;</operator><name>bitsPerChannel</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>itu_black_level</name> <operator>=</operator> <literal type="number">16.f</literal> <operator>/</operator> <literal type="number">255.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>itu_achromacy</name> <operator>=</operator> <literal type="number">128.f</literal> <operator>/</operator> <literal type="number">255.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><name>itu_black_level</name> <operator>=</operator> <literal type="number">64.f</literal> <operator>/</operator> <literal type="number">1023.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>itu_achromacy</name> <operator>=</operator> <literal type="number">512.f</literal> <operator>/</operator> <literal type="number">1023.f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<expr_stmt><expr><name>itu_black_level</name> <operator>=</operator> <literal type="number">256.f</literal> <operator>/</operator> <literal type="number">4095.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>itu_achromacy</name> <operator>=</operator> <literal type="number">2048.f</literal> <operator>/</operator> <literal type="number">4095.f</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>itu_black_level</name> <operator>=</operator> <literal type="number">16.f</literal> <operator>/</operator> <literal type="number">256.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>itu_achromacy</name> <operator>=</operator> <literal type="number">128.f</literal> <operator>/</operator> <literal type="number">256.f</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FLOAT</name></type> <name><name>IDENTITY_4X4</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FLOAT</name></type> <name><name>COLORSPACE_BT601_YUV_TO_FULL_RGBA</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.164383561643836f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.596026785714286f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">1.164383561643836f</literal></expr>, <expr><operator>-</operator><literal type="number">0.391762290094914f</literal></expr>, <expr><operator>-</operator><literal type="number">0.812967647237771f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">1.164383561643836f</literal></expr>, <expr><literal type="number">2.017232142857142f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FLOAT</name></type> <name><name>COLORSPACE_FULL_RGBA_TO_BT601_YUV</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.299000f</literal></expr>, <expr><literal type="number">0.587000f</literal></expr>, <expr><literal type="number">0.114000f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><operator>-</operator><literal type="number">0.168736f</literal></expr>, <expr><operator>-</operator><literal type="number">0.331264f</literal></expr>, <expr><literal type="number">0.500000f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.500000f</literal></expr>, <expr><operator>-</operator><literal type="number">0.418688f</literal></expr>, <expr><operator>-</operator><literal type="number">0.081312f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FLOAT</name></type> <name><name>COLORSPACE_BT709_YUV_TO_FULL_RGBA</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.164383561643836f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.792741071428571f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">1.164383561643836f</literal></expr>, <expr><operator>-</operator><literal type="number">0.213248614273730f</literal></expr>, <expr><operator>-</operator><literal type="number">0.532909328559444f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">1.164383561643836f</literal></expr>, <expr><literal type="number">2.112401785714286f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FLOAT</name></type> <name><name>COLORSPACE_BT2020_YUV_TO_FULL_RGBA</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.164383561643836f</literal></expr>, <expr><literal type="number">0.000000000000f</literal></expr>, <expr><literal type="number">1.678674107143f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">1.164383561643836f</literal></expr>, <expr><operator>-</operator><literal type="number">0.127007098661f</literal></expr>, <expr><operator>-</operator><literal type="number">0.440987687946f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">1.164383561643836f</literal></expr>, <expr><literal type="number">2.141772321429f</literal></expr>, <expr><literal type="number">0.000000000000f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PS_COLOR_TRANSFORM</name></type> <name>colorspace</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>colorspace</name><operator>.</operator><name>WhitePoint</name></name></expr></argument>, <argument><expr><name>IDENTITY_4X4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>colorspace</name><operator>.</operator><name>WhitePoint</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>FLOAT</name> <modifier>*</modifier></type><name>ppColorspace</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>RGB_src_shader</name> <operator>==</operator> <call><name>IsRGBShader</name><argument_list>(<argument><expr><name><name>displayFormat</name><operator>-&gt;</operator><name>pixelFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ppColorspace</name> <operator>=</operator> <name>IDENTITY_4X4</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>RGB_src_shader</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ppColorspace</name> <operator>=</operator> <name>COLORSPACE_FULL_RGBA_TO_BT601_YUV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>itu_black_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>itu_achromacy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>itu_achromacy</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>COLOR_SPACE_BT709</name></expr>:</case>

<expr_stmt><expr><name>ppColorspace</name> <operator>=</operator> <name>COLORSPACE_BT709_YUV_TO_FULL_RGBA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COLOR_SPACE_BT2020</name></expr>:</case>

<expr_stmt><expr><name>ppColorspace</name> <operator>=</operator> <name>COLORSPACE_BT2020_YUV_TO_FULL_RGBA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COLOR_SPACE_BT601</name></expr>:</case>

<expr_stmt><expr><name>ppColorspace</name> <operator>=</operator> <name>COLORSPACE_BT601_YUV_TO_FULL_RGBA</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<case>case <expr><name>COLOR_SPACE_UNDEF</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">576</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>ppColorspace</name> <operator>=</operator> <name>COLORSPACE_BT709_YUV_TO_FULL_RGBA</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ppColorspace</name> <operator>=</operator> <name>COLORSPACE_BT601_YUV_TO_FULL_RGBA</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>itu_black_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>itu_achromacy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>WhitePoint</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>itu_achromacy</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>colorspace</name><operator>.</operator><name>Colorspace</name></name></expr></argument>, <argument><expr><name>ppColorspace</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>colorspace</name><operator>.</operator><name>Colorspace</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name> <operator>!=</operator> <name><name>displayFormat</name><operator>-&gt;</operator><name>primaries</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GetPrimariesTransform</name><argument_list>(<argument><expr><name><name>colorspace</name><operator>.</operator><name>Primaries</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name></expr></argument>,

<argument><expr><name><name>displayFormat</name><operator>-&gt;</operator><name>primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ShaderUpdateConstants</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>d3d_dev</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name>PS_CONST_COLORSPACE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colorspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>D3D11_UpdateQuadPosition</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>d3d_dev</name></expr></argument>, <argument><expr><name>quad</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>D3D11_MAX_SHADER_VIEW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>MinDepth</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>MaxDepth</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>resourceCount</name></name> <operator>=</operator> <call><name>DxgiResourceCount</name><argument_list>(<argument><expr><name><name>quad</name><operator>-&gt;</operator><name>textureFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D11_UpdateViewport</name><parameter_list>(<parameter><decl><type><name>d3d_quad_t</name> <modifier>*</modifier></type><name>quad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>rect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>d3d_format_t</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LONG</name></type> <name>srcAreaWidth</name></decl>, <decl><type ref="prev"/><name>srcAreaHeight</name></decl>;</decl_stmt>

<expr_stmt><expr><name>srcAreaWidth</name> <operator>=</operator> <call><name>RECTWidth</name><argument_list>(<argument><expr><operator>*</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcAreaHeight</name> <operator>=</operator> <call><name>RECTHeight</name><argument_list>(<argument><expr><operator>*</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>TopLeftX</name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>TopLeftY</name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Width</name> <operator>=</operator> <name>srcAreaWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Height</name> <operator>=</operator> <name>srcAreaHeight</name></expr>;</expr_stmt>

<switch>switch <condition>( <expr><name><name>quad</name><operator>-&gt;</operator><name>textureFormat</name><operator>-&gt;</operator><name>formatTexture</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DXGI_FORMAT_NV12</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_P010</name></expr>:</case>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>TopLeftX</name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>left</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>TopLeftY</name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>top</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Width</name> <operator>=</operator> <name>srcAreaWidth</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Height</name> <operator>=</operator> <name>srcAreaHeight</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DXGI_FORMAT_R8G8B8A8_UNORM</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_B8G8R8A8_UNORM</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_B8G8R8X8_UNORM</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_B5G6R5_UNORM</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_R10G10B10A2_UNORM</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_R16G16B16A16_UNORM</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_YUY2</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_AYUV</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_Y210</name></expr>:</case>

<case>case <expr><name>DXGI_FORMAT_Y410</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>display</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name>DXGI_FORMAT_NV12</name> <operator>||</operator>

<name><name>display</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>==</operator> <name>DXGI_FORMAT_P010</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>TopLeftX</name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>left</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>TopLeftY</name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>top</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Width</name> <operator>=</operator> <name>srcAreaWidth</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Height</name> <operator>=</operator> <name>srcAreaHeight</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DXGI_FORMAT_UNKNOWN</name></expr>:</case>

<switch>switch <condition>( <expr><name><name>quad</name><operator>-&gt;</operator><name>textureFormat</name><operator>-&gt;</operator><name>fourcc</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_YUVA</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>display</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>!=</operator> <name>DXGI_FORMAT_NV12</name> <operator>&amp;&amp;</operator>

<name><name>display</name><operator>-&gt;</operator><name>formatTexture</name></name> <operator>!=</operator> <name>DXGI_FORMAT_P010</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>VLC_CODEC_I420_10L</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>TopLeftX</name> <operator>=</operator> <name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>TopLeftX</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>TopLeftY</name> <operator>=</operator> <name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>TopLeftY</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Width</name> <operator>=</operator> <name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Height</name> <operator>=</operator> <name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Height</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>quad</name><operator>-&gt;</operator><name>cropViewport</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
