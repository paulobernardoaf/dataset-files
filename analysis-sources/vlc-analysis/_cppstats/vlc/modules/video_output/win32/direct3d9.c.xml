<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\win32\direct3d9.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d9.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_D3DX9EFFECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3dx9effect.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/d3d9_fmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxvahd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin_shaders.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../video_chroma/copy.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESKTOP_LONGTEXT</name></cpp:macro> <cpp:value>N_("The desktop mode allows you to display the video on the desktop.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HW_BLENDING_TEXT</name></cpp:macro> <cpp:value>N_("Use hardware blending support")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HW_BLENDING_LONGTEXT</name></cpp:macro> <cpp:value>N_("Try to use hardware acceleration for subtitle/OSD blending.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HW_YUV_TEXT</name></cpp:macro> <cpp:value>N_("Use hardware YUV-&gt;RGB conversions")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HW_YUV_LONGTEXT</name></cpp:macro> <cpp:value>N_("Try to use hardware acceleration for YUV-&gt;RGB conversions. " "This option doesn't have any effect when using overlays.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_SHADER_TEXT</name></cpp:macro> <cpp:value>N_("Pixel Shader")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_SHADER_LONGTEXT</name></cpp:macro> <cpp:value>N_("Choose a pixel shader to apply.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_SHADER_FILE_TEXT</name></cpp:macro> <cpp:value>N_("Path to HLSL file")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_SHADER_FILE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Path to an HLSL file containing a single pixel shader.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECTED_SHADER_FILE</name></cpp:macro> <cpp:value>N_("HLSL File")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D9_HELP</name></cpp:macro> <cpp:value>N_("Recommended video output for Windows Vista and later versions")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"Direct3D9"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Direct3D9 video output"</literal>)</argument>)</argument_list></macro>

<macro><name>set_help</name><argument_list>(<argument>D3D9_HELP</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"direct3d9-hw-blending"</literal></argument>, <argument>true</argument>, <argument>HW_BLENDING_TEXT</argument>, <argument>HW_BLENDING_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"directx-hw-yuv"</literal></argument>, <argument>true</argument>, <argument>HW_YUV_TEXT</argument>, <argument>HW_YUV_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"direct3d9-shader"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>PIXEL_SHADER_TEXT</argument>, <argument>PIXEL_SHADER_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_loadfile</name><argument_list>(<argument><literal type="string">"direct3d9-shader-file"</literal></argument>, <argument>NULL</argument>,

<argument>PIXEL_SHADER_FILE_TEXT</argument>, <argument>PIXEL_SHADER_FILE_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"direct3d9-dxvahd"</literal></argument>, <argument>true</argument>, <argument>DXVAHD_TEXT</argument>, <argument>DXVAHD_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"direct3d9"</literal></argument>, <argument><literal type="string">"direct3d"</literal></argument>)</argument_list></macro>

<macro><name>set_callback_display</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">280</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>d3d_subpicture_chromas</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VLC_CODEC_RGBA</name></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rmask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gmask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bmask</name></decl>;</decl_stmt>

}</block></struct></type> <name>d3d9_format_t</name>;</typedef>

<struct>struct <name>vout_display_sys_t</name>

<block>{

<decl_stmt><decl><type><name>vout_display_sys_win32_t</name></type> <name>sys</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>display_win32_area_t</name></type> <name>area</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>allow_hw_yuv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>d3d9_device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>BufferFormat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hxdll</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>IDirect3DPixelShader9</name><modifier>*</modifier></type> <name>d3dx_shader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3DTexture9</name> <modifier>*</modifier></type><name>sceneTexture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3DVertexBuffer9</name> <modifier>*</modifier></type><name>sceneVertexBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>d3dregion_format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>d3dregion_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>d3d_region_t</name></name> <modifier>*</modifier></type><name>d3dregion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d9_format_t</name> <modifier>*</modifier></type><name>sw_texture_fmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>dx_render</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>reset_device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>lost_not_ready</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>clear_scene</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>outside_opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_update_output_cb</name></type> <name>updateOutputCb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_swap_cb</name></type> <name>swapCb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_makeCurrent_cb</name></type> <name>startEndRenderingCb</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>HMODULE</name></type> <name>dll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDXVAHD_VideoProcessor</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>

}</block> <decl><name>processor</name></decl>;</struct>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>FLOAT</name></type> <name>x</name></decl>,<name>y</name>,<name>z</name>;</decl_stmt> 

<decl_stmt><decl><type><name>FLOAT</name></type> <name>rhw</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FLOAT</name></type> <name>tu</name></decl>, <name>tv</name>;</decl_stmt> 

}</block></struct></type> <name>CUSTOMVERTEX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3DFVF_CUSTOMVERTEX</name></cpp:macro> <cpp:value>(D3DFVF_XYZRHW|D3DFVF_TEX1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>d3d_region_t</name> <block>{

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CUSTOMVERTEX</name></type> <name><name>vertex</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3DTexture9</name> <modifier>*</modifier></type><name>texture</name></decl>;</decl_stmt>

}</block></struct></type> <name>d3d_region_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>Direct3D9LoadShaderLibrary</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>instance</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>filename</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_snwprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"D3dx9_%d.dll"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>instance</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>instance</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>instance</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>orientationVertexOrder</name><parameter_list>(<parameter><decl><type><name>video_orientation_t</name></type> <name>orientation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>vertex_order</name><index>[<expr><specifier>static</specifier> <literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>orientation</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ORIENT_ROTATED_90</name></expr>:</case> 

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_ROTATED_270</name></expr>:</case> 

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_ROTATED_180</name></expr>:</case> 

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_TRANSPOSED</name></expr>:</case> 

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_HFLIPPED</name></expr>:</case> 

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_VFLIPPED</name></expr>:</case> 

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_ANTI_TRANSPOSED</name></expr>:</case> 

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertex_order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D9SetupVertices</name><parameter_list>(<parameter><decl><type><name>CUSTOMVERTEX</name> <modifier>*</modifier></type><name>vertices</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>full_texture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>visible_texture</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>RECT</name> <modifier>*</modifier></type><name>rect_in_display</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>,

<parameter><decl><type><name>video_orientation_t</name></type> <name>orientation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>vertices_coords</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name><name>rect_in_display</name><operator>-&gt;</operator><name>left</name></name></expr>, <expr><name><name>rect_in_display</name><operator>-&gt;</operator><name>top</name></name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>rect_in_display</name><operator>-&gt;</operator><name>right</name></name></expr>, <expr><name><name>rect_in_display</name><operator>-&gt;</operator><name>top</name></name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>rect_in_display</name><operator>-&gt;</operator><name>right</name></name></expr>, <expr><name><name>rect_in_display</name><operator>-&gt;</operator><name>bottom</name></name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>rect_in_display</name><operator>-&gt;</operator><name>left</name></name></expr>, <expr><name><name>rect_in_display</name><operator>-&gt;</operator><name>bottom</name></name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>vertex_order</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>orientationVertexOrder</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>vertex_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>vertices_coords</name><index>[<expr><name><name>vertex_order</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>vertices_coords</name><index>[<expr><name><name>vertex_order</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>float</name></type> <name>texture_right</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>visible_texture</name><operator>-&gt;</operator><name>right</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>full_texture</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>texture_left</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>visible_texture</name><operator>-&gt;</operator><name>left</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>full_texture</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>texture_top</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>visible_texture</name><operator>-&gt;</operator><name>top</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>full_texture</name><operator>-&gt;</operator><name>bottom</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>texture_bottom</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>visible_texture</name><operator>-&gt;</operator><name>bottom</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>full_texture</name><operator>-&gt;</operator><name>bottom</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tu</name> <operator>=</operator> <name>texture_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv</name> <operator>=</operator> <name>texture_top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tu</name> <operator>=</operator> <name>texture_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv</name> <operator>=</operator> <name>texture_top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>tu</name> <operator>=</operator> <name>texture_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>tv</name> <operator>=</operator> <name>texture_bottom</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>tu</name> <operator>=</operator> <name>texture_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>tv</name> <operator>=</operator> <name>texture_bottom</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rhw</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D9ImportPicture</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>,

<parameter><decl><type><name>d3d_region_t</name> <modifier>*</modifier></type><name>region</name></decl></parameter>,

<parameter><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"no surface to render?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>destination</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DTexture9_GetSurfaceLevel</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneTexture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed IDirect3DTexture9_GetSurfaceLevel: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVAHD_STREAM_DATA</name></type> <name>inputStream</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>inputStream</name><operator>.</operator><name>Enable</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inputStream</name><operator>.</operator><name>pInputSurface</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_VideoProcessBltHD</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><name>destination</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputStream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>D3DSURFACE_DESC</name></type> <name>srcDesc</name></decl>, <decl><type ref="prev"/><name>dstDesc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_GetDesc</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_GetDesc</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed VideoProcessBltHD src:%4.4s (%d) dst:%4.4s (%d) (hr=0x%lX)"</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>srcDesc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name><name>srcDesc</name><operator>.</operator><name>Format</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dstDesc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name><name>dstDesc</name><operator>.</operator><name>Format</name></name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>RECT</name></type> <name>source_visible_rect</name> <init>= <expr><block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_x_offset</name></name></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_y_offset</name></name></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>texture_visible_rect</name> <init>= <expr><block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texture_visible_rect</name><operator>.</operator><name>right</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>texture_visible_rect</name><operator>.</operator><name>right</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source_visible_rect</name><operator>.</operator><name>right</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texture_visible_rect</name><operator>.</operator><name>bottom</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>texture_visible_rect</name><operator>.</operator><name>bottom</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source_visible_rect</name><operator>.</operator><name>bottom</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_StretchRect</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_visible_rect</name></expr></argument>,

<argument><expr><name>destination</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texture_visible_rect</name></expr></argument>,

<argument><expr><name>D3DTEXF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed StretchRect: source 0x%p. (hr=0x%lX)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator><name>source</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>sceneTexture</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>texture_rect</name> <init>= <expr><block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect_in_display</name> <init>= <expr><block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>x</name></name></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>y</name></name></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>texture_visible_rect</name> <init>= <expr><block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Direct3D9SetupVertices</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>vertex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texture_rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texture_visible_rect</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rect_in_display</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D9DeleteRegions</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>d3d_region_t</name> <modifier>*</modifier></type><name>region</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>region</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDirect3DTexture9_Release</name><argument_list>(<argument><expr><name><name>region</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D9DestroyScene</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Direct3D9DeleteRegions</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>sceneVertexBuffer</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DVertexBuffer9_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneVertexBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneVertexBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>sceneTexture</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DTexture9_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneTexture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D9 scene released successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D9DestroyShaders</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3dx_shader</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DPixelShader9_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dx_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dx_shader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D9DestroyResources</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Direct3D9DestroyScene</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>dx_render</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>dx_render</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>dx_render</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Direct3D9DestroyShaders</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>UpdateOutput</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>libvlc_video_output_cfg_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_render_cfg_t</name></type> <name>cfg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_D3D9_OPAQUE</name></expr>:</case>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>:</case>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_format</name> <init>= <expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_format</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>bitdepth</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_format</name><operator>-&gt;</operator><name>pixel_bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name><name>p_format</name><operator>-&gt;</operator><name>pixel_bits</name></name> <operator>/</operator>

<operator>(</operator><ternary><condition><expr><name><name>p_format</name><operator>-&gt;</operator><name>plane_count</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>p_format</name><operator>-&gt;</operator><name>pixel_size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>full_range</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>colorspace</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>transfer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfg</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_video_output_cfg_t</name></type> <name>local_out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>&amp;</operator><name>local_out</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sys</name><operator>-&gt;</operator><name>updateOutputCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to set the external render size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D9CreateScene</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>d3ddev</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>width</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>height</name> <init>= <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>height</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_CreateTexture</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>,

<argument><expr><name>height</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>D3DUSAGE_RENDERTARGET</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>BufferFormat</name></name></expr></argument>,

<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sceneTexture</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create texture. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D created texture: %ix%i"</literal></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_CreateVertexBuffer</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CUSTOMVERTEX</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr></argument>,

<argument><expr><name>D3DUSAGE_DYNAMIC</name><operator>|</operator><name>D3DUSAGE_WRITEONLY</name></expr></argument>,

<argument><expr><name>D3DFVF_CUSTOMVERTEX</name></expr></argument>,

<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sceneVertexBuffer</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create vertex buffer. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DTexture9_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneTexture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneTexture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_SetFVF</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DFVF_CUSTOMVERTEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed SetFVF: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>clear_scene</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetSamplerState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DSAMP_ADDRESSU</name></expr></argument>, <argument><expr><name>D3DTADDRESS_CLAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetSamplerState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DSAMP_ADDRESSV</name></expr></argument>, <argument><expr><name>D3DTADDRESS_CLAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>TextureFilterCaps</name></name> <operator>&amp;</operator> <name>D3DPTFILTERCAPS_MINFLINEAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetSamplerState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DSAMP_MINFILTER</name></expr></argument>, <argument><expr><name>D3DTEXF_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetSamplerState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DSAMP_MINFILTER</name></expr></argument>, <argument><expr><name>D3DTEXF_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>TextureFilterCaps</name></name> <operator>&amp;</operator> <name>D3DPTFILTERCAPS_MAGFLINEAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetSamplerState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DSAMP_MAGFILTER</name></expr></argument>, <argument><expr><name>D3DTEXF_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetSamplerState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DSAMP_MAGFILTER</name></expr></argument>, <argument><expr><name>D3DTEXF_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_AMBIENT</name></expr></argument>, <argument><expr><call><name>D3DCOLOR_XRGB</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_CULLMODE</name></expr></argument>, <argument><expr><name>D3DCULL_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_ZENABLE</name></expr></argument>, <argument><expr><name>D3DZB_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_LIGHTING</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_DITHERENABLE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_STENCILENABLE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_ALPHABLENDENABLE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_SRCBLEND</name></expr></argument>,<argument><expr><name>D3DBLEND_SRCALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_DESTBLEND</name></expr></argument>,<argument><expr><name>D3DBLEND_INVSRCALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>AlphaCmpCaps</name></name> <operator>&amp;</operator> <name>D3DPCMPCAPS_GREATER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_ALPHATESTENABLE</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_ALPHAREF</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_ALPHAFUNC</name></expr></argument>,<argument><expr><name>D3DCMP_GREATER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetTextureStageState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DTSS_COLOROP</name></expr></argument>,<argument><expr><name>D3DTOP_SELECTARG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetTextureStageState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DTSS_COLORARG1</name></expr></argument>,<argument><expr><name>D3DTA_TEXTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetTextureStageState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DTSS_ALPHAOP</name></expr></argument>, <argument><expr><name>D3DTOP_MODULATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetTextureStageState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DTSS_ALPHAARG1</name></expr></argument>,<argument><expr><name>D3DTA_TEXTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetTextureStageState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3DTSS_ALPHAARG2</name></expr></argument>,<argument><expr><name>D3DTA_DIFFUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D9 scene created successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_D3DX9EFFECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D9CompileShader</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader_source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>source_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>OurD3DXCompileShader</name>)<parameter_list>(

<parameter><decl><type><name>LPCSTR</name></type> <name>pSrcData</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>srcDataLen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>D3DXMACRO</name> <modifier>*</modifier></type><name>pDefines</name></decl></parameter>,

<parameter><decl><type><name>LPD3DXINCLUDE</name></type> <name>pInclude</name></decl></parameter>,

<parameter><decl><type><name>LPCSTR</name></type> <name>pFunctionName</name></decl></parameter>,

<parameter><decl><type><name>LPCSTR</name></type> <name>pProfile</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>Flags</name></decl></parameter>,

<parameter><decl><type><name>LPD3DXBUFFER</name> <modifier>*</modifier></type><name>ppShader</name></decl></parameter>,

<parameter><decl><type><name>LPD3DXBUFFER</name> <modifier>*</modifier></type><name>ppErrorMsgs</name></decl></parameter>,

<parameter><decl><type><name>LPD3DXCONSTANTTABLE</name> <modifier>*</modifier></type><name>ppConstantTable</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>OurD3DXCompileShader</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hxdll</name></name></expr></argument>, <argument><expr><literal type="string">"D3DXCompileShader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>OurD3DXCompileShader</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Cannot locate reference to D3DXCompileShader; pixel shading will be disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>LPD3DXBUFFER</name></type> <name>error_msgs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPD3DXBUFFER</name></type> <name>compiled_shader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>shader_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>OurD3DXCompileShader</name><argument_list>(<argument><expr><name>shader_source</name></expr></argument>, <argument><expr><name>source_length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="string">"ps_3_0"</literal></expr></argument>, <argument><expr><name>shader_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compiled_shader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_msgs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"D3DXCompileShader Error (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error_msgs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"HLSL Compilation Error: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>ID3DXBuffer_GetBufferPointer</name><argument_list>(<argument><expr><name>error_msgs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3DXBuffer_Release</name><argument_list>(<argument><expr><name>error_msgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_CreatePixelShader</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>,

<argument><expr><call><name>ID3DXBuffer_GetBufferPointer</name><argument_list>(<argument><expr><name>compiled_shader</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3dx_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compiled_shader</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ID3DXBuffer_Release</name><argument_list>(<argument><expr><name>compiled_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error_msgs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ID3DXBuffer_Release</name><argument_list>(<argument><expr><name>error_msgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"IDirect3DDevice9_CreatePixelShader error (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Direct3D9CompileShader</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VLC_EGENERIC</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SHADER_FILE_SIZE</name></cpp:macro> <cpp:value>(1024*1024)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D9CreateShaders</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>hxdll</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>selected_shader</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"direct3d9-shader"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>selected_shader</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shader_source_builtin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shader_source_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUILTIN_SHADERS_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>selected_shader</name></expr></argument>, <argument><expr><name><name>builtin_shaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shader_source_builtin</name> <operator>=</operator> <name><name>builtin_shaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>shader_source_builtin</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>Direct3D9CompileShader</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>shader_source_builtin</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>shader_source_builtin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>selected_shader</name></expr></argument>, <argument><expr><name>SELECTED_SHADER_FILE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"direct3d9-shader-file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filepath</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>filepath</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fs</name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fs</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fseek</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>length</name> <operator>&gt;=</operator> <name>MAX_SHADER_FILE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shader_source_file</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>shader_source_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shader_source_file</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>shader_source_file</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Direct3D9CompileShader</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>shader_source_file</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>selected_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shader_source_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>Direct3D9DestroyShaders</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>selected_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shader_source_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D9CreateResources</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Direct3D9CreateScene</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D scene initialization failed !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Direct3D9CreateShaders</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D shaders initialization failed !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_format</name></name> <operator>=</operator> <name>D3DFMT_UNKNOWN</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>dfmt</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>D3DFMT_A8B8G8R8</name></expr> </then><else>: <expr><name>D3DFMT_A8R8G8B8</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>IDirect3D9_CheckDeviceFormat</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>hd3d</name><operator>.</operator><name>obj</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>adapterId</name></name></expr></argument>,

<argument><expr><name>D3DDEVTYPE_HAL</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>BufferFormat</name></name></expr></argument>,

<argument><expr><name>D3DUSAGE_DYNAMIC</name></expr></argument>,

<argument><expr><name>D3DRTYPE_TEXTURE</name></expr></argument>,

<argument><expr><name>dfmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_format</name></name> <operator>=</operator> <name>dfmt</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>is_d3d9_opaque</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3DDevice9_CreateOffscreenPlainSurface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sw_texture_fmt</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dx_render</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate offscreen surface (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D9Reset</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>D3D9_ResetDevice</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Direct3D9DestroyResources</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UpdateOutput</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>fmtp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Direct3D9CreateResources</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>fmtp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D9CreateResources failed !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D9ImportSubpicture</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count_ptr</name></decl></parameter>, <parameter><decl><type><name>d3d_region_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>region</name></decl></parameter>,

<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpicture</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>count_ptr</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>region</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>region</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>region</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>count_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpicture</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>d3d_region_t</name> <modifier>*</modifier></type><name>d3dr</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>region</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d3dr</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>d3d_region_t</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3dregion</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>texture</name></name> <operator>&amp;&amp;</operator>

<name><name>cache</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3dregion_format</name></name> <operator>&amp;&amp;</operator>

<name><name>cache</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>&amp;&amp;</operator>

<name><name>cache</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d3dr</name> <operator>=</operator> <operator>*</operator><name>cache</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d3dr</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d3dr</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3dregion_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dr</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dr</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_CreateTexture</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>,

<argument><expr><name><name>d3dr</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>d3dr</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>D3DUSAGE_DYNAMIC</name></expr></argument>,

<argument><expr><name><name>d3dr</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>d3dr</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d3dr</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create %dx%d texture for OSD (hr=0x%lX)"</literal></expr></argument>,

<argument><expr><name><name>d3dr</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>d3dr</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Created %dx%d texture for OSD"</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3DLOCKED_RECT</name></type> <name>lock</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DTexture9_LockRect</name><argument_list>(<argument><expr><name><name>d3dr</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name> <init>= <expr><name><name>lock</name><operator>.</operator><name>pBits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_pitch</name> <init>= <expr><name><name>lock</name><operator>.</operator><name>Pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_data</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_pitch</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d3dr</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>D3DFMT_A8B8G8R8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dst_pitch</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>src_data</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>*</operator> <name>dst_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>copy_pitch</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>dst_pitch</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>dst_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>src_pitch</name></expr>]</index></name></expr></argument>, <argument><expr><name>copy_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>copy_pitch</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>dst_pitch</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>copy_pitch</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>dst_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>src_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>dst_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>src_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>dst_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>src_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>src_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>dst_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>src_data</name><index>[<expr><name>y</name> <operator>*</operator> <name>src_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DTexture9_UnlockRect</name><argument_list>(<argument><expr><name><name>d3dr</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to unlock the texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to lock the texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scale_w</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scale_h</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>rect_in_display</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect_in_display</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>scale_w</name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>i_x</name></name></expr><operator>,</operator>

<expr><name><name>rect_in_display</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>rect_in_display</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name>scale_w</name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr><operator>,</operator>

<expr><name><name>rect_in_display</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name>scale_h</name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>i_y</name></name></expr><operator>,</operator>

<expr><name><name>rect_in_display</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>rect_in_display</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>scale_h</name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect_in_display</name><operator>.</operator><name>left</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect_in_display</name><operator>.</operator><name>right</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect_in_display</name><operator>.</operator><name>top</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect_in_display</name><operator>.</operator><name>bottom</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>texture_rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>texture_visible_rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>texture_visible_rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_x_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_visible_rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_visible_rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_visible_rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Direct3D9SetupVertices</name><argument_list>(<argument><expr><name><name>d3dr</name><operator>-&gt;</operator><name>vertex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texture_rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texture_visible_rect</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rect_in_display</name></expr></argument>, <argument><expr><name><name>subpicture</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>/</operator> <literal type="number">255</literal></expr></argument>, <argument><expr><name>ORIENT_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D9RenderRegion</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>d3d_region_t</name> <modifier>*</modifier></type><name>region</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>use_pixel_shader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>d3ddev</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>vertex</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DVertexBuffer9_Lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneVertexBuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vertex</name></expr></argument>, <argument><expr><name>D3DLOCK_DISCARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed IDirect3DVertexBuffer9_Lock: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>vertex</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>vertex</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DVertexBuffer9_Unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneVertexBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed IDirect3DVertexBuffer9_Unlock: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_SetStreamSource</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sceneVertexBuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CUSTOMVERTEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed SetStreamSource: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_SetTexture</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>IDirect3DBaseTexture9</name><operator>*</operator><operator>)</operator><name><name>region</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed SetTexture: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3dx_shader</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_pixel_shader</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_SetPixelShader</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dx_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>shader_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>region</name><operator>-&gt;</operator><name>width</name></name></expr>, <expr><name><name>region</name><operator>-&gt;</operator><name>height</name></name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_SetPixelShaderConstantF</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>shader_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed SetPixelShaderConstantF: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_SetPixelShader</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed SetPixelShader: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_DrawPrimitive</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DPT_TRIANGLEFAN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed DrawPrimitive: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D9RenderScene</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>,

<parameter><decl><type><name>d3d_region_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>subpicture_count</name></decl></parameter>,

<parameter><decl><type><name>d3d_region_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>d3ddev</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>clear_scene</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_Clear</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D3DCLEAR_TARGET</name></expr></argument>,

<argument><expr><call><name>D3DCOLOR_XRGB</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed Clear: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>clear_scene</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_BeginScene</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed BeginScene: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Direct3D9RenderRegion</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subpicture_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_ALPHABLENDENABLE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subpicture_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>d3d_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>subpicture</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Direct3D9RenderRegion</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>IDirect3DDevice9_SetRenderState</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>, <argument><expr><name>D3DRS_ALPHABLENDENABLE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_EndScene</name><argument_list>(<argument><expr><name>d3ddev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed EndScene: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>,

<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place_changed</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

RECT rect;

UINT width, height;

GetClientRect(p_sys-&gt;sys.hvideownd, &amp;rect);

width = RECTWidth(rect);

height = RECTHeight(rect);

if (width != p_sys-&gt;pp.BackBufferWidth || height != p_sys-&gt;pp.BackBufferHeight)

{

msg_Dbg(vd, "resizing device back buffers to (%lux%lu)", width, height);

if (VLC_SUCCESS != Direct3D9ResetDevice(vd, width, height))

return VLC_EGENERIC;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>UpdateOutput</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>clear_scene</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>place_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_device_t</name> <modifier>*</modifier></type><name>p_d3d9_dev</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3DDevice9_TestCooperativeLevel</name><argument_list>(<argument><expr><name><name>p_d3d9_dev</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>D3DERR_DEVICENOTRESET</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>reset_device</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_d3d9_opaque</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_display_SendEventPicturesInvalid</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>reset_device</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>lost_not_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>D3DERR_DEVICELOST</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>lost_not_ready</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>lost_not_ready</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>surface</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>is_d3d9_opaque</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>D3DLOCKED_RECT</name></type> <name>d3drect</name></decl>;</decl_stmt>

<expr_stmt><expr><name>surface</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>dx_render</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3DSurface9_LockRect</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3drect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"failed to lock surface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name></type> <name>fake_pic</name> <init>= <expr><operator>*</operator><name>picture</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_UpdatePlanes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_pic</name></expr></argument>, <argument><expr><name><name>d3drect</name><operator>.</operator><name>pBits</name></name></expr></argument>, <argument><expr><name><name>d3drect</name><operator>.</operator><name>Pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_pic</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_UnlockRect</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>picsys</name> <init>= <expr><call><name>ActiveD3D9PictureSys</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>surface</name> <operator>=</operator> <name><name>picsys</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>picsys</name><operator>-&gt;</operator><name>surface</name></name> <operator>!=</operator> <name>surface</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>D3DSURFACE_DESC</name></type> <name>srcDesc</name></decl>, <decl><type ref="prev"/><name>dstDesc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_GetDesc</name><argument_list>(<argument><expr><name><name>picsys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DSurface9_GetDesc</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>srcDesc</name><operator>.</operator><name>Width</name></name> <operator>==</operator> <name><name>dstDesc</name><operator>.</operator><name>Width</name></name> <operator>&amp;&amp;</operator> <name><name>srcDesc</name><operator>.</operator><name>Height</name></name> <operator>==</operator> <name><name>dstDesc</name><operator>.</operator><name>Height</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>surface</name> <operator>=</operator> <name><name>picsys</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>visibleSource</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>visibleSource</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>visibleSource</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>visibleSource</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>visibleSource</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_StretchRect</name><argument_list>( <argument><expr><name><name>p_d3d9_dev</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><name><name>picsys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visibleSource</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>visibleSource</name></expr></argument>, <argument><expr><name>D3DTEXF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to copy the hw surface to the decoder surface (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>d3d_region_t</name></type> <name>picture_region</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Direct3D9ImportPicture</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>picture_region</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>picture_region</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture_region</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>subpicture_region_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d_region_t</name> <modifier>*</modifier></type><name>subpicture_region</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>subpicture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Direct3D9ImportSubpicture</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subpicture_region_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subpicture_region</name></expr></argument>,

<argument><expr><name>subpicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Direct3D9RenderScene</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>picture_region</name></expr></argument>,

<argument><expr><name>subpicture_region_count</name></expr></argument>, <argument><expr><name>subpicture_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Direct3D9DeleteRegions</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion_count</name></name> <operator>=</operator> <name>subpicture_region_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3dregion</name></name> <operator>=</operator> <name>subpicture_region</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Swap</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d9_device_t</name> <modifier>*</modifier></type><name>p_d3d9_dev</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECT</name></type> <name>src</name> <init>= <expr><block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>display</name><operator>.</operator><name>height</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>hd3d</name><operator>.</operator><name>use_ex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9Ex_PresentEx</name><argument_list>(<argument><expr><name><name>p_d3d9_dev</name><operator>-&gt;</operator><name>devex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sys</name><operator>.</operator><name>hvideownd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_Present</name><argument_list>(<argument><expr><name><name>p_d3d9_dev</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sys</name><operator>.</operator><name>hvideownd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed Present: 0x%lX"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>lost_not_ready</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D9Destroy</name><parameter_list>(<parameter><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDXVAHD_VideoProcessor_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>D3D9_ReleaseDevice</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>hxdll</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hxdll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hxdll</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D9CheckConversion</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>D3DFORMAT</name></type> <name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3D9</name> <modifier>*</modifier></type><name>d3dobj</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>hd3d</name><operator>.</operator><name>obj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>dst</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>BufferFormat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9_CheckDeviceFormat</name><argument_list>(<argument><expr><name>d3dobj</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>adapterId</name></name></expr></argument>,

<argument><expr><name>D3DDEVTYPE_HAL</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>D3DRTYPE_SURFACE</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>D3DERR_NOTAVAILABLE</name> <operator>!=</operator> <name>hr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Could not query adapter supported formats. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>d3d9_format_t</name></type> <name><name>d3d_formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"YV12"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_YV12</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"YV12"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_I420</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"YV12"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_J420</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"NV12"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_NV12</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DXA9"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_D3D9_OPAQUE</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DXA9_422"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_D3D9_OPAQUE</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DXA9_444"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_D3D9_OPAQUE</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DXA9_10"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DXA9_10_422"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DXA9_10_444"</literal></expr>, <expr><call><name>MAKEFOURCC</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>VLC_CODEC_D3D9_OPAQUE_10B</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"UYVY"</literal></expr>, <expr><name>D3DFMT_UYVY</name></expr>, <expr><name>VLC_CODEC_UYVY</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"YUY2"</literal></expr>, <expr><name>D3DFMT_YUY2</name></expr>, <expr><name>VLC_CODEC_YUYV</name></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"X8R8G8B8"</literal></expr>, <expr><name>D3DFMT_X8R8G8B8</name></expr>,<expr><name>VLC_CODEC_RGB32</name></expr>, <expr><literal type="number">0xff0000</literal></expr>, <expr><literal type="number">0x00ff00</literal></expr>, <expr><literal type="number">0x0000ff</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"A8R8G8B8"</literal></expr>, <expr><name>D3DFMT_A8R8G8B8</name></expr>,<expr><name>VLC_CODEC_RGB32</name></expr>, <expr><literal type="number">0xff0000</literal></expr>, <expr><literal type="number">0x00ff00</literal></expr>, <expr><literal type="number">0x0000ff</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"8G8B8"</literal></expr>, <expr><name>D3DFMT_R8G8B8</name></expr>, <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><literal type="number">0xff0000</literal></expr>, <expr><literal type="number">0x00ff00</literal></expr>, <expr><literal type="number">0x0000ff</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"R5G6B5"</literal></expr>, <expr><name>D3DFMT_R5G6B5</name></expr>, <expr><name>VLC_CODEC_RGB16</name></expr>, <expr><literal type="number">0x1f</literal><operator>&lt;&lt;</operator><literal type="number">11</literal></expr>, <expr><literal type="number">0x3f</literal><operator>&lt;&lt;</operator><literal type="number">5</literal></expr>, <expr><literal type="number">0x1f</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"X1R5G5B5"</literal></expr>, <expr><name>D3DFMT_X1R5G5B5</name></expr>,<expr><name>VLC_CODEC_RGB15</name></expr>, <expr><literal type="number">0x1f</literal><operator>&lt;&lt;</operator><literal type="number">10</literal></expr>, <expr><literal type="number">0x1f</literal><operator>&lt;&lt;</operator><literal type="number">5</literal></expr>, <expr><literal type="number">0x1f</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>d3d9_format_t</name> <modifier>*</modifier></type><name>FindBufferFormat</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>D3DFORMAT</name></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>d3d_formats</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d9_format_t</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><operator>&amp;</operator><name><name>d3d_formats</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>format</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>fmt</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<return>return <expr><name>format</name></expr>;</return>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>d3d9_format_t</name> <modifier>*</modifier></type><name>Direct3DFindFormat</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hardware_scale_ok</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>hardware_scale_ok</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Disabling hardware chroma conversion due to odd dimensions"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>dxva_chroma</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>decoder_format</name> <init>= <expr><name>D3DFMT_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_d3d9_opaque</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>d3d9_video_context_t</name> <modifier>*</modifier></type><name>vctx_sys</name> <init>= <expr><call><name>GetD3D9ContextPrivate</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>vctx_sys</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>dxva_chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name>decoder_format</name> <operator>=</operator> <name><name>vctx_sys</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"favor decoder format: %4.4s (%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>decoder_format</name></expr></argument>, <argument><expr><name>decoder_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hardware_scale_ok</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>allow_hw_yuv</name></name> <operator>&amp;&amp;</operator> <call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>vlc_fourcc_GetYUVFallback</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>vlc_fourcc_GetRGBFallback</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>d3d_formats</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d9_format_t</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><operator>&amp;</operator><name><name>d3d_formats</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>format</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>!=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>decoder_format</name> <operator>!=</operator> <name>D3DFMT_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>format</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>decoder_format</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"trying surface pixel format: %s"</literal></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Direct3D9CheckConversion</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>format</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupProcessorInput</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>d3d9_format_t</name> <modifier>*</modifier></type><name>d3dfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVAHD_STREAM_STATE_D3DFORMAT_DATA</name></type> <name>d3dformat</name> <init>= <expr><block>{ <expr><name><name>d3dfmt</name><operator>-&gt;</operator><name>format</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessStreamState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DXVAHD_STREAM_STATE_D3DFORMAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d3dformat</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3dformat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA</name></type> <name>frame_format</name> <init>= <expr><block>{ <expr><name>DXVAHD_FRAME_FORMAT_PROGRESSIVE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessStreamState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DXVAHD_STREAM_STATE_FRAME_FORMAT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>frame_format</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA</name></type> <name>colorspace</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>RGB_Range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>YCbCr_xvYCC</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>YCbCr_Matrix</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>space</name></name> <operator>==</operator> <name>COLOR_SPACE_BT601</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessStreamState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>colorspace</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_STREAM_STATE_SOURCE_RECT_DATA</name></type> <name>srcRect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>Enable</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcRect</name><operator>.</operator><name>SourceRect</name></name> <operator>=</operator> <operator>(</operator><name>RECT</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_x_offset</name></name></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_y_offset</name></name></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr>;</expr_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessStreamState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DXVAHD_STREAM_STATE_SOURCE_RECT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>srcRect</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcRect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_BLT_STATE_TARGET_RECT_DATA</name></type> <name>dstRect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstRect</name><operator>.</operator><name>Enable</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstRect</name><operator>.</operator><name>TargetRect</name></name> <operator>=</operator> <operator>(</operator><name>RECT</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessBltState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><name>DXVAHD_BLT_STATE_TARGET_RECT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dstRect</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetFrameRate</name><parameter_list>(<parameter><decl><type><name>DXVAHD_RATIONAL</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Numerator</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Denominator</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Numerator</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Denominator</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitRangeProcessor</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>d3d9_format_t</name> <modifier>*</modifier></type><name>d3dfmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>libvlc_video_output_cfg_t</name> <modifier>*</modifier></type><name>render_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"DXVA2.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to load DXVA2.DLL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name> <modifier>*</modifier></type><name>formatsList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVAHD_VPCAPS</name> <modifier>*</modifier></type><name>capsList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDXVAHD_Device</name> <modifier>*</modifier></type><name>hd_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>CreateDevice</name>)<parameter_list>(<parameter><decl><type><name>IDirect3DDevice9Ex</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>DXVAHD_CONTENT_DESC</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>DXVAHD_DEVICE_USAGE</name></type></decl></parameter>,<parameter><decl><type><name>PDXVAHDSW_Plugin</name></type></decl></parameter>,<parameter><decl><type><name>IDXVAHD_Device</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>CreateDevice</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name></expr></argument>, <argument><expr><literal type="string">"DXVAHD_CreateDevice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CreateDevice</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Can't create HD device (not Windows 7+)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DXVAHD_CONTENT_DESC</name></type> <name>desc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>InputFrameFormat</name></name> <operator>=</operator> <name>DXVAHD_FRAME_FORMAT_PROGRESSIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetFrameRate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>desc</name><operator>.</operator><name>InputFrameRate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>InputWidth</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>InputHeight</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>OutputFrameRate</name></name> <operator>=</operator> <name><name>desc</name><operator>.</operator><name>InputFrameRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>OutputWidth</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>OutputHeight</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>CreateDevice</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>devex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name>DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hd_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the device (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DXVAHD_VPDEVCAPS</name></type> <name>devcaps</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_GetVideoProcessorDeviceCaps</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>devcaps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the device capabilities (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>devcaps</name><operator>.</operator><name>VideoProcessorCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"No good video processor found for range conversion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>formatsList</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>formatsList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>formatsList</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate %u input formats"</literal></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_GetVideoProcessorInputFormats</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name></expr></argument>, <argument><expr><name>formatsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>formatsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>d3dfmt</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>devcaps</name><operator>.</operator><name>InputFormatCount</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Input format %s not supported for range conversion"</literal></expr></argument>, <argument><expr><name><name>d3dfmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>formatsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>formatsList</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>formatsList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>formatsList</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate %u output formats"</literal></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_GetVideoProcessorOutputFormats</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name></expr></argument>, <argument><expr><name>formatsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>formatsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>BufferFormat</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>devcaps</name><operator>.</operator><name>OutputFormatCount</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Output format %d not supported for range conversion"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>BufferFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>capsList</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>devcaps</name><operator>.</operator><name>VideoProcessorCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>capsList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>capsList</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate %u video processors"</literal></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>VideoProcessorCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_GetVideoProcessorCaps</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><name><name>devcaps</name><operator>.</operator><name>VideoProcessorCount</name></name></expr></argument>, <argument><expr><name>capsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the processor caps (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_Device_CreateVideoProcessor</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>capsList</name><operator>-&gt;</operator><name>VPGuid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the processor (error 0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IDXVAHD_Device_Release</name><argument_list>( <argument><expr><name>hd_device</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetupProcessorInput</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>d3dfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA</name></type> <name>colorspace</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>Usage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>RGB_Range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>render_out</name><operator>-&gt;</operator><name>full_range</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>YCbCr_xvYCC</name></name> <operator>=</operator> <ternary><condition><expr><name><name>render_out</name><operator>-&gt;</operator><name>full_range</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorspace</name><operator>.</operator><name>YCbCr_Matrix</name></name> <operator>=</operator> <ternary><condition><expr><name><name>render_out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>libvlc_video_colorspace_BT601</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXVAHD_VideoProcessor_SetVideoProcessBltState</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>proc</name></name></expr></argument>, <argument><expr><name>DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>colorspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>capsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>formatsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hd_device</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDXVAHD_Device_Release</name><argument_list>(<argument><expr><name>hd_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>processor</name><operator>.</operator><name>dll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Direct3D9Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_output_cfg_t</name></type> <name>render_out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UpdateOutput</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>render_out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>BufferFormat</name></name> <operator>=</operator> <name><name>render_out</name><operator>.</operator><name>d3d9_format</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d9_format_t</name> <modifier>*</modifier></type><name>dst_format</name> <init>= <expr><call><name>FindBufferFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>BufferFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>dst_format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Unknown back buffer format 0x%X"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>BufferFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>d3d9_format_t</name> <modifier>*</modifier></type><name>d3dfmt</name> <init>= <expr><call><name>Direct3DFindFormat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d3dfmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"unsupported source pixel format %4.4s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"found input surface format %s for source %4.4s"</literal></expr></argument>, <argument><expr><name><name>d3dfmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>force_dxva_hd</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"direct3d9-dxvahd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>force_dxva_hd</name> <operator>||</operator> <operator>(</operator><name>dst_format</name> <operator>&amp;&amp;</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>color_range</name></name> <operator>!=</operator> <name>COLOR_RANGE_FULL</name> <operator>&amp;&amp;</operator> <name><name>dst_format</name><operator>-&gt;</operator><name>rmask</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>d3dfmt</name><operator>-&gt;</operator><name>rmask</name></name> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>identifier</name><operator>.</operator><name>VendorId</name></name> <operator>==</operator> <name>GPU_MANUFACTURER_NVIDIA</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"init DXVA-HD processor from %s to %s"</literal></expr></argument>, <argument><expr><name><name>d3dfmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>dst_format</name></expr>?</condition><then><expr><name><name>dst_format</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>:<expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>InitRangeProcessor</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>d3dfmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>render_out</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>force_dxva_hd</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_dxva_hd</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3D9_CheckDeviceFormatConversion</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>hd3d</name><operator>.</operator><name>obj</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>adapterId</name></name></expr></argument>,

<argument><expr><name>D3DDEVTYPE_HAL</name></expr></argument>,

<argument><expr><name><name>d3dfmt</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>BufferFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Unsupported conversion from %s to %s"</literal></expr></argument>, <argument><expr><name><name>d3dfmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>dst_format</name></expr>?</condition><then><expr><name><name>dst_format</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>:<expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"using StrecthRect from %s to %s"</literal></expr></argument>, <argument><expr><name><name>d3dfmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>dst_format</name></expr>?</condition><then><expr><name><name>dst_format</name><operator>-&gt;</operator><name>name</name></name></expr></then><else>:<expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fmt</name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>d3dfmt</name><operator>-&gt;</operator><name>fourcc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>=</operator> <name><name>d3dfmt</name><operator>-&gt;</operator><name>rmask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>=</operator> <name><name>d3dfmt</name><operator>-&gt;</operator><name>gmask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>=</operator> <name><name>d3dfmt</name><operator>-&gt;</operator><name>bmask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sw_texture_fmt</name></name> <operator>=</operator> <name>d3dfmt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Direct3D9CreateResources</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate resources"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vout_window_SetTitle</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>vdcfg</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><name>VOUT_TITLE</name> <literal type="string">" (Direct3D9 output)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D9 display adapter successfully initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Direct3D9Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Direct3D9DestroyResources</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VOUT_DISPLAY_RESET_PICTURES</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>reset_device</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vout_display_cfg_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>video_format_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Direct3D9Reset</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed to reset device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>reset_device</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<default>default:</default>

<return>return <expr><call><name>CommonControl</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>descs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

}</block></struct></type> <name>enum_context_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ListShaders</name><parameter_list>(<parameter><decl><type><name>enum_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_shaders</name> <init>= <expr><name>BUILTIN_SHADERS_COUNT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <name>num_shaders</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>descs</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>descs</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <name>num_shaders</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_shaders</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>builtin_shaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>descs</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>builtin_shaders</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>SELECTED_SHADER_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>descs</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>SELECTED_SHADER_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FindShadersCallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>descs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>enum_context_t</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ListShaders</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>values</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>descs</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>descs</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>ctx</name><operator>.</operator><name>count</name></name></expr>;</return>

</block_content>}</block></function>

<macro><name>VLC_CONFIG_STRING_ENUM</name><argument_list>(<argument>FindShadersCallback</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>LocalSwapchainUpdateOutput</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>libvlc_video_render_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>libvlc_video_output_cfg_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DDISPLAYMODE</name></type> <name>d3ddm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>IDirect3D9_GetAdapterDisplayMode</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>hd3d</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>adapterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3ddm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>d3d9_format</name></name> <operator>=</operator> <name><name>d3ddm</name><operator>.</operator><name>Format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>full_range</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>libvlc_video_colorspace_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name>libvlc_video_primaries_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>libvlc_video_transfer_func_SRGB</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LocalSwapchainSwap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Swap</name><argument_list>( <argument><expr><name>vd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>vd</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name> <operator>&amp;&amp;</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>projection_mode</name></name> <operator>!=</operator> <name>PROJECTION_MODE_RECTANGULAR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>vd</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name> <operator>&amp;&amp;</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vd</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>isVistaOrGreater</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>hKernel32</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>hKernel32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>isVistaOrGreater</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hKernel32</name></expr></argument>, <argument><expr><literal type="string">"EnumResourceLanguagesExW"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isVistaOrGreater</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vout_display_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CommonInit</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-opaque"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>updateOutputCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-update-output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-swap"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-make-current"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>updateOutputCb</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CommonWindowInit</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>outside_opaque</name></name> <operator>=</operator> <name>vd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>updateOutputCb</name></name> <operator>=</operator> <name>LocalSwapchainUpdateOutput</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>=</operator> <name>LocalSwapchainSwap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>startEndRenderingCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name> <operator>=</operator> <ternary><condition><expr><name>context</name></expr> ?</condition><then> <expr><call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name></name> <operator>=</operator> <call><name>GetD3D9OpaqueDevice</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name></name> <operator>=</operator> <call><name>D3D9_CreateDevice</name><argument_list>( <argument><expr><name>vd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"D3D9 Creation failed!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>MaxTextureWidth</name></name> <operator>||</operator>

<name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>MaxTextureHeight</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Textures too large %ux%u max possible: %lx%lx"</literal></expr></argument>,

<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>MaxTextureWidth</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>MaxTextureHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>swapCb</name></name> <operator>==</operator> <name>LocalSwapchainSwap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CommonPlacePicture</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hxdll</name></name> <operator>=</operator> <call><name>Direct3D9LoadShaderLibrary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>hxdll</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot load Direct3D9 Shader Library; HLSL pixel shading will be disabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>reset_device</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>lost_not_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>allow_hw_yuv</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"directx-hw-yuv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Direct3D9Open</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Direct3D9 could not be opened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"direct3d9-hw-blending"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>d3dregion_format</name></name> <operator>!=</operator> <name>D3DFMT_UNKNOWN</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>SrcBlendCaps</name></name> <operator>&amp;</operator> <name>D3DPBLENDCAPS_SRCALPHA</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>DestBlendCaps</name></name> <operator>&amp;</operator> <name>D3DPBLENDCAPS_INVSRCALPHA</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>TextureCaps</name></name> <operator>&amp;</operator> <name>D3DPTEXTURECAPS_ALPHA</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>TextureOpCaps</name></name> <operator>&amp;</operator> <name>D3DTEXOPCAPS_SELECTARG1</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>d3d9_device</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>caps</name><operator>.</operator><name>TextureOpCaps</name></name> <operator>&amp;</operator> <name>D3DTEXOPCAPS_MODULATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name> <operator>=</operator> <name>d3d_subpicture_chromas</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><name>fmtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>(<argument><expr><name>fmtp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Prepare</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>Display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>Direct3D9Close</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CommonWindowClean</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Direct3D9Destroy</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Direct3D9Close</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CommonWindowClean</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Direct3D9Destroy</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
