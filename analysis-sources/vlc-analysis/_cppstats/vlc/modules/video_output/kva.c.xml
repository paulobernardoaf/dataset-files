<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\kva.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fourcc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kva.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVA_FIXT23_TEXT</name></cpp:macro> <cpp:value>N_( "Enable a workaround for T23" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVA_FIXT23_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enable this option if the diagonal stripes are displayed " "when the window size is equal to or smaller than the movie size." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVA_VIDEO_MODE_TEXT</name></cpp:macro> <cpp:value>N_( "Video mode" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVA_VIDEO_MODE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Select a proper video mode to be used by KVA." )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_kva_video_mode</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"snap"</literal></expr>, <expr><literal type="string">"wo"</literal></expr>, <expr><literal type="string">"vman"</literal></expr>, <expr><literal type="string">"dive"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_kva_video_mode_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Auto"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"SNAP"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"WarpOverlay!"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"VMAN"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"DIVE"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"KVA"</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VOUT</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"kva-video-mode"</literal></argument>, <argument>ppsz_kva_video_mode[<literal type="number">0</literal>]</argument>, <argument>KVA_VIDEO_MODE_TEXT</argument>,

<argument>KVA_VIDEO_MODE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>ppsz_kva_video_mode</argument>, <argument>ppsz_kva_video_mode_text</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"kva-fixt23"</literal></argument>, <argument>false</argument>, <argument>KVA_FIXT23_TEXT</argument>, <argument>KVA_FIXT23_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"K Video Acceleration video output"</literal>)</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"kva"</literal></argument> )</argument_list></macro>

<macro><name>set_callback_display</name><argument_list>( <argument>Open</argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<struct>struct <name>vout_display_sys_t</name>

<block>{

<decl_stmt><decl><type><name>TID</name></type> <name>tid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEV</name></type> <name>ack_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HAB</name></type> <name>hab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMQ</name></type> <name>hmq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>client</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KVASETUP</name></type> <name>kvas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KVACAPS</name></type> <name>kvac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>i_screen_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>i_screen_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_fixt23</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNWP</name></type> <name>p_old_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECTL</name></type> <name>client_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>parent_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>button_pressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_mouse_hidden</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_on_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>cursor_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_chroma_shift</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDisplay</name> <parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDisplay</name><parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>KVALock</name><parameter_list>( <parameter><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>KVAUnlock</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MorphToPM</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ConvertKey</name> <parameter_list>( <parameter><decl><type><name>USHORT</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>MRESULT</name> <name>EXPENTRY</name></type> <name>MyFrameWndProc</name><parameter_list>( <parameter><decl><type><name>HWND</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>MPARAM</name></type></decl></parameter>, <parameter><decl><type><name>MPARAM</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>MRESULT</name> <name>EXPENTRY</name></type> <name>WndProc</name> <parameter_list>( <parameter><decl><type><name>HWND</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>MPARAM</name></type></decl></parameter>, <parameter><decl><type><name>MPARAM</name></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WC_VLC_KVA</name></cpp:macro> <cpp:value>"WC_VLC_KVA"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_KEY</name></cpp:macro> <cpp:value>0x0F0F0F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_VLC_MANAGE</name></cpp:macro> <cpp:value>( WM_USER + 1 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_VLC_FULLSCREEN_CHANGE</name></cpp:macro> <cpp:value>( WM_USER + 2 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_VLC_SIZE_CHANGE</name></cpp:macro> <cpp:value>( WM_USER + 3 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TID_HIDE_MOUSE</name></cpp:macro> <cpp:value>0x1010</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>psz_video_mode</name><index>[ <expr><literal type="number">4</literal></expr> ]</index></name> <init>= <expr><block>{<expr><literal type="string">"DIVE"</literal></expr>, <expr><literal type="string">"WarpOverlay!"</literal></expr>, <expr><literal type="string">"SNAP"</literal></expr>,

<expr><literal type="string">"VMAN"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>open_init</name>

<block>{

<decl_stmt><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>subpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name></type> <name>fake_pic</name> <init>= <expr><operator>*</operator><name>pic</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>KVALock</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fake_pic</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_pic</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>KVAUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>open_init</name></name> <modifier>*</modifier></type><name>init</name> <init>= <expr><operator>(</operator> struct <name>open_init</name> <operator>*</operator> <operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name> <init>= <expr><name><name>init</name><operator>-&gt;</operator><name>vd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type> <name>cfg</name> <init>= <expr><name><name>init</name><operator>-&gt;</operator><name>cfg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name> <init>= <expr><name><name>init</name><operator>-&gt;</operator><name>fmtp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>i_frame_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QMSG</name></type> <name>qm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>i_kva_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_ApplyRotation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>fmtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MorphToPM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hab</name></name> <operator>=</operator> <call><name>WinInitialize</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>hmq</name></name> <operator>=</operator> <call><name>WinCreateMsgQueue</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hab</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinRegisterClass</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hab</name></name></expr></argument>,

<argument><expr><name>WC_VLC_KVA</name></expr></argument>,

<argument><expr><name>WndProc</name></expr></argument>,

<argument><expr><name>CS_SIZEREDRAW</name> <operator>|</operator> <name>CS_MOVENOTIFY</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>PVOID</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>b_fixt23</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"kva-fixt23"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>b_fixt23</name></name> <operator>&amp;&amp;</operator> <name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>window</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VOUT_WINDOW_TYPE_HWND</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <operator>(</operator> <name>HWND</name> <operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>hwnd</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>i_style</name> <init>= <expr><call><name>WinQueryWindowULong</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>QWL_STYLE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WinSetWindowULong</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>QWL_STYLE</name></expr></argument>,

<argument><expr><name>i_style</name> <operator>|</operator> <name>WS_CLIPCHILDREN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_frame_flags</name> <operator>=</operator> <name>FCF_TITLEBAR</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>HWND_DESKTOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_frame_flags</name> <operator>=</operator> <name>FCF_SYSMENU</name> <operator>|</operator> <name>FCF_TITLEBAR</name> <operator>|</operator> <name>FCF_MINMAX</name> <operator>|</operator>

<name>FCF_SIZEBORDER</name> <operator>|</operator> <name>FCF_TASKLIST</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator>

<call><name>WinCreateStdWindow</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, 

<argument><expr><name>WS_VISIBLE</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>i_frame_flags</name></expr></argument>, 

<argument><expr><name>WC_VLC_KVA</name></expr></argument>, 

<argument><expr><literal type="string">""</literal></expr></argument>, 

<argument><expr><literal type="number">0L</literal></expr></argument>, 

<argument><expr><name>NULLHANDLE</name></expr></argument>, 

<argument><expr><literal type="number">1</literal></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name> <operator>==</operator> <name>NULLHANDLE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot create a frame window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit_frame</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WinSetWindowPtr</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WinSetWindowPtr</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>p_old_frame</name></name> <operator>=</operator> <call><name>WinSubclassWindow</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>MyFrameWndProc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_mode</name> <operator>=</operator> <call><name>var_CreateGetString</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"kva-video-mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_kva_mode</name> <operator>=</operator> <name>KVAM_AUTO</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"snap"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_kva_mode</name> <operator>=</operator> <name>KVAM_SNAP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"wo"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_kva_mode</name> <operator>=</operator> <name>KVAM_WO</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"vman"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_kva_mode</name> <operator>=</operator> <name>KVAM_VMAN</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_mode</name></expr></argument>, <argument><expr><literal type="string">"dive"</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_kva_mode</name> <operator>=</operator> <name>KVAM_DIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>kvaInit</name><argument_list>( <argument><expr><name>i_kva_mode</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>COLOR_KEY</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize KVA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit_kva_init</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kvaCaps</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>kvac</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"selected video mode = %s"</literal></expr></argument>,

<argument><expr><name><name>psz_video_mode</name><index>[ <expr><name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulMode</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>OpenDisplay</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot open display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit_open_display</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kvaDisableScreenSaver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fmtp</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Prepare</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>Display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_control87</name><argument_list>(<argument><expr><name>MCW_EM</name></expr></argument>, <argument><expr><name>MCW_EM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_result</name></name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ack_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinSetVisibleRegionNotify</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>( <expr><call><name>WinGetMsg</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qm</name></expr></argument>, <argument><expr><name>NULLHANDLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinDispatchMsg</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinSetVisibleRegionNotify</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>kvaEnableScreenSaver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseDisplay</name><argument_list>( <argument><expr><name>vd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit_open_display</name> :</label>

<expr_stmt><expr><call><name>kvaDone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>exit_kva_init</name> :</label>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinSubclassWindow</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_old_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>WinDestroyWindow</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit_frame</name> :</label>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>is_mouse_hidden</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinShowPointer</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>WinDestroyMsgQueue</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hmq</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinTerminate</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hab</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_result</name></name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ack_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>open_init</name></name></type> <name>init</name> <init>= <expr><block>{

<expr><operator>.</operator><name>vd</name> <operator>=</operator> <name>vd</name></expr>,

<expr><operator>.</operator><name>cfg</name> <operator>=</operator> <name>cfg</name></expr>,

<expr><operator>.</operator><name>fmtp</name> <operator>=</operator> <name>fmtp</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>sys</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DosCreateEventSem</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>ack_event</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>_beginthread</name><argument_list>( <argument><expr><name>PMThread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>init</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosWaitEventSem</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ack_event</name></name></expr></argument>, <argument><expr><name>SEM_INDEFINITE_WAIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>i_result</name></name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DosCloseEventSem</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ack_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_t</name> <modifier>*</modifier></type> <name>vd</name> <init>= <expr><operator>(</operator><name>vout_display_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WinPostQueueMsg</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hmq</name></name></expr></argument>, <argument><expr><name>WM_QUIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosWaitThread</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>DCWW_WAIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosCloseEventSem</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ack_event</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinPostMsg</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>WM_VLC_MANAGE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_FULLSCREEN</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>fs</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WinPostMsg</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>WM_VLC_FULLSCREEN_CHANGE</name></expr></argument>, <argument><expr><call><name>MPFROMLONG</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_WINDOW_STATE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>state</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_on_top</name> <init>= <expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>VOUT_WINDOW_STATE_ABOVE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>is_on_top</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinSetWindowPos</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_ZORDER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_on_top</name></name> <operator>=</operator> <name>is_on_top</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_SIZE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vout_display_cfg_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WinPostMsg</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>WM_VLC_SIZE_CHANGE</name></expr></argument>,

<argument><expr><call><name>MPFROMLONG</name><argument_list>( <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>MPFROMLONG</name><argument_list>( <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_FILLED</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_ZOOM</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_ASPECT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>place</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>place</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>ulAspectWidth</name></name> <operator>=</operator> <name><name>place</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>ulAspectHeight</name></name> <operator>=</operator> <name><name>place</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kvaSetup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>kvas</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_CROP</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>src_rot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_ApplyRotation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_rot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>rclSrcRect</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <name><name>src_rot</name><operator>.</operator><name>i_x_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>rclSrcRect</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>src_rot</name><operator>.</operator><name>i_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>rclSrcRect</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>src_rot</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator>

<name><name>src_rot</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>rclSrcRect</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <name><name>src_rot</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator>

<name><name>src_rot</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kvaSetup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>kvas</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VOUT_DISPLAY_RESET_PICTURES</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Unsupported query(=%d) in vout display KVA"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DestroyPicture</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDisplay</name><parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>fallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_hw_accel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FOURCC</name></type> <name>i_kva_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_chroma_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECTL</name></type> <name>rcl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"render chroma = %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator> <operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_hw_accel</name></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>fallback</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>pass</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><call><name>vlc_fourcc_GetYUVFallback</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr> </then><else>:

<expr><call><name>vlc_fourcc_GetRGBFallback</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>fallback</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>fallback</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>

<expr_stmt><expr><name>b_hw_accel</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulInputFormatFlags</name></name> <operator>&amp;</operator> <name>KVAF_YV12</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_kva_fourcc</name> <operator>=</operator> <name>FOURCC_YV12</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_chroma_shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>

<expr_stmt><expr><name>b_hw_accel</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulInputFormatFlags</name></name> <operator>&amp;</operator> <name>KVAF_YUY2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_kva_fourcc</name> <operator>=</operator> <name>FOURCC_Y422</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_chroma_shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_YV9</name></expr>:</case>

<expr_stmt><expr><name>b_hw_accel</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulInputFormatFlags</name></name> <operator>&amp;</operator> <name>KVAF_YVU9</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_kva_fourcc</name> <operator>=</operator> <name>FOURCC_YVU9</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_chroma_shift</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>

<expr_stmt><expr><name>b_hw_accel</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulInputFormatFlags</name></name> <operator>&amp;</operator> <name>KVAF_BGR32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_kva_fourcc</name> <operator>=</operator> <name>FOURCC_BGR4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_chroma_shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>

<expr_stmt><expr><name>b_hw_accel</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulInputFormatFlags</name></name> <operator>&amp;</operator> <name>KVAF_BGR24</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_kva_fourcc</name> <operator>=</operator> <name>FOURCC_BGR3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_chroma_shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>

<expr_stmt><expr><name>b_hw_accel</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulInputFormatFlags</name></name> <operator>&amp;</operator> <name>KVAF_BGR16</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_kva_fourcc</name> <operator>=</operator> <name>FOURCC_R565</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_chroma_shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>

<expr_stmt><expr><name>b_hw_accel</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulInputFormatFlags</name></name> <operator>&amp;</operator> <name>KVAF_BGR15</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_kva_fourcc</name> <operator>=</operator> <name>FOURCC_R555</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_chroma_shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>b_hw_accel</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>fallback</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_hw_accel</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Ooops. There is no fourcc supported by KVA at all."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulRMask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulGMask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulBMask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"output chroma = %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator> <operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"KVA chroma = %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator> <operator>)</operator><operator>&amp;</operator><name>i_kva_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>ulLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>KVASETUP</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>szlSrcSize</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>szlSrcSize</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>rclSrcRect</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>rclSrcRect</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>rclSrcRect</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>rclSrcRect</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>ulRatio</name></name> <operator>=</operator> <name>KVAR_FORCEANY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>ulAspectWidth</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>ulAspectHeight</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>fccSrcColor</name></name> <operator>=</operator> <name>i_kva_fourcc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>fDither</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>kvaSetup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>kvas</name></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot set up KVA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_chroma_shift</name></name> <operator>=</operator> <name>i_chroma_shift</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"video-title"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>title</name></expr></argument>, <argument><expr><name>VOUT_TITLE</name> <literal type="string">" (%4.4s to %4.4s - %s mode KVA output)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>fccSrcColor</name></name></expr></argument>,

<argument><expr><name><name>psz_video_mode</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>kvac</name><operator>.</operator><name>ulMode</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WinSetWindowText</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_timeout</name></name> <operator>=</operator>

<operator>(</operator> <name>ULONG</name> <operator>)</operator><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"mouse-hide-timeout"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinStartTimer</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hab</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>TID_HIDE_MOUSE</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_timeout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_screen_width</name></name> <operator>=</operator> <call><name>WinQuerySysValue</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><name>SV_CXSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_screen_height</name></name> <operator>=</operator> <call><name>WinQuerySysValue</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><name>SV_CYSCREEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinQueryWindowRect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <operator>(</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_width</name></name> <operator>-</operator> <name>w</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <operator>(</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_height</name></name> <operator>-</operator> <name>h</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>xLeft</name></name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>yBottom</name></name> <operator>+</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rcl</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>client_rect</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcl</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinSetWindowPos</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>,

<argument><expr><name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr></argument>, <argument><expr><name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr></argument>,

<argument><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr></argument>, <argument><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr></argument>,

<argument><expr><name>SWP_MOVE</name> <operator>|</operator> <name>SWP_SIZE</name> <operator>|</operator> <name>SWP_ZORDER</name> <operator>|</operator> <name>SWP_SHOW</name> <operator>|</operator>

<name>SWP_ACTIVATE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDisplay</name><parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>vd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>KVALock</name><parameter_list>( <parameter><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PVOID</name></type> <name>kva_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>kva_bpl</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>kvaLockBuffer</name><argument_list>( <argument><expr><operator>&amp;</operator><name>kva_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kva_bpl</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>=</operator> <operator>(</operator> <name>uint8_t</name> <operator>*</operator> <operator>)</operator><name>kva_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>=</operator> <name>kva_bpl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>*</operator> <name><name>o</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>=</operator> <name>kva_bpl</name> <operator>&gt;&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_chroma_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name> <operator>&gt;&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_chroma_shift</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>KVAUnlock</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kvaUnlockBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MorphToPM</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PPIB</name></type> <name>pib</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DosGetInfoBlocks</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pib</name><operator>-&gt;</operator><name>pib_ultype</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pib</name><operator>-&gt;</operator><name>pib_ultype</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>USHORT</name></type> <name>i_pmkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_vlckey</name></decl>;</decl_stmt>

}</block> <decl><name><name>pmkeys_to_vlckeys</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VK_LEFT</name></expr>, <expr><name>KEY_LEFT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_RIGHT</name></expr>, <expr><name>KEY_RIGHT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_UP</name></expr>, <expr><name>KEY_UP</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_DOWN</name></expr>, <expr><name>KEY_DOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_SPACE</name></expr>, <expr><literal type="char">' '</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_NEWLINE</name></expr>, <expr><name>KEY_ENTER</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_ENTER</name></expr>, <expr><name>KEY_ENTER</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F1</name></expr>, <expr><name>KEY_F1</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F2</name></expr>, <expr><name>KEY_F2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F3</name></expr>, <expr><name>KEY_F3</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F4</name></expr>, <expr><name>KEY_F4</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F5</name></expr>, <expr><name>KEY_F5</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F6</name></expr>, <expr><name>KEY_F6</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F7</name></expr>, <expr><name>KEY_F7</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F8</name></expr>, <expr><name>KEY_F8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F9</name></expr>, <expr><name>KEY_F9</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F10</name></expr>, <expr><name>KEY_F10</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F11</name></expr>, <expr><name>KEY_F11</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_F12</name></expr>, <expr><name>KEY_F12</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_HOME</name></expr>, <expr><name>KEY_HOME</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_END</name></expr>, <expr><name>KEY_END</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_INSERT</name></expr>, <expr><name>KEY_INSERT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_DELETE</name></expr>, <expr><name>KEY_DELETE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_ESC</name></expr>, <expr><name>KEY_ESC</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_PAGEUP</name></expr>, <expr><name>KEY_PAGEUP</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_PAGEDOWN</name></expr>, <expr><name>KEY_PAGEDOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_TAB</name></expr>, <expr><name>KEY_TAB</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VK_BACKSPACE</name></expr>, <expr><name>KEY_BACKSPACE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ConvertKey</name><parameter_list>( <parameter><decl><type><name>USHORT</name></type> <name>i_pmkey</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pmkeys_to_vlckeys</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_pmkey</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pmkeys_to_vlckeys</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_pmkey</name> <operator>==</operator> <name>i_pmkey</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>pmkeys_to_vlckeys</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_vlckey</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MRESULT</name> <name>EXPENTRY</name></type> <name>MyFrameWndProc</name><parameter_list>( <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>MPARAM</name></type> <name>mp1</name></decl></parameter>,

<parameter><decl><type><name>MPARAM</name></type> <name>mp2</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name> <init>= <expr><call><name>WinQueryWindowPtr</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>msg</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>WM_QUERYTRACKINFO</name></expr> :</case>

<block>{<block_content>

<decl_stmt><decl><type><name>MRESULT</name></type> <name>mr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mr</name> <operator>=</operator> <call><name><name>sys</name><operator>-&gt;</operator><name>p_old_frame</name></name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>mp1</name></expr></argument>, <argument><expr><name>mp2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>b_fixt23</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>mr</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>PTRACKINFO</name></type> <name>pti</name> <init>= <expr><operator>(</operator> <name>PTRACKINFO</name> <operator>)</operator><name>mp2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECTL</name></type> <name>rcl</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>rclBoundary</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>rclBoundary</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>rclBoundary</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>rclBoundary</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pti</name><operator>-&gt;</operator><name>rclBoundary</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>ptlMaxTrackSize</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>pti</name><operator>-&gt;</operator><name>rclBoundary</name><operator>.</operator><name>xRight</name></name> <operator>-</operator>

<name><name>pti</name><operator>-&gt;</operator><name>rclBoundary</name><operator>.</operator><name>xLeft</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>ptlMaxTrackSize</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>pti</name><operator>-&gt;</operator><name>rclBoundary</name><operator>.</operator><name>yTop</name></name> <operator>-</operator>

<name><name>pti</name><operator>-&gt;</operator><name>rclBoundary</name><operator>.</operator><name>yBottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>szlSrcSize</name><operator>.</operator><name>cx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>szlSrcSize</name><operator>.</operator><name>cy</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcl</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>ptlMinTrackSize</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pti</name><operator>-&gt;</operator><name>ptlMinTrackSize</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>MRFROMLONG</name><argument_list>( <argument><expr><name>TRUE</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>WM_ADJUSTWINDOWPOS</name></expr> :</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>b_fixt23</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>PSWP</name></type> <name>pswp</name> <init>= <expr><operator>(</operator> <name>PSWP</name> <operator>)</operator><name>mp1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pswp</name><operator>-&gt;</operator><name>fl</name></name> <operator>&amp;</operator> <name>SWP_SIZE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>RECTL</name></type> <name>rcl</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <name><name>pswp</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <name><name>pswp</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>+</operator> <name><name>pswp</name><operator>-&gt;</operator><name>cx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>+</operator> <name><name>pswp</name><operator>-&gt;</operator><name>cy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcl</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>&lt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>szlSrcSize</name><operator>.</operator><name>cx</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>+</operator> <operator>(</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>szlSrcSize</name><operator>.</operator><name>cx</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>&lt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>szlSrcSize</name><operator>.</operator><name>cy</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>+</operator> <operator>(</operator> <name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>szlSrcSize</name><operator>.</operator><name>cy</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_width</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_width</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcl</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pswp</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>||</operator> <name><name>pswp</name><operator>-&gt;</operator><name>y</name></name> <operator>!=</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pswp</name><operator>-&gt;</operator><name>fl</name></name> <operator>|=</operator> <name>SWP_MOVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pswp</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pswp</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pswp</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pswp</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_VRNENABLED</name></expr> :</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>is_fullscreen</name></name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>is_on_top</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinSetWindowPos</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SWP_ZORDER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name><name>sys</name><operator>-&gt;</operator><name>p_old_frame</name></name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>mp1</name></expr></argument>, <argument><expr><name>mp2</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MousePressed</name><parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>button</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>WinQueryFocus</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>hwnd</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinSetFocus</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinSetCapture</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>button</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_display_SendEventMousePressed</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>button</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MouseReleased</name><parameter_list>( <parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>button</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>button</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>vd</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>button_pressed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WinSetCapture</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><name>NULLHANDLE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_display_SendEventMouseReleased</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>button</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_MOUSELEAVE</name></cpp:macro> <cpp:value>0x41F</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>MRESULT</name> <name>EXPENTRY</name></type> <name>WndProc</name><parameter_list>( <parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>MPARAM</name></type> <name>mp1</name></decl></parameter>, <parameter><decl><type><name>MPARAM</name></type> <name>mp2</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_t</name> <modifier>*</modifier></type> <name>vd</name> <init>= <expr><call><name>WinQueryWindowPtr</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MRESULT</name></type> <name>result</name> <init>= <expr><operator>(</operator> <name>MRESULT</name> <operator>)</operator><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>vd</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>WinDefWindowProc</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>mp1</name></expr></argument>, <argument><expr><name>mp2</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECTL</name></type> <name>rcl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SWP</name></type> <name>swp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>is_mouse_hidden</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>msg</name> <operator>&gt;=</operator> <name>WM_MOUSEFIRST</name> <operator>&amp;&amp;</operator> <name>msg</name> <operator>&lt;=</operator> <name>WM_MOUSELAST</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>msg</name> <operator>&gt;=</operator> <name>WM_EXTMOUSEFIRST</name> <operator>&amp;&amp;</operator> <name>msg</name> <operator>&lt;=</operator> <name>WM_EXTMOUSELAST</name><operator>)</operator> <operator>||</operator>

<name>msg</name> <operator>==</operator> <name>WM_MOUSELEAVE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WinShowPointer</name><argument_list>(<argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_mouse_hidden</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinStartTimer</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hab</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>TID_HIDE_MOUSE</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_timeout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name>msg</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>WM_CLOSE</name></expr>:</case>

<expr_stmt><expr><call><name>vout_window_ReportClose</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_MOUSEMOVE</name></expr> :</case>

<block>{<block_content>

<decl_stmt><decl><type><name>SHORT</name></type> <name>i_mouse_x</name> <init>= <expr><call><name>SHORT1FROMMP</name><argument_list>( <argument><expr><name>mp1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SHORT</name></type> <name>i_mouse_y</name> <init>= <expr><call><name>SHORT2FROMMP</name><argument_list>( <argument><expr><name>mp1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RECTL</name></type> <name>movie_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_movie_width</name></decl>, <decl><type ref="prev"/><name>i_movie_height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kvaAdjustDstRect</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>kvas</name><operator>.</operator><name>rclSrcRect</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>movie_rect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_movie_width</name> <operator>=</operator> <name><name>movie_rect</name><operator>.</operator><name>xRight</name></name> <operator>-</operator> <name><name>movie_rect</name><operator>.</operator><name>xLeft</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_movie_height</name> <operator>=</operator> <name><name>movie_rect</name><operator>.</operator><name>yTop</name></name> <operator>-</operator> <name><name>movie_rect</name><operator>.</operator><name>yBottom</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>place</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>place</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator> <name>i_mouse_x</name> <operator>-</operator> <name><name>movie_rect</name><operator>.</operator><name>xLeft</name></name> <operator>)</operator> <operator>*</operator>

<name><name>place</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name>i_movie_width</name> <operator>+</operator> <name><name>place</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator> <name>i_mouse_y</name> <operator>-</operator> <name><name>movie_rect</name><operator>.</operator><name>yBottom</name></name> <operator>)</operator> <operator>*</operator>

<name><name>place</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name>i_movie_height</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator> <name><name>place</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>y</name> <operator>)</operator> <operator>+</operator> <name><name>place</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_display_SendMouseMovedDisplayCoordinates</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WinDefWindowProc</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>mp1</name></expr></argument>,<argument><expr><name>mp2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_BUTTON1DOWN</name></expr> :</case>

<expr_stmt><expr><call><name>MousePressed</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_BUTTON2DOWN</name></expr> :</case>

<expr_stmt><expr><call><name>MousePressed</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_RIGHT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_BUTTON3DOWN</name></expr> :</case>

<expr_stmt><expr><call><name>MousePressed</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_CENTER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_BUTTON1UP</name></expr> :</case>

<expr_stmt><expr><call><name>MouseReleased</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_BUTTON2UP</name></expr> :</case>

<expr_stmt><expr><call><name>MouseReleased</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_RIGHT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_BUTTON3UP</name></expr> :</case>

<expr_stmt><expr><call><name>MouseReleased</name><argument_list>( <argument><expr><name>vd</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_CENTER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_BUTTON1DBLCLK</name></expr> :</case>

<expr_stmt><expr><call><name>vout_display_SendEventMouseDoubleClick</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_TRANSLATEACCEL</name></expr> :</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator> <name>MRESULT</name> <operator>)</operator><name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_CHAR</name></expr> :</case>

<block>{<block_content>

<decl_stmt><decl><type><name>USHORT</name></type> <name>i_flags</name> <init>= <expr><call><name>SHORT1FROMMP</name><argument_list>( <argument><expr><name>mp1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>i_ch</name> <init>= <expr><call><name>SHORT1FROMMP</name><argument_list>( <argument><expr><name>mp2</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>USHORT</name></type> <name>i_vk</name> <init>= <expr><call><name>SHORT2FROMMP</name><argument_list>( <argument><expr><name>mp2</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WinPostMsg</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>mp1</name></expr></argument>, <argument><expr><name>mp2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>i_flags</name> <operator>&amp;</operator> <name>KC_KEYUP</name> <operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>&amp;</operator> <name>KC_VIRTUALKEY</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_key</name> <operator>=</operator> <call><name>ConvertKey</name><argument_list>( <argument><expr><name>i_vk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator> <name>i_flags</name> <operator>&amp;</operator> <name>KC_CHAR</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HIBYTE</name><argument_list>( <argument><expr><name>i_ch</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_key</name> <operator>=</operator> <call><name>tolower</name><argument_list>( <argument><expr><name>i_ch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_key</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>&amp;</operator> <name>KC_SHIFT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_key</name> <operator>|=</operator> <name>KEY_MODIFIER_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>&amp;</operator> <name>KC_CTRL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_key</name> <operator>|=</operator> <name>KEY_MODIFIER_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>&amp;</operator> <name>KC_ALT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_key</name> <operator>|=</operator> <name>KEY_MODIFIER_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vout_window_ReportKeyPress</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>i_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WM_TIMER</name></expr> :</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>is_mouse_hidden</name></name> <operator>&amp;&amp;</operator>

<call><name>SHORT1FROMMP</name><argument_list>( <argument><expr><name>mp1</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>TID_HIDE_MOUSE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>POINTL</name></type> <name>ptl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WinQueryPointerPos</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>WinWindowFromPoint</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptl</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> )</argument_list></call>

<operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WinShowPointer</name><argument_list>( <argument><expr><name>HWND_DESKTOP</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_mouse_hidden</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinStopTimer</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>hab</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>TID_HIDE_MOUSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>WM_VLC_MANAGE</name></expr> :</case>

<break>break;</break>

<case>case <expr><name>WM_VLC_FULLSCREEN_CHANGE</name></expr> :</case>

<if_stmt><if>if<condition>( <expr><call><name>LONGFROMMP</name><argument_list>( <argument><expr><name>mp1</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WinQueryWindowPos</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>swp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <name><name>swp</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <name><name>swp</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>xLeft</name></name> <operator>+</operator> <name><name>swp</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>yBottom</name></name> <operator>+</operator> <name><name>swp</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_screen_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rcl</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>client_rect</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcl</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinSetWindowPos</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>,

<argument><expr><name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr></argument>, <argument><expr><name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr></argument>,

<argument><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr></argument>, <argument><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr></argument>,

<argument><expr><name>SWP_MOVE</name> <operator>|</operator> <name>SWP_SIZE</name> <operator>|</operator> <name>SWP_ZORDER</name> <operator>|</operator> <name>SWP_SHOW</name> <operator>|</operator>

<name>SWP_ACTIVATE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WM_VLC_SIZE_CHANGE</name></expr> :</case>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <call><name>LONGFROMMP</name><argument_list>( <argument><expr><name>mp1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <call><name>LONGFROMMP</name><argument_list>( <argument><expr><name>mp2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcl</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinSetWindowPos</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>NULLHANDLE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr></argument>, <argument><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr></argument>,

<argument><expr><name>SWP_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinQueryWindowPos</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>swp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>xLeft</name></name> <operator>=</operator> <name><name>swp</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>yBottom</name></name> <operator>=</operator> <name><name>swp</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>xRight</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>xLeft</name></name> <operator>+</operator> <name><name>swp</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>yTop</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>client_rect</name><operator>.</operator><name>yBottom</name></name> <operator>+</operator> <name><name>swp</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>client_rect</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default :</default>

<return>return <expr><call><name>WinDefWindowProc</name><argument_list>( <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>mp1</name></expr></argument>, <argument><expr><name>mp2</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>parent_window</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>RECTL</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WinQueryWindowRect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinQueryWindowRect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>rcl</name><operator>.</operator><name>xLeft</name></name> <operator>!=</operator> <name><name>rect</name><operator>.</operator><name>xLeft</name></name> <operator>||</operator>

<name><name>rcl</name><operator>.</operator><name>yBottom</name></name> <operator>!=</operator> <name><name>rect</name><operator>.</operator><name>yBottom</name></name> <operator>||</operator>

<name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>!=</operator> <name><name>rect</name><operator>.</operator><name>xRight</name></name> <operator>||</operator>

<name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>!=</operator> <name><name>rect</name><operator>.</operator><name>yTop</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WinCalcFrameRect</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcl</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WinSetWindowPos</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>NULLHANDLE</name></expr></argument>,

<argument><expr><name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr></argument>, <argument><expr><name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr></argument>,

<argument><expr><name><name>rcl</name><operator>.</operator><name>xRight</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>xLeft</name></name></expr></argument>, <argument><expr><name><name>rcl</name><operator>.</operator><name>yTop</name></name> <operator>-</operator> <name><name>rcl</name><operator>.</operator><name>yBottom</name></name></expr></argument>,

<argument><expr><name>SWP_SIZE</name> <operator>|</operator> <name>SWP_MOVE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

</unit>
