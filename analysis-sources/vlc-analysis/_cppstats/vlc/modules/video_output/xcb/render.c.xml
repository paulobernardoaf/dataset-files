<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\xcb\render.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/render.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/shm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pictures.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<struct>struct <name>vout_display_sys_t</name> <block>{

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>xcb_pixmap_t</name></type> <name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_pixmap_t</name></type> <name>crop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_pixmap_t</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_pixmap_t</name></type> <name>subpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_pixmap_t</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>dest</name></decl>;</decl_stmt>

}</block> <decl><name>drawable</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>xcb_render_picture_t</name></type> <name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_picture_t</name></type> <name>crop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_picture_t</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_picture_t</name></type> <name>subpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_picture_t</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_picture_t</name></type> <name>dest</name></decl>;</decl_stmt>

}</block> <decl><name>picture</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>xcb_render_pictformat_t</name></type> <name>argb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_pictformat_t</name></type> <name>alpha</name></decl>;</decl_stmt>

}</block> <decl><name>format</name></decl>;</struct>

<decl_stmt><decl><type><name>xcb_gcontext_t</name></type> <name>gc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_shm_seg_t</name></type> <name>segment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>place</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>src_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>src_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name><name>spu_chromas</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>PictureAttach</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_shm_seg_t</name></type> <name>segment</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>segment</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>picture_buffer_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>segment</name> <operator>==</operator> <literal type="number">0</literal> 

<operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vlc_dup</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_void_cookie_t</name></type> <name>c</name> <init>= <expr><call><name>xcb_shm_attach_fd_checked</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>xcb_request_check</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PictureDetach</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_shm_detach</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RenderRegion</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>subpicture_region_t</name> <modifier>*</modifier></type><name>reg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vout_display_place_t</name> <modifier>*</modifier></type><name>place</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>place</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>p_picture</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sw</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sh</name> <init>= <expr><name><name>reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_rectangle_t</name></type> <name><name>rects</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>sw</name></expr>, <expr><name>sh</name></expr> }</block></expr>, }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_create_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>subpic</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_create_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>alpha</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_create_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>subpic</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>subpic</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>argb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_create_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>alpha</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>alpha</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>alpha</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_put_image</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_IMAGE_FORMAT_Z_PIXMAP</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>subpic</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>/</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_composite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_RENDER_PICT_OP_SRC</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>subpic</name></name></expr></argument>, <argument><expr><name>XCB_RENDER_PICTURE_NONE</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>alpha</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xcb_render_color_t</name></type> <name>alpha_one_color</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xffff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_render_fill_rectangles</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_RENDER_PICT_OP_ADD</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>subpic</name></name></expr></argument>, <argument><expr><name>alpha_one_color</name></expr></argument>,

<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>rects</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>alpha_fixed</name> <init>= <expr><literal type="number">0xffffp0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">0xffp0f</literal> <operator>*</operator> <literal type="number">0xffp0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_color_t</name></type> <name>alpha_color</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <macro><name>lroundf</name><argument_list>(<argument>reg-&gt;i_alpha * subpic-&gt;i_alpha * alpha_fixed</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_render_fill_rectangles</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_RENDER_PICT_OP_IN_REVERSE</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>subpic</name></name></expr></argument>, <argument><expr><name>alpha_color</name></expr></argument>,

<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>rects</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int_fast16_t</name></type> <name>dx</name> <init>= <expr><name><name>place</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>i_x</name></name> <operator>*</operator> <name><name>place</name><operator>-&gt;</operator><name>width</name></name>

<operator>/</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_fast16_t</name></type> <name>dy</name> <init>= <expr><name><name>place</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>i_y</name></name> <operator>*</operator> <name><name>place</name><operator>-&gt;</operator><name>height</name></name>

<operator>/</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>dw</name> <init>= <expr><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>i_x</name></name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name><operator>)</operator> <operator>*</operator> <name><name>place</name><operator>-&gt;</operator><name>width</name></name>

<operator>/</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint_fast16_t</name></type> <name>dh</name> <init>= <expr><operator>(</operator><name><name>reg</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name><name>reg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>*</operator> <name><name>place</name><operator>-&gt;</operator><name>height</name></name>

<operator>/</operator> <name><name>subpic</name><operator>-&gt;</operator><name>i_original_picture_height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_render_composite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_RENDER_PICT_OP_OVER</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>subpic</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>alpha</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>scale</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_free_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_free_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>subpic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_free_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_free_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>subpic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpic</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><call><name>PictureAttach</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xcb_shm_put_image</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>/</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>/</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>XCB_IMAGE_FORMAT_Z_PIXMAP</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>segment</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>xcb_put_image</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_IMAGE_FORMAT_Z_PIXMAP</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>source</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>/</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xcb_render_composite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_RENDER_PICT_OP_SRC</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name>XCB_RENDER_PICTURE_NONE</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>crop</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xcb_render_color_t</name></type> <name>black_color</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xffff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_rectangle_t</name></type> <name><name>rects</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>height</name></name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_render_fill_rectangles</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_RENDER_PICT_OP_SRC</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>scale</name></name></expr></argument>, <argument><expr><name>black_color</name></expr></argument>,

<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>rects</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_composite</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_RENDER_PICT_OP_SRC</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>crop</name></name></expr></argument>, <argument><expr><name>XCB_RENDER_PICTURE_NONE</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>src_x</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>src_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PictureDetach</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subpic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpic</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RenderRegion</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>subpic</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>date</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Display</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_void_cookie_t</name></type> <name>ck</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_xcb_Manage</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ck</name> <operator>=</operator> <call><name>xcb_render_composite_checked</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_RENDER_PICT_OP_SRC</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>scale</name></name></expr></argument>,

<argument><expr><name>XCB_RENDER_PICTURE_NONE</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>dest</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>xcb_request_check</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ck</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s: RENDER error %d"</literal></expr></argument>, <argument><expr><literal type="string">"cannot composite"</literal></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>pic</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CreateBuffers</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_create_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>crop</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_create_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,

<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_create_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>crop</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>crop</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>argb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_create_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>scale</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>scale</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>argb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_display_place_t</name> <modifier>*</modifier></type><name>place</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>place</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ax</name> <init>= <expr><name><name>place</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>ay</name> <init>= <expr><name><name>place</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>bx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>by</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>orientation</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ORIENT_TOP_LEFT</name></expr>:</case>

<case>case <expr><name>ORIENT_LEFT_TOP</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>ORIENT_TOP_RIGHT</name></expr>:</case>

<case>case <expr><name>ORIENT_RIGHT_TOP</name></expr>:</case>

<expr_stmt><expr><name>ax</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bx</name> <operator>-=</operator> <name><name>place</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_BOTTOM_LEFT</name></expr>:</case>

<case>case <expr><name>ORIENT_LEFT_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>ay</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>by</name> <operator>-=</operator> <name><name>place</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORIENT_BOTTOM_RIGHT</name></expr>:</case>

<case>case <expr><name>ORIENT_RIGHT_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>ax</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ay</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bx</name> <operator>-=</operator> <name><name>place</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>by</name> <operator>-=</operator> <name><name>place</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>src_x</name></name> <operator>=</operator> <name>bx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>src_y</name></name> <operator>=</operator> <name>by</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_render_transform_t</name></type> <name>transform</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>place</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>place</name><operator>-&gt;</operator><name>height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ORIENT_IS_SWAP</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>orientation</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>transform</name><operator>.</operator><name>matrix12</name></name> <operator>=</operator> <name>ay</name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transform</name><operator>.</operator><name>matrix21</name></name> <operator>=</operator> <name>ax</name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>transform</name><operator>.</operator><name>matrix11</name></name> <operator>=</operator> <name>ax</name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transform</name><operator>.</operator><name>matrix22</name></name> <operator>=</operator> <name>ay</name> <operator>*</operator> <name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xcb_render_set_picture_transform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>crop</name></name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xcb_render_set_picture_filter</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>crop</name></name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeleteBuffers</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_render_free_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_free_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>crop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_free_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_free_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>crop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_SIZE</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_FILLED</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_ZOOM</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_ASPECT</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_CROP</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>vout_display_cfg_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><name>XCB_CONFIG_WINDOW_WIDTH</name> <operator>|</operator> <name>XCB_CONFIG_WINDOW_HEIGHT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{

<expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>height</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_configure_window</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>dest</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteBuffers</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CreateBuffers</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VOUT_DISPLAY_RESET_PICTURES</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Unknown request in XCB RENDER display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckRender</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_render_query_version_reply_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_query_version_cookie_t</name></type> <name>ck</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ck</name> <operator>=</operator> <call><name>xcb_render_query_version</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>xcb_render_query_version_reply</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"RENDER extension not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>major_version</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"RENDER extension v%"</literal><name>PRIu32</name><literal type="string">".%"</literal><name>PRIu32</name><literal type="string">" unknown"</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>minor_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>major_version</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>minor_version</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"RENDER extension v%"</literal><name>PRIu32</name><literal type="string">".%"</literal><name>PRIu32</name><literal type="string">" too old"</literal></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>minor_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"using RENDER extension v%"</literal><name>PRIu32</name><literal type="string">".%"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>minor_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ok</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_disconnect</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>ParseFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>xcb_render_pictforminfo_t</name> <modifier>*</modifier></type><name>pfi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pfi</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>XCB_RENDER_PICT_TYPE_DIRECT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_format_t</name> <modifier>*</modifier></type><name>pixfmt</name> <init>= <expr><call><name>vlc_xcb_DepthToPixmapFormat</name><argument_list>(<argument><expr><name>setup</name></expr></argument>,

<argument><expr><name><name>pfi</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pixfmt</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint_fast8_t</name></type> <name>bpp</name> <init>= <expr><name><name>pixfmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_render_directformat_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>&amp;</operator><name><name>pfi</name><operator>-&gt;</operator><name>direct</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>pfi</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>red_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>alpha_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>red_shift</name></name> <operator>==</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_shift</name></name> <operator>==</operator> <literal type="number">16</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_shift</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_RGBA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>red_shift</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_shift</name></name> <operator>==</operator> <literal type="number">16</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_shift</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_BGRA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>red_shift</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_shift</name></name> <operator>==</operator> <literal type="number">8</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_shift</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_ARGB</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>red_shift</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_shift</name></name> <operator>==</operator> <literal type="number">8</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_shift</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_RGBA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>red_shift</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_shift</name></name> <operator>==</operator> <literal type="number">8</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_shift</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_BGRA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>red_shift</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_shift</name></name> <operator>==</operator> <literal type="number">16</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_shift</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_ARGB</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>red_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>alpha_mask</name></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_RGB32</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>red_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>alpha_mask</name></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_RGB24</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>red_mask</name></name> <operator>==</operator> <literal type="number">0x1f</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_mask</name></name> <operator>==</operator> <literal type="number">0x3f</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_mask</name></name> <operator>==</operator> <literal type="number">0x1f</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>alpha_mask</name></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_RGB16</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">15</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>red_mask</name></name> <operator>==</operator> <literal type="number">0x1f</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_mask</name></name> <operator>==</operator> <literal type="number">0x1f</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_mask</name></name> <operator>==</operator> <literal type="number">0x1f</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>alpha_mask</name></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_CODEC_RGB15</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>xcb_render_pictscreen_t</name> <modifier>*</modifier></type>

<name>FindPictScreen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>scr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>xcb_render_query_pict_formats_reply_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_screen_iterator_t</name></type> <name>si</name> <init>= <expr><call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>si</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>scr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>si</name><operator>.</operator><name>rem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_screen_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>xcb_render_pictscreen_iterator_t</name></type> <name>rsi</name> <init>=

<expr><call><name>xcb_render_query_pict_formats_screens_iterator</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>rsi</name><operator>.</operator><name>rem</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_pictscreen_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name><name>rsi</name><operator>.</operator><name>data</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xcb_visualid_t</name></type>

<name>FindVisual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>scr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>xcb_render_query_pict_formats_reply_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name>xcb_render_pictformat_t</name></type> <name>fmt_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_render_pictscreen_t</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><call><name>FindPictScreen</name><argument_list>(<argument><expr><name>setup</name></expr></argument>, <argument><expr><name>scr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_render_pictdepth_iterator_t</name></type> <name>rdi</name> <init>=

<expr><call><name>xcb_render_pictscreen_depths_iterator</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>rdi</name><operator>.</operator><name>rem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_render_pictdepth_t</name> <modifier>*</modifier></type><name>rd</name> <init>= <expr><name><name>rdi</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_pictvisual_iterator_t</name></type> <name>rvi</name> <init>=

<expr><call><name>xcb_render_pictdepth_visuals_iterator</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>rvi</name><operator>.</operator><name>rem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_render_pictvisual_t</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>rvi</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pv</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>fmt_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>pv</name><operator>-&gt;</operator><name>visual</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xcb_render_pictvisual_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rvi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xcb_render_pictdepth_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_xcb_parent_Create</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>argb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckRender</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_render_query_pict_formats_cookie_t</name></type> <name>pic_fmt_ck</name> <init>=

<expr><call><name>xcb_render_query_pict_formats</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_render_query_pict_formats_reply_t</name> <modifier>*</modifier></type><name>pic_fmt_r</name> <init>=

<expr><call><name>xcb_render_query_pict_formats_reply</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pic_fmt_ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_fmt_r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_render_pictforminfo_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pic_fmts</name> <init>=

<expr><call><name>xcb_render_query_pict_formats_formats</name><argument_list>(<argument><expr><name>pic_fmt_r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_visualid_t</name></type> <name>visual</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic_fmt_r</name><operator>-&gt;</operator><name>num_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_render_pictforminfo_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pic_fmt</name> <init>= <expr><name>pic_fmts</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_render_directformat_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>d</name> <init>= <expr><operator>&amp;</operator><name><name>pic_fmt</name><operator>-&gt;</operator><name>direct</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic_fmt</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>pic_fmt</name><operator>-&gt;</operator><name>direct</name><operator>.</operator><name>alpha_mask</name></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <name><name>pic_fmt</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_visualid_t</name></type> <name>vid</name> <init>= <expr><call><name>FindVisual</name><argument_list>(<argument><expr><name>setup</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><name>pic_fmt_r</name></expr></argument>, <argument><expr><name><name>pic_fmt</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic_fmt</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name> <init>= <expr><call><name>ParseFormat</name><argument_list>(<argument><expr><name>setup</name></expr></argument>, <argument><expr><name>pic_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmtp</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtp</name><operator>-&gt;</operator><name>i_rmask</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>red_mask</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>red_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtp</name><operator>-&gt;</operator><name>i_gmask</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>green_mask</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>green_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtp</name><operator>-&gt;</operator><name>i_bmask</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>blue_mask</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>blue_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>argb</name></name> <operator>=</operator> <name><name>pic_fmt</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>visual</name> <operator>=</operator> <name>vid</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pic_fmt_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>argb</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>alpha</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using RENDER picture format %u"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>argb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using X11 visual 0x%"</literal><name>PRIx32</name></expr></argument>, <argument><expr><name>visual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"x11-render-filter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using filter \"%s\""</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <macro><name>ToCharset</name><argument_list>(<argument><literal type="string">"ISO 8859-1"</literal></argument>, <argument>filter</argument>, <argument>&amp;(size_t){ <literal type="number">0</literal> }</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>source</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>crop</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>subpic</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>dest</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>source</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>crop</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>subpic</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>dest</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>gc</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XCB_shm_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>segment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>xcb_colormap_t</name></type> <name>cmap</name> <init>= <expr><call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cw_mask</name> <init>=

<expr><name>XCB_CW_BACK_PIXEL</name> <operator>|</operator>

<name>XCB_CW_BORDER_PIXEL</name> <operator>|</operator>

<name>XCB_CW_EVENT_MASK</name> <operator>|</operator>

<name>XCB_CW_COLORMAP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>cw_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><name><name>screen</name><operator>-&gt;</operator><name>black_pixel</name></name></expr>,

<expr><name><name>screen</name><operator>-&gt;</operator><name>black_pixel</name></name></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><name>cmap</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_create_colormap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_COLORMAP_ALLOC_NONE</name></expr></argument>, <argument><expr><name>cmap</name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,

<argument><expr><name>visual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_create_pixmap</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,

<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_create_gc</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_create_window</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>dest</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>window</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XCB_WINDOW_CLASS_INPUT_OUTPUT</name></expr></argument>, <argument><expr><name>visual</name></expr></argument>, <argument><expr><name>cw_mask</name></expr></argument>, <argument><expr><name>cw_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_create_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>source</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>argb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_render_create_picture</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>picture</name><operator>.</operator><name>dest</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>dest</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>argb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CreateBuffers</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_map_window</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>drawable</name><operator>.</operator><name>dest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_chromas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fmtp</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>spu_chromas</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>spu_chromas</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Prepare</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>Display</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>xcb_disconnect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>filter_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"nearest"</literal></expr>, <expr><literal type="string">"bilinear"</literal></expr>, <expr><literal type="string">"fast"</literal></expr>, <expr><literal type="string">"good"</literal></expr>, <expr><literal type="string">"best"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>filter_descs</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Nearest neighbor (bad quality)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bilinear"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Fast"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Good"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Best"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"RENDER"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"X11 RENDER video output (XCB)"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>set_callback_display</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">200</literal></argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"x11-render"</literal></argument>, <argument><literal type="string">"xcb-render"</literal></argument>, <argument><literal type="string">"render"</literal></argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"x11-render-filter"</literal></argument>, <argument><literal type="string">"good"</literal></argument>, <argument>N_(<literal type="string">"Scaling mode"</literal>)</argument>,

<argument>N_(<literal type="string">"Scaling mode"</literal>)</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>filter_names</argument>, <argument>filter_descs</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

</unit>
