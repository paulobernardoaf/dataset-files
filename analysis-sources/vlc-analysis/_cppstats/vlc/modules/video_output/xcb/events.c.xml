<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\xcb\events.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"events.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>vlc_module_name</name><index>[]</index></name> <init>= <expr><literal type="string">"xcb"</literal></expr></init></decl>;</decl_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>visibility</name> <name>push</name><name>(</name><name>default</name><name>)</name></cpp:pragma>

<function><type><name>int</name></type> <name>vlc_xcb_error_Check</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>xcb_void_cookie_t</name></type> <name>ck</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>xcb_request_check</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name><name>err</name><operator>-&gt;</operator><name>error_code</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"%s: X11 error %d"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>code</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xcb_connection_t</name> <modifier>*</modifier></type><name>Connect</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>display</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>xcb_connect</name> <argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xcb_connection_has_error</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot connect to X server (%s)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>display</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>display</name></expr> </then><else>: <expr><literal type="string">"default"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_disconnect</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>xcb_get_setup</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"connected to X%"</literal><name>PRIu16</name><literal type="string">".%"</literal><name>PRIu16</name><literal type="string">" server"</literal></expr></argument>,

<argument><expr><name><name>setup</name><operator>-&gt;</operator><name>protocol_major_version</name></name></expr></argument>, <argument><expr><name><name>setup</name><operator>-&gt;</operator><name>protocol_minor_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" vendor : %.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>setup</name><operator>-&gt;</operator><name>vendor_len</name></name></expr></argument>,

<argument><expr><call><name>xcb_setup_vendor</name> <argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" version: %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>setup</name><operator>-&gt;</operator><name>release_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>conn</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>FindScreen</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>xcb_window_t</name></type> <name>root</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>xcb_get_setup</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>xcb_screen_iterator_t</name></type> <name>i</name> <init>= <expr><call><name>xcb_setup_roots_iterator</name> <argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</init>

<condition><expr><name><name>i</name><operator>.</operator><name>rem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><call><name>xcb_screen_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>root</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using screen 0x%"</literal><name>PRIx32</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>i</name><operator>.</operator><name>data</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"window screen not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_xcb_parent_Create</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name></decl></parameter>,

<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>pconn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>xcb_screen_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>pscreen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VOUT_WINDOW_TYPE_XID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"window not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EBADVAR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>Connect</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>x11</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pconn</name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>geo</name> <init>=

<expr><call><name>xcb_get_geometry_reply</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>xcb_get_geometry</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>geo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"window not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>FindScreen</name> <argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>geo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>screen</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pscreen</name> <operator>=</operator> <name>screen</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xcb_disconnect</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessEvent</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>xcb_generic_event_t</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>response_type</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>XCB_MAPPING_NOTIFY</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"unhandled event %"</literal><name>PRIu8</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>response_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_xcb_Manage</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_generic_event_t</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ev</name> <operator>=</operator> <call><name>xcb_poll_for_event</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ProcessEvent</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>xcb_connection_has_error</name> <argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"X server failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
