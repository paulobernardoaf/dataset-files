<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\caca.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdnoreturn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_DISPLAY_MISSING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Xlib required due to XInitThreads</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;caca.h&gt;</cpp:file></cpp:include>

<struct>struct <name>vout_display_sys_t</name> <block>{

<decl_stmt><decl><type><name>cucul_canvas_t</name> <modifier>*</modifier></type><name>cv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>caca_display_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cucul_dither_t</name> <modifier>*</modifier></type><name>dither</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>place</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>cursor_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>cursor_deadline</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>noreturn</name> <specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>VoutDisplayEventKeyDispatch</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><call><name>block_FifoGet</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cancel</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_window_ReportKeyPress</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VoutDisplayEventKey</name><parameter_list>(<parameter><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>event</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Place</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>place</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>canvas_width</name> <init>= <expr><call><name>cucul_get_canvas_width</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>canvas_height</name> <init>= <expr><call><name>cucul_get_canvas_height</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>display_width</name> <init>= <expr><call><name>caca_get_display_width</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>display_height</name> <init>= <expr><call><name>caca_get_display_height</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>display_width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>display_height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>canvas_width</name> <operator>/</operator> <name>display_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name>canvas_height</name> <operator>/</operator> <name>display_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name>canvas_width</name> <operator>+</operator> <name>display_width</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>display_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>height</name></name> <operator>=</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>height</name></name> <operator>*</operator> <name>canvas_height</name> <operator>+</operator> <name>display_height</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>display_height</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>canvas_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>display_height</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Manage</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Prepare</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>,

<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Manage</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name> <operator>=</operator> <call><name>cucul_create_dither</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,

<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,

<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_rmask</name></name></expr></argument>,

<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_gmask</name></name></expr></argument>,

<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_bmask</name></name></expr></argument>,

<argument><expr><literal type="number">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"could not create libcaca dither object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cucul_set_color_ansi</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><name>CUCUL_COLOR_DEFAULT</name></expr></argument>, <argument><expr><name>CUCUL_COLOR_BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cucul_clear_canvas</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>crop_offset</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_y_offset</name></name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator>

<name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_x_offset</name></name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cucul_dither_bitmap</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>crop_offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>subpicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PictureDisplay</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>caca_refresh_display</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>args</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_CROP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cucul_free_dither</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_SIZE</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_ZOOM</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_FILLED</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_ASPECT</name></expr>:</case>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Unsupported query in vout display caca"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>caca</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vlc</name></decl>;</decl_stmt>

}</block> <decl><name><name>keys</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>CACA_KEY_CTRL_A</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'a'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_B</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'b'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_C</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'c'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_D</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'d'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_E</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'e'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_F</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'f'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_G</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'g'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_BACKSPACE</name></expr>, <expr><name>KEY_BACKSPACE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_TAB</name></expr>, <expr><name>KEY_TAB</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_J</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'j'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_K</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'k'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_L</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'l'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_RETURN</name></expr>, <expr><name>KEY_ENTER</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_N</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'n'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_O</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'o'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_P</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'p'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_Q</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'q'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_R</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'r'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_PAUSE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_T</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'t'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_U</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'u'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_V</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'v'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_W</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'w'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_X</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'x'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_Y</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'y'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_CTRL_Z</name></expr>, <expr><name>KEY_MODIFIER_CTRL</name> <operator>|</operator> <literal type="char">'z'</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_ESCAPE</name></expr>, <expr><name>KEY_ESC</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_DELETE</name></expr>, <expr><name>KEY_DELETE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F1</name></expr>, <expr><name>KEY_F1</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F2</name></expr>, <expr><name>KEY_F2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F3</name></expr>, <expr><name>KEY_F3</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F4</name></expr>, <expr><name>KEY_F4</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F5</name></expr>, <expr><name>KEY_F5</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F6</name></expr>, <expr><name>KEY_F6</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F7</name></expr>, <expr><name>KEY_F7</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F8</name></expr>, <expr><name>KEY_F8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F9</name></expr>, <expr><name>KEY_F9</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F10</name></expr>, <expr><name>KEY_F10</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F11</name></expr>, <expr><name>KEY_F11</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F12</name></expr>, <expr><name>KEY_F12</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F13</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F14</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_F15</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_UP</name></expr>, <expr><name>KEY_UP</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_DOWN</name></expr>, <expr><name>KEY_DOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_LEFT</name></expr>, <expr><name>KEY_LEFT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_RIGHT</name></expr>, <expr><name>KEY_RIGHT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_INSERT</name></expr>, <expr><name>KEY_INSERT</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_HOME</name></expr>, <expr><name>KEY_HOME</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_END</name></expr>, <expr><name>KEY_END</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_PAGEUP</name></expr>, <expr><name>KEY_PAGEUP</name></expr> }</block></expr>,

<expr><block>{ <expr><name>CACA_KEY_PAGEDOWN</name></expr>,<expr><name>KEY_PAGEDOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>caca</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vlc</name></decl>;</decl_stmt>

}</block> <decl><name><name>mouses</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>MOUSE_BUTTON_LEFT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>MOUSE_BUTTON_CENTER</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>MOUSE_BUTTON_RIGHT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>MOUSE_BUTTON_WHEEL_UP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>MOUSE_BUTTON_WHEEL_DOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_DEADLINE</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Manage</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>!=</operator> <name>INVALID_DEADLINE</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>&lt;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>caca_set_mouse</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>=</operator> <name>INVALID_DEADLINE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>caca_event</name></name></type> <name>ev</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>caca_get_event</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><name>CACA_EVENT_ANY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>caca_get_event_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CACA_EVENT_KEY_PRESS</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>caca</name> <init>= <expr><call><name>caca_get_event_key_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>caca</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>caca</name> <operator>==</operator> <name>caca</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vlc</name> <init>= <expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vlc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vlc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VoutDisplayEventKey</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>caca</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>caca</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VoutDisplayEventKey</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>caca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CACA_EVENT_RESIZE</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CACA_EVENT_MOUSE_MOTION</name></expr>:</case>

<expr_stmt><expr><call><name>caca_set_mouse</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>cursor_timeout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_window_ReportMouseMoved</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><call><name>caca_get_event_mouse_x</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>caca_get_event_mouse_y</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CACA_EVENT_MOUSE_PRESS</name></expr>:</case>

<case>case <expr><name>CACA_EVENT_MOUSE_RELEASE</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><call><name>caca_set_mouse</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>cursor_timeout</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>caca</name> <init>= <expr><call><name>caca_get_event_mouse_button</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>mouses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>caca</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mouses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>caca</name> <operator>==</operator> <name>caca</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>caca_get_event_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CACA_EVENT_MOUSE_PRESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_window_ReportMousePressed</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>mouses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vout_window_ReportMouseReleased</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>mouses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CACA_EVENT_QUIT</name></expr>:</case>

<expr_stmt><expr><call><name>vout_window_ReportClose</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cucul_free_dither</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>caca_free_display</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cucul_free_canvas</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>FreeConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmtp</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vout_display_cfg_IsWindowed</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>X_DISPLAY_MISSING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_xlib_init</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbiInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>coord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hstdout</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocConsole</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot create console"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hstdout</name> <operator>=</operator>

<call><name>CreateConsoleScreenBuffer</name><argument_list>(<argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CONSOLE_TEXTMODE_BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hstdout</name> <operator>||</operator> <name>hstdout</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot create screen buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleActiveScreenBuffer</name><argument_list>(<argument><expr><name>hstdout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot set active screen buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>coord</name> <operator>=</operator> <call><name>GetLargestConsoleWindowSize</name><argument_list>(<argument><expr><name>hstdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"SetConsoleWindowInfo: %ix%i"</literal></expr></argument>, <argument><expr><name><name>coord</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name><name>coord</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleScreenBufferSize</name><argument_list>(<argument><expr><name>hstdout</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"SetConsoleScreenBufferSize %i %i"</literal></expr></argument>,

<argument><expr><name><name>coord</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name><name>coord</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>hstdout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbiInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>csbiInfo</name><operator>.</operator><name>dwMaximumWindowSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>csbiInfo</name><operator>.</operator><name>dwMaximumWindowSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleWindowInfo</name><argument_list>(<argument><expr><name>hstdout</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"SetConsoleWindowInfo failed: %ix%i"</literal></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>Right</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>Bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <call><name>cucul_create_canvas</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize libcucul"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>driver</name> <operator>=</operator> <literal type="string">"ncurses"</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name> <operator>=</operator> <call><name>caca_create_display_with_driver</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize libcaca"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"video-title"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>caca_set_display_title</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>title</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>title</name></expr> </then><else>: <expr><name>VOUT_TITLE</name> <literal type="string">"(Colour AsCii Art)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name> <init>= <expr><call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>fifo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <name>fifo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>VoutDisplayEventKeyDispatch</name></expr></argument>, <argument><expr><name>vd</name></expr></argument>,

<argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_timeout</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"mouse-hide-timeout"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cursor_deadline</name></name> <operator>=</operator> <name>INVALID_DEADLINE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><operator>*</operator><name>fmtp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_RGB32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x00ff0000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x0000ff00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0x000000ff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fmtp</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>Prepare</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>PictureDisplay</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>caca_refresh_display</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Place</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>sys</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cucul_free_dither</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>caca_free_display</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cucul_free_canvas</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>FreeConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"Caca"</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Color ASCII art video output"</literal>)</argument>)</argument_list></macro>

<macro><name>set_callback_display</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

</unit>
