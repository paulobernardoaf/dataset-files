<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\opengl\interop_cvpx.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/vt_utils.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGLES/ES2/gl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGLES/ES2/glext.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreVideo/CVOpenGLESTextureCache.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;IOSurface/IOSurface.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>priv</name>

<block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<decl_stmt><decl><type><name>CVOpenGLESTextureCacheRef</name></type> <name>cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVOpenGLESTextureRef</name></type> <name><name>last_cvtexs</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>last_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CGLContextObj</name></type> <name>gl_ctx</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>tc_cvpx_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>plane_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>plane_offset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>pixelBuffer</name> <init>= <expr><call><name>cvpxpic_get_ref</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last_cvtexs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last_cvtexs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>last_cvtexs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CVOpenGLESTextureCacheFlush</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>CVOpenGLESTextureRef</name></type> <name>cvtex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVReturn</name></type> <name>err</name> <init>= <expr><call><name>CVOpenGLESTextureCacheCreateTextureFromImage</name><argument_list>(

<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>pixelBuffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>internal</name></expr></argument>, <argument><expr><name><name>tex_width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tex_height</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cvtex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>,

<argument><expr><literal type="string">"CVOpenGLESTextureCacheCreateTextureFromImage failed: %d"</literal></expr></argument>,

<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CVOpenGLESTextureGetName</name><argument_list>(<argument><expr><name>cvtex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexParameteri</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexParameteri</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexParameterf</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexParameterf</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>last_cvtexs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cvtex</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>tc_cvpx_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>plane_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>plane_offset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>pixelBuffer</name> <init>= <expr><call><name>cvpxpic_get_ref</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IOSurfaceRef</name></type> <name>surface</name> <init>= <expr><call><name>CVPixelBufferGetIOSurface</name><argument_list>(<argument><expr><name>pixelBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>ActiveTexture</name></name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CGLError</name></type> <name>err</name> <init>=

<expr><call><name>CGLTexImageIOSurface2D</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_ctx</name></name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>,

<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>internal</name></expr></argument>,

<argument><expr><name><name>tex_width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tex_height</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>,

<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>,

<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>kCGLNoError</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"CGLTexImageIOSurface2D error: %u: %s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><call><name>CGLErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>last_pic</name></name> <operator>!=</operator> <name>pic</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>last_pic</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>last_pic</name></name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last_cvtexs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last_cvtexs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>last_pic</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>last_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_CVPX_UYVY</name>

<operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_CVPX_NV12</name>

<operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_CVPX_I420</name>

<operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_CVPX_BGRA</name>

<operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_CVPX_P010</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>priv</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>priv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLenum</name></type> <name>tex_target</name> <init>= <expr><name>GL_TEXTURE_2D</name></expr></init></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>CVEAGLContext</name></type> <name>eagl_ctx</name> <init>= <expr><call><name>var_InheritAddress</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"ios-eaglcontext"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eagl_ctx</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"can't find ios-eaglcontext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CVReturn</name></type> <name>err</name> <init>=

<expr><call><name>CVOpenGLESTextureCacheCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>eagl_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"CVOpenGLESTextureCacheCreate failed: %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLenum</name></type> <name>tex_target</name> <init>= <expr><name>GL_TEXTURE_RECTANGLE</name></expr></init></decl>;</decl_stmt>

<block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>gl_ctx</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"macosx-glcontext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>gl_ctx</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>, <argument><expr><literal type="string">"can't find macosx-glcontext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_CVPX_UYVY</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>VLC_CODEC_VYUY</name></expr></argument>,

<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>internal</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>format</name> <operator>=</operator> <name>GL_RGB_422_APPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT_8_8_APPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <operator>(</operator><name>vlc_rational_t</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_CVPX_NV12</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>VLC_CODEC_NV12</name></expr></argument>,

<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_CODEC_CVPX_P010</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>VLC_CODEC_P010</name></expr></argument>,

<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_CODEC_CVPX_I420</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>VLC_CODEC_I420</name></expr></argument>,

<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_CVPX_BGRA</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>VLC_CODEC_RGB32</name></expr></argument>,

<argument><expr><name>COLOR_SPACE_UNDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>internal</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>format</name> <operator>=</operator> <name>GL_BGRA</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>GL_UNSIGNED_INT_8_8_8_8_REV</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>handle_texs_gen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop_ops</name></name></type> <name>ops</name> <init>= <expr><block>{

<expr><operator>.</operator><name>update_textures</name> <operator>=</operator> <name>tc_cvpx_update</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>Close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument><literal type="string">"Apple OpenGL CVPX converter"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"glinterop"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
