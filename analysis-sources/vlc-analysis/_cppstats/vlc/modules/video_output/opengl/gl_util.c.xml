<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\opengl\gl_util.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_util.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>LogShaderErrors</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLint</name></type> <name>info_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetShaderiv</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>GL_INFO_LOG_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>info_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>info_log</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>info_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>info_log</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GLsizei</name></type> <name>written</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetShaderInfoLog</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>info_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>info_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"shader: %s"</literal></expr></argument>, <argument><expr><name>info_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>info_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>LogProgramErrors</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLint</name></type> <name>info_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetProgramiv</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>GL_INFO_LOG_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>info_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>info_log</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>info_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>info_log</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GLsizei</name></type> <name>written</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetProgramInfoLog</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>info_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>info_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"program: %s"</literal></expr></argument>, <argument><expr><name>info_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>info_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GLuint</name></type>

<name>CreateShader</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLuint</name></type> <name>shader</name> <init>= <expr><call><name><name>vt</name><operator>-&gt;</operator><name>CreateShader</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shader</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>ShaderSource</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>CompileShader</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LogShaderErrors</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>compiled</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetShaderiv</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>GL_COMPILE_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compiled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compiled</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Failed to compile shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteShader</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>shader</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GLuint</name></type>

<name>vlc_gl_BuildProgram</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>,

<parameter><decl><type><name>GLsizei</name></type> <name>vstring_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>vstrings</name></decl></parameter>,

<parameter><decl><type><name>GLsizei</name></type> <name>fstring_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>fstrings</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GLuint</name></type> <name>program</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>vertex_shader</name> <init>= <expr><call><name>CreateShader</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>, <argument><expr><name>GL_VERTEX_SHADER</name></expr></argument>,

<argument><expr><name>vstring_count</name></expr></argument>, <argument><expr><name>vstrings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vertex_shader</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>fragment_shader</name> <init>= <expr><call><name>CreateShader</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>, <argument><expr><name>GL_FRAGMENT_SHADER</name></expr></argument>,

<argument><expr><name>fstring_count</name></expr></argument>, <argument><expr><name>fstrings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_shader</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finally_1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>program</name> <operator>=</operator> <call><name><name>vt</name><operator>-&gt;</operator><name>CreateProgram</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>program</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finally_2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>AttachShader</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>vertex_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>AttachShader</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>fragment_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>LinkProgram</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LogProgramErrors</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>, <argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>linked</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetProgramiv</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>GL_LINK_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linked</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Failed to link program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteProgram</name></name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>program</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>finally_2</name>:</label>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteShader</name></name><argument_list>(<argument><expr><name>fragment_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finally_1</name>:</label>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteShader</name></name><argument_list>(<argument><expr><name>vertex_shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>program</name></expr>;</return>

</block_content>}</block></function>

</unit>
