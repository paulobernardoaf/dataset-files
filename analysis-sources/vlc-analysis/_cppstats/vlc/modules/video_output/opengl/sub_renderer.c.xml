<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\opengl\sub_renderer.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sub_renderer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_helper.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>GLuint</name></type> <name>texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLsizei</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLsizei</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tex_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tex_height</name></decl>;</decl_stmt>

}</block></struct></type> <name>gl_region_t</name>;</typedef>

<struct>struct <name>vlc_gl_sub_renderer</name>

<block>{

<decl_stmt><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_api</name></name> <modifier>*</modifier></type><name>api</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gl_region_t</name> <modifier>*</modifier></type><name>regions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>region_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLuint</name></type> <name>program_id</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>GLint</name></type> <name>vertex_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>tex_coords_in</name></decl>;</decl_stmt>

}</block> <decl><name>aloc</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>GLint</name></type> <name>sampler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>alpha</name></decl>;</decl_stmt>

}</block> <decl><name>uloc</name></decl>;</struct>

<decl_stmt><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>buffer_objects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>buffer_object_count</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>FetchLocations</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_sub_renderer</name></name> <modifier>*</modifier></type><name>sr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>program_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>sr</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { x = vt-&gt;Get##type##Location(sr-&gt;program_id, str); assert(x != -1); if (x == -1) { msg_Err(sr-&gt;gl, "Unable to Get"#type"Location(%s)", str); return VLC_EGENERIC; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ULOC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_LOC(Uniform, x, str)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ALOC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_LOC(Attrib, x, str)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>sampler</name></name></expr></argument>, <argument><expr><literal type="string">"sampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ULOC</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>alpha</name></name></expr></argument>, <argument><expr><literal type="string">"alpha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ALOC</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>vertex_pos</name></name></expr></argument>, <argument><expr><literal type="string">"vertex_pos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_ALOC</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>tex_coords_in</name></name></expr></argument>, <argument><expr><literal type="string">"tex_coords_in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_LOC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_ULOC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_ALOC</name></cpp:undef>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>vlc_gl_sub_renderer</name></name> <modifier>*</modifier></type>

<name>vlc_gl_sub_renderer_New</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_api</name></name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><operator>&amp;</operator><name><name>api</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_sub_renderer</name></name> <modifier>*</modifier></type><name>sr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_RGB32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>interop</name></name> <operator>=</operator> <call><name>vlc_gl_interop_New</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><name>api</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sr</name><operator>-&gt;</operator><name>interop</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>sr</name><operator>-&gt;</operator><name>interop</name><operator>-&gt;</operator><name>handle_texs_gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>gl</name></name> <operator>=</operator> <name>gl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>api</name></name> <operator>=</operator> <name>api</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>region_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>regions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>VERTEX_SHADER_SRC</name> <init>=

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"#version 100\n"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">"#version 120\n"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"attribute vec2 vertex_pos;\n"</literal>

<literal type="string">"attribute vec2 tex_coords_in;\n"</literal>

<literal type="string">"varying vec2 tex_coords;\n"</literal>

<literal type="string">"void main() {\n"</literal>

<literal type="string">" tex_coords = tex_coords_in;\n"</literal>

<literal type="string">" gl_Position = vec4(vertex_pos, 0.0, 1.0);\n"</literal>

<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>FRAGMENT_SHADER_SRC</name> <init>=

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"#version 100\n"</literal>

<literal type="string">"precision mediump float;\n"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">"#version 120\n"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"uniform sampler2D sampler;\n"</literal>

<literal type="string">"uniform float alpha;\n"</literal>

<literal type="string">"varying vec2 tex_coords;\n"</literal>

<literal type="string">"void main() {\n"</literal>

<literal type="string">" vec4 color = texture2D(sampler, tex_coords);\n"</literal>

<literal type="string">" color.a *= alpha;\n"</literal>

<literal type="string">" gl_FragColor = color;\n"</literal>

<literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>program_id</name></name> <operator>=</operator>

<call><name>vlc_gl_BuildProgram</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vt</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>VERTEX_SHADER_SRC</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>FRAGMENT_SHADER_SRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sr</name><operator>-&gt;</operator><name>program_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_2</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>FetchLocations</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_3</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>INITIAL_BUFFER_OBJECT_COUNT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name>INITIAL_BUFFER_OBJECT_COUNT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GLuint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_3</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name> <operator>=</operator> <name>INITIAL_BUFFER_OBJECT_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GenBuffers</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name></expr></argument>, <argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sr</name></expr>;</return>

<label><name>error_3</name>:</label>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteProgram</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>program_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_2</name>:</label>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>interop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_1</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_gl_sub_renderer_Delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_sub_renderer</name></name> <modifier>*</modifier></type><name>sr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>sr</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>DeleteBuffers</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name></expr></argument>, <argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sr</name><operator>-&gt;</operator><name>region_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>-&gt;</operator><name>regions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>sr</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>DeleteTextures</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sr</name><operator>-&gt;</operator><name>regions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>regions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_gl_interop_Delete</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>interop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_gl_sub_renderer_Prepare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_sub_renderer</name></name> <modifier>*</modifier></type><name>sr</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>sr</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_count</name> <init>= <expr><name><name>sr</name><operator>-&gt;</operator><name>region_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gl_region_t</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>sr</name><operator>-&gt;</operator><name>regions</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>subpicture</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpicture</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>gl_region_t</name> <modifier>*</modifier></type><name>regions</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>regions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>regions</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>region_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>regions</name></name> <operator>=</operator> <name>regions</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpicture</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init>

<condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>gl_region_t</name> <modifier>*</modifier></type><name>glr</name> <init>= <expr><operator>&amp;</operator><name><name>sr</name><operator>-&gt;</operator><name>regions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sr</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>supports_npot</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>vlc_align_pot</name><argument_list>(<argument><expr><name><name>glr</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>vlc_align_pot</name><argument_list>(<argument><expr><name><name>glr</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>tex_width</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>/</operator> <name><name>glr</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>tex_height</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>/</operator> <name><name>glr</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>tex_width</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>tex_height</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>subpicture</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>/</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">2.0</literal> <operator>*</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>i_x</name></name> <operator>)</operator> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2.0</literal> <operator>*</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>i_y</name></name> <operator>)</operator> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">2.0</literal> <operator>*</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>i_x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>)</operator> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_width</name></name> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>bottom</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2.0</literal> <operator>*</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name><operator>)</operator> <operator>/</operator> <name><name>subpicture</name><operator>-&gt;</operator><name>i_original_picture_height</name></name> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>last_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>last</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>&amp;&amp;</operator>

<name><name>last</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>==</operator> <name><name>glr</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator>

<name><name>last</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>==</operator> <name><name>glr</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>glr</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name><name>last</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>texture</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>last</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>last</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pixels_offset</name> <init>=

<expr><name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_y_offset</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator>

<name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_x_offset</name></name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>glr</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vlc_gl_interop_GenerateTextures</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>glr</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>glr</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>glr</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name>

<operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>interop</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>update_textures</name></name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>glr</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>glr</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>glr</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pixels_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>region_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>regions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>last_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texture</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_gl_interop_DeleteTextures</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_gl_sub_renderer_Draw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_sub_renderer</name></name> <modifier>*</modifier></type><name>sr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><name><name>sr</name><operator>-&gt;</operator><name>interop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>sr</name><operator>-&gt;</operator><name>vt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>program_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>UseProgram</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>program_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Enable</name></name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BlendFunc</name></name><argument_list>(<argument><expr><name>GL_SRC_ALPHA</name></expr></argument>, <argument><expr><name>GL_ONE_MINUS_SRC_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name><name>sr</name><operator>-&gt;</operator><name>region_count</name></name> <operator>&gt;</operator> <name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteBuffers</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name></expr></argument>, <argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_count</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>sr</name><operator>-&gt;</operator><name>region_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name></expr></argument>, <argument><expr><name>new_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLuint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name> <operator>=</operator> <name>new_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GenBuffers</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_object_count</name></name></expr></argument>, <argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>ActiveTexture</name></name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sr</name><operator>-&gt;</operator><name>region_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>gl_region_t</name> <modifier>*</modifier></type><name>glr</name> <init>= <expr><operator>&amp;</operator><name><name>sr</name><operator>-&gt;</operator><name>regions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name></type> <name><name>vertexCoord</name><index>[]</index></name> <init>= <expr><block>{

<expr><name><name>glr</name><operator>-&gt;</operator><name>left</name></name></expr>, <expr><name><name>glr</name><operator>-&gt;</operator><name>top</name></name></expr>,

<expr><name><name>glr</name><operator>-&gt;</operator><name>left</name></name></expr>, <expr><name><name>glr</name><operator>-&gt;</operator><name>bottom</name></name></expr>,

<expr><name><name>glr</name><operator>-&gt;</operator><name>right</name></name></expr>, <expr><name><name>glr</name><operator>-&gt;</operator><name>top</name></name></expr>,

<expr><name><name>glr</name><operator>-&gt;</operator><name>right</name></name></expr>, <expr><name><name>glr</name><operator>-&gt;</operator><name>bottom</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name></type> <name><name>textureCoord</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>,

<expr><literal type="number">0.0</literal></expr>, <expr><name><name>glr</name><operator>-&gt;</operator><name>tex_height</name></name></expr>,

<expr><name><name>glr</name><operator>-&gt;</operator><name>tex_width</name></name></expr>, <expr><literal type="number">0.0</literal></expr>,

<expr><name><name>glr</name><operator>-&gt;</operator><name>tex_width</name></name></expr>, <expr><name><name>glr</name><operator>-&gt;</operator><name>tex_height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>glr</name><operator>-&gt;</operator><name>texture</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>glr</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Uniform1f</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>uloc</name><operator>.</operator><name>alpha</name></name></expr></argument>, <argument><expr><name><name>glr</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BufferData</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textureCoord</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>textureCoord</name></expr></argument>, <argument><expr><name>GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>EnableVertexAttribArray</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>tex_coords_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>VertexAttribPointer</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>tex_coords_in</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindBuffer</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>sr</name><operator>-&gt;</operator><name>buffer_objects</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BufferData</name></name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vertexCoord</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vertexCoord</name></expr></argument>, <argument><expr><name>GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>EnableVertexAttribArray</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>vertex_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>VertexAttribPointer</name></name><argument_list>(<argument><expr><name><name>sr</name><operator>-&gt;</operator><name>aloc</name><operator>.</operator><name>vertex_pos</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DrawArrays</name></name><argument_list>(<argument><expr><name>GL_TRIANGLE_STRIP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>Disable</name></name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
