<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\opengl\gl_api.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_api.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_opengl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_common.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>

<name>vlc_gl_api_Init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_api</name></name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GL_CORE_SYMBOLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PROC_ADDR_CORE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>api-&gt;vt.name = gl##name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PROC_ADDR_CORE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_PROC_ADDR_EXT(name, true)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PROC_ADDR_EXT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>critical</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { api-&gt;vt.name = vlc_gl_GetProcAddress(gl, "gl"#name); if (api-&gt;vt.name == NULL &amp;&amp; critical) { msg_Err(gl, "gl"#name" symbol not found, bailing out"); return VLC_EGENERIC; } } while(0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PROC_ADDR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_PROC_ADDR_CORE(name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PROC_ADDR_CORE_GL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_PROC_ADDR_EXT(name, false)</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PROC_ADDR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_PROC_ADDR_EXT(name, true)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PROC_ADDR_CORE_GL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_PROC_ADDR_CORE(name)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PROC_ADDR_OPTIONAL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_PROC_ADDR_EXT(name, false)</cpp:value></cpp:define> 

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>BindTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>BlendFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>Clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>ClearColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>DeleteTextures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>DepthMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>Disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>DrawArrays</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>DrawElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>Enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>Finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>Flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>GenTextures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>GetError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>GetIntegerv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>GetString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>PixelStorei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>TexImage2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>TexParameterf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>TexParameteri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>TexSubImage2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE</name><argument_list>(<argument><expr><name>Viewport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE_GL</name><argument_list>(<argument><expr><name>GetTexLevelParameteriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_CORE_GL</name><argument_list>(<argument><expr><name>TexEnvf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>CreateShader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>ShaderSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>CompileShader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>AttachShader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>DeleteShader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>GetProgramiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>GetShaderiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>GetProgramInfoLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>GetShaderInfoLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>GetUniformLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>GetAttribLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>VertexAttribPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>EnableVertexAttribArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>UniformMatrix4fv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>UniformMatrix3fv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>UniformMatrix2fv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>Uniform4fv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>Uniform4f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>Uniform3f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>Uniform2f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>Uniform1f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>Uniform1i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>CreateProgram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>LinkProgram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>UseProgram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>DeleteProgram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>ActiveTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>GenBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>BindBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>BufferData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR</name><argument_list>(<argument><expr><name>DeleteBuffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_OPTIONAL</name><argument_list>(<argument><expr><name>GetFramebufferAttachmentParameteriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_OPTIONAL</name><argument_list>(<argument><expr><name>BufferSubData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_OPTIONAL</name><argument_list>(<argument><expr><name>BufferStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_OPTIONAL</name><argument_list>(<argument><expr><name>MapBufferRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_OPTIONAL</name><argument_list>(<argument><expr><name>FlushMappedBufferRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_OPTIONAL</name><argument_list>(<argument><expr><name>UnmapBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_OPTIONAL</name><argument_list>(<argument><expr><name>FenceSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_OPTIONAL</name><argument_list>(<argument><expr><name>DeleteSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_PROC_ADDR_OPTIONAL</name><argument_list>(<argument><expr><name>ClientWaitSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_PROC_ADDR</name></cpp:undef>

<expr_stmt><expr><call><name>GL_ASSERT_NOERROR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>api</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>extensions</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name><name>api</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>GetString</name></name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"glGetString returned NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>is_gles</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>supports_npot</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>is_gles</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>api</name><operator>-&gt;</operator><name>supports_npot</name></name> <operator>=</operator> <call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><literal type="string">"GL_ARB_texture_non_power_of_two"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><literal type="string">"GL_APPLE_texture_2D_limited_npot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
