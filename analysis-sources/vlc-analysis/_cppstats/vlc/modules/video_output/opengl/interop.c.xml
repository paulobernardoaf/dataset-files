<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\opengl\interop.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vout_helper.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type>

<name>vlc_gl_interop_New</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_t</name></name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_api</name></name> <modifier>*</modifier></type><name>api</name></decl></parameter>,

<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>subpics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glexts</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name><name>api</name><operator>-&gt;</operator><name>vt</name><operator>.</operator><name>GetString</name></name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>glexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>glexts</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><literal type="string">"glGetString returned NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>interop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interop</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>opengl_interop_init_impl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <operator>*</operator><name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>gl</name></name> <operator>=</operator> <name>gl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>api</name></name> <operator>=</operator> <name>api</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>api</name><operator>-&gt;</operator><name>vt</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>subpics</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>projection_mode</name></name> <operator>=</operator> <name>PROJECTION_MODE_RECTANGULAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name>COLOR_PRIMARIES_UNDEF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_UNDEF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>COLOR_SPACE_UNDEF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_interop_generic_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc</name> <init>=

<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>module_need_var</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><literal type="string">"glinterop"</literal></expr></argument>, <argument><expr><literal type="string">"glinterop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>module</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_interop_generic_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>interop</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_gl_interop_Delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vlc_gl_interop_GenerateTextures</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_width</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>tex_height</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GenTextures</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr></argument>, <argument><expr><name>textures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name><name>textures</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexParameterf</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_PRIORITY</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexEnvf</name></name><argument_list>(<argument><expr><name>GL_TEXTURE_ENV</name></expr></argument>, <argument><expr><name>GL_TEXTURE_ENV_MODE</name></expr></argument>, <argument><expr><name>GL_MODULATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexParameteri</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexParameteri</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexParameteri</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>TexParameteri</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>allocate_textures</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>interop</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>allocate_textures</name></name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>textures</name></expr></argument>, <argument><expr><name>tex_width</name></expr></argument>, <argument><expr><name>tex_height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>DeleteTextures</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr></argument>, <argument><expr><name>textures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>textures</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLuint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vlc_gl_interop_DeleteTextures</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>,

<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>DeleteTextures</name></name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr></argument>, <argument><expr><name>textures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>textures</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GLuint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetTexFormatSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>opengl_vtable_t</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tex_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tex_internal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tex_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vt</name><operator>-&gt;</operator><name>GetTexLevelParameteriv</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>tex_param_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mul</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>tex_format</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GL_BGRA</name></expr>:</case>

<expr_stmt><expr><name>mul</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<case>case <expr><name>GL_RED</name></expr>:</case>

<case>case <expr><name>GL_RG</name></expr>:</case>

<expr_stmt><expr><name>tex_param_size</name> <operator>=</operator> <name>GL_TEXTURE_RED_SIZE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GL_LUMINANCE</name></expr>:</case>

<expr_stmt><expr><name>tex_param_size</name> <operator>=</operator> <name>GL_TEXTURE_LUMINANCE_SIZE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>GLuint</name></type> <name>texture</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GenTextures</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>BindTexture</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>TexImage2D</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tex_internal</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tex_format</name></expr></argument>, <argument><expr><name>tex_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>GetTexLevelParameteriv</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tex_param_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>vt</name><operator>-&gt;</operator><name>DeleteTextures</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>size</name> <operator>*</operator> <name>mul</name></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>interop_yuv_base_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>tex_target</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>chroma</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>oneplane_texfmt</name></decl>, <decl><type ref="prev"/><name>oneplane16_texfmt</name></decl>,

<decl><type ref="prev"/><name>twoplanes_texfmt</name></decl>, <decl><type ref="prev"/><name>twoplanes16_texfmt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><literal type="string">"GL_ARB_texture_rg"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>oneplane_texfmt</name> <operator>=</operator> <name>GL_RED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oneplane16_texfmt</name> <operator>=</operator> <name>GL_R16</name></expr>;</expr_stmt>

<expr_stmt><expr><name>twoplanes_texfmt</name> <operator>=</operator> <name>GL_RG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>twoplanes16_texfmt</name> <operator>=</operator> <name>GL_RG16</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>oneplane_texfmt</name> <operator>=</operator> <name>GL_LUMINANCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oneplane16_texfmt</name> <operator>=</operator> <name>GL_LUMINANCE16</name></expr>;</expr_stmt>

<expr_stmt><expr><name>twoplanes_texfmt</name> <operator>=</operator> <name>GL_LUMINANCE_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>twoplanes16_texfmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetTexFormatSize</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>oneplane_texfmt</name></expr></argument>,

<argument><expr><name>oneplane16_texfmt</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_SHORT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GLint</name></type> <name>internal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>internal</name> <operator>=</operator> <name>oneplane_texfmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>internal</name> <operator>=</operator> <name>oneplane16_texfmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>internal</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vlc_gl_tex_cfg</name><operator>)</operator> <block>{

<expr><block>{ <expr><name><name>desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name></expr>, <expr><name><name>desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name></expr>, <expr><name><name>desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name></expr> }</block></expr>,

<expr><name>internal</name></expr>, <expr><name>oneplane_texfmt</name></expr>, <expr><name>type</name></expr>

}</block></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vlc_gl_tex_cfg</name><operator>)</operator> <block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>oneplane_texfmt</name></expr>, <expr><name>oneplane_texfmt</name></expr>,

<expr><name>GL_UNSIGNED_BYTE</name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vlc_gl_tex_cfg</name><operator>)</operator> <block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><name>twoplanes_texfmt</name></expr>, <expr><name>twoplanes_texfmt</name></expr>,

<expr><name>GL_UNSIGNED_BYTE</name></expr>

}</block></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>twoplanes16_texfmt</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>GetTexFormatSize</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>twoplanes_texfmt</name></expr></argument>,

<argument><expr><name>twoplanes16_texfmt</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_SHORT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vlc_gl_tex_cfg</name><operator>)</operator> <block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>oneplane16_texfmt</name></expr>, <expr><name>oneplane_texfmt</name></expr>,

<expr><name>GL_UNSIGNED_SHORT</name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vlc_gl_tex_cfg</name><operator>)</operator> <block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><name>twoplanes16_texfmt</name></expr>, <expr><name>twoplanes_texfmt</name></expr>,

<expr><name>GL_UNSIGNED_SHORT</name></expr>

}</block></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vlc_gl_tex_cfg</name><operator>)</operator> <block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr>

}</block></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>interop_rgb_base_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>tex_target</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tex_target</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>chroma</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_RGBA</name></expr>:</case>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vlc_gl_tex_cfg</name><operator>)</operator> <block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr>

}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetTexFormatSize</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>GL_BGRA</name></expr></argument>, <argument><expr><name>GL_RGBA</name></expr></argument>,

<argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vlc_gl_tex_cfg</name><operator>)</operator> <block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_BGRA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr>

}</block></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>interop_xyz12_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name> <operator>=</operator> <name>GL_TEXTURE_2D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>texs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>vlc_gl_tex_cfg</name><operator>)</operator> <block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr>

}</block></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>opengl_interop_init_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>tex_target</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl></parameter>, <parameter><decl><type><name>video_color_space_t</name></type> <name>yuv_space</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_yuv</name> <init>= <expr><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc</name> <init>=

<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>sw_fmt</name></name> <operator>=</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>sw_fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>sw_fmt</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name>yuv_space</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_target</name></name> <operator>=</operator> <name>tex_target</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name> <operator>==</operator> <name>VLC_CODEC_XYZ12</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>interop_xyz12_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>interop_yuv_base_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>interop_rgb_base_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>tex_target</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
