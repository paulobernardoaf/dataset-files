<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\opengl\egl.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/egl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/eglext.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_opengl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PLATFORM_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PLATFORM_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wayland-egl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USE_PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../android/utils.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>vlc_gl_sys_t</name>

<block>{

<decl_stmt><decl><type><name>EGLDisplay</name></type> <name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLSurface</name></type> <name>surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLContext</name></type> <name>context</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USE_PLATFORM_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USE_PLATFORM_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>wl_egl_window</name></name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>PFNEGLCREATEIMAGEKHRPROC</name></type> <name>eglCreateImageKHR</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PFNEGLDESTROYIMAGEKHRPROC</name></type> <name>eglDestroyImageKHR</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_gl_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MakeCurrent</name> <parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eglMakeCurrent</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EGL_TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseCurrent</name> <parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eglMakeCurrent</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>EGL_NO_SURFACE</name></expr></argument>, <argument><expr><name>EGL_NO_SURFACE</name></expr></argument>,

<argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PLATFORM_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Resize</name> <parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wl_egl_window_resize</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Resize</name></cpp:macro> <cpp:value>(NULL)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SwapBuffers</name> <parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>eglSwapBuffers</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>GetSymbol</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>gl</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>eglGetProcAddress</name> <argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>QueryString</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>eglQueryString</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>CreateImageKHR</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>sys</name><operator>-&gt;</operator><name>eglCreateImageKHR</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>,

<argument><expr><name>attrib_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>DestroyImageKHR</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>sys</name><operator>-&gt;</operator><name>eglDestroyImageKHR</name></name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckAPI</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>api</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apis</name> <init>= <expr><call><name>eglQueryString</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>EGL_CLIENT_APIS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name>apis</name></expr></argument>, <argument><expr><name>api</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckClientExt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exts</name> <init>= <expr><call><name>eglQueryString</name><argument_list>(<argument><expr><name>EGL_NO_DISPLAY</name></expr></argument>, <argument><expr><name>EGL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name>exts</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>gl_api</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLenum</name></type> <name>api</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLint</name></type> <name>min_minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLint</name></type> <name>render_bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLint</name></type> <name><name>attr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_platform_base</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>EGLDisplay</name></type> <name>GetDisplayEXT</name><parameter_list>(<parameter><decl><type><name>EGLenum</name></type> <name>plat</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PFNEGLGETPLATFORMDISPLAYEXTPROC</name></type> <name>getDisplay</name> <init>=

<expr><operator>(</operator><name>PFNEGLGETPLATFORMDISPLAYEXTPROC</name><operator>)</operator>

<call><name>eglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"eglGetPlatformDisplayEXT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>getDisplay</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>getDisplay</name><argument_list>(<argument><expr><name>plat</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EGLSurface</name></type> <name>CreateWindowSurfaceEXT</name><parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC</name></type> <name>createSurface</name> <init>=

<expr><operator>(</operator><name>PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC</name><operator>)</operator>

<call><name>eglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"eglCreatePlatformWindowSurfaceEXT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>createSurface</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>createSurface</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>EGLSurface</name></type> <name>CreateWindowSurface</name><parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EGLNativeWindowType</name> <modifier>*</modifier></type><name>native</name> <init>= <expr><name>window</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>eglCreateWindowSurface</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><operator>*</operator><name>native</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>EGL_NO_DISPLAY</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>EGL_NO_CONTEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>eglDestroyContext</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name> <operator>!=</operator> <name>EGL_NO_SURFACE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>eglDestroySurface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>eglTerminate</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PLATFORM_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>x11</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x11</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PLATFORM_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wl_egl_window_destroy</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>AWindowHandler_releaseANativeWindow</name><argument_list>(<argument><expr><name><name>gl</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>anativewindow</name></name></expr></argument>,

<argument><expr><name>AWindow_Video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>gl_api</name></name> <modifier>*</modifier></type><name>api</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>EGL_NO_DISPLAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name>EGL_NO_SURFACE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>EGL_NO_CONTEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>eglCreateImageKHR</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>eglDestroyImageKHR</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>wnd</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>surface</name></name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>EGLSurface</name></type> (<modifier>*</modifier><name>createSurface</name>)<parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>

<init>= <expr><name>CreateWindowSurface</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PLATFORM_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>x11</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VOUT_WINDOW_TYPE_XID</name> <operator>||</operator> <operator>!</operator><call><name>vlc_xlib_init</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <operator>&amp;</operator><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>x11</name></name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>x11</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>x11</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>snum</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>wa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x11</name></name></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wa</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>snum</name> <operator>=</operator> <call><name>XScreenNumberOfScreen</name><argument_list>(<argument><expr><name><name>wa</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_platform_x11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>CheckClientExt</name><argument_list>(<argument><expr><literal type="string">"EGL_EXT_platform_x11"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>EGLint</name></type> <name><name>attrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>EGL_PLATFORM_X11_SCREEN_EXT</name></expr>, <expr><name>snum</name></expr>,

<expr><name>EGL_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>GetDisplayEXT</name><argument_list>(<argument><expr><name>EGL_PLATFORM_X11_EXT</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x11</name></name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>createSurface</name> <operator>=</operator> <name>CreateWindowSurfaceEXT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>snum</name> <operator>==</operator> <call><name>XDefaultScreen</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x11</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>eglGetDisplay</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x11</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>width</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>height</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USE_PLATFORM_WAYLAND</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VOUT_WINDOW_TYPE_WAYLAND</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_platform_wayland</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckClientExt</name><argument_list>(<argument><expr><literal type="string">"EGL_EXT_platform_wayland"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>wl_egl_window_create</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>wl</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>GetDisplayEXT</name><argument_list>(<argument><expr><name>EGL_PLATFORM_WAYLAND_EXT</name></expr></argument>, <argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>wl</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>createSurface</name> <operator>=</operator> <name>CreateWindowSurfaceEXT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USE_PLATFORM_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VOUT_WINDOW_TYPE_HWND</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <operator>&amp;</operator><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>hwnd</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__VC32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__SCITECH_SNAP__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>eglGetDisplay</name><argument_list>(<argument><expr><name>EGL_DEFAULT_DISPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>width</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>height</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>USE_PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>wnd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VOUT_WINDOW_TYPE_ANDROID_NATIVE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ANativeWindow</name> <modifier>*</modifier></type><name>anw</name> <init>=

<expr><call><name>AWindowHandler_getANativeWindow</name><argument_list>(<argument><expr><name><name>wnd</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>anativewindow</name></name></expr></argument>,

<argument><expr><name>AWindow_Video</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>anw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>window</name> <operator>=</operator> <operator>&amp;</operator><name>anw</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>eglGetDisplay</name><argument_list>(<argument><expr><name>EGL_DEFAULT_DISPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>width</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>height</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>EGL_NO_DISPLAY</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>EGLint</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eglInitialize</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EGL_TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"EGL version %s by %s"</literal></expr></argument>,

<argument><expr><call><name>eglQueryString</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>EGL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>eglQueryString</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>EGL_VENDOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>eglQueryString</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>EGL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ext</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" extensions: %s"</literal></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>major</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>minor</name> <operator>&lt;</operator> <name><name>api</name><operator>-&gt;</operator><name>min_minor</name></name>

<operator>||</operator> <operator>!</operator><call><name>CheckAPI</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot select %s API"</literal></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EGLint</name></type> <name><name>conf_attr</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>EGL_RED_SIZE</name></expr>, <expr><literal type="number">5</literal></expr>,

<expr><name>EGL_GREEN_SIZE</name></expr>, <expr><literal type="number">5</literal></expr>,

<expr><name>EGL_BLUE_SIZE</name></expr>, <expr><literal type="number">5</literal></expr>,

<expr><name>EGL_RENDERABLE_TYPE</name></expr>, <expr><name><name>api</name><operator>-&gt;</operator><name>render_bit</name></name></expr>,

<expr><name>EGL_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLConfig</name></type> <name><name>cfgv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EGLint</name></type> <name>cfgc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eglChooseConfig</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>conf_attr</name></expr></argument>, <argument><expr><name>cfgv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EGL_TRUE</name>

<operator>||</operator> <name>cfgc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot choose EGL configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <call><name>createSurface</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>cfgv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>surface</name></name> <operator>==</operator> <name>EGL_NO_SURFACE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot create EGL window surface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>eglBindAPI</name> <argument_list>(<argument><expr><name><name>api</name><operator>-&gt;</operator><name>api</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EGL_TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot bind EGL API"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EGLContext</name></type> <name>ctx</name> <init>= <expr><call><name>eglCreateContext</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>cfgv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>EGL_NO_CONTEXT</name></expr></argument>,

<argument><expr><name><name>api</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>EGL_NO_CONTEXT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot create EGL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>ext</name></name> <operator>=</operator> <name>VLC_GL_EXT_EGL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>makeCurrent</name></name> <operator>=</operator> <name>MakeCurrent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>releaseCurrent</name></name> <operator>=</operator> <name>ReleaseCurrent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>resize</name></name> <operator>=</operator> <name>Resize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>swap</name></name> <operator>=</operator> <name>SwapBuffers</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>getProcAddress</name></name> <operator>=</operator> <name>GetSymbol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>egl</name><operator>.</operator><name>queryString</name></name> <operator>=</operator> <name>QueryString</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>eglCreateImageKHR</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>eglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"eglCreateImageKHR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>eglDestroyImageKHR</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>eglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"eglDestroyImageKHR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>eglCreateImageKHR</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>eglDestroyImageKHR</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>egl</name><operator>.</operator><name>createImageKHR</name></name> <operator>=</operator> <name>CreateImageKHR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>egl</name><operator>.</operator><name>destroyImageKHR</name></name> <operator>=</operator> <name>DestroyImageKHR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenGLES2</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>gl_api</name></name></type> <name>api</name> <init>= <expr><block>{

<expr><literal type="string">"OpenGL_ES"</literal></expr>, <expr><name>EGL_OPENGL_ES_API</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>EGL_OPENGL_ES2_BIT</name></expr>,

<expr><block>{ <expr><name>EGL_CONTEXT_CLIENT_VERSION</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>EGL_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Open</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>api</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenGL</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>gl_api</name></name></type> <name>api</name> <init>= <expr><block>{

<expr><literal type="string">"OpenGL"</literal></expr>, <expr><name>EGL_OPENGL_API</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>EGL_OPENGL_BIT</name></expr>,

<expr><block>{ <expr><name>EGL_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Open</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>api</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"EGL"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"EGL extension for OpenGL"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name> <argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"opengl"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>OpenGL</argument>)</argument_list></macro>

<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"egl"</literal></argument>)</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"opengl es2"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>OpenGLES2</argument>)</argument_list></macro>

<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"egl"</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
