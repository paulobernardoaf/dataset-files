<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\opengl\interop_vdpau.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/gl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glext.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gl_api.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../hw/vdpau/vlc_vdpau.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interop.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTEROP_CALL</name><parameter_list>(<parameter><type><name>fct</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_##fct(__VA_ARGS__); { GLenum ret = interop-&gt;vt-&gt;GetError(); if (ret != GL_NO_ERROR) { msg_Err(interop-&gt;gl, #fct " failed: 0x%x", ret); return VLC_EGENERIC; } }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLVDPAUINITNVPROC</name></type> <name>_glVDPAUInitNV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLVDPAUFININVPROC</name></type> <name>_glVDPAUFiniNV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC</name></type> <name>_glVDPAURegisterOutputSurfaceNV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLVDPAUISSURFACENVPROC</name></type> <name>_glVDPAUIsSurfaceNV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLVDPAUUNREGISTERSURFACENVPROC</name></type> <name>_glVDPAUUnregisterSurfaceNV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLVDPAUGETSURFACEIVNVPROC</name></type> <name>_glVDPAUGetSurfaceivNV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLVDPAUSURFACEACCESSNVPROC</name></type> <name>_glVDPAUSurfaceAccessNV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLVDPAUMAPSURFACESNVPROC</name></type> <name>_glVDPAUMapSurfacesNV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLVDPAUUNMAPSURFACESNVPROC</name></type> <name>_glVDPAUUnmapSurfacesNV</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name></decl>;</decl_stmt>

}</block></struct></type> <name>converter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>tc_vdpau_gl_update</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name><name>textures</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>GLsizei</name> <specifier>const</specifier></type> <name><name>tex_widths</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <specifier>const</specifier></type> <name><name>tex_heights</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <specifier>const</specifier></type> <name><name>plane_offsets</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>tex_widths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>tex_heights</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>plane_offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_vdp_output_surface_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLvdpauSurfaceNV</name></type> <name>gl_nv_surface</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>gl_nv_surface</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gl_nv_surface</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>gl_nv_surface</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Type too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gl_nv_surface</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_glVDPAUIsSurfaceNV</name><argument_list>(<argument><expr><name>gl_nv_surface</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLsizei</name></type> <name>num_val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INTEROP_CALL</name><argument_list>(<argument><expr><name>glVDPAUGetSurfaceivNV</name></expr></argument>, <argument><expr><name>gl_nv_surface</name></expr></argument>,

<argument><expr><name>GL_SURFACE_STATE_NV</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_val</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>state</name> <operator>==</operator> <name>GL_SURFACE_MAPPED_NV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTEROP_CALL</name><argument_list>(<argument><expr><name>glVDPAUUnmapSurfacesNV</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gl_nv_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTEROP_CALL</name><argument_list>(<argument><expr><name>glVDPAUUnregisterSurfaceNV</name></expr></argument>, <argument><expr><name>gl_nv_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gl_nv_surface</name> <operator>=</operator>

<call><name>INTEROP_CALL</name><argument_list>(<argument><expr><name>glVDPAURegisterOutputSurfaceNV</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>,

<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>interop</name><operator>-&gt;</operator><name>tex_count</name></name></expr></argument>, <argument><expr><name>textures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTEROP_CALL</name><argument_list>(<argument><expr><name>glVDPAUSurfaceAccessNV</name></expr></argument>, <argument><expr><name>gl_nv_surface</name></expr></argument>, <argument><expr><name>GL_READ_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTEROP_CALL</name><argument_list>(<argument><expr><name>glVDPAUMapSurfacesNV</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gl_nv_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>gl_nv_surface</name></name> <operator>=</operator> <name>gl_nv_surface</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_glVDPAUFiniNV</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>interop</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>GetError</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>GL_NO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>converter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_gl_interop</name></name> <modifier>*</modifier></type><name>interop</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_device</name> <init>= <expr><call><name>vlc_video_context_HoldDevice</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetVDPAUOpaqueDevice</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_VDPAU_VIDEO_420</name>

<operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_VDPAU_VIDEO_422</name>

<operator>&amp;&amp;</operator> <name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_VDPAU_VIDEO_444</name><operator>)</operator>

<operator>||</operator> <operator>!</operator><call><name>vlc_gl_StrHasToken</name><argument_list>(<argument><expr><name><name>interop</name><operator>-&gt;</operator><name>api</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><literal type="string">"GL_NV_vdpau_interop"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>interop</name><operator>-&gt;</operator><name>gl</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VOUT_WINDOW_TYPE_XID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>converter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name> <operator>=</operator> <name>dec_device</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_VDPAU_OUTPUT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VdpDevice</name></type> <name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_dev</name> <init>= <expr><call><name>GetVDPAUOpaqueDevice</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vdp_t</name> <modifier>*</modifier></type><name>vdp</name> <init>= <expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>vdp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>device</name> <operator>=</operator> <name><name>vdpau_dev</name><operator>-&gt;</operator><name>device</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>vdp_gpa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vdp_get_proc_address</name><argument_list>(<argument><expr><name>vdp</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,

<argument><expr><name>VDP_FUNC_ID_GET_PROC_ADDRESS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdp_gpa</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>(<argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAFE_GPA</name><parameter_list>(<parameter><type><name>fct</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_##fct = vlc_gl_GetProcAddress(interop-&gt;gl, #fct); if (!_##fct) { vlc_decoder_device_Release(dec_device); return VLC_EGENERIC; }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SAFE_GPA</name><argument_list>(<argument><expr><name>glVDPAUInitNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAFE_GPA</name><argument_list>(<argument><expr><name>glVDPAUFiniNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAFE_GPA</name><argument_list>(<argument><expr><name>glVDPAURegisterOutputSurfaceNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAFE_GPA</name><argument_list>(<argument><expr><name>glVDPAUIsSurfaceNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAFE_GPA</name><argument_list>(<argument><expr><name>glVDPAUUnregisterSurfaceNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAFE_GPA</name><argument_list>(<argument><expr><name>glVDPAUGetSurfaceivNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAFE_GPA</name><argument_list>(<argument><expr><name>glVDPAUSurfaceAccessNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAFE_GPA</name><argument_list>(<argument><expr><name>glVDPAUMapSurfacesNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SAFE_GPA</name><argument_list>(<argument><expr><name>glVDPAUUnmapSurfacesNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SAFE_GPA</name></cpp:undef>

<expr_stmt><expr><call><name>INTEROP_CALL</name><argument_list>(<argument><expr><name>glVDPAUInitNV</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>device</name></expr></argument>, <argument><expr><name>vdp_gpa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>opengl_interop_init</name><argument_list>(<argument><expr><name>interop</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>VLC_CODEC_RGB32</name></expr></argument>,

<argument><expr><name>COLOR_SPACE_UNDEF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>interop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_gl_interop_ops</name></name></type> <name>ops</name> <init>= <expr><block>{

<expr><operator>.</operator><name>update_textures</name> <operator>=</operator> <name>tc_vdpau_gl_update</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>Close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ops</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>interop</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>DecoderDeviceClose</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>vdpau_dev</name> <init>= <expr><call><name>GetVDPAUOpaqueDevice</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vdp_release_x11</name><argument_list>(<argument><expr><name><name>vdpau_dev</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_decoder_device_operations</name></name></type> <name>dev_ops</name> <init>= <expr><block>{

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>DecoderDeviceClose</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>DecoderDeviceOpen</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name> <operator>||</operator> <operator>!</operator><call><name>vlc_xlib_init</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vdpau_decoder_device_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vdp_get_x11</name><argument_list>(<argument><expr><name><name>window</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>x11</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>vdp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VDP_STATUS_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_obj_free</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>dev_ops</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>VLC_DECODER_DEVICE_VDPAU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument><literal type="string">"VDPAU OpenGL surface converter"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"glinterop"</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"vdpau"</literal></argument>)</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_callback_dec_device</name><argument_list>(<argument>DecoderDeviceOpen</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
