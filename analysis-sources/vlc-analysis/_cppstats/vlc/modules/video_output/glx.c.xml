<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\glx.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glx.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glxext.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_opengl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLX_ARB_get_proc_address</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> GLX_ARB_get_proc_address extension missing</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>vlc_gl_sys_t</name>

<block>{

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXWindow</name></type> <name>win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXContext</name></type> <name>ctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_gl_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MakeCurrent</name> <parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXMakeContextCurrent</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseCurrent</name> <parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glXMakeContextCurrent</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>None</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SwapBuffers</name> <parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glXSwapBuffers</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>GetSymbol</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>gl</name></expr>;</expr_stmt>

<return>return <expr><call><name>glXGetProcAddressARB</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>GLubyte</name> <operator>*</operator><operator>)</operator><name>procname</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckGLX</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glXQueryVersion</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"GLX extension not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>major</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"GLX extension version %d.%d unknown"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>minor</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"GLX extension version %d.%d too old"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"using GLX extension version %d.%d"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckGLXext</name> <parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>snum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exts</name> <init>= <expr><call><name>glXQueryExtensionsString</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>snum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>extlen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>exts</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>exts</name> <operator>+=</operator> <call><name>strspn</name> <argument_list>(<argument><expr><name>exts</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name> <argument_list>(<argument><expr><name>exts</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>extlen</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>exts</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>extlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>exts</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glXDestroyContext</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glXDestroyWindow</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gl</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VOUT_WINDOW_TYPE_XID</name> <operator>||</operator> <operator>!</operator><call><name>vlc_xlib_init</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><call><name>XOpenDisplay</name> <argument_list>(<argument><expr><name><name>gl</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>display</name><operator>.</operator><name>x11</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dpy</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_gl_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XCloseDisplay</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>dpy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckGLX</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>wa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XGetWindowAttributes</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name><name>gl</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wa</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>snum</name> <init>= <expr><call><name>XScreenNumberOfScreen</name> <argument_list>(<argument><expr><name><name>wa</name><operator>.</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VisualID</name></type> <name>visual</name> <init>= <expr><call><name>XVisualIDFromVisual</name> <argument_list>(<argument><expr><name><name>wa</name><operator>.</operator><name>visual</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>attr</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>GLX_RED_SIZE</name></expr>, <expr><literal type="number">5</literal></expr>,

<expr><name>GLX_GREEN_SIZE</name></expr>, <expr><literal type="number">5</literal></expr>,

<expr><name>GLX_BLUE_SIZE</name></expr>, <expr><literal type="number">5</literal></expr>,

<expr><name>GLX_DOUBLEBUFFER</name></expr>, <expr><name>True</name></expr>,

<expr><name>GLX_X_RENDERABLE</name></expr>, <expr><name>True</name></expr>,

<expr><name>GLX_DRAWABLE_TYPE</name></expr>, <expr><name>GLX_WINDOW_BIT</name></expr>,

<expr><name>None</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nelem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLXFBConfig</name> <modifier>*</modifier></type><name>confs</name> <init>= <expr><call><name>glXChooseFBConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>snum</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nelem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>confs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot choose GLX frame buffer configurations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>GLXFBConfig</name></type> <name>conf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nelem</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>conf</name> <operator>=</operator> <name><name>confs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>XVisualInfo</name> <modifier>*</modifier></type><name>vi</name> <init>= <expr><call><name>glXGetVisualFromFBConfig</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vi</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vi</name><operator>-&gt;</operator><name>visualid</name></name> <operator>==</operator> <name>visual</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name> <argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XFree</name> <argument_list>(<argument><expr><name>confs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot match GLX frame buffer configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <call><name>glXCreateWindow</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>gl</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>xid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>win</name></name> <operator>==</operator> <name>None</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot create GLX window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>glXCreateNewContext</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>GLX_RGBA_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>glXDestroyWindow</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot create GLX context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>makeCurrent</name></name> <operator>=</operator> <name>MakeCurrent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>releaseCurrent</name></name> <operator>=</operator> <name>ReleaseCurrent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>resize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>swap</name></name> <operator>=</operator> <name>SwapBuffers</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>getProcAddress</name></name> <operator>=</operator> <name>GetSymbol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gl</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_swap_interval_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MakeCurrent</name> <argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLX_SGI_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_swap_interval_set</name>

<operator>&amp;&amp;</operator> <call><name>CheckGLXext</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>snum</name></expr></argument>, <argument><expr><literal type="string">"GLX_SGI_swap_control"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PFNGLXSWAPINTERVALSGIPROC</name></type> <name>SwapIntervalSGI</name> <init>= <expr><operator>(</operator><name>PFNGLXSWAPINTERVALSGIPROC</name><operator>)</operator>

<call><name>glXGetProcAddressARB</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>GLubyte</name> <operator>*</operator><operator>)</operator><literal type="string">"glXSwapIntervalSGI"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>SwapIntervalSGI</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_swap_interval_set</name> <operator>=</operator> <operator>!</operator><call><name>SwapIntervalSGI</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLX_EXT_swap_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_swap_interval_set</name>

<operator>&amp;&amp;</operator> <call><name>CheckGLXext</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>snum</name></expr></argument>, <argument><expr><literal type="string">"GLX_EXT_swap_control"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PFNGLXSWAPINTERVALEXTPROC</name></type> <name>SwapIntervalEXT</name> <init>= <expr><operator>(</operator><name>PFNGLXSWAPINTERVALEXTPROC</name><operator>)</operator>

<call><name>glXGetProcAddress</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>GLubyte</name> <operator>*</operator><operator>)</operator><literal type="string">"glXSwapIntervalEXT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>SwapIntervalEXT</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SwapIntervalEXT</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>win</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_swap_interval_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ReleaseCurrent</name> <argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vendor</name> <init>= <expr><call><name>glXGetClientString</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>GLX_VENDOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vendor</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>vendor</name></expr></argument>, <argument><expr><literal type="string">"NVIDIA"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"NVIDIA"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_Create</name><argument_list>(<argument><expr><name><name>gl</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><literal type="string">"gl"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>(<argument><expr><name><name>gl</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><literal type="string">"gl"</literal></expr></argument>, <argument><expr><literal type="string">"glx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>width</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>height</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>XCloseDisplay</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name> <argument_list>(<argument>N_(<literal type="string">"GLX"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"GLX extension for OpenGL"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name> <argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"opengl"</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
