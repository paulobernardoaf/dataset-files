<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_output\vulkan\display.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_display.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../placebo_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"instance.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libplacebo/renderer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libplacebo/utils/upload.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libplacebo/swapchain.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libplacebo/vulkan.h&gt;</cpp:file></cpp:include>

<struct>struct <name>vout_display_sys_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_vk_t</name> <modifier>*</modifier></type><name>vk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_tex</name></name> <modifier>*</modifier></type><name><name>plane_tex</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_renderer</name></name> <modifier>*</modifier></type><name>renderer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_overlay</name></name> <modifier>*</modifier></type><name>overlays</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_tex</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>overlay_tex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_overlays</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_display_place_t</name></type> <name>place</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_filter_config</name></name></type> <name>upscaler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_filter_config</name></name></type> <name>downscaler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_deband_params</name></name></type> <name>deband</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_sigmoid_params</name></name></type> <name>sigmoid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_color_map_params</name></name></type> <name>color_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_dither_params</name></name></type> <name>dither</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_render_params</name></name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_color_space</name></name></type> <name>target</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&gt;=</operator> <literal type="number">13</literal></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_peak_detect_params</name></name></type> <name>peak_detect</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>enum</name> <name>pl_chroma_location</name></name></type> <name>yuv_chroma_loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dither_depth</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PictureRender</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mtime_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PictureDisplay</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateParams</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vout_display_cfg_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator>

<call><name>vlc_obj_calloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>cfg</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>window</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"parent window not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name></name> <operator>=</operator> <call><name>vlc_vk_Create</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_gpu</name></name> <modifier>*</modifier></type><name>gpu</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name><operator>-&gt;</operator><name>vulkan</name><operator>-&gt;</operator><name>gpu</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>renderer</name></name> <operator>=</operator> <call><name>pl_renderer_create</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>gpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>renderer</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_placebo_FormatSupported</name><argument_list>(<argument><expr><name>gpu</name></expr></argument>, <argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>fcc</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>fcc</name> <operator>=</operator> <call><name>vlc_fourcc_GetFallback</name><argument_list>(<argument><expr><name><name>vd</name><operator>-&gt;</operator><name>source</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>fcc</name></expr>;</condition> <incr><expr><name>fcc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_placebo_FormatSupported</name><argument_list>(<argument><expr><name>gpu</name></expr></argument>, <argument><expr><operator>*</operator><name>fcc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <operator>*</operator><name>fcc</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed picking any suitable input format, falling "</literal>

<literal type="string">"back to RGBA for sanity!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>yuv_chroma_loc</name></name> <operator>=</operator> <ternary><condition><expr><call><name>vlc_fourcc_IsYUV</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>vlc_placebo_ChromaLoc</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>PL_CHROMA_UNKNOWN</name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>subfmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VLC_CODEC_RGBA</name></expr>,

<expr><name>VLC_CODEC_BGRA</name></expr>,

<expr><name>VLC_CODEC_RGB8</name></expr>,

<expr><name>VLC_CODEC_RGB12</name></expr>,

<expr><name>VLC_CODEC_RGB15</name></expr>,

<expr><name>VLC_CODEC_RGB16</name></expr>,

<expr><name>VLC_CODEC_RGB24</name></expr>,

<expr><name>VLC_CODEC_RGB32</name></expr>,

<expr><name>VLC_CODEC_GREY</name></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>subpicture_chromas</name></name> <operator>=</operator> <name>subfmts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <name>PictureRender</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>PictureDisplay</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vd</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>Close</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateParams</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cfg</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>pl_renderer_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_vk_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_gpu</name></name> <modifier>*</modifier></type><name>gpu</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name><operator>-&gt;</operator><name>vulkan</name><operator>-&gt;</operator><name>gpu</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pl_tex_destroy</name><argument_list>(<argument><expr><name>gpu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>plane_tex</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>num_overlays</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pl_tex_destroy</name><argument_list>(<argument><expr><name>gpu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>overlay_tex</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>overlays</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>overlay_tex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pl_renderer_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_vk_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PictureRender</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>subpicture</name></decl></parameter>, <parameter><decl><type><name>mtime_t</name></type> <name>date</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pl_gpu</name></name> <modifier>*</modifier></type><name>gpu</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name><operator>-&gt;</operator><name>vulkan</name><operator>-&gt;</operator><name>gpu</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_swapchain_frame</name></name></type> <name>frame</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pl_swapchain_start_frame</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name><operator>-&gt;</operator><name>swapchain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>pl_image</name></name></type> <name>img</name> <init>= <expr><block>{

<expr><operator>.</operator><name>signature</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>counter</name></name><operator>++</operator></expr>,

<expr><operator>.</operator><name>num_planes</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>,

<expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr>,

<expr><operator>.</operator><name>color</name> <operator>=</operator> <call><name>vlc_placebo_ColorSpace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>repr</name> <operator>=</operator> <call><name>vlc_placebo_ColorRepr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>src_rect</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>x0</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_x_offset</name></name></expr>,

<expr><operator>.</operator><name>y0</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_y_offset</name></name></expr>,

<expr><operator>.</operator><name>x1</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>y1</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_plane_data</name></name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_placebo_PlaneData</name><argument_list>(<argument><expr><name>pic</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Failed processing the picture_t into pl_plane_data!?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_plane</name></name> <modifier>*</modifier></type><name>plane</name> <init>= <expr><operator>&amp;</operator><name><name>img</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pl_upload_plane</name><argument_list>(<argument><expr><name>gpu</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>plane_tex</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed uploading image data!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>yuv_chroma_loc</name></name> <operator>!=</operator> <name>PL_CHROMA_UNKNOWN</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pl_chroma_location_offset</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>yuv_chroma_loc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>plane</name><operator>-&gt;</operator><name>shift_x</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>plane</name><operator>-&gt;</operator><name>shift_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_render_target</name></name></type> <name>target</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pl_render_target_from_swapchain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>target</name><operator>.</operator><name>dst_rect</name></name> <operator>=</operator> <operator>(</operator>struct <name>pl_rect2d</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>x0</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>x</name></name></expr>,

<expr><operator>.</operator><name>y0</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>y</name></name></expr>,

<expr><operator>.</operator><name>x1</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>y1</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>place</name><operator>.</operator><name>height</name></name></expr>,

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>primaries</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>target</name><operator>.</operator><name>color</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>primaries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>transfer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>target</name><operator>.</operator><name>color</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>transfer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>target</name><operator>.</operator><name>color</name><operator>.</operator><name>light</name></name> <operator>=</operator> <name>PL_COLOR_LIGHT_UNKNOWN</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>sig_avg</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>target</name><operator>.</operator><name>color</name><operator>.</operator><name>sig_avg</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>sig_avg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>dither_depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_bit_encoding</name></name> <modifier>*</modifier></type><name>bits</name> <init>= <expr><operator>&amp;</operator><name><name>target</name><operator>.</operator><name>repr</name><operator>.</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><name><name>bits</name><operator>-&gt;</operator><name>color_depth</name></name> <operator>/</operator> <name><name>bits</name><operator>-&gt;</operator><name>sample_depth</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>sample_depth</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>dither_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>color_depth</name></name> <operator>=</operator> <name>scale</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>dither_depth</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subpicture</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_regions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpicture</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_regions</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>num_regions</name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>num_overlays</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>overlays</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>overlays</name></name></expr></argument>, <argument><expr><name>num_regions</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pl_overlay</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>overlay_tex</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>overlay_tex</name></name></expr></argument>, <argument><expr><name>num_regions</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pl_tex</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>overlays</name></name> <operator>||</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>overlay_tex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>num_overlays</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>num_overlays</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_regions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>overlay_tex</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>num_overlays</name></name> <operator>=</operator> <name>num_regions</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>subpicture</name><operator>-&gt;</operator><name>p_region</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_regions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_plane_data</name></name></type> <name>subdata</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_placebo_PlaneData</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Failed processing the subpicture_t into pl_plane_data!?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_overlay</name></name> <modifier>*</modifier></type><name>overlay</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>overlays</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>overlay</name> <operator>=</operator> <operator>(</operator>struct <name>pl_overlay</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>rect</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>x0</name> <operator>=</operator> <name><name>target</name><operator>.</operator><name>dst_rect</name><operator>.</operator><name>x0</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>i_x</name></name></expr>,

<expr><operator>.</operator><name>y0</name> <operator>=</operator> <name><name>target</name><operator>.</operator><name>dst_rect</name><operator>.</operator><name>y0</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>i_y</name></name></expr>,

<expr><operator>.</operator><name>x1</name> <operator>=</operator> <name><name>target</name><operator>.</operator><name>dst_rect</name><operator>.</operator><name>x0</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>i_x</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr>,

<expr><operator>.</operator><name>y1</name> <operator>=</operator> <name><name>target</name><operator>.</operator><name>dst_rect</name><operator>.</operator><name>y0</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>mode</name> <operator>=</operator> <name>PL_OVERLAY_NORMAL</name></expr>,

<expr><operator>.</operator><name>color</name> <operator>=</operator> <call><name>vlc_placebo_ColorSpace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>repr</name> <operator>=</operator> <call><name>vlc_placebo_ColorRepr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>,

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pl_upload_plane</name><argument_list>(<argument><expr><name>gpu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>overlay</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>overlay_tex</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subdata</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed uploading subpicture region!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_regions</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>target</name><operator>.</operator><name>overlays</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>overlays</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>target</name><operator>.</operator><name>num_overlays</name></name> <operator>=</operator> <name>num_regions</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pl_rect2d</name></name></type> <name>full</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>frame</name><operator>.</operator><name>fbo</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>w</name></name></expr>, <expr><name><name>frame</name><operator>.</operator><name>fbo</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>h</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pl_rect2d_eq</name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>dst_rect</name></name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<macro><name>pl_tex_clear</name><argument_list>(<argument>gpu</argument>, <argument>frame.fbo</argument>, <argument>(float[<literal type="number">4</literal>]){ <literal type="number">0.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">0.0</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pl_render_image</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed rendering frame!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>

<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>pl_tex_clear</name><argument_list>(<argument>gpu</argument>, <argument>frame.fbo</argument>, <argument>(float[<literal type="number">4</literal>]){ <literal type="number">1.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">1.0</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pl_swapchain_submit_frame</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name><operator>-&gt;</operator><name>swapchain</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Failed rendering frame!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PictureDisplay</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pl_swapchain_swap_buffers</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>vk</name><operator>-&gt;</operator><name>swapchain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VOUT_DISPLAY_RESET_PICTURES</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"VOUT_DISPLAY_RESET_PICTURES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_SIZE</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_DISPLAY_FILLED</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_ASPECT</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_SOURCE_CROP</name></expr>:</case>

<case>case <expr><name>VOUT_DISPLAY_CHANGE_ZOOM</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>vout_display_cfg_t</name></type> <name>cfg</name> <init>= <expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vout_display_cfg_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_display_PlacePicture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>place</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vd</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Unknown request %d"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_TEXT</name></cpp:macro> <cpp:value>N_("Vulkan surface extension")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROVIDER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Extension which provides the Vulkan surface to use.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISABLE_DR_TEXT</name></cpp:macro> <cpp:value>"Disable direct rendering / zero-copy upload"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISABLE_DR_LONGTEXT</name></cpp:macro> <cpp:value>"Direct rendering is a technique where image data is uploaded via a mapped buffer instead of via memcpy. On some platforms this might be very slow (due to poor readback performance from mapped memory), in which cases this flag would help."</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name> <argument_list>(<argument><literal type="string">"Vulkan"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"Vulkan video output"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name> <argument_list>(<argument>CAT_VIDEO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_VIDEO_VOUT</argument>)</argument_list></macro>

<macro><name>set_callback_display</name><argument_list>(<argument>Open</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>add_shortcut</name> <argument_list>(<argument><literal type="string">"vulkan"</literal></argument>, <argument><literal type="string">"vk"</literal></argument>)</argument_list></macro>

<macro><name>add_module</name> <argument_list>(<argument><literal type="string">"vk"</literal></argument>, <argument><literal type="string">"vulkan"</literal></argument>, <argument>NULL</argument>, <argument>VK_TEXT</argument>, <argument>PROVIDER_LONGTEXT</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Scaling"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"upscaler-preset"</literal></argument>, <argument>SCALE_BUILTIN</argument>,

<argument>UPSCALER_PRESET_TEXT</argument>, <argument>SCALER_PRESET_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>scale_values</argument>, <argument>scale_text</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"downscaler-preset"</literal></argument>, <argument>SCALE_BUILTIN</argument>,

<argument>DOWNSCALER_PRESET_TEXT</argument>, <argument>SCALER_PRESET_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>scale_values</argument>, <argument>scale_text</argument>)</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>(<argument><literal type="string">"lut-entries"</literal></argument>, <argument><literal type="number">64</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">256</literal></argument>,

<argument>LUT_ENTRIES_TEXT</argument>, <argument>LUT_ENTRIES_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"antiringing"</literal></argument>, <argument><literal type="number">0.0</literal></argument>,

<argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument>ANTIRING_TEXT</argument>, <argument>ANTIRING_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"sigmoid"</literal></argument>, <argument>!!pl_render_default_params.sigmoid_params</argument>,

<argument>SIGMOID_TEXT</argument>, <argument>SIGMOID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"sigmoid-center"</literal></argument>, <argument>pl_sigmoid_default_params.center</argument>,

<argument><literal type="number">0.</literal></argument>, <argument><literal type="number">1.</literal></argument>, <argument>SIGMOID_CENTER_TEXT</argument>, <argument>SIGMOID_CENTER_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"sigmoid-slope"</literal></argument>, <argument>pl_sigmoid_default_params.slope</argument>,

<argument><literal type="number">1.</literal></argument>, <argument><literal type="number">20.</literal></argument>, <argument>SIGMOID_SLOPE_TEXT</argument>, <argument>SIGMOID_SLOPE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Debanding"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"debanding"</literal></argument>, <argument>false</argument>, <argument>DEBAND_TEXT</argument>, <argument>DEBAND_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"iterations"</literal></argument>, <argument>pl_deband_default_params.iterations</argument>,

<argument>DEBAND_ITER_TEXT</argument>, <argument>DEBAND_ITER_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"threshold"</literal></argument>, <argument>pl_deband_default_params.threshold</argument>,

<argument>DEBAND_THRESH_TEXT</argument>, <argument>DEBAND_THRESH_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"radius"</literal></argument>, <argument>pl_deband_default_params.radius</argument>,

<argument>DEBAND_RADIUS_TEXT</argument>, <argument>DEBAND_RADIUS_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"grain"</literal></argument>, <argument>pl_deband_default_params.grain</argument>,

<argument>DEBAND_GRAIN_TEXT</argument>, <argument>DEBAND_GRAIN_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Colorspace conversion"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"intent"</literal></argument>, <argument>pl_color_map_default_params.intent</argument>,

<argument>RENDER_INTENT_TEXT</argument>, <argument>RENDER_INTENT_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>intent_values</argument>, <argument>intent_text</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"target-prim"</literal></argument>, <argument>PL_COLOR_PRIM_UNKNOWN</argument>, <argument>PRIM_TEXT</argument>, <argument>PRIM_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro> \

<macro><name>change_integer_list</name><argument_list>(<argument>prim_values</argument>, <argument>prim_text</argument>)</argument_list></macro> \

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"target-trc"</literal></argument>, <argument>PL_COLOR_TRC_UNKNOWN</argument>, <argument>TRC_TEXT</argument>, <argument>TRC_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro> \

<macro><name>change_integer_list</name><argument_list>(<argument>trc_values</argument>, <argument>trc_text</argument>)</argument_list></macro> \

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Tone mapping"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"tone-mapping"</literal></argument>, <argument>pl_color_map_default_params.tone_mapping_algo</argument>,

<argument>TONEMAPPING_TEXT</argument>, <argument>TONEMAPPING_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>tone_values</argument>, <argument>tone_text</argument>)</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"tone-mapping-param"</literal></argument>, <argument>pl_color_map_default_params.tone_mapping_param</argument>,

<argument>TONEMAP_PARAM_TEXT</argument>, <argument>TONEMAP_PARAM_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr></cpp:if>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"desat-strength"</literal></argument>, <argument>pl_color_map_default_params.desaturation_strength</argument>,

<argument>DESAT_STRENGTH_TEXT</argument>, <argument>DESAT_STRENGTH_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"desat-exponent"</literal></argument>, <argument>pl_color_map_default_params.desaturation_exponent</argument>,

<argument>DESAT_EXPONENT_TEXT</argument>, <argument>DESAT_EXPONENT_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"desat-base"</literal></argument>, <argument>pl_color_map_default_params.desaturation_base</argument>,

<argument>DESAT_BASE_TEXT</argument>, <argument>DESAT_BASE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"max-boost"</literal></argument>, <argument>pl_color_map_default_params.max_boost</argument>,

<argument>MAX_BOOST_TEXT</argument>, <argument>MAX_BOOST_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"tone-mapping-desat"</literal></argument>, <argument>pl_color_map_default_params.tone_mapping_desaturate</argument>,

<argument>TONEMAP_DESAT_TEXT</argument>, <argument>TONEMAP_DESAT_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"gamut-warning"</literal></argument>, <argument>false</argument>, <argument>GAMUT_WARN_TEXT</argument>, <argument>GAMUT_WARN_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&lt;</operator> <literal type="number">12</literal></expr></cpp:if>

<macro><name>add_integer_with_range</name><argument_list>(<argument><literal type="string">"peak-frames"</literal></argument>, <argument>pl_color_map_default_params.peak_detect_frames</argument>,

<argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument>PEAK_FRAMES_TEXT</argument>, <argument>PEAK_FRAMES_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"scene-threshold"</literal></argument>, <argument>pl_color_map_default_params.scene_threshold</argument>,

<argument><literal type="number">0.</literal></argument>, <argument><literal type="number">10.</literal></argument>, <argument>SCENE_THRESHOLD_TEXT</argument>, <argument>SCENE_THRESHOLD_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&gt;=</operator> <literal type="number">13</literal></expr></cpp:if>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"peak-period"</literal></argument>, <argument>pl_peak_detect_default_params.smoothing_period</argument>,

<argument><literal type="number">0.</literal></argument>, <argument><literal type="number">1000.</literal></argument>, <argument>PEAK_PERIOD_TEXT</argument>, <argument>PEAK_PERIOD_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"scene-threshold-low"</literal></argument>, <argument>pl_peak_detect_default_params.scene_threshold_low</argument>,

<argument>SCENE_THRESHOLD_LOW_TEXT</argument>, <argument>SCENE_THRESHOLD_LOW_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"scene-threshold-high"</literal></argument>, <argument>pl_peak_detect_default_params.scene_threshold_high</argument>,

<argument>SCENE_THRESHOLD_HIGH_TEXT</argument>, <argument>SCENE_THRESHOLD_HIGH_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"target-avg"</literal></argument>, <argument><literal type="number">0.25</literal></argument>,

<argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument>TARGET_AVG_TEXT</argument>, <argument>TARGET_AVG_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Dithering"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"dither"</literal></argument>, <argument>-<literal type="number">1</literal></argument>,

<argument>DITHER_TEXT</argument>, <argument>DITHER_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>dither_values</argument>, <argument>dither_text</argument>)</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>(<argument><literal type="string">"dither-size"</literal></argument>, <argument>pl_dither_default_params.lut_size</argument>,

<argument><literal type="number">1</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>DITHER_SIZE_TEXT</argument>, <argument>DITHER_SIZE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"temporal-dither"</literal></argument>, <argument>pl_dither_default_params.temporal</argument>,

<argument>TEMPORAL_DITHER_TEXT</argument>, <argument>TEMPORAL_DITHER_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>(<argument><literal type="string">"dither-depth"</literal></argument>, <argument><literal type="number">0</literal></argument>,

<argument><literal type="number">0</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>DITHER_DEPTH_TEXT</argument>, <argument>DITHER_DEPTH_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Custom upscaler (when preset = custom)"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"upscaler-kernel"</literal></argument>, <argument>FILTER_BOX</argument>,

<argument>KERNEL_TEXT</argument>, <argument>KERNEL_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>filter_values</argument>, <argument>filter_text</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"upscaler-window"</literal></argument>, <argument>FILTER_NONE</argument>,

<argument>WINDOW_TEXT</argument>, <argument>WINDOW_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>filter_values</argument>, <argument>filter_text</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"upscaler-polar"</literal></argument>, <argument>false</argument>, <argument>POLAR_TEXT</argument>, <argument>POLAR_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"upscaler-clamp"</literal></argument>, <argument><literal type="number">0.0</literal></argument>,

<argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument>CLAMP_TEXT</argument>, <argument>CLAMP_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"upscaler-blur"</literal></argument>, <argument><literal type="number">1.0</literal></argument>,

<argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">100.0</literal></argument>, <argument>BLUR_TEXT</argument>, <argument>BLUR_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"upscaler-taper"</literal></argument>, <argument><literal type="number">0.0</literal></argument>,

<argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">10.0</literal></argument>, <argument>TAPER_TEXT</argument>, <argument>TAPER_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Custom downscaler (when preset = custom)"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"downscaler-kernel"</literal></argument>, <argument>FILTER_BOX</argument>,

<argument>KERNEL_TEXT</argument>, <argument>KERNEL_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>filter_values</argument>, <argument>filter_text</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"downscaler-window"</literal></argument>, <argument>FILTER_NONE</argument>,

<argument>WINDOW_TEXT</argument>, <argument>WINDOW_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>filter_values</argument>, <argument>filter_text</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"downscaler-polar"</literal></argument>, <argument>false</argument>, <argument>POLAR_TEXT</argument>, <argument>POLAR_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"downscaler-clamp"</literal></argument>, <argument><literal type="number">0.0</literal></argument>,

<argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument>CLAMP_TEXT</argument>, <argument>CLAMP_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"downscaler-blur"</literal></argument>, <argument><literal type="number">1.0</literal></argument>,

<argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">100.0</literal></argument>, <argument>BLUR_TEXT</argument>, <argument>BLUR_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"downscaler-taper"</literal></argument>, <argument><literal type="number">0.0</literal></argument>,

<argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">10.0</literal></argument>, <argument>TAPER_TEXT</argument>, <argument>TAPER_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>set_section</name><argument_list>(<argument><literal type="string">"Performance tweaks / debugging"</literal></argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"skip-aa"</literal></argument>, <argument>false</argument>, <argument>SKIP_AA_TEXT</argument>, <argument>SKIP_AA_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>(<argument><literal type="string">"polar-cutoff"</literal></argument>, <argument><literal type="number">0.001</literal></argument>,

<argument><literal type="number">0.</literal></argument>, <argument><literal type="number">1.</literal></argument>, <argument>POLAR_CUTOFF_TEXT</argument>, <argument>POLAR_CUTOFF_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"overlay-direct"</literal></argument>, <argument>false</argument>, <argument>OVERLAY_DIRECT_TEXT</argument>, <argument>OVERLAY_DIRECT_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"disable-linear"</literal></argument>, <argument>false</argument>, <argument>DISABLE_LINEAR_TEXT</argument>, <argument>DISABLE_LINEAR_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"force-general"</literal></argument>, <argument>false</argument>, <argument>FORCE_GENERAL_TEXT</argument>, <argument>FORCE_GENERAL_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&gt;=</operator> <literal type="number">13</literal></expr></cpp:if>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"delayed-peak"</literal></argument>, <argument>false</argument>, <argument>DELAYED_PEAK_TEXT</argument>, <argument>DELAYED_PEAK_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateParams</name><parameter_list>(<parameter><decl><type><name>vout_display_t</name> <modifier>*</modifier></type><name>vd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vout_display_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>vd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>deband</name></name> <operator>=</operator> <name>pl_deband_default_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>deband</name><operator>.</operator><name>iterations</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"iterations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>deband</name><operator>.</operator><name>threshold</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"threshold"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>deband</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"radius"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>deband</name><operator>.</operator><name>grain</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"grain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_deband</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>deband</name><operator>.</operator><name>iterations</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>deband</name><operator>.</operator><name>grain</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>use_deband</name> <operator>&amp;=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"debanding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sigmoid</name></name> <operator>=</operator> <name>pl_sigmoid_default_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sigmoid</name><operator>.</operator><name>center</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"sigmoid-center"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sigmoid</name><operator>.</operator><name>slope</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"sigmoid-slope"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_sigmoid</name> <init>= <expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"sigmoid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name></name> <operator>=</operator> <name>pl_color_map_default_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>intent</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"intent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>tone_mapping_algo</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"tone-mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>tone_mapping_param</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"tone-mapping-param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr></cpp:if>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>desaturation_strength</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"desat-strength"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>desaturation_exponent</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"desat-exponent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>desaturation_base</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"desat-base"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>max_boost</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"max-boost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>tone_mapping_desaturate</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"tone-mapping-desat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>gamut_warning</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"gamut-warning"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&lt;</operator> <literal type="number">12</literal></expr></cpp:if>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>peak_detect_frames</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"peak-frames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color_map</name><operator>.</operator><name>scene_threshold</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"scene-threshold"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name> <operator>=</operator> <name>pl_dither_default_params</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"dither"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_dither</name> <init>= <expr><name>method</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>=</operator> <ternary><condition><expr><name>use_dither</name></expr> ?</condition><then> <expr><name>method</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>lut_size</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"dither-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>temporal</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"temporal-dither"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <name>pl_render_default_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>deband_params</name></name> <operator>=</operator> <ternary><condition><expr><name>use_deband</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>deband</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>sigmoid_params</name></name> <operator>=</operator> <ternary><condition><expr><name>use_sigmoid</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sigmoid</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>color_map_params</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>color_map</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>dither_params</name></name> <operator>=</operator> <ternary><condition><expr><name>use_dither</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dither</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>lut_entries</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"lut-entries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>antiringing_strength</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"antiringing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>skip_anti_aliasing</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"skip-aa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>polar_cutoff</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"polar-cutoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>disable_overlay_sampling</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"overlay-direct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>disable_linear_scaling</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"disable-linear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>disable_builtin_scalers</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"force-general"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PL_API_VER</name> <operator>&gt;=</operator> <literal type="number">13</literal></expr></cpp:if>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>peak_detect</name><operator>.</operator><name>smoothing_period</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"peak-period"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>peak_detect</name><operator>.</operator><name>scene_threshold_low</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"scene-threshold-low"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>peak_detect</name><operator>.</operator><name>scene_threshold_high</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"scene-threshold-high"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>peak_detect</name><operator>.</operator><name>smoothing_period</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>peak_detect_params</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>peak_detect</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>allow_delayed_peak_detect</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"delayed-peak"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>preset</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"upscaler-preset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>upscaler</name></name> <operator>=</operator> <name><name>scale_config</name><index>[<expr><name>preset</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>preset</name> <operator>==</operator> <name>SCALE_CUSTOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>upscaler</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>upscaler</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>upscaler</name></name> <operator>=</operator> <operator>(</operator>struct <name>pl_filter_config</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>kernel</name> <operator>=</operator> <name><name>filter_fun</name><index>[<expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"upscaler-kernel"</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>,

<expr><operator>.</operator><name>window</name> <operator>=</operator> <name><name>filter_fun</name><index>[<expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"upscaler-window"</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>,

<expr><operator>.</operator><name>clamp</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"upscaler-clamp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>blur</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"upscaler-blur"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>taper</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"upscaler-taper"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>polar</name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"upscaler-polar"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>upscaler</name><operator>.</operator><name>kernel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Tried specifying a custom upscaler with no kernel!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>upscaler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>preset</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"downscaler-preset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>downscaler</name></name> <operator>=</operator> <name><name>scale_config</name><index>[<expr><name>preset</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>preset</name> <operator>==</operator> <name>SCALE_CUSTOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>downscaler</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>downscaler</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>downscaler</name></name> <operator>=</operator> <operator>(</operator>struct <name>pl_filter_config</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>kernel</name> <operator>=</operator> <name><name>filter_fun</name><index>[<expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"downscaler-kernel"</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>,

<expr><operator>.</operator><name>window</name> <operator>=</operator> <name><name>filter_fun</name><index>[<expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"downscaler-window"</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>,

<expr><operator>.</operator><name>clamp</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"downscaler-clamp"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>blur</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"downscaler-blur"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>taper</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"downscaler-taper"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>polar</name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"downscaler-polar"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>downscaler</name><operator>.</operator><name>kernel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"Tried specifying a custom downscaler with no kernel!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>downscaler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dither_depth</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"dither-depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <operator>(</operator>struct <name>pl_color_space</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>primaries</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"target-prim"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>transfer</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"target-trc"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>sig_avg</name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"target-avg"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
