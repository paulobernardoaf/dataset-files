<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\services_discovery\sap.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_services_discovery.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_network.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_PORT</name></cpp:macro> <cpp:value>9875</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_V4_GLOBAL_ADDRESS</name></cpp:macro> <cpp:value>"224.2.127.254"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_V4_ORG_ADDRESS</name></cpp:macro> <cpp:value>"239.195.255.255"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_V4_LOCAL_ADDRESS</name></cpp:macro> <cpp:value>"239.255.255.255"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_V4_LINK_ADDRESS</name></cpp:macro> <cpp:value>"224.0.0.255"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_SESSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_ADDR_TEXT</name></cpp:macro> <cpp:value>N_( "SAP multicast address" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_ADDR_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The SAP module normally chooses itself the " "right addresses to listen to. However, you " "can specify a specific address." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_TIMEOUT_TEXT</name></cpp:macro> <cpp:value>N_( "SAP timeout (seconds)" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_TIMEOUT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Delay after which SAP items get deleted if no new announcement " "is received." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_PARSE_TEXT</name></cpp:macro> <cpp:value>N_( "Try to parse the announce" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_PARSE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This enables actual parsing of the announces by the SAP module. " "Otherwise, all announcements are parsed by the \"live555\" " "(RTP/RTSP) module." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_STRICT_TEXT</name></cpp:macro> <cpp:value>N_( "SAP Strict mode" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAP_STRICT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "When this is set, the SAP parser will discard some non-compliant " "announcements." )</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDemux</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseDemux</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>VLC_SD_PROBE_HELPER</name><argument_list>(<argument><literal type="string">"sap"</literal></argument>, <argument>N_(<literal type="string">"Network streams (SAP)"</literal>)</argument>, <argument>SD_CAT_LAN</argument>)</argument_list></macro>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"SAP"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Network streams (SAP)"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_PLAYLIST</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_PLAYLIST_SD</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"sap-addr"</literal></argument>, <argument>NULL</argument>,

<argument>SAP_ADDR_TEXT</argument>, <argument>SAP_ADDR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"sap-ipv4"</literal></argument> )</argument_list></macro> 

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"sap-ipv6"</literal></argument> )</argument_list></macro> 

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"sap-timeout"</literal></argument>, <argument><literal type="number">1800</literal></argument>,

<argument>SAP_TIMEOUT_TEXT</argument>, <argument>SAP_TIMEOUT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"sap-parse"</literal></argument>, <argument>true</argument>,

<argument>SAP_PARSE_TEXT</argument>,<argument>SAP_PARSE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"sap-strict"</literal></argument>, <argument>false</argument>,

<argument>SAP_STRICT_TEXT</argument>,<argument>SAP_STRICT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_obsolete_bool</name><argument_list>( <argument><literal type="string">"sap-timeshift"</literal></argument> )</argument_list></macro> 

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"services_discovery"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<expr_stmt><expr><name>VLC_SD_PROBE_SUBMODULE</name>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"SDP Descriptions parser"</literal>)</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"sdp"</literal></argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">51</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenDemux</argument>, <argument>CloseDemux</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro></expr></expr_stmt>

<typedef>typedef <type><name><name>struct</name> <name>sdp_t</name></name></type> <name>sdp_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>attribute_t</name></name></type> <name>attribute_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>sap_announce_t</name></name></type> <name>sap_announce_t</name>;</typedef>

<struct>struct <name>sdp_media_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>sdp_t</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_attributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_attributes</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>sdp_t</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>username</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>session_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>session_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>orig_ip_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>orig_host</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sessionname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sessioninfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_media_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rtcp_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_attributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attribute_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_attributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mediac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sdp_media_t</name></name> <modifier>*</modifier></type><name>mediav</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>attribute_t</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>sap_announce_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_period</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_period_trust</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>i_source</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type> <name>p_item</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_announces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sap_announce_t</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_announces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_strict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_parse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_timeout</name></decl>;</decl_stmt>

}</block></struct></type> <name>services_discovery_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name> <parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseConnection</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseSAP</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_read</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>sdp_t</name> <modifier>*</modifier></type><name>ParseSDP</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sdp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>sap_announce_t</name> <modifier>*</modifier></type><name>CreateAnnounce</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter>, <parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>RemoveAnnounce</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>, <parameter><decl><type><name>sap_announce_t</name> <modifier>*</modifier></type><name>p_announce</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>attribute_t</name> <modifier>*</modifier></type><name>MakeAttribute</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetAttribute</name> <parameter_list>(<parameter><decl><type><name>attribute_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>FreeAttribute</name> <parameter_list>(<parameter><decl><type><name>attribute_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FindAttribute</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sdp_t</name> <modifier>*</modifier></type><name>sdp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>media</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsSameSession</name><parameter_list>( <parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp1</name></decl></parameter>, <parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp2</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>InitSocket</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_address</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_port</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Decompress</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_len</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FreeSDP</name><parameter_list>( <parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsWellKnownPayload</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content> 

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">8</literal></expr>:</case> 

<case>case <expr><literal type="number">10</literal></expr>:</case> 

<case>case <expr><literal type="number">11</literal></expr>:</case> 

<case>case <expr><literal type="number">12</literal></expr>:</case>

<case>case <expr><literal type="number">14</literal></expr>:</case> 

<case>case <expr><literal type="number">32</literal></expr>:</case> 

<case>case <expr><literal type="number">33</literal></expr>:</case> 

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>services_discovery_sys_t</name> <operator>*</operator><operator>)</operator>

<call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>services_discovery_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timeout</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"sap-timeout"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sd</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Network streams (SAP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_fd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_strict</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"sap-strict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_parse</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"sap-parse"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_announces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_announces</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Run</name></expr></argument>, <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sdp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errval</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sap-parse"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">7</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"v=0\r\no="</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"v=0\no="</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i_len</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>psz_sdp</name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><name>i_len</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_read_max</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sdp_new</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name>psz_sdp</name></expr></argument>, <argument><expr><name>i_len</name> <operator>+</operator> <name>i_read_max</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_read</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_sdp_new</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>errval</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_sdp</name> <operator>=</operator> <name>psz_sdp_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>psz_sdp</name><index>[<expr><name>i_len</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_read_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><name>i_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot read SDP"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_sdp</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><name>i_read</name> <operator>&lt;</operator> <name>i_read_max</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>p_sdp</name> <operator>=</operator> <call><name>ParseSDP</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_sdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sdp</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid SDP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParseConnection</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p_sdp</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsWellKnownPayload</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>i_media_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sdp</name></name> <operator>=</operator> <name>p_sdp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name>psz_sdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name>psz_sdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sdp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FreeSDP</name><argument_list>( <argument><expr><name>p_sdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>errval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><operator>(</operator> <name>services_discovery_t</name><operator>*</operator> <operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name> <argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name><operator>-</operator><literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>net_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_fd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_announces</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>RemoveAnnounce</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_announces</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_announces</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>p_sdp</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeSDP</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>p_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SAP_BUFFER</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitSocket</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>SAP_V4_GLOBAL_ADDRESS</name></expr></argument>, <argument><expr><name>SAP_PORT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitSocket</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>SAP_V4_ORG_ADDRESS</name></expr></argument>, <argument><expr><name>SAP_PORT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitSocket</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>SAP_V4_LOCAL_ADDRESS</name></expr></argument>, <argument><expr><name>SAP_PORT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitSocket</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>SAP_V4_LINK_ADDRESS</name></expr></argument>, <argument><expr><name>SAP_PORT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_address</name><index>[<expr><name>NI_MAXNUMERICHOST</name></expr>]</index></name> <init>= <expr><literal type="string">"ff02::2:7ffe%"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>if_nameindex</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>if_nameindex</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>psz_address</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>if_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>if_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitSocket</name> <argument_list>(<argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>psz_address</name></expr></argument>, <argument><expr><name>SAP_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>if_freenameindex</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><name>PF_INET6</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>s</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>INTERFACE_INFO</name></type> <name><name>ifaces</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifaces</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>SOCKET_ERROR</name> <operator>!=</operator> <call><name>WSAIoctl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SIO_GET_INTERFACE_LIST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifaces</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ifcount</name> <init>= <expr><name>len</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>INTERFACE_INFO</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>psz_address</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>ifcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><call><name>strchr</name> <argument_list>(<argument><expr><name>psz_address</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ipv6_scopes</name><index>[]</index></name> <init>= <expr><literal type="string">"1456789ABCDE"</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_scope</name> <init>= <expr><name>ipv6_scopes</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>c_scope</name></expr>;</condition> <incr><expr><name>c_scope</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>psz_address</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>c_scope</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitSocket</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>psz_address</name></expr></argument>, <argument><expr><name>SAP_PORT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psz_addr</name> <operator>=</operator> <call><name>var_CreateGetString</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"sap-addr"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_addr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_addr</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>InitSocket</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>psz_addr</name></expr></argument>, <argument><expr><name>SAP_PORT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_addr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"unable to listen on any address"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>ufd</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_fd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ufd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>poll</name> <argument_list>(<argument><expr><name>ufd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>canc</name> <operator>=</operator> <call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ufd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_buffer</name><index>[<expr><name>MAX_SAP_BUFFER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>recv</name> <argument_list>(<argument><expr><name><name>ufd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>MAX_SAP_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"receive error: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><name>i_read</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ParseSAP</name> <argument_list>(<argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_announces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sap_announce_t</name> <modifier>*</modifier></type> <name>p_announce</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_announces</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_period</name> <init>= <expr><name>now</name> <operator>-</operator> <name><name>p_announce</name><operator>-&gt;</operator><name>i_last</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_announce</name><operator>-&gt;</operator><name>i_period_trust</name></name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>i_last_period</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>p_announce</name><operator>-&gt;</operator><name>i_period</name></name> <operator>)</operator> <operator>||</operator>

<name>i_last_period</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_timeout</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RemoveAnnounce</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_announce</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_announce</name><operator>-&gt;</operator><name>i_period_trust</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><literal type="number">10</literal> <operator>*</operator> <name><name>p_announce</name><operator>-&gt;</operator><name>i_period</name></name> <operator>-</operator> <name>i_last_period</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_timeout</name></name> <operator>-</operator> <name>i_last_period</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_announces</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if<condition>( <expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">200</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_sdp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_parent_input</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_parent_input</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"parent input could not be found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_SetURI</name><argument_list>( <argument><expr><name>p_parent_input</name></expr></argument>, <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_SetName</name><argument_list>( <argument><expr><name>p_parent_input</name></expr></argument>, <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessionname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sdp</name><operator>-&gt;</operator><name>rtcp_port</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtcp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rtcp</name></expr></argument>, <argument><expr><literal type="string">":rtcp-port=%u"</literal></expr></argument>, <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>rtcp_port</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>( <argument><expr><name>p_parent_input</name></expr></argument>, <argument><expr><name>rtcp</name></expr></argument>, <argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>rtcp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_parent_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_parent_input</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>ITEM_TYPE_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_parent_input</name><operator>-&gt;</operator><name>b_net</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_parent_input</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSAP</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>i_source</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>auth_len</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ipv6</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_need_delete</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"encrypted packet, unsupported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_compressed</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_hash</name> <init>= <expr><call><name>U16_AT</name> <argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_strict</name></name> <operator>&amp;&amp;</operator> <name>i_hash</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"strict mode, discarding announce with null id hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_ipv6</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator><expr><name>buf</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>i_source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>U32_AT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>i_source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>i_source</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>U32_AT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>auth_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>decomp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_compressed</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newsize</name> <init>= <expr><call><name>Decompress</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decomp</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"decompression of SAP packet failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>decomp</name> <operator>=</operator> <call><name>xrealloc</name> <argument_list>(<argument><expr><name>decomp</name></expr></argument>, <argument><expr><name>newsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decomp</name><index>[<expr><name>newsize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_sdp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>decomp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>psz_sdp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>psz_sdp</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name> <argument_list>(<argument><expr><name>psz_sdp</name></expr></argument>, <argument><expr><literal type="string">"v=0"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>psz_sdp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>psz_sdp</name></expr></argument>, <argument><expr><literal type="string">"application/sdp"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_sd</name></expr></argument>, <argument><expr><literal type="string">"unsupported content type: %s"</literal></expr></argument>, <argument><expr><name>psz_sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>clen</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_sdp</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sdp</name> <operator>=</operator> <call><name>ParseSDP</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_sd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_sdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sdp</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sdp</name></name> <operator>=</operator> <name>psz_sdp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParseConnection</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_sd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_sdp</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>IsWellKnownPayload</name><argument_list>( <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>i_media_type</name></name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_parse</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><literal type="string">"sdp://%s"</literal></expr></argument>, <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sdp</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeSDP</name><argument_list>( <argument><expr><name>p_sdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_announces</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sap_announce_t</name> <modifier>*</modifier></type> <name>p_announce</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_announces</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><name>i_hash</name> <operator>&amp;&amp;</operator> <call><name>IsSameSession</name><argument_list>( <argument><expr><name><name>p_announce</name><operator>-&gt;</operator><name>p_sdp</name></name></expr></argument>, <argument><expr><name>p_sdp</name></expr></argument> )</argument_list></call> <operator>)</operator>

<operator>||</operator> <operator>(</operator> <name>i_hash</name> <operator>&amp;&amp;</operator> <name><name>p_announce</name><operator>-&gt;</operator><name>i_hash</name></name> <operator>==</operator> <name>i_hash</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>p_announce</name><operator>-&gt;</operator><name>i_source</name></name></expr></argument>, <argument><expr><name>i_source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_need_delete</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_announce</name><operator>-&gt;</operator><name>i_period_trust</name></name> <operator>&lt;=</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_announce</name><operator>-&gt;</operator><name>i_period_trust</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>now</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_announce</name><operator>-&gt;</operator><name>i_period</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_announce</name><operator>-&gt;</operator><name>i_period</name></name> <operator>*</operator> <operator>(</operator><name><name>p_announce</name><operator>-&gt;</operator><name>i_period_trust</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name><name>p_announce</name><operator>-&gt;</operator><name>i_last</name></name><operator>)</operator> <operator>)</operator> <operator>/</operator> <name><name>p_announce</name><operator>-&gt;</operator><name>i_period_trust</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_announce</name><operator>-&gt;</operator><name>i_last</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FreeSDP</name><argument_list>( <argument><expr><name>p_sdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>decomp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CreateAnnounce</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>i_source</name></expr></argument>, <argument><expr><name>i_hash</name></expr></argument>, <argument><expr><name>p_sdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>decomp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>decomp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>sap_announce_t</name> <modifier>*</modifier></type><name>CreateAnnounce</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_source</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_hash</name></decl></parameter>,

<parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sap_announce_t</name> <modifier>*</modifier></type><name>p_sap</name> <init>= <expr><operator>(</operator><name>sap_announce_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sap_announce_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sap</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sap</name><operator>-&gt;</operator><name>i_last</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sap</name><operator>-&gt;</operator><name>i_period</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sap</name><operator>-&gt;</operator><name>i_period_trust</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sap</name><operator>-&gt;</operator><name>i_hash</name></name> <operator>=</operator> <name>i_hash</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>p_sap</name><operator>-&gt;</operator><name>i_source</name></name></expr></argument>, <argument><expr><name>i_source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sap</name><operator>-&gt;</operator><name>i_source</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sap</name><operator>-&gt;</operator><name>p_sdp</name></name> <operator>=</operator> <name>p_sdp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_input</name> <operator>=</operator> <call><name>input_item_NewStream</name><argument_list>( <argument><expr><name><name>p_sap</name><operator>-&gt;</operator><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessionname</name></name></expr></argument>,

<argument><expr><name>INPUT_DURATION_INDEFINITE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_input</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sap</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <name>p_input</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_meta</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_Description</name></expr></argument>, <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessioninfo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>=</operator> <name>p_meta</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sdp</name><operator>-&gt;</operator><name>rtcp_port</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtcp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rtcp</name></expr></argument>, <argument><expr><literal type="string">":rtcp-port=%u"</literal></expr></argument>, <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>rtcp_port</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddOption</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>rtcp</name></expr></argument>, <argument><expr><name>VLC_INPUT_OPTION_TRUSTED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>rtcp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>GetAttribute</name><argument_list>( <argument><expr><name><name>p_sap</name><operator>-&gt;</operator><name>p_sdp</name><operator>-&gt;</operator><name>pp_attributes</name></name></expr></argument>, <argument><expr><name><name>p_sap</name><operator>-&gt;</operator><name>p_sdp</name><operator>-&gt;</operator><name>i_attributes</name></name></expr></argument>, <argument><expr><literal type="string">"tool"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_value</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Session"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Tool"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>input_item_AddInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Session"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"User"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>username</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>GetAttribute</name><argument_list>(<argument><expr><name><name>p_sap</name><operator>-&gt;</operator><name>p_sdp</name><operator>-&gt;</operator><name>pp_attributes</name></name></expr></argument>,

<argument><expr><name><name>p_sap</name><operator>-&gt;</operator><name>p_sdp</name><operator>-&gt;</operator><name>i_attributes</name></name></expr></argument>, <argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>services_discovery_AddItemCat</name><argument_list>(<argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><ternary><condition><expr><name>str</name></expr> ?</condition><then> <expr><name>str</name></expr> </then><else>: <expr><name>psz_value</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <call><name>GetAttribute</name><argument_list>(<argument><expr><name><name>p_sap</name><operator>-&gt;</operator><name>p_sdp</name><operator>-&gt;</operator><name>pp_attributes</name></name></expr></argument>,

<argument><expr><name><name>p_sap</name><operator>-&gt;</operator><name>p_sdp</name><operator>-&gt;</operator><name>i_attributes</name></name></expr></argument>, <argument><expr><literal type="string">"x-plgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>services_discovery_AddItemCat</name><argument_list>(<argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_announces</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_announces</name></name></expr></argument>, <argument><expr><name>p_sap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_sap</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FindAttribute</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sdp_t</name> <modifier>*</modifier></type><name>sdp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>media</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>GetAttribute</name> <argument_list>(<argument><expr><name><name>sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name>media</name></expr>]</index></name><operator>.</operator><name>pp_attributes</name></expr></argument>,

<argument><expr><name><name>sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name>media</name></expr>]</index></name><operator>.</operator><name>i_attributes</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>GetAttribute</name> <argument_list>(<argument><expr><name><name>sdp</name><operator>-&gt;</operator><name>pp_attributes</name></name></expr></argument>, <argument><expr><name><name>sdp</name><operator>-&gt;</operator><name>i_attributes</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>attr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseConnection</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediac</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Ignoring SDP with no media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sdp</name><operator>-&gt;</operator><name>mediac</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n_addr</name> <operator>!=</operator> <name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><operator>-&gt;</operator><name>n_addr</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addrlen</name> <operator>!=</operator> <name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><operator>-&gt;</operator><name>addrlen</name></name><operator>)</operator>

<operator>||</operator> <call><name>memcmp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,

<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Multiple media ports not supported -&gt; live555"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><operator>-&gt;</operator><name>n_addr</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Layered encoding not supported -&gt; live555"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_uri</name><index>[<expr><literal type="number">1026</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>psz_uri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_getnameinfo</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>, <argument><expr><name>psz_uri</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>psz_uri</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name> <argument_list>(<argument><expr><name>psz_uri</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>host</name> <operator>=</operator> <name>psz_uri</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name> <argument_list>(<argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>host</name> <operator>=</operator> <name>psz_uri</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sdp_proto</name> <init>= <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sdp_proto</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subtype</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>sdp_proto</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>subtype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"missing SDP media subtype: %s"</literal></expr></argument>, <argument><expr><name>sdp_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sdp_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>subtype</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>sdp_proto</name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>i_media_type</name></name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>i_media_type</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>proto_match</name><index>[]</index></name> <init>=

<expr><literal type="string">"udp\0"</literal> <literal type="string">"udp\0\0"</literal>

<literal type="string">"RTP/AVP\0"</literal> <literal type="string">"rtp\0\0"</literal>

<literal type="string">"UDPLite/RTP/AVP\0"</literal> <literal type="string">"udplite\0\0"</literal>

<literal type="string">"DCCP/RTP/AVP\0"</literal> <literal type="string">"dccp\0\1"</literal>

<literal type="string">"TCP/RTP/AVP\0"</literal> <literal type="string">"rtptcp\0\1"</literal>

<literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vlc_proto</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name>proto_match</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>proto</name></expr>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name> <argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><name>sdp_proto</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>vlc_proto</name> <operator>=</operator> <name>proto</name> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>vlc_proto</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>vlc_proto</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>proto</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>proto</name> <operator>+=</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sdp_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vlc_proto</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"unknown SDP media protocol: %s"</literal></expr></argument>,

<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><name>vlc_proto</name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FindAttribute</name> <argument_list>(<argument><expr><name>p_sdp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"rtcp-mux"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>rtcp_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rtcp</name> <init>= <expr><call><name>FindAttribute</name> <argument_list>(<argument><expr><name>p_sdp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"rtcp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rtcp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>rtcp_port</name></name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><name>rtcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>port</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>rtcp_port</name></name> <operator>=</operator> <name>port</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>rtcp_port</name></name> <operator>=</operator> <name>port</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>FindAttribute</name> <argument_list>(<argument><expr><name>p_sdp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"setup"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>setup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>setup</name> <operator>=</operator> <literal type="string">"active"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>setup</name></expr></argument>, <argument><expr><literal type="string">"actpass"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name>setup</name></expr></argument>, <argument><expr><literal type="string">"passive"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"unsupported COMEDIA mode: %s"</literal></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><literal type="string">"%s://%s:%d"</literal></expr></argument>, <argument><expr><name>vlc_proto</name></expr></argument>,

<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_source</name><index>[<expr><literal type="number">258</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sfilter</name> <init>= <expr><call><name>FindAttribute</name> <argument_list>(<argument><expr><name>p_sdp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"source-filter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sfilter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_source_ip</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ipv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>sfilter</name></expr></argument>, <argument><expr><literal type="string">" incl IN IP%u %*s %255s "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ipv</name></expr></argument>,

<argument><expr><name>psz_source_ip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>ipv</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="number">6</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>inet_pton</name> <argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>psz_source_ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>inet_ntop</name> <argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>psz_source</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>psz_source</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>psz_source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_source</name><index>[<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>psz_source</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>inet_pton</name> <argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>psz_source_ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>inet_ntop</name> <argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>psz_source</name></expr></argument>,

<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>psz_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psz_source</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument>, <argument><expr><literal type="string">"%s://%s@%s:%i"</literal></expr></argument>, <argument><expr><name>vlc_proto</name></expr></argument>, <argument><expr><name>psz_source</name></expr></argument>,

<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSDPConnection</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,

<parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>number</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fam</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"IN IP%u %59[^/]/%u/%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fam</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>fam</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>ss_len</name></name> <operator>=</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>*</operator><name>addrlen</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name> <argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>number</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>res</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>n1</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SA_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>ss_len</name></name> <operator>=</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>*</operator><name>addrlen</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name> <argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>number</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>res</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><name>n2</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>net_SetPort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AF_INET</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sdp_t</name> <modifier>*</modifier></type><name>ParseSDP</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sdp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_sdp</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name> <init>= <expr><call><name>calloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_sdp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_sdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>expect</name> <init>= <expr><literal type="char">'V'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>glob_addr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>glob_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>glob_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>glob_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>glob_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>psz_sdp</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>linelen</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>psz_sdp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>psz_sdp</name><index>[<expr><name>linelen</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>linelen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>psz_sdp</name></expr></argument>, <argument><expr><name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>linelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_sdp</name> <operator>+=</operator> <name>linelen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eol</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>linelen</name> <operator>=</operator> <name>eol</name> <operator>-</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>linelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>cat</name> <init>= <expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cat</name> <operator>||</operator> <operator>(</operator><call><name>strchr</name> <argument_list>(<argument><expr><literal type="string">"vosiuepcbtrzkam"</literal></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"unknown SDP line type: 0x%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"invalid SDP line: %s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>linelen</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>expect</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'O'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>!=</operator> <literal type="char">'v'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"missing SDP version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"unknown SDP version: %s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>!=</operator> <literal type="char">'o'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"missing SDP originator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>sscanf</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%63s %"</literal><name>SCNu64</name><literal type="string">" %"</literal><name>SCNu64</name><literal type="string">" IN IP%u %1023s"</literal></expr></argument>,

<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>session_version</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>orig_ip_version</name></name></expr></argument>,

<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>orig_host</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>orig_ip_version</name></name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>orig_ip_version</name></name> <operator>!=</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"SDP origin not supported: %s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>orig_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cat</name> <operator>!=</operator> <literal type="char">'s'</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>*</operator><name>data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"missing SDP session name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessionname</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessionname</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessionname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessionname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'U'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessioninfo</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessioninfo</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessioninfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessioninfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ParseSDPConnection</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glob_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glob_len</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>glob_count</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"SDP connection infos not supported: "</literal>

<literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>expect</name> <operator>==</operator> <literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>!=</operator> <literal type="char">'t'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"missing SDP time description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cat</name> <operator>==</operator> <literal type="char">'t'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cat</name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'K'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'k'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>attribute_t</name> <modifier>*</modifier></type><name>p_attr</name> <init>= <expr><call><name>MakeAttribute</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>i_attributes</name></name></expr></argument>, <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>pp_attributes</name></name></expr></argument>, <argument><expr><name>p_attr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<label><name>media</name>:</label>

<block>{<block_content>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>!=</operator> <literal type="char">'m'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"missing SDP media description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sdp_media_t</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>p_sdp</name><operator>-&gt;</operator><name>mediac</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>+=</operator> <name><name>p_sdp</name><operator>-&gt;</operator><name>mediac</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediac</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glob_addr</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>=</operator> <name>glob_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>n_addr</name></name> <operator>=</operator> <name>glob_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"missing SDP media port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name> <argument_list>(<argument><expr><operator>++</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>port</name> <operator>&gt;=</operator> <literal type="number">65536</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"invalid transport port %d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>net_SetPort</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>htons</name> <argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strchr</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"missing SDP media format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><operator>++</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>fmt</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sdp_media_t</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name></name> <operator>+</operator> <name><name>p_sdp</name><operator>-&gt;</operator><name>mediac</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ParseSDPConnection</name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>n_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"SDP connection infos not supported: "</literal>

<literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>net_SetPort</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>htons</name> <argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<expr_stmt><expr><name>expect</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'k'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>expect</name> <operator>==</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>attribute_t</name> <modifier>*</modifier></type><name>p_attr</name> <init>= <expr><call><name>MakeAttribute</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediac</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_attributes</name></expr></argument>,

<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediac</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pp_attributes</name></expr></argument>, <argument><expr><name>p_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cat</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>media</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"unexpected SDP line: 0x%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"*** BUG in SDP parser! ***"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></while>

<return>return <expr><name>p_sdp</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>FreeSDP</name> <argument_list>(<argument><expr><name>p_sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>InitSocket</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_address</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_port</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name> <init>= <expr><call><name>net_ListenUDP1</name> <argument_list>(<argument><expr><operator>(</operator><name>vlc_object_t</name> <operator>*</operator><operator>)</operator><name>p_sd</name></expr></argument>, <argument><expr><name>psz_address</name></expr></argument>, <argument><expr><name>i_port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>shutdown</name><argument_list>( <argument><expr><name>i_fd</name></expr></argument>, <argument><expr><name>SHUT_WR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fd</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_fd</name></name></expr></argument>, <argument><expr><name>i_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Decompress</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>, <decl><type ref="prev"/><name>i_dstsize</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psz_dst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_stream</name></type> <name>d_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d_stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>d_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>Z_OK</name></expr> )</condition><block type="pseudo"><block_content>

<return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d_stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><name>psz_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d_stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>i_len</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_dst</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name>psz_dst</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d_stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>psz_dst</name><index>[<expr><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d_stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d_stream</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_result</name> <operator>!=</operator> <name>Z_OK</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_result</name> <operator>!=</operator> <name>Z_STREAM_END</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>inflateEnd</name><argument_list>( <argument><expr><operator>&amp;</operator><name>d_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

while<condition>( <expr><operator>(</operator> <name><name>d_stream</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>d_stream</name><operator>.</operator><name>avail_in</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>i_result</name> <operator>!=</operator> <name>Z_STREAM_END</name> <operator>)</operator></expr> )</condition>;</do>

<expr_stmt><expr><name>i_dstsize</name> <operator>=</operator> <name><name>d_stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inflateEnd</name><argument_list>( <argument><expr><operator>&amp;</operator><name>d_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>_dst</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name>psz_dst</name></expr></argument>, <argument><expr><name>i_dstsize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_dstsize</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>psz_src</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i_len</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeSDP</name><parameter_list>( <parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessionname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_sessioninfo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>psz_uri</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_sdp</name><operator>-&gt;</operator><name>mediac</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_attributes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeAttribute</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>pp_attributes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pp_attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>mediav</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sdp</name><operator>-&gt;</operator><name>i_attributes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeAttribute</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>pp_attributes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>p_sdp</name><operator>-&gt;</operator><name>pp_attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RemoveAnnounce</name><parameter_list>( <parameter><decl><type><name>services_discovery_t</name> <modifier>*</modifier></type><name>p_sd</name></decl></parameter>,

<parameter><decl><type><name>sap_announce_t</name> <modifier>*</modifier></type><name>p_announce</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_announce</name><operator>-&gt;</operator><name>p_sdp</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeSDP</name><argument_list>( <argument><expr><name><name>p_announce</name><operator>-&gt;</operator><name>p_sdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_announce</name><operator>-&gt;</operator><name>p_sdp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_announce</name><operator>-&gt;</operator><name>p_item</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>services_discovery_RemoveItem</name><argument_list>( <argument><expr><name>p_sd</name></expr></argument>, <argument><expr><name><name>p_announce</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name><name>p_announce</name><operator>-&gt;</operator><name>p_item</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_announce</name><operator>-&gt;</operator><name>p_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>services_discovery_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_sd</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_announces</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_announces</name></name></expr></argument>, <argument><expr><name>p_announce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_announce</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsSameSession</name><parameter_list>( <parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp1</name></decl></parameter>, <parameter><decl><type><name>sdp_t</name> <modifier>*</modifier></type><name>p_sdp2</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name> <argument_list>(<argument><expr><name><name>p_sdp1</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><name><name>p_sdp2</name><operator>-&gt;</operator><name>username</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name><name>p_sdp1</name><operator>-&gt;</operator><name>session_id</name></name> <operator>!=</operator> <name><name>p_sdp2</name><operator>-&gt;</operator><name>session_id</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>p_sdp1</name><operator>-&gt;</operator><name>orig_ip_version</name></name> <operator>!=</operator> <name><name>p_sdp2</name><operator>-&gt;</operator><name>orig_ip_version</name></name><operator>)</operator>

<operator>||</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>p_sdp1</name><operator>-&gt;</operator><name>orig_host</name></name></expr></argument>, <argument><expr><name><name>p_sdp2</name><operator>-&gt;</operator><name>orig_host</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>attribute_t</name> <modifier>*</modifier></type><name>MakeAttribute</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>attribute_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>strchr</name> <argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetAttribute</name> <parameter_list>(<parameter><decl><type><name>attribute_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name> <argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>FreeAttribute</name> <parameter_list>(<parameter><decl><type><name>attribute_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
