<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\misc\playlist\xspf.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist_export.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>xspf_export_playlist</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>input_xml</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_item</name></decl></parameter>, <parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>func</name><argument_list>( <argument><expr><name>p_item</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>vlc_xml_encode</name><argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xspf_export_item</name><parameter_list>( <parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>p_file</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\t\t&lt;track&gt;\n"</literal></expr></argument>, <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_uri</name> <init>= <expr><call><name>input_xml</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>input_item_GetURI</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_uri</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_uri</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;location&gt;%s&lt;/location&gt;\n"</literal></expr></argument>, <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>input_xml</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>input_item_GetTitle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;title&gt;%s&lt;/title&gt;\n"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_uri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_meta</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>xspfexportitem_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>input_xml</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>input_item_GetArtist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;creator&gt;%s&lt;/creator&gt;\n"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>input_xml</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>input_item_GetAlbum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;album&gt;%s&lt;/album&gt;\n"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>input_xml</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>input_item_GetTrackNum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_tracknum</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tracknum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;trackNum&gt;%i&lt;/trackNum&gt;\n"</literal></expr></argument>, <argument><expr><name>i_tracknum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>input_xml</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>input_item_GetDescription</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;annotation&gt;%s&lt;/annotation&gt;\n"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>input_xml</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>input_item_GetURL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;info&gt;%s&lt;/info&gt;\n"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>input_xml</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>input_item_GetArtURL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;image&gt;%s&lt;/image&gt;\n"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>xspfexportitem_end</name>:</label>

<expr_stmt><expr><name>i_duration</name> <operator>=</operator> <call><name>input_item_GetDuration</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;duration&gt;%"</literal><name>PRIu64</name><literal type="string">"&lt;/duration&gt;\n"</literal></expr></argument>,

<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_duration</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\t\t\t&lt;extension application=\""</literal>

<literal type="string">"http://www.videolan.org/vlc/playlist/0\"&gt;\n"</literal></expr></argument>, <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t\t&lt;vlc:id&gt;%"</literal><name>PRIu64</name><literal type="string">"&lt;/vlc:id&gt;\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_input</name><operator>-&gt;</operator><name>i_options</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_src</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>ppsz_options</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>psz_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <call><name>vlc_xml_encode</name><argument_list>( <argument><expr><name>psz_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_ret</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>p_file</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t\t&lt;vlc:option&gt;%s&lt;/vlc:option&gt;\n"</literal></expr></argument>, <argument><expr><name>psz_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\t\t\t&lt;/extension&gt;\n"</literal></expr></argument>, <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>( <argument><expr><literal type="string">"\t\t&lt;/track&gt;\n"</literal></expr></argument>, <argument><expr><name>p_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>xspf_export_playlist</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_export</name></name> <modifier>*</modifier></type><name>p_export</name> <init>= <expr><operator>(</operator>struct <name>vlc_playlist_export</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,

<argument><expr><literal type="string">"&lt;playlist xmlns=\"http://xspf.org/ns/0/\" "</literal> \

<literal type="string">"xmlns:vlc=\"http://www.videolan.org/vlc/playlist/ns/0/\" "</literal> \

<literal type="string">"version=\"1\"&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"\t&lt;trackList&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_view_Count</name><argument_list>(<argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>playlist_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>=

<expr><call><name>vlc_playlist_view_Get</name><argument_list>(<argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>playlist_view</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>vlc_playlist_item_GetMedia</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xspf_export_item</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"\t&lt;/trackList&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;/playlist&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
