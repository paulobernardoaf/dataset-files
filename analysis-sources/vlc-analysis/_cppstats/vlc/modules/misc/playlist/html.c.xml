<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\misc\playlist\html.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist_export.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>Export_HTML</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoExport</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vlc_playlist_export</name></name> <modifier>*</modifier></type><name>p_export</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_view_Count</name><argument_list>(<argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>playlist_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>item</name> <init>=

<expr><call><name>vlc_playlist_view_Get</name><argument_list>(<argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>playlist_view</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>vlc_playlist_item_GetMedia</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><call><name>input_item_GetName</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_tmp</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>vlc_xml_encode</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_name</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_artist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>input_item_GetArtist</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_tmp</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_artist</name> <operator>=</operator> <call><name>vlc_xml_encode</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name> <init>= <expr><call><name>input_item_GetDuration</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>( <argument><expr><name>i_duration</name></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>( <argument><expr><name>i_duration</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>min</name> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_artist</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_artist</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">" &lt;li&gt;%s - %s (%02d:%02d)&lt;/li&gt;\n"</literal></expr></argument>, <argument><expr><name>psz_artist</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>sec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">" &lt;li&gt;%s (%2d:%2d)&lt;/li&gt;\n"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_artist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Export_HTML</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_export</name></name> <modifier>*</modifier></type><name>p_export</name> <init>= <expr><operator>(</operator>struct <name>vlc_playlist_export</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_export</name></expr></argument>, <argument><expr><literal type="string">"saving using HTML format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n"</literal>

<literal type="string">"&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"&gt;\n"</literal>

<literal type="string">"&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n"</literal>

<literal type="string">"&lt;head&gt;\n"</literal>

<literal type="string">" &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n"</literal>

<literal type="string">" &lt;meta name=\"Generator\" content=\"VLC media player\" /&gt;\n"</literal>

<literal type="string">" &lt;meta name=\"Author\" content=\"VLC, http://www.videolan.org/vlc/\" /&gt;\n"</literal>

<literal type="string">" &lt;title&gt;VLC generated playlist&lt;/title&gt;\n"</literal>

<literal type="string">" &lt;style type=\"text/css\"&gt;\n"</literal>

<literal type="string">" body {\n"</literal>

<literal type="string">" background-color: #E4F3FF;\n"</literal>

<literal type="string">" font-family: sans-serif, Helvetica, Arial;\n"</literal>

<literal type="string">" font-size: 13px;\n"</literal>

<literal type="string">" }\n"</literal>

<literal type="string">" h1 {\n"</literal>

<literal type="string">" color: #2D58AE;\n"</literal>

<literal type="string">" font-size: 25px;\n"</literal>

<literal type="string">" }\n"</literal>

<literal type="string">" hr {\n"</literal>

<literal type="string">" color: #555555;\n"</literal>

<literal type="string">" }\n"</literal>

<literal type="string">" &lt;/style&gt;\n"</literal>

<literal type="string">"&lt;/head&gt;\n\n"</literal>

<literal type="string">"&lt;body&gt;\n"</literal>

<literal type="string">" &lt;h1&gt;Playlist&lt;/h1&gt;\n"</literal>

<literal type="string">" &lt;hr /&gt;\n"</literal>

<literal type="string">" &lt;ol&gt;\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DoExport</name><argument_list>(<argument><expr><name>p_export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name><name>p_export</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">" &lt;/ol&gt;\n"</literal>

<literal type="string">" &lt;hr /&gt;\n"</literal>

<literal type="string">"&lt;/body&gt;\n"</literal>

<literal type="string">"&lt;/html&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
