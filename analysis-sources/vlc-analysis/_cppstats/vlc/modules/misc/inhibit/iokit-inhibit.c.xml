<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\misc\inhibit\iokit-inhibit.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_inhibit.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;IOKit/pwr_mgt/IOPMLib.h&gt;</cpp:file></cpp:include>

<struct>struct <name>vlc_inhibit_sys</name>

<block>{

<decl_stmt><decl><type><name>IOPMAssertionID</name></type> <name>act_assertion_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IOPMAssertionID</name></type> <name>inh_assertion_id</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateInhibit</name><parameter_list>(<parameter><decl><type><name>vlc_inhibit_t</name> <modifier>*</modifier></type><name>ih</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_inhibit_sys_t</name><modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>ih</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>inh_assertion_id</name></name> <operator>!=</operator> <name>kIOPMNullAssertionID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Releasing previous IOPMAssertion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IOPMAssertionRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>inh_assertion_id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kIOReturnSuccess</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Failed releasing previous IOPMAssertion, "</literal>

<literal type="string">"not acquiring new one!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>inh_assertion_id</name></name> <operator>=</operator> <name>kIOPMNullAssertionID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>IOReturn</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>VLC_INHIBIT_DISPLAY</name><operator>)</operator> <operator>==</operator> <name>VLC_INHIBIT_DISPLAY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>activity_reason</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"VLC video playback"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Inhibiting display sleep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>IOPMAssertionDeclareUserActivity</name><argument_list>(<argument><expr><name>activity_reason</name></expr></argument>,

<argument><expr><name>kIOPMUserActiveLocal</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>act_assertion_id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>kIOReturnSuccess</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Failed to declare user activity (%i)"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>IOPMAssertionCreateWithName</name><argument_list>(<argument><expr><name>kIOPMAssertPreventUserIdleDisplaySleep</name></expr></argument>,

<argument><expr><name>kIOPMAssertionLevelOn</name></expr></argument>,

<argument><expr><name>activity_reason</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>inh_assertion_id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>VLC_INHIBIT_SUSPEND</name><operator>)</operator> <operator>==</operator> <name>VLC_INHIBIT_SUSPEND</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>activity_reason</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"VLC audio playback"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Inhibiting idle sleep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>IOPMAssertionCreateWithName</name><argument_list>(<argument><expr><name>kIOPMAssertPreventUserIdleSystemSleep</name></expr></argument>,

<argument><expr><name>kIOPMAssertionLevelOn</name></expr></argument>,

<argument><expr><name>activity_reason</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>inh_assertion_id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>VLC_INHIBIT_NONE</name><operator>)</operator> <operator>==</operator> <name>VLC_INHIBIT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Removed previous inhibition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Unhandled inhibiton mask (%i)"</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>kIOReturnSuccess</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Failed creating IOPMAssertion (%i)"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenInhibit</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_inhibit_t</name> <modifier>*</modifier></type><name>ih</name> <init>= <expr><operator>(</operator><name>vlc_inhibit_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_inhibit_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>ih</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator>

<call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vlc_inhibit_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>ih</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>act_assertion_id</name></name> <operator>=</operator> <name>kIOPMNullAssertionID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>inh_assertion_id</name></name> <operator>=</operator> <name>kIOPMNullAssertionID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ih</name><operator>-&gt;</operator><name>inhibit</name></name> <operator>=</operator> <name>UpdateInhibit</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseInhibit</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_inhibit_t</name> <modifier>*</modifier></type><name>ih</name> <init>= <expr><operator>(</operator><name>vlc_inhibit_t</name><operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_inhibit_sys_t</name><modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>ih</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>inh_assertion_id</name></name> <operator>!=</operator> <name>kIOPMNullAssertionID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Releasing remaining IOPMAssertion (inhibition)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IOPMAssertionRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>inh_assertion_id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kIOReturnSuccess</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Failed releasing IOPMAssertion on termination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>inh_assertion_id</name></name> <operator>=</operator> <name>kIOPMNullAssertionID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>act_assertion_id</name></name> <operator>!=</operator> <name>kIOPMNullAssertionID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Releasing remaining IOPMAssertion (activity)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IOPMAssertionRelease</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>act_assertion_id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kIOReturnSuccess</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><literal type="string">"Failed releasing IOPMAssertion on termination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>act_assertion_id</name></name> <operator>=</operator> <name>kIOPMNullAssertionID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"macOS sleep inhibition"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"macOS screen and idle sleep inhibition"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"inhibit"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>OpenInhibit</argument>, <argument>CloseInhibit</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

</unit>
