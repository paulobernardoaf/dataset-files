<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\misc\gnutls.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnutls/gnutls.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnutls/x509.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>vlc_tls_gnutls</name>

<block>{

<decl_stmt><decl><type><name>vlc_tls_t</name></type> <name>tls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_tls_gnutls_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gnutls_Banner</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"using GnuTLS v%s (built with v"</literal><name>GNUTLS_VERSION</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><call><name>gnutls_check_version</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gnutls_Error</name><parameter_list>(<parameter><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GNUTLS_E_AGAIN</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>WSASetLastError</name> <argument_list>(<argument><expr><name>WSAEWOULDBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_E_INTERRUPTED</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>WSASetLastError</name> <argument_list>(<argument><expr><name>WSAEINTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gnutls_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gnutls_error_is_fatal</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><literal type="string">"Error above should be handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>WSASetLastError</name> <argument_list>(<argument><expr><name>WSAECONNRESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vlc_gnutls_read</name><parameter_list>(<parameter><decl><type><name>gnutls_transport_ptr_t</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name> <init>= <expr><block>{

<expr><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>buf</name></expr>,

<expr><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>length</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>sock</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>readv</name></name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iov</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>vlc_gnutls_writev</name><parameter_list>(<parameter><decl><type><name>gnutls_transport_ptr_t</name></type> <name>ptr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>giovec_t</name> <modifier>*</modifier></type><name>giov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iovcnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IOV_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>iovmax</name> <init>= <expr><name>IOV_MAX</name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>iovmax</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_IOV_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>iovcnt</name> <operator>&gt;</operator> <name>iovmax</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>iovcnt</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><name>iovcnt</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iovcnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>giov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>giov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><call><name><name>sock</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>writev</name></name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gnutls_GetFD</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>events</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator><name>vlc_tls_gnutls_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><call><name>gnutls_transport_get_ptr</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>vlc_tls_GetPollFD</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>gnutls_Recv</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator><name>vlc_tls_gnutls_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>rcvd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>gnutls_record_recv</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>rcvd</name></expr> ?</condition><then> <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>rcvd</name></expr> </then><else>: <expr><call><name>gnutls_Error</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rcvd</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>val</name> <operator>&lt;</operator> <name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iov</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>rcvd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>gnutls_Send</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator><name>vlc_tls_gnutls_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gnutls_record_check_corked</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gnutls_record_cork</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_record_send</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>iov</name><operator>-&gt;</operator><name>iov_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iov</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_record_uncork</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>gnutls_Error</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gnutls_Shutdown</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>duplex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator><name>vlc_tls_gnutls_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_record_uncork</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>gnutls_Error</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_bye</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><ternary><condition><expr><name>duplex</name></expr> ?</condition><then> <expr><name>GNUTLS_SHUT_RDWR</name></expr> </then><else>: <expr><name>GNUTLS_SHUT_WR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>gnutls_Error</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gnutls_Close</name> <parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator><name>vlc_tls_gnutls_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnutls_deinit</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_operations</name></name></type> <name>gnutls_ops</name> <init>=

<expr><block>{

<expr><name>gnutls_GetFD</name></expr>,

<expr><name>gnutls_Recv</name></expr>,

<expr><name>gnutls_Send</name></expr>,

<expr><name>gnutls_Shutdown</name></expr>,

<expr><name>gnutls_Close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>gnutls_SessionOpen</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>gnutls_certificate_credentials_t</name></type> <name>x509</name></decl></parameter>,

<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>alpn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>priv</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>GNUTLS_NONBLOCK</name> <operator>|</operator> <name>GNUTLS_ENABLE_FALSE_START</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize TLS session: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>priorities</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"gnutls-priorities"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>priorities</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_priority_set_direct</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>priorities</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot set TLS priorities \"%s\": %s"</literal></expr></argument>, <argument><expr><name>errp</name></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>priorities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_credentials_set</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>GNUTLS_CRD_CERTIFICATE</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot set TLS session credentials: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>gnutls_datum_t</name> <modifier>*</modifier></type><name>protv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>protc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>alpn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>gnutls_datum_t</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>protv</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>protv</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>protc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>protv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>protv</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>protv</name><index>[<expr><name>protc</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>alpn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>protv</name><index>[<expr><name>protc</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>alpn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>protc</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>alpn</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_alpn_set_protocols</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>protv</name></expr></argument>, <argument><expr><name>protc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>protv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gnutls_transport_set_ptr</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_transport_set_vec_push_function</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>vlc_gnutls_writev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_transport_set_pull_function</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>vlc_gnutls_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>tls</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tls</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>gnutls_ops</name></expr>;</expr_stmt>

<return>return <expr><name>priv</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>gnutls_deinit</name> <argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gnutls_Handshake</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>alp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator><name>vlc_tls_gnutls_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>obj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>gnutls_handshake</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gnutls_error_is_fatal</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"TLS handshake error: %s"</literal></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GNUTLS_E_SUCCESS</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>GNUTLS_E_AGAIN</name></expr>:</case>

<case>case <expr><name>GNUTLS_E_INTERRUPTED</name></expr>:</case>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>gnutls_record_get_direction</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"TLS handshake error: %s"</literal></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"TLS handshake complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><call><name>gnutls_session_get_flags</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GNUTLS_SFLAGS_SAFE_RENEGOTIATION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" - safe renegotiation (RFC5746) enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GNUTLS_SFLAGS_EXT_MASTER_SECRET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" - extended master secret (RFC7627) enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GNUTLS_SFLAGS_ETM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" - encrypt then MAC (RFC7366) enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GNUTLS_SFLAGS_FALSE_START</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">" - false start (RFC7918) enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>datum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_alpn_get_selected_protocol</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memchr</name> <argument_list>(<argument><expr><name><name>datum</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>datum</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>*</operator><name>alp</name> <operator>=</operator> <call><name>strndup</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>datum</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>datum</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>alp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>alp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tls_t</name> <modifier>*</modifier></type><name>gnutls_ClientSessionOpen</name><parameter_list>(<parameter><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>,

<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>alpn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>gnutls_SessionOpen</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>crd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GNUTLS_CLIENT</name></expr></argument>,

<argument><expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>alpn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>priv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnutls_dh_set_prime_bits</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>hostname</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_server_name_set</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>GNUTLS_NAME_DNS</name></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>tls</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gnutls_ClientHandshake</name><parameter_list>(<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>tls</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>alp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><operator>(</operator><name>vlc_tls_gnutls_t</name> <operator>*</operator><operator>)</operator><name>tls</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>obj</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>gnutls_Handshake</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><name>alp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_certificate_verify_peers3</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Certificate verification error: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>desc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gnutls_certificate_verification_status_print</name><argument_list>(<argument><expr><name>status</name></expr></argument>,

<argument><expr><call><name>gnutls_certificate_type_get</name> <argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Certificate verification failure: %s"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_free</name> <argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>&amp;=</operator> <operator>~</operator><name>GNUTLS_CERT_INVALID</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>status</name> <operator>&amp;=</operator> <operator>~</operator><name>GNUTLS_CERT_SIGNER_NOT_FOUND</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>status</name> <operator>&amp;=</operator> <operator>~</operator><name>GNUTLS_CERT_UNEXPECTED_OWNER</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>gnutls_datum_t</name> <modifier>*</modifier></type><name>datum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>gnutls_certificate_get_peers</name> <argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>datum</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Peer certificate not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"%u certificate(s) in the list"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_verify_stored_pubkey</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>service</name></expr></argument>,

<argument><expr><name>GNUTLS_CRT_X509</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"certificate key match for %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>GNUTLS_E_NO_CERTIFICATE_FOUND</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"no known certificates for %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"However, the security certificate presented by the "</literal>

<literal type="string">"server is unknown and could not be authenticated by any "</literal>

<literal type="string">"trusted Certificate Authority."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_E_CERTIFICATE_KEY_MISMATCH</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"certificate keys mismatch for %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"However, the security certificate presented by the "</literal>

<literal type="string">"server changed since the previous visit and was not "</literal>

<literal type="string">"authenticated by any trusted Certificate Authority."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"certificate key match error for %s: %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>vlc_dialog_wait_question</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>VLC_DIALOG_QUESTION_WARNING</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Abort"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"View certificate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Insecure site"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You attempted to reach %s. %s\n"</literal>

<literal type="string">"This problem may be stem from an attempt to breach your security, "</literal>

<literal type="string">"compromise your privacy, or a configuration error.\n\n"</literal>

<literal type="string">"If in doubt, abort now.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>gnutls_x509_crt_t</name></type> <name>cert</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gnutls_x509_crt_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gnutls_x509_crt_import</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>GNUTLS_X509_FMT_DER</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>gnutls_x509_crt_print</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>GNUTLS_CRT_PRINT_ONELINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name> <argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vlc_dialog_wait_question</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>VLC_DIALOG_QUESTION_WARNING</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Abort"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Accept 24 hours"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Accept permanently"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Insecure site"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"This is the certificate presented by %s:\n%s\n\n"</literal>

<literal type="string">"If in doubt, abort now.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_free</name> <argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>expiry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>val</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>time</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expiry</name> <operator>+=</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_store_pubkey</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>service</name></expr></argument>,

<argument><expr><name>GNUTLS_CRT_X509</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>expiry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"cannot store X.509 certificate: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>alp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>alp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gnutls_ClientDestroy</name><parameter_list>(<parameter><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>gnutls_certificate_credentials_t</name></type> <name>x509</name> <init>= <expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnutls_certificate_free_credentials</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_client_operations</name></name></type> <name>gnutls_ClientOps</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>gnutls_ClientSessionOpen</name></expr>,

<expr><operator>.</operator><name>handshake</name> <operator>=</operator> <name>gnutls_ClientHandshake</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>gnutls_ClientDestroy</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenClient</name><parameter_list>(<parameter><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>gnutls_certificate_credentials_t</name></type> <name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnutls_Banner</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>crd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>gnutls_certificate_allocate_credentials</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x509</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate credentials: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"gnutls-system-trust"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_certificate_set_x509_system_trust</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot load trusted Certificate Authorities "</literal>

<literal type="string">"from %s: %s"</literal></expr></argument>, <argument><expr><literal type="string">"system"</literal></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"loaded %d trusted CAs from %s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"gnutls-dir-trust"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_certificate_set_x509_trust_dir</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,

<argument><expr><name>GNUTLS_X509_FMT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot load trusted Certificate Authorities "</literal>

<literal type="string">"from %s: %s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"loaded %d trusted CAs from %s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gnutls_certificate_set_verify_flags</name> <argument_list>(<argument><expr><name>x509</name></expr></argument>,

<argument><expr><name>GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crd</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>gnutls_ClientOps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>x509</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>vlc_tls_creds_sys</name>

<block>{

<decl_stmt><decl><type><name>gnutls_certificate_credentials_t</name></type> <name>x509_cred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_dh_params_t</name></type> <name>dh_params</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_tls_creds_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>vlc_tls_t</name> <modifier>*</modifier></type><name>gnutls_ServerSessionOpen</name><parameter_list>(<parameter><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>,

<parameter><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>alpn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tls_gnutls_t</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><call><name>gnutls_SessionOpen</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>crd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GNUTLS_SERVER</name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x509_cred</name></name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>alpn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>priv</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>tls</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gnutls_ServerDestroy</name><parameter_list>(<parameter><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnutls_certificate_free_credentials</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x509_cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_dh_params_deinit</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dh_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_tls_server_operations</name></name></type> <name>gnutls_ServerOps</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>open</name> <operator>=</operator> <name>gnutls_ServerSessionOpen</name></expr>,

<expr><operator>.</operator><name>handshake</name> <operator>=</operator> <name>gnutls_Handshake</name></expr>,

<expr><operator>.</operator><name>destroy</name> <operator>=</operator> <name>gnutls_ServerDestroy</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenServer</name><parameter_list>(<parameter><decl><type><name>vlc_tls_server_t</name> <modifier>*</modifier></type><name>crd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gnutls_Banner</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>crd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tls_creds_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>gnutls_certificate_allocate_credentials</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>x509_cred</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate credentials: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>certblock</name> <init>= <expr><call><name>block_FilePath</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>certblock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot read certificate chain from %s: %s"</literal></expr></argument>, <argument><expr><name>cert</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>keyblock</name> <init>= <expr><call><name>block_FilePath</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keyblock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot read private key from %s: %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>certblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>pub</name> <init>= <expr><block>{

<expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>certblock</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>certblock</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>,

}</block></expr></init></decl>, <decl><type ref="prev"/><name>priv</name> <init>= <expr><block>{

<expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>keyblock</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>keyblock</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_certificate_set_x509_key_mem</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x509_cred</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>,

<argument><expr><name>GNUTLS_X509_FMT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>keyblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>certblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot load X.509 key: %s"</literal></expr></argument>, <argument><expr><call><name>gnutls_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_dh_params_init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dh_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>gnutls_sec_param_t</name></type> <name>sec</name> <init>= <expr><name>GNUTLS_SEC_PARAM_MEDIUM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><call><name>gnutls_sec_param_to_pk_bits</name> <argument_list>(<argument><expr><name>GNUTLS_PK_DH</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"generating Diffie-Hellman %u-bits parameters..."</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gnutls_dh_params_generate2</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dh_params</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_certificate_set_dh_params</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x509_cred</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dh_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize DHE cipher suites: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>crd</name></expr></argument>, <argument><expr><literal type="string">"ciphers parameters loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crd</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>gnutls_ServerOps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crd</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>gnutls_certificate_free_credentials</name> <argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>x509_cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_TRUST_TEXT</name></cpp:macro> <cpp:value>N_("Use system trust database")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSTEM_TRUST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Trust the root certificates of Certificate Authorities stored in " "the operating system trust database to authenticate TLS sessions.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_TRUST_TEXT</name></cpp:macro> <cpp:value>N_("Trust directory")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_TRUST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Trust the root certificates of Certificate Authorities stored in " "the specified directory to authenticate TLS sessions.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIORITIES_TEXT</name></cpp:macro> <cpp:value>N_("TLS cipher priorities")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIORITIES_LONGTEXT</name></cpp:macro> <cpp:value>N_("Ciphers, key exchange methods, " "hash functions and compression methods can be selected. " "Refer to GNU TLS documentation for detailed syntax.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>priorities_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"PERFORMANCE"</literal></expr>,

<expr><literal type="string">"NORMAL"</literal></expr>,

<expr><literal type="string">"SECURE128"</literal></expr>,

<expr><literal type="string">"SECURE256"</literal></expr>,

<expr><literal type="string">"EXPORT"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>priorities_text</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Performance (prioritize faster ciphers)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Secure 128-bits (exclude 256-bits ciphers)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Secure 256-bits (prioritize 256-bits ciphers)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Export (include insecure ciphers)"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"GNU TLS"</literal></argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"GNU TLS transport layer security"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"tls client"</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>OpenClient</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_ADVANCED</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_ADVANCED_NETWORK</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"gnutls-system-trust"</literal></argument>, <argument>true</argument>, <argument>SYSTEM_TRUST_TEXT</argument>,

<argument>SYSTEM_TRUST_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"gnutls-dir-trust"</literal></argument>, <argument>NULL</argument>, <argument>DIR_TRUST_TEXT</argument>,

<argument>DIR_TRUST_TEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_string</name> <argument_list>(<argument><literal type="string">"gnutls-priorities"</literal></argument>, <argument><literal type="string">"NORMAL"</literal></argument>, <argument>PRIORITIES_TEXT</argument>,

<argument>PRIORITIES_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_string_list</name> <argument_list>(<argument>priorities_values</argument>, <argument>priorities_text</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"GNU TLS server"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"tls server"</literal></argument>, <argument><literal type="number">1</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_ADVANCED</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_ADVANCED_NETWORK</argument> )</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>OpenServer</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
