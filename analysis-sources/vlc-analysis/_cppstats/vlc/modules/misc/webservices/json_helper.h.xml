<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\misc\webservices\json_helper.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier>

<specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type> <name>json_getbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>object</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_object</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>object</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>object</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>

<name>char</name> <modifier>*</modifier></type> <name>jsongetstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>json_getbyname</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_string</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>

<name>char</name> <modifier>*</modifier></type> <name>json_dupstring</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>jsongetstring</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>str</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>

<name>json_value</name> <modifier>*</modifier></type> <name>json_parse_document</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>json_settings</name></type> <name>settings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_error</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>json_settings</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>json_value</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>json_parse_ex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument>, <argument><expr><name>psz_error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Can't parse json data: %s"</literal></expr></argument>, <argument><expr><name>psz_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_object</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"wrong json root node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>root</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>json_value_free</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>

<name>void</name> <modifier>*</modifier></type> <name>json_retrieve_document</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>saved_no_interact</name> <init>= <expr><name><name>p_obj</name><operator>-&gt;</operator><name>no_interact</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>no_interact</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>no_interact</name></name> <operator>=</operator> <name>saved_no_interact</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_chain</name> <init>= <expr><call><name>vlc_stream_FilterNew</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"inflate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_chain</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_stream</name> <operator>=</operator> <name>p_chain</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_read</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_ret</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name>i_read</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i_ret</name> <operator>+</operator> <name>i_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_buffer</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>i_ret</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>+=</operator> <name>i_read</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><name>i_ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>p_buffer</name></expr>;</return>

</block_content>}</block></function>

</unit>
