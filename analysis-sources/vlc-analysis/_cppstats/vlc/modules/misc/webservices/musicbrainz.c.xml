<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\misc\webservices\musicbrainz.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json_helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"musicbrainz.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>json_value</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>

}</block></struct></type> <name>musicbrainz_lookup_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>musicbrainz_lookup_release</name><parameter_list>(<parameter><decl><type><name>musicbrainz_lookup_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>json_value_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>musicbrainz_lookup_t</name> <modifier>*</modifier></type> <name>musicbrainz_lookup_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>musicbrainz_lookup_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>musicbrainz_lookup_t</name> <modifier>*</modifier></type> <name>musicbrainz_lookup</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"Querying MB for %s"</literal></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><call><name>json_retrieve_document</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>musicbrainz_lookup_t</name> <modifier>*</modifier></type><name>p_lookup</name> <init>= <expr><call><name>musicbrainz_lookup_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_lookup</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_lookup</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>json_parse_document</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_lookup</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"No results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_lookup</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>musicbrainz_fill_track</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>tracknode</name></decl></parameter>, <parameter><decl><type><name>musicbrainz_track_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>(<argument><expr><name>tracknode</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name>tracknode</name></expr></argument>, <argument><expr><literal type="string">"artist-credit"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_array</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>psz_artist</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>json_getbyname</name><argument_list>(<argument><expr><name>tracknode</name></expr></argument>, <argument><expr><literal type="string">"position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_integer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_index</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>integer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>musicbrainz_has_cover_in_releasegroup</name><parameter_list>(<parameter><decl><type><name>json_value</name> <modifier>*</modifier><modifier>*</modifier> <specifier>const</specifier></type> <name>p_nodes</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_nodes</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_group_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_nodes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>rgnode</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name><name>p_nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"release-group"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rgnode</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name> <init>= <expr><call><name>jsongetstring</name><argument_list>(<argument><expr><name>rgnode</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psz_id</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>psz_id</name></expr></argument>, <argument><expr><name>psz_group_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name><name>p_nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"cover-art-archive"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>json_getbyname</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"front"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>node</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_boolean</name> <operator>||</operator> <operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>boolean</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>musicbrainz_fill_artists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>arraynode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>arraynode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_array</name> <operator>||</operator> <name><name>arraynode</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>psz</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>arraynode</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name><name>arraynode</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_string</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>psz</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_total</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name>i_total</name> <operator>+</operator> <name><name>name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_total</name> <operator>+=</operator> <name><name>name</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>string</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>psz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>musicbrainz_fill_release</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>releasenode</name></decl></parameter>, <parameter><decl><type><name>musicbrainz_release_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>media</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name>releasenode</name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>media</name> <operator>||</operator> <name><name>media</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_array</name> <operator>||</operator>

<name><name>media</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>media</name> <operator>=</operator> <name><name>media</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>tracks</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><literal type="string">"tracks"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tracks</name> <operator>||</operator> <name><name>tracks</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_array</name> <operator>||</operator>

<name><name>tracks</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>p_tracks</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>p_tracks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>p_tracks</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>tracks</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>musicbrainz_fill_track</name><argument_list>(<argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>p_tracks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_tracks</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>(<argument><expr><name>releasenode</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>(<argument><expr><name>releasenode</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>rgnode</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name>releasenode</name></expr></argument>, <argument><expr><literal type="string">"release-group"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rgnode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>psz_date</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>(<argument><expr><name>rgnode</name></expr></argument>, <argument><expr><literal type="string">"first-release-date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>psz_group_id</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>(<argument><expr><name>rgnode</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name>rgnode</name></expr></argument>, <argument><expr><literal type="string">"artist-credit"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>psz_artist</name></name> <operator>=</operator> <call><name>musicbrainz_fill_artists</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name>releasenode</name></expr></argument>, <argument><expr><literal type="string">"artist-credit"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>psz_artist</name></name> <operator>=</operator> <call><name>musicbrainz_fill_artists</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>json_getbyname</name><argument_list>(<argument><expr><name>releasenode</name></expr></argument>, <argument><expr><literal type="string">"release-events"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_array</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>psz_date</name></name> <operator>=</operator> <call><name>json_dupstring</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>musicbrainz_recording_release</name><parameter_list>(<parameter><decl><type><name>musicbrainz_recording_t</name> <modifier>*</modifier></type><name>mbr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>mbr</name><operator>-&gt;</operator><name>i_release</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_group_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_artist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_coverart_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_tracks</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>psz_artist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_tracks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mbr</name><operator>-&gt;</operator><name>p_releases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>musicbrainz_recording_t</name> <modifier>*</modifier></type><name>musicbrainz_lookup_recording_by_apiurl</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>musicbrainz_recording_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>musicbrainz_lookup_t</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><call><name>musicbrainz_lookup</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>lookup</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>json_value</name> <modifier>*</modifier></type><name>releases</name> <init>= <expr><call><name>json_getbyname</name><argument_list>(<argument><expr><name><name>lookup</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="string">"releases"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>releases</name> <operator>&amp;&amp;</operator> <name><name>releases</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>json_array</name> <operator>&amp;&amp;</operator>

<name><name>releases</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>p_releases</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>releases</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>p_releases</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>p_releases</name></name></expr>)</condition>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>releases</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>json_value</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>releases</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>musicbrainz_release_t</name> <modifier>*</modifier></type><name>p_mbrel</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>p_releases</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>i_release</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>json_object</name> <operator>||</operator>

<operator>!</operator><call><name>musicbrainz_fill_release</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>p_mbrel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_mbrel</name><operator>-&gt;</operator><name>psz_group_id</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_mbrel</name><operator>-&gt;</operator><name>psz_coverart_url</name></name> <operator>&amp;&amp;</operator>

<call><name>musicbrainz_has_cover_in_releasegroup</name><argument_list>(<argument><expr><name><name>releases</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>values</name></name></expr></argument>,

<argument><expr><name><name>releases</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>length</name></name></expr></argument>,

<argument><expr><name><name>p_mbrel</name><operator>-&gt;</operator><name>psz_group_id</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_art</name> <init>= <expr><call><name>coverartarchive_make_releasegroup_arturl</name><argument_list>(

<argument><expr><name>COVERARTARCHIVE_DEFAULT_SERVER</name></expr></argument>,

<argument><expr><name><name>p_mbrel</name><operator>-&gt;</operator><name>psz_group_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>psz_art</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_mbrel</name><operator>-&gt;</operator><name>psz_coverart_url</name></name> <operator>=</operator> <name>psz_art</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i_release</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>musicbrainz_lookup_release</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>musicbrainz_build_discid_json_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_server</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_disc_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_url</name></expr></argument>,

<argument><expr><literal type="string">"https://%s/ws/2/discid/%s?"</literal>

<literal type="string">"fmt=json"</literal>

<literal type="string">"&amp;inc=artist-credits+recordings+release-groups"</literal>

<literal type="string">"&amp;cdstubs=no"</literal>

<literal type="string">"%s%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>psz_server</name></expr> ?</condition><then> <expr><name>psz_server</name></expr> </then><else>: <expr><name>MUSICBRAINZ_DEFAULT_SERVER</name></expr></else></ternary></expr></argument>,

<argument><expr><name>psz_disc_id</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>psz_tail</name></expr> ?</condition><then> <expr><literal type="string">"&amp;"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>psz_tail</name></expr> ?</condition><then> <expr><name>psz_tail</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>psz_url</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>musicbrainz_recording_t</name> <modifier>*</modifier></type><name>musicbrainz_lookup_recording_by_toc</name><parameter_list>(<parameter><decl><type><name>musicbrainz_config_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_toc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name> <init>= <expr><call><name>musicbrainz_build_discid_json_url</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_mb_server</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>psz_toc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psz_url</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>musicbrainz_recording_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>musicbrainz_lookup_recording_by_apiurl</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>musicbrainz_recording_t</name> <modifier>*</modifier></type><name>musicbrainz_lookup_recording_by_discid</name><parameter_list>(<parameter><decl><type><name>musicbrainz_config_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_disc_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name> <init>= <expr><call><name>musicbrainz_build_discid_json_url</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_mb_server</name></name></expr></argument>, <argument><expr><name>psz_disc_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psz_url</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>musicbrainz_recording_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>musicbrainz_lookup_recording_by_apiurl</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>coverartarchive_make_releasegroup_arturl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_server</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_group_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_art</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_art</name></expr></argument>, <argument><expr><literal type="string">"https://%s/release-group/%s/front"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>psz_server</name></expr> ?</condition><then> <expr><name>psz_server</name></expr> </then><else>: <expr><name>COVERARTARCHIVE_DEFAULT_SERVER</name></expr></else></ternary></expr></argument>,

<argument><expr><name>psz_group_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>psz_art</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>musicbrainz_release_covert_art</name><parameter_list>(<parameter><decl><type><name>coverartarchive_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>coverartarchive_t</name> <modifier>*</modifier></type> <name>coverartarchive_lookup_releasegroup</name><parameter_list>(<parameter><decl><type><name>musicbrainz_config_t</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>coverartarchive_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psz_url</name></expr></argument>, <argument><expr><literal type="string">"https://%s/releasegroup/%s"</literal></expr></argument>, <argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>psz_coverart_server</name></name></expr></argument>, <argument><expr><name>psz_id</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>musicbrainz_lookup_t</name> <modifier>*</modifier></type><name>p_lookup</name> <init>= <expr><call><name>musicbrainz_lookup</name><argument_list>(<argument><expr><name><name>cfg</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_lookup</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

</unit>
