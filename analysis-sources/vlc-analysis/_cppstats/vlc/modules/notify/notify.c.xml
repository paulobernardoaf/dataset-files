<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\notify\notify.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk-pixbuf/gdk-pixbuf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libnotify/notify.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NOTIFY_CHECK_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTIFY_CHECK_VERSION</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLICATION_NAME</name></cpp:macro> <cpp:value>"VLC media player"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT_TEXT</name></cpp:macro> <cpp:value>N_("Timeout (ms)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT_LONGTEXT</name></cpp:macro> <cpp:value>N_("How long the notification will be displayed.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INTERFACE</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INTERFACE_CONTROL</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Notify"</literal> )</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"LibNotify Notification Plugin"</literal>)</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"notify-timeout"</literal></argument>, <argument><literal type="number">4000</literal></argument>,

<argument>TIMEOUT_TEXT</argument>, <argument>TIMEOUT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>on_current_media_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>new_media</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Notify</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<struct>struct <name>intf_sys_t</name>

<block>{

<decl_stmt><decl><type><name>NotifyNotification</name> <modifier>*</modifier></type><name>notification</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_actions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_listener_id</name></name> <modifier>*</modifier></type><name>player_listener</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>foreach_g_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name> <operator>=</operator> <call><name>vlc_intf_GetMainPlaylist</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_player_cbs</name></name></type> <name>player_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>on_current_media_changed</name> <operator>=</operator> <name>on_current_media_changed</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name> <operator>=</operator> <call><name>vlc_player_AddListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>player_cbs</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>notify_init</name><argument_list>( <argument><expr><name>APPLICATION_NAME</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_intf</name></expr></argument>, <argument><expr><literal type="string">"can't find notification daemon"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>notification</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_actions</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>p_caps</name> <init>= <expr><call><name>notify_get_server_caps</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_caps</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>GList</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>p_caps</name></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"actions"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_actions</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>g_list_foreach</name><argument_list>( <argument><expr><name>p_caps</name></expr></argument>, <argument><expr><name>foreach_g_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_list_free</name><argument_list>( <argument><expr><name>p_caps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator> <name>intf_thread_t</name><operator>*</operator> <operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_RemoveListener</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>player_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>notification</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>p_error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>notify_notification_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>notification</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>notification</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notify_uninit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_current_media_changed</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>,

<parameter><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input_item</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>player</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_tmp</name><index>[<expr><name>MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_notify</name><index>[<expr><name>MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_artist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_album</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_arturl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_input_item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_input_item</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ITEM_TYPE_DIRECTORY</name> <operator>||</operator> <name><name>p_input_item</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ITEM_TYPE_PLAYLIST</name>

<operator>||</operator> <name><name>p_input_item</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ITEM_TYPE_NODE</name> <operator>||</operator> <name><name>p_input_item</name><operator>-&gt;</operator><name>i_type</name></name><operator>==</operator> <name>ITEM_TYPE_UNKNOWN</name>

<operator>||</operator> <name><name>p_input_item</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ITEM_TYPE_CARD</name></expr>)</condition><block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_title</name> <operator>=</operator> <call><name>input_item_GetTitleFbName</name><argument_list>( <argument><expr><name>p_input_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>EMPTY_STR</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_artist</name> <operator>=</operator> <call><name>input_item_GetArtist</name><argument_list>( <argument><expr><name>p_input_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_album</name> <operator>=</operator> <call><name>input_item_GetAlbum</name><argument_list>( <argument><expr><name>p_input_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>( <argument><expr><name>psz_artist</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EMPTY_STR</name><argument_list>( <argument><expr><name>psz_album</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><name>MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"&lt;b&gt;%s&lt;/b&gt;\n%s\n[%s]"</literal></expr></argument>,

<argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_artist</name></expr></argument>, <argument><expr><name>psz_album</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><name>MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"&lt;b&gt;%s&lt;/b&gt;\n%s"</literal></expr></argument>,

<argument><expr><name>psz_title</name></expr></argument>, <argument><expr><name>psz_artist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><name>MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"&lt;b&gt;%s&lt;/b&gt;"</literal></expr></argument>, <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_artist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_album</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_arturl</name> <operator>=</operator> <call><name>input_item_GetArtURL</name><argument_list>( <argument><expr><name>p_input_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_arturl</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>vlc_uri2path</name><argument_list>( <argument><expr><name>psz_arturl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_arturl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_arturl</name> <operator>=</operator> <name>psz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_arturl</name></expr> )</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>p_error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <call><name>gdk_pixbuf_new_from_file_at_scale</name><argument_list>( <argument><expr><name>psz_arturl</name></expr></argument>,

<argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>GtkIconTheme</name><modifier>*</modifier></type> <name>p_theme</name> <init>= <expr><call><name>gtk_icon_theme_get_default</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <call><name>gtk_icon_theme_load_icon</name><argument_list>( <argument><expr><name>p_theme</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pix</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>p_error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_pixbuf</name> <init>= <expr><call><name>config_GetSysPath</name><argument_list>(<argument><expr><name>VLC_SYSDATA_DIR</name></expr></argument>,

<argument><expr><literal type="string">"icons/hicolor/48x48/"</literal><name>PACKAGE_NAME</name><literal type="string">".png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_pixbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <call><name>gdk_pixbuf_new_from_file</name><argument_list>( <argument><expr><name>psz_pixbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_pixbuf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_arturl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_notify</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_len</name> <operator>&amp;&amp;</operator> <name>i_notify</name> <operator>&lt;</operator> <operator>(</operator> <name>MAX_LENGTH</name> <operator>-</operator> <literal type="number">5</literal> <operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content> 

<if_stmt><if>if<condition>( <expr><name><name>psz_tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>psz_notify</name><index>[<expr><name>i_notify</name></expr>]</index></name> <operator>=</operator> <name><name>psz_tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_notify</name><index>[<expr><name>i_notify</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"&amp;amp;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_notify</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_notify</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>psz_notify</name><index>[<expr><name>i_notify</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Notify</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_notify</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><name>p_intf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Next</name><parameter_list>( <parameter><decl><type><name>NotifyNotification</name> <modifier>*</modifier></type><name>notification</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notify_notification_close</name><argument_list>( <argument><expr><name>notification</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Next</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Prev</name><parameter_list>( <parameter><decl><type><name>NotifyNotification</name> <modifier>*</modifier></type><name>notification</name></decl></parameter>, <parameter><decl><type><name>gchar</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notify_notification_close</name><argument_list>( <argument><expr><name>notification</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Prev</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Notify</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_temp</name></decl></parameter>, <parameter><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>,

<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>p_intf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NotifyNotification</name> <modifier>*</modifier></type> <name>notification</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>notification</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>p_error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>notify_notification_close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>notification</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_error</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>notification</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>notification</name> <operator>=</operator> <call><name>notify_notification_new</name><argument_list>( <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Now Playing"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>psz_temp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>NOTIFY_CHECK_VERSION</name> <argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>,</operator> <expr_stmt><expr><name>NULL</name></expr></expr_stmt> )</block_content></block>;</function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>notify_notification_set_timeout</name><argument_list>( <argument><expr><name>notification</name></expr></argument>,

<argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"notify-timeout"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notify_notification_set_urgency</name><argument_list>( <argument><expr><name>notification</name></expr></argument>, <argument><expr><name>NOTIFY_URGENCY_LOW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pix</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>notify_notification_set_icon_from_pixbuf</name><argument_list>( <argument><expr><name>notification</name></expr></argument>, <argument><expr><name>pix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>( <argument><expr><name>pix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_has_actions</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>notify_notification_add_action</name><argument_list>( <argument><expr><name>notification</name></expr></argument>, <argument><expr><literal type="string">"previous"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Previous"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Prev</name></expr></argument>,

<argument><expr><operator>(</operator><name>gpointer</name><operator>*</operator><operator>)</operator><name>p_intf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notify_notification_add_action</name><argument_list>( <argument><expr><name>notification</name></expr></argument>, <argument><expr><literal type="string">"next"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Next"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Next</name></expr></argument>,

<argument><expr><operator>(</operator><name>gpointer</name><operator>*</operator><operator>)</operator><name>p_intf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>notify_notification_show</name><argument_list>( <argument><expr><name>notification</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>notification</name></name> <operator>=</operator> <name>notification</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

}

</unit>
