<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\chromecast\chromecast.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_tls.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_threads.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_httpd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cxx_helpers.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTOBUF_INLINE_NOT_IN_HEADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOBUF_INLINE_NOT_IN_HEADERS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cast_channel.pb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chromecast_common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_HEADER_LEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>DEFAULT_CHOMECAST_RECEIVER</name> <operator>=</operator> <literal type="string">"receiver-0"</literal></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>NAMESPACE_MEDIA</name> <operator>=</operator> <literal type="string">"urn:x-cast:com.google.cast.media"</literal></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>NAMESPACE_DEVICEAUTH</name> <operator>=</operator> <literal type="string">"urn:x-cast:com.google.cast.tp.deviceauth"</literal></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>NAMESPACE_CONNECTION</name> <operator>=</operator> <literal type="string">"urn:x-cast:com.google.cast.tp.connection"</literal></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>NAMESPACE_HEARTBEAT</name> <operator>=</operator> <literal type="string">"urn:x-cast:com.google.cast.tp.heartbeat"</literal></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>NAMESPACE_RECEIVER</name> <operator>=</operator> <literal type="string">"urn:x-cast:com.google.cast.receiver"</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMECAST_CONTROL_PORT</name></cpp:macro> <cpp:value>8009</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PORT</name></cpp:macro> <cpp:value>8010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_MAX_LEN</name></cpp:macro> <cpp:value>10 * 1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APP_ID</name></cpp:macro> <cpp:value>"CC1AD845"</cpp:value></cpp:define> 

<enum>enum <name>States</name>

<block>{

<decl><name>Authenticating</name></decl>,

<decl><name>Connecting</name></decl>,

<decl><name>Connected</name></decl>,

<decl><name>Launching</name></decl>,

<decl><name>Ready</name></decl>,

<decl><name>LoadFailed</name></decl>,

<decl><name>Loading</name></decl>,

<decl><name>Buffering</name></decl>,

<decl><name>Playing</name></decl>,

<decl><name>Paused</name></decl>,

<decl><name>Stopping</name></decl>,

<decl><name>Stopped</name></decl>,

<decl><name>Dead</name></decl>,

<decl><name>TakenOver</name></decl>,

}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>ChromecastCommunication</name>

<block>{<block_content>

<label><name>public</name>:</label>

<macro><name>ChromecastCommunication</name><argument_list>( <argument>vlc_object_t* module</argument>,

<argument>std::string serverPath</argument>, <argument>unsigned int serverPort</argument>,

<argument>const char* targetIP</argument>, <argument>unsigned int devicePort</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ChromecastCommunication</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>disconnect</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>kInvalidId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>unsigned</name></type> <name>msgPing</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>msgPong</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msgConnect</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<function_decl><type><name>unsigned</name></type> <name>msgReceiverLaunchApp</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>msgReceiverGetStatus</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msgReceiverClose</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>unsigned</name></type> <name>msgAuth</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msgPlayerLoad</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>mime</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_meta_t</name> <operator>*</operator><name>p_meta</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msgPlayerPlay</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument>, <argument><expr><name>int64_t</name> <name>mediaSessionId</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msgPlayerStop</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument>, <argument><expr><name>int64_t</name> <name>mediaSessionId</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msgPlayerPause</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument>, <argument><expr><name>int64_t</name> <name>mediaSessionId</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msgPlayerGetStatus</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msgPlayerSeek</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument>, <argument><expr><name>int64_t</name> <name>mediaSessionId</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator> <name>currentTime</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>msgPlayerSetVolume</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument>, <argument><expr><name>int64_t</name> <name>mediaSessionId</name></expr></argument>,

<argument><expr><name>float</name> <name>volume</name></expr></argument>, <argument><expr><name>bool</name> <name>mute</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>ssize_t</name></type> <name>receive</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_timeout</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_timeout</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>getServerIp</name><argument_list>()</argument_list></macro>

<block>{

<return>return <expr><name>m_serverIp</name></expr>;</return>

}</block></expr></expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>int</name></type> <name>sendMessage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>castchannel</name><operator>::</operator><name>CastMessage</name> <operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buildMessage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator> <name>namespace_</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator> <name>payload</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator> <name>destinationId</name> <operator>=</operator> <name>DEFAULT_CHOMECAST_RECEIVER</name></expr></argument>,

<argument><expr><name>castchannel</name><operator>::</operator><name>CastMessage_PayloadType</name> <name>payloadType</name> <operator>=</operator> <name>castchannel</name><operator>::</operator><name>CastMessage_PayloadType_STRING</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pushMediaPlayerMessage</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>destinationId</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>stringstream</name> <operator>&amp;</operator> <name>payload</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetMedia</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>mime</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>vlc_meta_t</name> <operator>*</operator><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>unsigned</name></type> <name>getNextReceiverRequestId</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>getNextRequestId</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>m_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tls_client_t</name> <modifier>*</modifier></type><name>m_creds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tls_t</name> <modifier>*</modifier></type><name>m_tls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m_receiver_requestId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m_requestId</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_serverIp</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>m_serverPath</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>m_serverPort</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>intf_sys_t</name>

<block>{

<enum>enum <name>QueueableMessages</name>

<block>{

<decl><name>Stop</name></decl>,

}</block>;</enum>

<macro><name>intf_sys_t</name><argument_list>(<argument>vlc_object_t * const p_this</argument>, <argument>int local_port</argument>, <argument>std::string device_addr</argument>,

<argument>int device_port</argument>, <argument>httpd_host_t *</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>intf_sys_t</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>setRetryOnFail</name><parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>setHasInput</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>mime_type</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>setOnInputEventCb</name><parameter_list>(<parameter><decl><type><name>on_input_event_itf</name></type> <name>on_input_event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>on_input_event_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setDemuxEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>, <parameter><decl><type><name>on_paused_changed_itf</name></type> <name>on_paused_changed</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>on_paused_changed_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>requestPlayerStop</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>States</name> <macro><name>state</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>setPacing</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>do_pace</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pace</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sendInputEvent</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>cc_input_event</name></name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>cc_input_arg</name></name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>vlc_tick_t</name></type> <name>getPauseDelay</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>unsigned</name> <name>int</name> <macro><name>getHttpStreamPort</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getHttpStreamPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getHttpArtRoot</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>int</name></type> <name>httpd_file_fill</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psz_request</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_data</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>interrupt_wake_up</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<function_decl><type><name>void</name></type> <name>reinit</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>handleMessages</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>processMessage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>castchannel</name><operator>::</operator><name>CastMessage</name> <operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>queueMessage</name><parameter_list>( <parameter><decl><type><name>QueueableMessages</name></type> <name>msg</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setPauseState</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isFinishedPlaying</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>isStateError</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isStatePlaying</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isStateReady</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>tryLoad</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>doStop</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setMeta</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>vlc_tick_t</name></type> <name>getPlaybackTimestamp</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>double</name> <macro><name>getPlaybackPosition</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>setInitialTime</name><parameter_list>( <parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setState</name><parameter_list>( <parameter><decl><type><name>States</name></type> <name>state</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>mainLoop</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>processAuthMessage</name><argument_list>( <argument><expr><specifier>const</specifier> <name>castchannel</name><operator>::</operator><name>CastMessage</name><operator>&amp;</operator> <name>msg</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>processHeartBeatMessage</name><argument_list>( <argument><expr><specifier>const</specifier> <name>castchannel</name><operator>::</operator><name>CastMessage</name><operator>&amp;</operator> <name>msg</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>processReceiverMessage</name><argument_list>( <argument><expr><specifier>const</specifier> <name>castchannel</name><operator>::</operator><name>CastMessage</name><operator>&amp;</operator> <name>msg</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>processMediaMessage</name><argument_list>( <argument><expr><specifier>const</specifier> <name>castchannel</name><operator>::</operator><name>CastMessage</name><operator>&amp;</operator> <name>msg</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>processConnectionMessage</name><argument_list>( <argument><expr><specifier>const</specifier> <name>castchannel</name><operator>::</operator><name>CastMessage</name><operator>&amp;</operator> <name>msg</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ChromecastThread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>get_time</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pace</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>send_input_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cc_input_event</name></name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>cc_input_arg</name></name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_demux_enabled</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>on_paused_changed_itf</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_pause_state</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_meta</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>prepareHttpArtwork</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>timeCCToVLC</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <call><name>timeVLCToCC</name><argument_list>(<argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>m_module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_device_port</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_mime</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_device_addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_appTransportId</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m_last_request_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>m_mediaSessionId</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mutable</name> <name>vlc</name><operator>::</operator><name>threads</name><operator>::</operator><name>mutex</name> <name>m_lock</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name><operator>::</operator><name>threads</name><operator>::</operator><name>condition_variable</name> <name>m_stateChangedCond</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name><operator>::</operator><name>threads</name><operator>::</operator><name>condition_variable</name> <name>m_pace_cond</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>m_chromecastThread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>on_input_event_itf</name></type> <name>m_on_input_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_on_input_event_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>on_paused_changed_itf</name></type> <name>m_on_paused_changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>m_on_paused_changed_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChromecastCommunication</name> <modifier>*</modifier></type><name>m_communication</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>QueueableMessages</name></expr></argument>&gt;</argument_list></name> <name>m_msgQueue</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>States</name></type> <name>m_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_retry_on_fail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_played_once</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_paused_once</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_request_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_request_load</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_paused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_input_eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_cc_eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_pace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>m_interrupted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>m_meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_interrupt_t</name> <modifier>*</modifier></type><name>m_ctl_thread_interrupt</name></decl>;</decl_stmt>

<struct>struct <name>httpd_info_t</name> <block>{

<macro><name>httpd_info_t</name><argument_list>( <argument>httpd_host_t* host</argument>, <argument>int port</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>httpd_info_t</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>httpd_host_t</name> <modifier>*</modifier></type><name>m_host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>httpd_url_t</name> <modifier>*</modifier></type><name>m_url</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_root</name></expr>;</expr_stmt>

}</block> <decl>const <name>m_httpd</name></decl>;</struct>

<decl_stmt><decl><type><name>httpd_file_t</name> <modifier>*</modifier></type><name>m_httpd_file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_art_http_ip</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m_art_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m_art_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>m_cc_time_last_request_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>m_cc_time_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>m_cc_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chromecast_common</name></type> <name>m_common</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>m_pingRetriesLeft</name></decl>;</decl_stmt>

}</block>;</struct>

</unit>
