<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\chromecast\chromecast_common.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_SHARED_VAR_NAME</name></cpp:macro> <cpp:value>"cc_sout"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PACE_ERR</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PACE_ERR_RETRY</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PACE_OK</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PACE_OK_WAIT</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PACE_OK_ENDED</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<enum>enum <name>cc_input_event</name>

<block>{

<decl><name>CC_INPUT_EVENT_EOF</name></decl>,

<decl><name>CC_INPUT_EVENT_RETRY</name></decl>,

}</block>;</enum>

<union>union <name>cc_input_arg</name>

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>

}</block>;</union>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_input_event_itf</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cc_input_event</name></name></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>cc_input_arg</name></name></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_paused_changed_itf</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_set_demux_enabled</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>, <parameter><decl><type><name>on_paused_changed_itf</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>vlc_tick_t</name></type> (<modifier>*</modifier><name>pf_get_time</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_pace</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_send_input_event</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cc_input_event</name></name></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>cc_input_arg</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_set_pause_state</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_set_meta</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>chromecast_common</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
