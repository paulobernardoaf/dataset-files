<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\duplicate.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Duplicate stream output"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout output"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"duplicate"</literal></argument>, <argument><literal type="string">"dup"</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_STREAM</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_last_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_select</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_select</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_stream_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_ids</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_ids</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_stream_id_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ESSelected</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_select</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SOUT_STREAM_ID_SPU_HIGHLIGHT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>spu_hl</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>id</name><operator>-&gt;</operator><name>i_nb_ids</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamControl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>,

<argument><expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>spu_hl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>config_chain_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"creating 'duplicate'"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_last_streams</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_last_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_select</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_select</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_cfg</name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr>;</init> <condition><expr><name>p_cfg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_cfg</name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"dst"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"dst"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_last</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" * adding `%s'"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sout_StreamChainNew</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sout</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_last</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>s</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_last_streams</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_last_streams</name></name></expr></argument>,

<argument><expr><name>p_last</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_select</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_select</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"select"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"select"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_select</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_select</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_select</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_select</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>ppsz_select</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" * ignore selection `%s' (it already has `%s')"</literal></expr></argument>,

<argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>*</operator><name>ppsz_select</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" * apply selection `%s'"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_select</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" * ignore unknown option `%s'"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"no destination given"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>Add</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>Del</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>Send</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"closing a duplication"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>sout_StreamChainDelete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_last_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_select</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_last_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_select</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name></decl>, <decl><type ref="prev"/><name>i_valid_streams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_id_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>id</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>i_nb_ids</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"duplicated a new stream codec=%4.4s (es=%d group=%d)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_group</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>id_new</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ESSelected</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppsz_select</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id_new</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>sout_StreamIdAdd</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>id_new</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" - added for output %d"</literal></expr></argument>, <argument><expr><name>i_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_valid_streams</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" - failed for output %d"</literal></expr></argument>, <argument><expr><name>i_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" - ignored for output %d"</literal></expr></argument>, <argument><expr><name>i_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>i_nb_ids</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name></name></expr></argument>, <argument><expr><name>id_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_valid_streams</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Del</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sout_StreamIdDel</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_dup_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_buffer</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i_stream</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_dup_stream</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dup</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name>p_dup_stream</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_stream</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name> <operator>&amp;&amp;</operator> <name><name>id</name><operator>-&gt;</operator><name>pp_ids</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_dup_stream</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name>p_dup_stream</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>pp_ids</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>NumInRange</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_num</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>beginRange</name></decl>, <decl><type ref="prev"/><name>endRange</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name>psz_range</name></expr></argument>, <argument><expr><literal type="string">"%d-%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>beginRange</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>beginRange</name> <operator>==</operator> <name>i_num</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>i_num</name> <operator>&gt;=</operator> <name>beginRange</name> <operator>&amp;&amp;</operator> <name>i_num</name> <operator>&lt;=</operator> <name>endRange</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>beginRange</name> <operator>&gt;</operator> <name>endRange</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_num</name> <operator>&lt;=</operator> <name>beginRange</name> <operator>&amp;&amp;</operator> <name>i_num</name> <operator>&gt;=</operator> <name>endRange</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ESSelected</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_select</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_es</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_prgm</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_select</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>psz_select</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_dup</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_select</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_dup</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>psz_dup</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">'\t'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>psz</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"no-audio"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"no-audio"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"noaudio"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"noaudio"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"no-video"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"no-video"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"novideo"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"novideo"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"no-spu"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"no-spu"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"nospu"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"nospu"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>SPU_ES</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"audio"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"video"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"spu"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><literal type="string">"spu"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_arg</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>psz_arg</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"no-es"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"noes"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_es</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_es</name> <operator>=</operator> <ternary><condition><expr><call><name>NumInRange</name><argument_list>( <argument><expr><name>psz_arg</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"es"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_es</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_es</name> <operator>=</operator> <ternary><condition><expr><call><name>NumInRange</name><argument_list>( <argument><expr><name>psz_arg</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"no-prgm"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"noprgm"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"no-program"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"noprogram"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_prgm</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_prgm</name> <operator>=</operator> <ternary><condition><expr><call><name>NumInRange</name><argument_list>( <argument><expr><name>psz_arg</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"prgm"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"program"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_prgm</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_prgm</name> <operator>=</operator> <ternary><condition><expr><call><name>NumInRange</name><argument_list>( <argument><expr><name>psz_arg</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown args (%s)\n"</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_cat</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_es</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_prgm</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

</unit>
