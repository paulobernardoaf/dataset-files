<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\mosaic_bridge.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../spu/mosaic.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>bridged_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>, <name>i_width</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_sar_num</name></decl>, <name>i_sar_den</name>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_inited</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>filter_chain_t</name> <modifier>*</modifier></type><name>p_vf2</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_stream_sys_t</name>;</typedef>

<struct>struct <name>decoder_owner</name>

<block>{

<decl_stmt><decl><type><name>decoder_t</name></type> <name>dec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>dec_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>dec_get_owner</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>container_of</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr>struct <name>decoder_owner</name></expr></argument>, <argument><expr><name>dec</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decoder_queue_video</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>video_update_format_decoder</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>video_new_buffer_filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HeightCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>WidthCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>alphaCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>yCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_TEXT</name></cpp:macro> <cpp:value>N_("ID")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Specify an identifier string for this subpicture" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_TEXT</name></cpp:macro> <cpp:value>N_("Video width")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Output video width." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_TEXT</name></cpp:macro> <cpp:value>N_("Video height")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Output video height." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO_TEXT</name></cpp:macro> <cpp:value>N_("Sample aspect ratio")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Sample aspect ratio of the destination (1:1, 3:4, 2:3)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VFILTER_TEXT</name></cpp:macro> <cpp:value>N_("Video filter")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VFILTER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Video filters will be applied to the video stream." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_TEXT</name></cpp:macro> <cpp:value>N_("Image chroma")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Force the use of a specific chroma. Use YUVA if you're planning " "to use the Alphamask or Bluescreen video filter." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_TEXT</name></cpp:macro> <cpp:value>N_("Transparency")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Transparency of the mosaic picture." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_TEXT</name></cpp:macro> <cpp:value>N_("X offset")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_LONGTEXT</name></cpp:macro> <cpp:value>N_( "X coordinate of the upper left corner in the mosaic if non negative." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_TEXT</name></cpp:macro> <cpp:value>N_("Y offset")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Y coordinate of the upper left corner in the mosaic if non negative." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-mosaic-bridge-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Mosaic bridge"</literal> )</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Mosaic bridge stream output"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout output"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"mosaic-bridge"</literal></argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"id"</literal></argument>, <argument><literal type="string">"Id"</literal></argument>, <argument>ID_TEXT</argument>, <argument>ID_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"width"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>WIDTH_TEXT</argument>,

<argument>WIDTH_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"height"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>HEIGHT_TEXT</argument>,

<argument>HEIGHT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"sar"</literal></argument>, <argument><literal type="string">"1:1"</literal></argument>, <argument>RATIO_TEXT</argument>,

<argument>RATIO_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"chroma"</literal></argument>, <argument>NULL</argument>, <argument>CHROMA_TEXT</argument>, <argument>CHROMA_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>add_module_list</name><argument_list>(<argument>CFG_PREFIX <literal type="string">"vfilter"</literal></argument>, <argument><literal type="string">"video filter"</literal></argument>, <argument>NULL</argument>,

<argument>VFILTER_TEXT</argument>, <argument>VFILTER_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"alpha"</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>ALPHA_TEXT</argument>, <argument>ALPHA_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"x"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>X_TEXT</argument>, <argument>X_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"y"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>Y_TEXT</argument>, <argument>Y_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"id"</literal></expr>, <expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"height"</literal></expr>, <expr><literal type="string">"sar"</literal></expr>, <expr><literal type="string">"vfilter"</literal></expr>, <expr><literal type="string">"chroma"</literal></expr>, <expr><literal type="string">"alpha"</literal></expr>, <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>=</operator> <call><name>var_CreateGetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"id"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator>

<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"height"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"height"</literal></expr></argument>, <argument><expr><name>HeightCallback</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator>

<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"width"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"width"</literal></expr></argument>, <argument><expr><name>WidthCallback</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"sar"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parser</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_parser</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_parser</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"bad aspect ratio %s"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"chroma"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>val</name><operator>.</operator><name>psz_string</name></name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Forcing image chroma to 0x%.8x (%4.4s)"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_COMMAND</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { var_Create( p_stream, CFG_PREFIX #a, VLC_VAR_INTEGER | VLC_VAR_DOINHERIT | VLC_VAR_ISCOMMAND ); var_AddCallback( p_stream, CFG_PREFIX #a, a ##Callback, p_stream ); } while(0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>INT_COMMAND</name><argument_list>( <argument><expr><name>alpha</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INT_COMMAND</name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INT_COMMAND</name><argument_list>( <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INT_COMMAND</name></cpp:undef>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>Add</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>Del</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>Send</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pace_nocontrol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>MosaicHoldDecoderDevice</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>dec_dev</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>dec_dev</name></name> <operator>=</operator> <call><name>vlc_decoder_device_Create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_owner</name><operator>-&gt;</operator><name>dec_dev</name></name></expr> ?</condition><then> <expr><call><name>vlc_decoder_device_Hold</name><argument_list>(<argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>dec_dev</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>video_get_decoder_device</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>MosaicHoldDecoderDevice</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"height"</literal></expr></argument>, <argument><expr><name>HeightCallback</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"width"</literal></expr></argument>, <argument><expr><name>WidthCallback</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"alpha"</literal></expr></argument>, <argument><expr><name>alphaCallback</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"x"</literal></expr></argument>, <argument><expr><name>xCallback</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"y"</literal></expr></argument>, <argument><expr><name>yCallback</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseDecoder</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_owner</name><operator>-&gt;</operator><name>dec_dev</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_decoder_device_Release</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>dec_dev</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>dec_dev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decoder_Destroy</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_decoder_device</name> <modifier>*</modifier></type> <name>video_filter_hold_device</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><name>sys</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>MosaicHoldDecoderDevice</name><argument_list>(<argument><expr><name>p_owner</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bridge_t</name> <modifier>*</modifier></type><name>p_bridge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bridged_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_chain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name> <operator>||</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>vlc_object_create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_owner</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_owner</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_owner</name><operator>-&gt;</operator><name>dec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_Init</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>b_frame_drop_allowed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>filter_video_callbacks</name></name></type> <name>cbs</name> <init>=

<expr><block>{

<expr><name>video_new_buffer_filter</name></expr>, <expr><name>video_filter_hold_device</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_chain</name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"vfilter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"psz_chain: '%s'"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>psz_chain</name></expr> ?</condition><then> <expr><name>psz_chain</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_chain</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_owner_t</name></type> <name>owner</name> <init>= <expr><block>{

<expr><operator>.</operator><name>video</name> <operator>=</operator> <operator>&amp;</operator><name>cbs</name></expr>,

<expr><operator>.</operator><name>sys</name> <operator>=</operator> <name>p_owner</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vf2</name></name> <operator>=</operator> <call><name>filter_chain_NewVideo</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vf2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>video</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>get_device</name> <operator>=</operator> <name>video_get_decoder_device</name></expr>,

<expr><operator>.</operator><name>format_update</name> <operator>=</operator> <name>video_update_format_decoder</name></expr>,

<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>decoder_queue_video</name></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_stream</name></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator>

<call><name>module_need_var</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><literal type="string">"video decoder"</literal></expr></argument>, <argument><expr><literal type="string">"codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot find decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseDecoder</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_global_lock</name><argument_list>( <argument><expr><name>VLC_MOSAIC_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bridge</name> <operator>=</operator> <call><name>GetBridge</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_bridge</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_bridge</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>bridge_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"mosaic-struct"</literal></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>p_address</name></name> <operator>=</operator> <name>p_bridge</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Set</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"mosaic-struct"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_empty</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bridged_es_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bridged_es_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>p_es</name> <operator>=</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"alpha"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"x"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <call><name>var_GetInteger</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"y"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>psz_id</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>psz_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_picture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>b_empty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_global_unlock</name><argument_list>( <argument><expr><name>VLC_MOSAIC_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>=</operator> <call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"mosaic bridge id=%s pos=%d"</literal></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>psz_id</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_sys</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bridge_t</name> <modifier>*</modifier></type><name>p_bridge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bridged_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_last_es</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ReleaseDecoder</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vf2</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_chain_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vf2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_global_lock</name><argument_list>( <argument><expr><name>VLC_MOSAIC_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bridge</name> <operator>=</operator> <call><name>GetBridge</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_es</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>b_empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<while>while <condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_picture</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_empty</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_last_es</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>b_last_es</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_libvlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_bridge</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_libvlc</name></expr></argument>, <argument><expr><literal type="string">"mosaic-struct"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_global_unlock</name><argument_list>( <argument><expr><name>VLC_MOSAIC_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decoder_queue_video</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_stream</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_new_pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> </then><else>: <expr><name>VLC_CODEC_I420</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_fmt_in_aspect</name> <init>=

<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>VOUT_ASPECT_FACTOR</name> <operator>*</operator>

<name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator>

<operator>(</operator><name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_height</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name>VOUT_ASPECT_FACTOR</name>

<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>/</operator> <name>i_fmt_in_aspect</name><operator>)</operator>

<operator>&amp;</operator> <operator>~</operator><literal type="number">0x1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>*</operator> <name>i_fmt_in_aspect</name>

<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>/</operator> <name>VOUT_ASPECT_FACTOR</name><operator>)</operator>

<operator>&amp;</operator> <operator>~</operator><literal type="number">0x1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_new_pic</name> <operator>=</operator> <call><name>image_Convert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument>,

<argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_fmt_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_new_pic</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"image conversion failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>pic_fmt</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic_fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_fmt_in</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_new_pic</name> <operator>=</operator> <call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pic_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_new_pic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"image allocation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_new_pic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vf2</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_new_pic</name> <operator>=</operator> <call><name>filter_chain_VideoFilter</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vf2</name></name></expr></argument>, <argument><expr><name>p_new_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bridged_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_global_lock</name><argument_list>( <argument><expr><name>VLC_MOSAIC_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>p_es</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <name>p_new_pic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_pic</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_new_pic</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_global_unlock</name><argument_list>( <argument><expr><name>VLC_MOSAIC_MUTEX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name>id</name> <operator>!=</operator> <name>p_sys</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>VLCDEC_SUCCESS</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>video_update_format_decoder</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vf2</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_chain</name> <init>= <expr><call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"vfilter"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name><name>p_owner</name><operator>-&gt;</operator><name>p_stream</name></name></expr></argument>, <argument><expr><literal type="string">"update filter: '%s'"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>psz_chain</name></expr> ?</condition><then> <expr><name>psz_chain</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_chain</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_chroma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_chain_Reset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vf2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_chain_AppendFromString</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vf2</name></name></expr></argument>, <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>video_new_buffer_filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>HeightCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>&amp;&amp;</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>=</operator> <call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WidthCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>&amp;&amp;</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>=</operator> <call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alphaCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>i_alpha</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
