<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\bridge.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_TEXT</name></cpp:macro> <cpp:value>N_("ID")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Integer identifier for this elementary stream. This will be used to " "\"find\" this stream later." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_TEXT</name></cpp:macro> <cpp:value>N_( "Destination bridge-in name" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Name of the destination bridge-in. If you do not need more " "than one bridge-in at a time, you can discard this option." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELAY_TEXT</name></cpp:macro> <cpp:value>N_("Delay")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELAY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Pictures coming from the picture video outputs " "will be delayed according to this value (in milliseconds, should be ""&gt;= 100 ms). For high values, you will need to raise caching values." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_OFFSET_TEXT</name></cpp:macro> <cpp:value>N_("ID Offset")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_OFFSET_LONGTEXT</name></cpp:macro> <cpp:value>N_("Offset to add to the stream IDs specified in " "bridge_out to obtain the stream IDs bridge_in will register.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_TEXT</name></cpp:macro> <cpp:value>N_( "Name of current instance" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Name of this bridge-in instance. If you do not need more " "than one bridge-in at a time, you can discard this option." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLACEHOLDER_TEXT</name></cpp:macro> <cpp:value>N_( "Fallback to placeholder stream when out of data" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLACEHOLDER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If set to true, the bridge will discard all input elementary streams " "except if it doesn't receive data from another bridge-in. This can " "be used to configure a place holder stream when the real source " "breaks. Source and placeholder streams should have the same format." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLACEHOLDER_DELAY_TEXT</name></cpp:macro> <cpp:value>N_( "Placeholder delay" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLACEHOLDER_DELAY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Delay (in ms) before the placeholder kicks in." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLACEHOLDER_IFRAME_TEXT</name></cpp:macro> <cpp:value>N_( "Wait for I frame before toggling placeholder" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLACEHOLDER_IFRAME_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If enabled, switching between the placeholder and the normal stream " "will only occur on I frames. This will remove artifacts on stream " "switching at the expense of a slightly longer delay, depending on " "the frequence of I frames in the streams." )</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenOut</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseOut</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenIn</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseIn</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX_OUT</name></cpp:macro> <cpp:value>"sout-bridge-out-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX_IN</name></cpp:macro> <cpp:value>"sout-bridge-in-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Bridge"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Bridge stream output"</literal>)</argument>)</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Bridge out"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout output"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"bridge-out"</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX_OUT <literal type="string">"id"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ID_TEXT</argument>, <argument>ID_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX_OUT <literal type="string">"in-name"</literal></argument>, <argument><literal type="string">"default"</literal></argument>,

<argument>DEST_TEXT</argument>, <argument>DEST_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenOut</argument>, <argument>CloseOut</argument> )</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Bridge in"</literal>)</argument>, <argument>NULL</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout filter"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"bridge-in"</literal></argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX_IN <literal type="string">"delay"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>DELAY_TEXT</argument>,

<argument>DELAY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX_IN <literal type="string">"id-offset"</literal></argument>, <argument><literal type="number">8192</literal></argument>, <argument>ID_OFFSET_TEXT</argument>,

<argument>ID_OFFSET_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX_IN <literal type="string">"name"</literal></argument>, <argument><literal type="string">"default"</literal></argument>,

<argument>NAME_TEXT</argument>, <argument>NAME_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX_IN <literal type="string">"placeholder"</literal></argument>, <argument>false</argument>,

<argument>PLACEHOLDER_TEXT</argument>, <argument>PLACEHOLDER_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX_IN <literal type="string">"placeholder-delay"</literal></argument>, <argument><literal type="number">200</literal></argument>,

<argument>PLACEHOLDER_DELAY_TEXT</argument>, <argument>PLACEHOLDER_DELAY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>SOUT_CFG_PREFIX_IN <literal type="string">"placeholder-switch-on-iframe"</literal></argument>, <argument>true</argument>,

<argument>PLACEHOLDER_IFRAME_TEXT</argument>, <argument>PLACEHOLDER_IFRAME_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenIn</argument>, <argument>CloseIn</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options_out</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"id"</literal></expr>, <expr><literal type="string">"in-name"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options_in</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"delay"</literal></expr>, <expr><literal type="string">"id-offset"</literal></expr>, <expr><literal type="string">"name"</literal></expr>,

<expr><literal type="string">"placeholder"</literal></expr>, <expr><literal type="string">"placeholder-delay"</literal></expr>, <expr><literal type="string">"placeholder-switch-on-iframe"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AddOut</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DelOut</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendOut</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AddIn</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DelIn</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendIn</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>struct</name> <name>sout_stream_id_sys_t</name></name></type> <name>sout_stream_id_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>bridged_es_t</name>

<block>{

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_changed</name></decl>;</decl_stmt>

}</block></struct></type> <name>bridged_es_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>bridge_t</name>

<block>{

<decl_stmt><decl><type><name>bridged_es_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_es_num</name></decl>;</decl_stmt>

}</block></struct></type> <name>bridge_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>out_sout_stream_sys_t</name>

<block>{

<decl_stmt><decl><type><name>bridged_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_inited</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

}</block></struct></type> <name>out_sout_stream_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenOut</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>out_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_OUT</name></expr></argument>, <argument><expr><name>ppsz_sout_options_out</name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>out_sout_stream_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_OUT</name> <literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_OUT</name> <literal type="string">"in-name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"bridge-struct-%s"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>AddOut</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>DelOut</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>SendOut</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pace_nocontrol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseOut</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>out_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>out_sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>AddOut</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>out_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>out_sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bridge_t</name> <modifier>*</modifier></type><name>p_bridge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bridged_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"bridge-out can only handle 1 es at a time."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bridge</name> <operator>=</operator> <call><name>var_GetAddress</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_bridge</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_bridge</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>bridge_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>VLC_VAR_ADDRESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_SetAddress</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>p_bridge</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_empty</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_changed</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bridged_es_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bridged_es_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>p_es</name> <operator>=</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <operator>*</operator><name>p_fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>b_empty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_last</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>b_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"bridging out input codec=%4.4s id=%d pos=%d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_sys</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DelOut</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>out_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>out_sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bridged_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_es</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>b_empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>b_changed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_inited</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SendOut</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>out_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>out_sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bridged_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>out_sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name>id</name> <operator>!=</operator> <name>p_sys</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_es</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>p_es</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <name>p_buffer</name></expr>;</expr_stmt>

<while>while <condition>( <expr><name>p_buffer</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>in_sout_stream_sys_t</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_id_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_placeholder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_switch_on_iframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_placeholder_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id_audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_audio</name></decl>;</decl_stmt>

}</block></struct></type> <name>in_sout_stream_sys_t</name>;</typedef>

<enum>enum <block>{ <decl><name>placeholder_on</name></decl>, <decl><name>placeholder_off</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenIn</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>in_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_value_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>in_sout_stream_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_IN</name></expr></argument>, <argument><expr><name>ppsz_sout_options_in</name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_IN</name> <literal type="string">"id-offset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id_offset</name></name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_IN</name> <literal type="string">"delay"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_delay</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_IN</name> <literal type="string">"name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"bridge-struct-%s"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>val</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_IN</name> <literal type="string">"placeholder"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_placeholder</name></name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>b_bool</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_IN</name> <literal type="string">"placeholder-switch-on-iframe"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_switch_on_iframe</name></name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>b_bool</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>placeholder_on</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Get</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX_IN</name> <literal type="string">"placeholder-delay"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_placeholder_delay</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>i_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_video</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_audio</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_audio</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>AddIn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>DelIn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>SendIn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pace_nocontrol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseIn</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>in_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>in_sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>sout_stream_id_sys_t</name>

<block>{

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>AddIn</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>in_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>in_sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_stream_id_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>id</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>sout_StreamIdAdd</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_placeholder</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"We already had a video es!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_audio</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"We already had an audio es!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_audio</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DelIn</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>in_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>in_sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>id</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>id</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>id_audio</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id_audio</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sout_StreamIdDel</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SendIn</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>vlc</name> <init>= <expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>in_sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>in_sout_stream_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bridge_t</name> <modifier>*</modifier></type><name>p_bridge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_no_es</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_date</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_placeholder</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_bridge</name> <operator>=</operator> <call><name>var_GetAddress</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_bridge</name></expr> )</condition>

<block>{<block_content>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_empty</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_no_es</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_delay</name></name>

<operator>&lt;</operator> <name>i_date</name>

<operator>||</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_delay</name></name>

<operator>&lt;</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_last</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"dropping a packet (%"</literal><name>PRId64</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name>i_date</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_delay</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name>

<operator>=</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_changed</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_empty</name> <operator>&amp;&amp;</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sout_StreamIdDel</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_placeholder</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>=</operator> <call><name>sout_StreamIdAdd</name><argument_list>(

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"couldn't create chain for id %d"</literal></expr></argument>,

<argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"bridging in input codec=%4.4s id=%d pos=%d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_id</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_changed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_empty</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_last</name> <operator>&lt;</operator> <name>i_date</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_placeholder</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamIdDel</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_changed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_placeholder</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_last</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_delay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_delay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>newid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_placeholder</name></name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_video</name></name> <operator>=</operator> <name>i_date</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newid</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>id_video</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>newid</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_switch_on_iframe</name></name> <operator>||</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>==</operator> <name>placeholder_off</name> <operator>||</operator>

<operator>(</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>

<name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>,

<argument><expr><name>newid</name></expr></argument>,

<argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>placeholder_off</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<expr_stmt><expr><name>newid</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>id_audio</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>newid</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_audio</name></name> <operator>=</operator> <name>i_date</name></expr>;</expr_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>newid</name></expr>?</condition><then><expr><name>newid</name></expr></then><else>:<expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>,

<argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></argument>,

<argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pp_last</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_block</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_no_es</name></expr> )</condition>

<block>{<block_content>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_bridge</name><operator>-&gt;</operator><name>i_es_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_bridge</name><operator>-&gt;</operator><name>pp_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_bridge</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>vlc</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_placeholder</name></name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_video</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_placeholder_delay</name></name> <operator>&lt;</operator> <name>i_date</name>

<operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_switch_on_iframe</name></name>

<operator>||</operator> <name><name>p_buffer</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name> <operator>)</operator> <operator>)</operator>

<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>==</operator> <name>placeholder_on</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>placeholder_on</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_audio</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_placeholder_delay</name></name> <operator>&lt;</operator> <name>i_date</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
