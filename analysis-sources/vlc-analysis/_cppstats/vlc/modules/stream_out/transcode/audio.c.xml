<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\transcode\audio.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transcode.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>audio_update_format</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AOUT_FMT_LINEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transcode_audio_filters_init</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>sout_filters_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_format_t</name> <modifier>*</modifier></type><name>p_dec_out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_format_t</name> <modifier>*</modifier></type><name>p_enc_in</name></decl></parameter>,

<parameter><decl><type><name>aout_filters_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_chain</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"audio-time-stretch"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument>, <argument><expr><name>VLC_VAR_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_filters</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_filters</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_chain</name> <operator>=</operator> <call><name>aout_FiltersNew</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_dec_out</name></expr></argument>, <argument><expr><name>p_enc_in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"audio-filter"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_Destroy</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"audio-time-stretch"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator> <operator>*</operator><name>pp_chain</name> <operator>!=</operator> <name>NULL</name> <operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decoder_queue_audio</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_audio</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>audio</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>p_audio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>audio</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_audio</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>transcode_dequeue_all_audios</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_audio_bufs</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>audio</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>audio</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>audio</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>audio</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_audio_bufs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_audio_init</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,

<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"creating audio transcoding from fcc=`%4.4s' to fcc=`%4.4s'"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>audio</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>audio</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>audio</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_transcode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>audio</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>format_update</name> <operator>=</operator> <name>audio_update_format</name></expr>,

<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>decoder_queue_audio</name></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need_var</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><literal type="string">"audio decoder"</literal></expr></argument>, <argument><expr><literal type="string">"codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot find audio decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <call><name>FIRSTVALID</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr></argument>,

<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><name>VLC_CODEC_FL32</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>FIRSTVALID</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><literal type="number">48000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator>

<call><name>FIRSTVALID</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name></expr></argument>,

<argument><expr><name>AOUT_CHANS_STEREO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>encoder_tested_fmt_in</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>transcode_encoder_test</name><argument_list>( <argument><expr><call><name>sout_EncoderCreate</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument>,

<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_SetMeta</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name> <operator>=</operator> <call><name>transcode_encoder_new</name><argument_list>( <argument><expr><call><name>sout_EncoderCreate</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>encoder_tested_fmt_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_audio_clean</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>transcode_encoder_close</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_encoder_delete</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_af_chain</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_FiltersDelete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_af_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>transcode_audio_format_IsSimilar</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>audio_format_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_format_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return

<expr><name><name>a</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>a</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_audio_process</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,

<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLCDEC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_audio_bufs</name> <init>= <expr><call><name>transcode_dequeue_all_audios</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_audio_buf</name> <init>= <expr><name>p_audio_bufs</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_audio_buf</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_audio_bufs</name> <operator>=</operator> <name><name>p_audio_buf</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_audio_buf</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>b_error</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_audio_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_audio_buf</name> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>transcode_encoder_opened</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>transcode_audio_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fmt_input_audio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>transcode_encoder_opened</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>transcode_encoder_audio_configure</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fmt_input_audio</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Audio changed, trying to reinitialize filters"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_af_chain</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aout_FiltersDelete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_af_chain</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_af_chain</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fmt_input_audio</name></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_af_chain</name></name> <operator>&amp;&amp;</operator>

<call><name>transcode_audio_filters_init</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_filterscfg</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><call><name>transcode_encoder_format_in</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name>audio</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_af_chain</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>next_input_pts</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>decoder_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>next_input_pts</name></name></expr></argument>, <argument><expr><name><name>p_audio_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>transcode_encoder_opened</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>transcode_encoder_open</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name> <operator>=</operator>

<call><name><name>id</name><operator>-&gt;</operator><name>pf_transcode_downstream_add</name></name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>,

<argument><expr><call><name>transcode_encoder_format_out</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot output transcoded stream %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>pf_drift_validate</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name> <init>= <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>next_input_pts</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_drift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name><name>p_audio_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_drift</name> <operator>=</operator> <name><name>p_audio_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name>i_pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>id</name><operator>-&gt;</operator><name>pf_drift_validate</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>callback_data</name></name></expr></argument>, <argument><expr><name>i_drift</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>next_input_pts</name></name></expr></argument>, <argument><expr><name><name>p_audio_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_drift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>i_drift</name></name> <operator>=</operator> <name>i_drift</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>next_input_pts</name></name></expr></argument>, <argument><expr><name><name>p_audio_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_audio_buf</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_audio_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_audio_buf</name> <operator>=</operator> <call><name>aout_FiltersPlay</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_af_chain</name></name></expr></argument>, <argument><expr><name>p_audio_buf</name></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_audio_buf</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_audio_buf</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_audio_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>transcode_encoder_encode</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>p_audio_buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_audio_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_audio_buf</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_audio_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>p_audio_bufs</name></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>b_error</name></name> <operator>&amp;&amp;</operator> <name>in</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>transcode_encoder_opened</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>transcode_encoder_drain</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>id</name><operator>-&gt;</operator><name>b_error</name></name></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>VLC_SUCCESS</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
