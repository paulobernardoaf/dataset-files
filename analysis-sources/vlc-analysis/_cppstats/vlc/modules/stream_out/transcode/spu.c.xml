<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\transcode\spu.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_spu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transcode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>spu_new_buffer</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>subpicture_updater_t</name> <modifier>*</modifier></type><name>p_upd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpicture</name> <init>= <expr><call><name>subpicture_New</name><argument_list>( <argument><expr><name>p_upd</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_subpicture</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_subpicture</name><operator>-&gt;</operator><name>b_subtitle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_subpicture</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decoder_queue_sub</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>decoder_owner</name></name> <modifier>*</modifier></type><name>p_owner</name> <init>= <expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_owner</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>spu</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>p_spu</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>spu</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_spu</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>subpicture_t</name> <modifier>*</modifier></type><name>transcode_dequeue_all_subs</name><parameter_list>( <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpics</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>spu</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>spu</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>spu</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>spu</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_subpics</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_spu_init</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,

<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"creating subtitle transcoding from fcc=`%4.4s' "</literal>

<literal type="string">"to fcc=`%4.4s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"subtitle (fcc=`%4.4s') overlaying"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>spu</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>spu</name><operator>.</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fifo</name><operator>.</operator><name>spu</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_transcode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dec_get_owner</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>decoder_owner_callbacks</name></name></type> <name>dec_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>spu</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>buffer_new</name> <operator>=</operator> <name>spu_new_buffer</name></expr>,

<expr><operator>.</operator><name>queue</name> <operator>=</operator> <name>decoder_queue_sub</name></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>cbs</name></name> <operator>=</operator> <operator>&amp;</operator><name>dec_cbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>pf_decode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator>

<call><name>module_need_var</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><literal type="string">"spu decoder"</literal></expr></argument>, <argument><expr><literal type="string">"codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot find spu decoder"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name> <operator>=</operator> <call><name>transcode_encoder_new</name><argument_list>( <argument><expr><call><name>sout_EncoderCreate</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>transcode_encoder_open</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot find spu encoder (%s)"</literal></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_encoder_delete</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name> <operator>=</operator>

<call><name><name>id</name><operator>-&gt;</operator><name>pf_transcode_downstream_add</name></name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>,

<argument><expr><call><name>transcode_encoder_format_out</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>downstream_id</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot output transcoded stream %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_encoder_close</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_encoder_delete</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_spu_clean</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>transcode_encoder_close</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_encoder_delete</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_spu_process</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,

<parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name><operator>-&gt;</operator><name>pf_decode</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLCDEC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpics</name> <init>= <expr><call><name>transcode_dequeue_all_subs</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_subpic</name> <init>= <expr><name>p_subpics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_subpic</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_subpics</name> <operator>=</operator> <name><name>p_subpic</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_error</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>drift</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>pf_get_master_drift</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>drift</name> <operator>=</operator> <call><name><name>id</name><operator>-&gt;</operator><name>pf_get_master_drift</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>callback_data</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name> <operator>-=</operator> <name>drift</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-=</operator> <name>drift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>pf_send_subpicture</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>id</name><operator>-&gt;</operator><name>pf_send_subpicture</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>callback_data</name></name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_TEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>pf_get_output_dimensions</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<call><name><name>id</name><operator>-&gt;</operator><name>pf_get_output_dimensions</name></name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>callback_data</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>spu</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>p_enccfg</name><operator>-&gt;</operator><name>spu</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_Update</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name><name>p_subpic</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>transcode_encoder_encode</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subpicture_Delete</name><argument_list>( <argument><expr><name>p_subpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>b_error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while<condition>( <expr><name>p_subpics</name></expr> )</condition>;</do>

<return>return <expr><ternary><condition><expr><name>b_error</name></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>VLC_SUCCESS</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
