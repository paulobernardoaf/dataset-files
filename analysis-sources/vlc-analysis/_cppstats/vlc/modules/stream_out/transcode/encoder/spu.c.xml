<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\transcode\encoder\spu.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoder_priv.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>transcode_encoder_spu_open</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>,

<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr></then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type> <name>transcode_encoder_spu_encode</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>subpicture_t</name> <modifier>*</modifier></type><name>p_spu</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>pf_encode_sub</name></name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name>p_spu</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
