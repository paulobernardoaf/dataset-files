<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\transcode\encoder\audio.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoder_priv.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_channels_maps</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_LFE</name> <operator>|</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARLEFT</name>

<operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARCENTER</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_REARLEFT</name>

<operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>transcode_encoder_audio_open</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <call><name>module_need</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>,

<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator>

<call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr></then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encoder_audio_configure</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_format_t</name> <modifier>*</modifier></type><name>p_dec_out</name></decl></parameter>,

<parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_keep_fmtin</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_format_t</name> <modifier>*</modifier></type><name>p_enc_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_format_t</name> <modifier>*</modifier></type><name>p_enc_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_lang</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_lang</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_lang</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_sample_rate</name></name></expr> ?</condition><then> <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_sample_rate</name></name></expr>

</then><else>: <expr><name><name>p_dec_out</name><operator>-&gt;</operator><name>i_rate</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>p_dec_out</name><operator>-&gt;</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr> ?</condition><then> <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>

</then><else>: <expr><name><name>p_dec_out</name><operator>-&gt;</operator><name>i_channels</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><name>p_enc_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pi_channels_maps</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pi_channels_maps</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>pi_channels_maps</name><index>[<expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_channels</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_keep_fmtin</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_dec_out</name><operator>-&gt;</operator><name>i_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name><name>p_dec_out</name><operator>-&gt;</operator><name>i_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><name>p_enc_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>pi_channels_maps</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>pi_channels_maps</name><index>[<expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_channels</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><name>p_enc_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_encoder_audio_configure</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>audio_format_t</name> <modifier>*</modifier></type><name>p_dec_out</name></decl></parameter>,

<parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_keep_fmtin</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>encoder_audio_configure</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>p_dec_out</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name>b_keep_fmtin</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_encoder_audio_test</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_encoder</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_dec_out</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec_in</name></decl></parameter>,

<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_enc_wanted_in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_encoder</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>i_codec_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_dec_out</name><operator>-&gt;</operator><name>audio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>audio_format_t</name> <modifier>*</modifier></type><name>p_afmt_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>encoder_audio_configure</name><argument_list>( <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec_out</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><name>p_encoder</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>i_codec_in</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_afmt_out</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_afmt_out</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_afmt_out</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>AOUT_CHANS_STEREO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name> <init>= <expr><call><name>module_need</name><argument_list>( <argument><expr><name>p_encoder</name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_module</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_encoder</name></expr></argument>, <argument><expr><literal type="string">"cannot find audio encoder (module:%s fourcc:%4.4s). "</literal>

<literal type="string">"Take a look few lines earlier to see possible reason."</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> </then><else>: <expr><literal type="string">"any"</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_encoder</name></expr></argument>, <argument><expr><name>p_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><name>p_enc_wanted_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>p_module</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type> <name>transcode_encoder_audio_encode</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>pf_encode_audio</name></name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_encoder_audio_drain</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>transcode_encoder_audio_encode</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>p_block</name></expr> )</condition>;</do>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
