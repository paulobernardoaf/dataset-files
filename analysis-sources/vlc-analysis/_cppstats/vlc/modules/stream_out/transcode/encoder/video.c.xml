<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\transcode\encoder\video.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoder_priv.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>transcode_video_framerate_apply</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <name>ENC_FRAMERATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name>ENC_FRAMERATE_BASE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr></argument>,

<argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transcode_video_scale_apply</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>f_scale</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_maxwidth</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_maxheight</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_src_width</name> <init>= <expr><ternary><condition><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr> ?</condition><then> <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr> </then><else>: <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_src_height</name> <init>= <expr><ternary><condition><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr> ?</condition><then> <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr> </then><else>: <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_scale_width</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_scale_height</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_aspect</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator>

<name><name>p_src</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>/</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"decoder aspect is %f:1"</literal></expr></argument>, <argument><expr><name>f_aspect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f_aspect</name> <operator>=</operator> <name>f_aspect</name> <operator>*</operator> <name>i_src_height</name> <operator>/</operator> <name>i_src_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"source pixel aspect is %f:1"</literal></expr></argument>, <argument><expr><name>f_aspect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>f_scale</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f_real_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_new_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_new_width</name> <init>= <expr><name>i_src_width</name> <operator>*</operator> <name>f_scale</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_new_width</name> <operator>%</operator> <literal type="number">16</literal> <operator>&lt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>i_new_width</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_new_width</name> <operator>-=</operator> <name>i_new_width</name> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_new_width</name> <operator>+=</operator> <literal type="number">16</literal> <operator>-</operator> <name>i_new_width</name> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>f_real_scale</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator> <name>i_new_width</name> <operator>)</operator> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_src_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_new_height</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>i_src_height</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>f_real_scale</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f_scale_width</name> <operator>=</operator> <name>f_real_scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_scale_height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_new_height</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>i_src_height</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>&amp;&amp;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_scale_width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>/</operator> <name>i_src_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_scale_height</name> <operator>=</operator> <name>f_scale_width</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_scale_height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>/</operator> <name>i_src_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_scale_width</name> <operator>=</operator> <name>f_scale_height</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>&amp;&amp;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_scale_width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>/</operator> <name>i_src_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_scale_height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>/</operator> <name>i_src_height</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_maxwidth</name> <operator>&amp;&amp;</operator> <name>f_scale_width</name> <operator>&gt;</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_maxwidth</name> <operator>/</operator> <name>i_src_width</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_scale_width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_maxwidth</name> <operator>/</operator> <name>i_src_width</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_maxheight</name> <operator>&amp;&amp;</operator> <name>f_scale_height</name> <operator>&gt;</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_maxheight</name> <operator>/</operator> <name>i_src_height</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_scale_height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_maxheight</name> <operator>/</operator> <name>i_src_height</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f_aspect</name> <operator>=</operator> <name>f_aspect</name> <operator>*</operator> <name>f_scale_height</name> <operator>/</operator> <name>f_scale_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"scaled pixel aspect is %f:1"</literal></expr></argument>, <argument><expr><name>f_aspect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_dst_visible_width</name> <init>= <expr><call><name>lroundf</name><argument_list>(<argument><expr><name>f_scale_width</name><operator>*</operator><name>i_src_width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_dst_visible_height</name> <init>= <expr><call><name>lroundf</name><argument_list>(<argument><expr><name>f_scale_height</name><operator>*</operator><name>i_src_height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_dst_width</name> <init>= <expr><call><name>lroundf</name><argument_list>(<argument><expr><name>f_scale_width</name><operator>*</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_dst_height</name> <init>= <expr><call><name>lroundf</name><argument_list>(<argument><expr><name>f_scale_height</name><operator>*</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dst_visible_width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>i_dst_visible_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dst_visible_height</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>i_dst_visible_height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dst_width</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>i_dst_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dst_height</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>i_dst_height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name>i_dst_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name>i_dst_visible_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name>i_dst_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name>i_dst_visible_height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"source %ux%u, destination %ux%u"</literal></expr></argument>,

<argument><expr><name>i_src_width</name></expr></argument>, <argument><expr><name>i_src_height</name></expr></argument>,

<argument><expr><name>i_dst_visible_width</name></expr></argument>, <argument><expr><name>i_dst_visible_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_video_sar_apply</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <operator>(</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name><operator>)</operator>

<operator>*</operator> <operator>(</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>+</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_visible_height</name></name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <operator>(</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name><operator>)</operator>

<operator>*</operator> <operator>(</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>+</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_visible_width</name></name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>,

<argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr></argument>, <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transcode_video_size_config_apply</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_srcref</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>f_scale</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>f_scale</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>transcode_video_scale_apply</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>,

<argument><expr><name>p_srcref</name></expr></argument>,

<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>f_scale</name></name></expr></argument>,

<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_maxwidth</name></name></expr></argument>,

<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_maxheight</name></name></expr></argument>,

<argument><expr><name>p_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_srcref</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_srcref</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_srcref</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_srcref</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_encoder_video_configure</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_dec_out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>,

<parameter><decl><type><name>vlc_video_context</name> <modifier>*</modifier></type><name>vctx_in</name></decl></parameter>,

<parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_enc_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_enc_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>fps</name><operator>.</operator><name>num</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator>

<name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>fps</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator>

<call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>fps</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>orientation</name></name> <operator>=</operator> <name><name>p_enc_in</name><operator>-&gt;</operator><name>orientation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_video_framerate_apply</name><argument_list>( <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>p_enc_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"source fps %u/%u, destination %u/%u"</literal></expr></argument>,

<argument><expr><name><name>p_dec_out</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr></argument>, <argument><expr><name><name>p_dec_out</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr></argument>,

<argument><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr></argument>, <argument><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_video_size_config_apply</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>p_cfg</name></expr></argument>, <argument><expr><name>p_enc_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transcode_video_sar_apply</name><argument_list>( <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>p_enc_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"encoder aspect is %u:%u"</literal></expr></argument>,

<argument><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>,

<argument><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>p_enc_out</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>vctx_in</name></name> <operator>=</operator> <name>vctx_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>transfer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>primaries</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc_out</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_lang</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_lang</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_lang</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"source chroma: %4.4s, destination %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec_out</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_enc_in</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_encoder_video_test</name><parameter_list>( <parameter><decl><type><name>encoder_t</name> <modifier>*</modifier></type><name>p_encoder</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_dec_fmtin</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec_in</name></decl></parameter>,

<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_enc_wanted_in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_encoder</name><operator>-&gt;</operator><name>i_threads</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>i_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_encoder</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>i_codec_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_dec_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_dec_fmtin</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_vfmt_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_vfmt_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_vfmt_out</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vfmt_out</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vfmt_in</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>=</operator> <name>i_codec_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vfmt_in</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <call><name>FIRSTVALID</name><argument_list>( <argument><expr><name><name>p_vfmt_out</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_dec_in</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vfmt_in</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <call><name>FIRSTVALID</name><argument_list>( <argument><expr><name><name>p_vfmt_out</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>, <argument><expr><name><name>p_dec_in</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vfmt_in</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>=</operator> <call><name>FIRSTVALID</name><argument_list>( <argument><expr><name><name>p_vfmt_out</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>,

<argument><expr><name><name>p_dec_in</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_vfmt_in</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vfmt_in</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>=</operator> <call><name>FIRSTVALID</name><argument_list>( <argument><expr><name><name>p_vfmt_out</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>p_dec_in</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><name><name>p_vfmt_in</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vfmt_in</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>=</operator> <name>ENC_FRAMERATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vfmt_in</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name>ENC_FRAMERATE_BASE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>module_t</name> <modifier>*</modifier></type><name>p_module</name> <init>= <expr><call><name>module_need</name><argument_list>( <argument><expr><name>p_encoder</name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_module</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_encoder</name></expr></argument>, <argument><expr><literal type="string">"cannot find video encoder (module:%s fourcc:%4.4s). "</literal>

<literal type="string">"Take a look few lines earlier to see possible reason."</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> ?</condition><then> <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr> </then><else>: <expr><literal type="string">"any"</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name>p_encoder</name></expr></argument>, <argument><expr><name>p_module</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><name>p_enc_wanted_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc_wanted_in</name><operator>-&gt;</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name>p_encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>p_module</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>EncoderThread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<while>while<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>b_abort</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>p_pic</name> <operator>=</operator> <call><name>picture_fifo_Pop</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pp_pics</name></name></expr></argument> )</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>picture_pool_has_room</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>pf_encode_video</name></name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_buffers</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>b_abort</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<while>while<condition>( <expr><operator>(</operator><name>p_pic</name> <operator>=</operator> <call><name>picture_fifo_Pop</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pp_pics</name></name></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_sem_post</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>picture_pool_has_room</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>pf_encode_video</name></name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_buffers</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<do>do <block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>pf_encode_video</name></name><argument_list>(<argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_buffers</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>p_block</name></expr> )</condition>;</do>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name> <argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_encoder_video_drain</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>b_threaded</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>transcode_encoder_encode</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>p_block</name></expr> )</condition>;</do>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>b_threaded</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>b_abort</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>b_abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>transcode_encoder_get_output_async</name><argument_list>( <argument><expr><name>p_enc</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>transcode_encoder_video_close</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_enc</name><operator>-&gt;</operator><name>b_threaded</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>b_abort</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>b_abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>transcode_encoder_video_open</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>transcode_encoder_config_t</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>i_threads</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>i_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_cfg</name></name> <operator>=</operator> <name><name>p_cfg</name><operator>-&gt;</operator><name>p_config_chain</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator>

<call><name>module_need</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator>

<call><name>vlc_fourcc_GetCodec</name><argument_list>( <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_sem_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>picture_pool_has_room</name></name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>pool_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>b_abort</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>i_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>EncoderThread</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>threads</name><operator>.</operator><name>i_priority</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_enc</name><operator>-&gt;</operator><name>b_threaded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type> <name>transcode_encoder_video_encode</name><parameter_list>( <parameter><decl><type><name>transcode_encoder_t</name> <modifier>*</modifier></type><name>p_enc</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_enc</name><operator>-&gt;</operator><name>b_threaded</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name><operator>-&gt;</operator><name>pf_encode_video</name></name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>p_encoder</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_sem_wait</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>picture_pool_has_room</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Hold</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_fifo_Push</name><argument_list>( <argument><expr><name><name>p_enc</name><operator>-&gt;</operator><name>pp_pics</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_enc</name><operator>-&gt;</operator><name>lock_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
