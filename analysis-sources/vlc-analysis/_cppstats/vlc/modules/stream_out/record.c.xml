<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_out\record.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_PREFIX_TEXT</name></cpp:macro> <cpp:value>N_("Destination prefix")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_PREFIX_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Prefix of the destination file automatically generated" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-record-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Record stream output"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout output"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"record"</literal></argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Record"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_STREAM</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"dst-prefix"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>DST_PREFIX_TEXT</argument>,

<argument>DST_PREFIX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"dst-prefix"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>struct</name> <name>sout_stream_id_sys_t</name></name></type> <name>sout_stream_id_sys_t</name>;</typedef>

<struct>struct <name>sout_stream_id_sys_t</name>

<block>{

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_wait_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_wait_start</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_date_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_max_wait</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_max_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_drop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts_start</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_stream_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OutputStart</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OutputSend</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_add</name></name> <operator>=</operator> <name>Add</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_del</name></name> <operator>=</operator> <name>Del</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_send</name></name> <operator>=</operator> <name>Send</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_prefix</name></name> <operator>=</operator> <call><name>var_GetNonEmptyString</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"dst-prefix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_prefix</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_prefix</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"sout-record-"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_prefix</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_date_start</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPTIMIZE_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_wait</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_size</name></name> <operator>=</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_wait</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_size</name></name> <operator>=</operator> <literal type="number">20</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>sout_stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamChainDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_prefix</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Add</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>id</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_wait_key</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_wait_start</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Del</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>sout_stream_id_sys_t</name> <operator>*</operator><operator>)</operator><name>_id</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OutputStart</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>p_first</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>p_first</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>id</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamIdDel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_REMOVE</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Send</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_date_start</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_date_start</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_date_start</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_max_wait</name></name> <operator>||</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_max_size</name></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Starting recording, waited %ds and %dbyte"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_date_start</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OutputStart</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OutputSend</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>psz_muxer</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>psz_extension</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_es_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name><name>codec</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>muxer_properties_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name><parameter_list>(<parameter><type><name>muxer</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ .psz_muxer = muxer, .psz_extension = ext, .i_es_max = count, .codec = { __VA_ARGS__, 0 } }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>muxer_properties_t</name></type> <name><name>p_muxers</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><literal type="string">"mp3"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_CODEC_MPGA</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP2</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP3</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><literal type="string">"a52"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_CODEC_A52</name></expr></argument>, <argument><expr><name>VLC_CODEC_EAC3</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><literal type="string">"dts"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><literal type="string">"mpc"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_CODEC_MUSEPACK7</name></expr></argument>, <argument><expr><name>VLC_CODEC_MUSEPACK8</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><literal type="string">"ape"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_CODEC_APE</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"wav"</literal></expr></argument>, <argument><expr><literal type="string">"wav"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VLC_CODEC_U8</name></expr></argument>, <argument><expr><name>VLC_CODEC_S16L</name></expr></argument>,

<argument><expr><name>VLC_CODEC_S24L</name></expr></argument>, <argument><expr><name>VLC_CODEC_S32L</name></expr></argument>, <argument><expr><name>VLC_CODEC_FL32</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>VLC_CODEC_VORBIS</name></expr></argument>, <argument><expr><name>VLC_CODEC_SPEEX</name></expr></argument>, <argument><expr><name>VLC_CODEC_FLAC</name></expr></argument>,

<argument><expr><name>VLC_CODEC_SUBT</name></expr></argument>, <argument><expr><name>VLC_CODEC_THEORA</name></expr></argument>, <argument><expr><name>VLC_CODEC_DIRAC</name></expr></argument>,

<argument><expr><name>VLC_CODEC_OPUS</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"asf"</literal></expr></argument>, <argument><expr><literal type="string">"asf"</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><name>VLC_CODEC_WMA1</name></expr></argument>, <argument><expr><name>VLC_CODEC_WMA2</name></expr></argument>, <argument><expr><name>VLC_CODEC_WMAP</name></expr></argument>, <argument><expr><name>VLC_CODEC_WMAL</name></expr></argument>, <argument><expr><name>VLC_CODEC_WMAS</name></expr></argument>,

<argument><expr><name>VLC_CODEC_WMV1</name></expr></argument>, <argument><expr><name>VLC_CODEC_WMV2</name></expr></argument>, <argument><expr><name>VLC_CODEC_WMV3</name></expr></argument>, <argument><expr><name>VLC_CODEC_VC1</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"mp4"</literal></expr></argument>, <argument><expr><literal type="string">"mp4"</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument>, <argument><expr><name>VLC_CODEC_A52</name></expr></argument>, <argument><expr><name>VLC_CODEC_EAC3</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument>,

<argument><expr><name>VLC_CODEC_H264</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4V</name></expr></argument>, <argument><expr><name>VLC_CODEC_HEVC</name></expr></argument>, <argument><expr><name>VLC_CODEC_AV1</name></expr></argument>,

<argument><expr><name>VLC_CODEC_SUBT</name></expr></argument>, <argument><expr><name>VLC_CODEC_QTXT</name></expr></argument>, <argument><expr><name>VLC_CODEC_TX3G</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"ps"</literal></expr></argument>, <argument><expr><literal type="string">"mpg"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>VLC_CODEC_MPGV</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP2V</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP1V</name></expr></argument>,

<argument><expr><name>VLC_CODEC_MPGA</name></expr></argument>, <argument><expr><name>VLC_CODEC_DVD_LPCM</name></expr></argument>, <argument><expr><name>VLC_CODEC_A52</name></expr></argument>,

<argument><expr><name>VLC_CODEC_DTS</name></expr></argument>,

<argument><expr><name>VLC_CODEC_SPU</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"avi"</literal></expr></argument>, <argument><expr><literal type="string">"avi"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>VLC_CODEC_A52</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGA</name></expr></argument>,

<argument><expr><name>VLC_CODEC_WMA1</name></expr></argument>, <argument><expr><name>VLC_CODEC_WMA2</name></expr></argument>, <argument><expr><name>VLC_CODEC_WMAP</name></expr></argument>, <argument><expr><name>VLC_CODEC_WMAL</name></expr></argument>,

<argument><expr><name>VLC_CODEC_U8</name></expr></argument>, <argument><expr><name>VLC_CODEC_S16L</name></expr></argument>, <argument><expr><name>VLC_CODEC_S24L</name></expr></argument>,

<argument><expr><name>VLC_CODEC_MP4V</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><literal type="number">8000</literal></expr></argument>, <argument><expr><name>VLC_CODEC_MPGV</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP2V</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP1V</name></expr></argument>,

<argument><expr><name>VLC_CODEC_H264</name></expr></argument>, <argument><expr><name>VLC_CODEC_HEVC</name></expr></argument>,

<argument><expr><name>VLC_CODEC_MPGA</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP2</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP3</name></expr></argument>,

<argument><expr><name>VLC_CODEC_DVD_LPCM</name></expr></argument>, <argument><expr><name>VLC_CODEC_A52</name></expr></argument>, <argument><expr><name>VLC_CODEC_EAC3</name></expr></argument>,

<argument><expr><name>VLC_CODEC_DTS</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument>,

<argument><expr><name>VLC_CODEC_DVBS</name></expr></argument>, <argument><expr><name>VLC_CODEC_TELETEXT</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"avformat{mux=webm}"</literal></expr></argument>, <argument><expr><literal type="string">"webm"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,

<argument><expr><name>VLC_CODEC_VP8</name></expr></argument>, <argument><expr><name>VLC_CODEC_VP9</name></expr></argument>,

<argument><expr><name>VLC_CODEC_VORBIS</name></expr></argument>, <argument><expr><name>VLC_CODEC_OPUS</name></expr></argument> )</argument_list></call></expr>,

<expr><call><name>M</name><argument_list>( <argument><expr><literal type="string">"mkv"</literal></expr></argument>, <argument><expr><literal type="string">"mkv"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>VLC_CODEC_H264</name></expr></argument>, <argument><expr><name>VLC_CODEC_HEVC</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4V</name></expr></argument>,

<argument><expr><name>VLC_CODEC_A52</name></expr></argument>, <argument><expr><name>VLC_CODEC_EAC3</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument>,

<argument><expr><name>VLC_CODEC_VORBIS</name></expr></argument>, <argument><expr><name>VLC_CODEC_FLAC</name></expr></argument> )</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>M</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OutputNew</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_muxer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_extension</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>,

<argument><expr><name>psz_prefix</name></expr></argument>, <argument><expr><ternary><condition><expr><name>psz_extension</name></expr> ?</condition><then> <expr><literal type="string">"."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>psz_extension</name></expr> ?</condition><then> <expr><name>psz_extension</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_file</name> <operator>=</operator> <call><name>config_StringEscape</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_file</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_output</name></expr></argument>,

<argument><expr><literal type="string">"std{access=file{no-append,no-format,no-overwrite},"</literal>

<literal type="string">"mux=%s,dst='%s'}"</literal></expr></argument>, <argument><expr><name>psz_muxer</name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_output</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Using record output `%s'"</literal></expr></argument>, <argument><expr><name>psz_output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name> <operator>=</operator> <call><name>sout_StreamChainNew</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sout</name></name></expr></argument>, <argument><expr><name>psz_output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>sout_StreamIdAdd</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>psz_file</name> <operator>&amp;&amp;</operator> <name>psz_extension</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"record-file"</literal></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_count</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>BlockTick</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_block</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OutputStart</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_muxer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_extension</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>p_muxers</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_muxers</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name> <operator>&gt;</operator> <name><name>p_muxers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_es_max</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>id</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>fmt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_muxers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>codec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name><name>p_muxers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>codec</name><index>[<expr><name>k</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_ok</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_ok</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_muxer</name> <operator>=</operator> <name><name>p_muxers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_muxer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_extension</name> <operator>=</operator> <name><name>p_muxers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_extension</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_muxer</name> <operator>||</operator> <operator>!</operator><name>psz_extension</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ppsz_muxers</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"avi"</literal></expr>, <expr><literal type="string">"avi"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"mp4"</literal></expr>, <expr><literal type="string">"mp4"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"ogg"</literal></expr>, <expr><literal type="string">"ogg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"asf"</literal></expr>, <expr><literal type="string">"asf"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"ts"</literal></expr>, <expr><literal type="string">"ts"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"ps"</literal></expr>, <expr><literal type="string">"mpg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mkv"</literal></expr>, <expr><literal type="string">"mkv"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{ "avformat{mux=avi}", "avi" },

{ "avformat{mux=mov}", "mov" },

{ "avformat{mux=mp4}", "mp4" },

{ "avformat{mux=nsv}", "nsv" },

{ "avformat{mux=flv}", "flv" },

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_best</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_best_es</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"failed to find an adequate muxer, probing muxers"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ppsz_muxers</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ppsz_muxers</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_es</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_file</name> <operator>=</operator> <call><name>tempnam</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"vlc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_file</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"probing muxer %s"</literal></expr></argument>, <argument><expr><name><name>ppsz_muxers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_es</name> <operator>=</operator> <call><name>OutputNew</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>ppsz_muxers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_es</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamIdDel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamChainDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_es</name> <operator>&gt;</operator> <name>i_best_es</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_best_es</name> <operator>=</operator> <name>i_es</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_best</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_best_es</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_unlink</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psz_muxer</name> <operator>=</operator> <name><name>ppsz_muxers</name><index>[<expr><name>i_best</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_extension</name> <operator>=</operator> <name><name>ppsz_muxers</name><index>[<expr><name>i_best</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"using muxer %s with extension %s (%d/%d streams accepted)"</literal></expr></argument>,

<argument><expr><name>psz_muxer</name></expr></argument>, <argument><expr><name>psz_extension</name></expr></argument>, <argument><expr><name>i_best_es</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>OutputNew</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>psz_muxer</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_prefix</name></name></expr></argument>, <argument><expr><name>psz_extension</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"failed to open output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_highest_head_dts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>id</name></name> <operator>||</operator> <operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>p_first</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name> <init>= <expr><call><name>BlockTick</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>&gt;</operator> <name>i_highest_head_dts</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>id</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>||</operator> <name><name>id</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_highest_head_dts</name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_block</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <call><name>BlockTick</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_start</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_start</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_start</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_start</name></name> <operator>=</operator> <name>i_highest_head_dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>p_cand</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>canddts</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>p_cand</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>canddts</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_id</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>id</name><operator>-&gt;</operator><name>id</name></name> <operator>||</operator> <name><name>id</name><operator>-&gt;</operator><name>p_first</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_id_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>id_dts</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_id_block</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</init> <condition><expr><name>p_id_block</name></expr>;</condition> <incr><expr><name>p_id_block</name> <operator>=</operator> <name><name>p_id_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>id_dts</name> <operator>=</operator> <call><name>BlockTick</name><argument_list>( <argument><expr><name>p_id_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>id_dts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>id_dts</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_cand</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>canddts</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cand</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>canddts</name> <operator>&gt;</operator> <name>id_dts</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_cand</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>canddts</name> <operator>=</operator> <name>id_dts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_cand</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>p_cand</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cand</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cand</name><operator>-&gt;</operator><name>p_first</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cand</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_cand</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>BlockTick</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_start</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OutputSend</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_cand</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><name>p_cand</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OutputSend</name><parameter_list>( <parameter><decl><type><name>sout_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>sout_stream_id_sys_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>b_wait_key</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_wait_key</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_wait_start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_MASK</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_wait_key</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>b_wait_start</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>&gt;=</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_start</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>b_wait_start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>id</name><operator>-&gt;</operator><name>b_wait_key</name></name> <operator>||</operator> <name><name>id</name><operator>-&gt;</operator><name>b_wait_start</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_StreamIdSend</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_drop</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_ChainProperties</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_size</name></name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>pp_last</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
