<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_filter\param_eq.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CalcPeakEQCoeffs</name><parameter_list>( <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CalcShelfEQCoeffs</name><parameter_list>( <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ProcessEQ</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Parametric Equalizer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Parametric Equalizer"</literal> )</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AFILTER</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument><literal type="string">"param-eq-lowf"</literal></argument>, <argument><literal type="number">100</literal></argument>, <argument>N_(<literal type="string">"Low freq (Hz)"</literal>)</argument>,<argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"param-eq-lowgain"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">20.0</literal></argument>, <argument><literal type="number">20.0</literal></argument>,

<argument>N_(<literal type="string">"Low freq gain (dB)"</literal>)</argument>, <argument>NULL</argument>,<argument>false</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument><literal type="string">"param-eq-highf"</literal></argument>, <argument><literal type="number">10000</literal></argument>, <argument>N_(<literal type="string">"High freq (Hz)"</literal>)</argument>,<argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"param-eq-highgain"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">20.0</literal></argument>, <argument><literal type="number">20.0</literal></argument>,

<argument>N_(<literal type="string">"High freq gain (dB)"</literal>)</argument>,<argument>NULL</argument>,<argument>false</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument><literal type="string">"param-eq-f1"</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument>N_(<literal type="string">"Freq 1 (Hz)"</literal>)</argument>,<argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"param-eq-gain1"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">20.0</literal></argument>, <argument><literal type="number">20.0</literal></argument>,

<argument>N_(<literal type="string">"Freq 1 gain (dB)"</literal>)</argument>, <argument>NULL</argument>,<argument>false</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"param-eq-q1"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">0.1</literal></argument>, <argument><literal type="number">100.0</literal></argument>,

<argument>N_(<literal type="string">"Freq 1 Q"</literal>)</argument>, <argument>NULL</argument>,<argument>false</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument><literal type="string">"param-eq-f2"</literal></argument>, <argument><literal type="number">1000</literal></argument>, <argument>N_(<literal type="string">"Freq 2 (Hz)"</literal>)</argument>,<argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"param-eq-gain2"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">20.0</literal></argument>, <argument><literal type="number">20.0</literal></argument>,

<argument>N_(<literal type="string">"Freq 2 gain (dB)"</literal>)</argument>,<argument>NULL</argument>,<argument>false</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"param-eq-q2"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">0.1</literal></argument>, <argument><literal type="number">100.0</literal></argument>,

<argument>N_(<literal type="string">"Freq 2 Q"</literal>)</argument>,<argument>NULL</argument>,<argument>false</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument><literal type="string">"param-eq-f3"</literal></argument>, <argument><literal type="number">3000</literal></argument>, <argument>N_(<literal type="string">"Freq 3 (Hz)"</literal>)</argument>,<argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"param-eq-gain3"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">20.0</literal></argument>, <argument><literal type="number">20.0</literal></argument>,

<argument>N_(<literal type="string">"Freq 3 gain (dB)"</literal>)</argument>,<argument>NULL</argument>,<argument>false</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"param-eq-q3"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">0.1</literal></argument>, <argument><literal type="number">100.0</literal></argument>,

<argument>N_(<literal type="string">"Freq 3 Q"</literal>)</argument>,<argument>NULL</argument>,<argument>false</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name>f_lowf</name></decl>, <name>f_lowgain</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_f1</name></decl>, <name>f_Q1</name>, <name>f_gain1</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_f2</name></decl>, <name>f_Q2</name>, <name>f_gain2</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_f3</name></decl>, <name>f_Q3</name>, <name>f_gain3</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_highf</name></decl>, <name>f_highgain</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>coeffs</name><index>[<expr><literal type="number">5</literal><operator>*</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_state</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_samplerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_lowf</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-lowf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_lowgain</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-lowgain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_highf</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-highf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_highgain</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-highgain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_f1</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-f1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_Q1</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-q1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain1</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-gain1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_f2</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-f2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_Q2</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-q2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain2</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-gain2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_f3</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-f3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_Q3</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-q3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain3</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"param-eq-gain3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_samplerate</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CalcPeakEQCoeffs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_f1</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_Q1</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain1</name></name></expr></argument>,

<argument><expr><name>i_samplerate</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>coeffs</name></name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CalcPeakEQCoeffs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_f2</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_Q2</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain2</name></name></expr></argument>,

<argument><expr><name>i_samplerate</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>coeffs</name></name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CalcPeakEQCoeffs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_f3</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_Q3</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_gain3</name></name></expr></argument>,

<argument><expr><name>i_samplerate</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>coeffs</name></name><operator>+</operator><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CalcShelfEQCoeffs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_lowf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_lowgain</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>i_samplerate</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>coeffs</name></name><operator>+</operator><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CalcShelfEQCoeffs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_highf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_highgain</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>i_samplerate</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>coeffs</name></name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_state</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name><operator>*</operator><literal type="number">5</literal><operator>*</operator><literal type="number">4</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_state</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ProcessEQ</name><argument_list>( <argument><expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_state</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_in_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CalcPeakEQCoeffs</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>f0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>Q</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gainDB</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>Fs</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>A</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>Q</name> <operator>&lt;</operator> <literal type="number">0.1f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Q</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Q</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Q</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f0</name> <operator>&gt;</operator> <name>Fs</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">0.95f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f0</name> <operator>=</operator> <name>Fs</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">0.95f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gainDB</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gainDB</name> <operator>=</operator> <operator>-</operator><literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gainDB</name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gainDB</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>gainDB</name><operator>/</operator><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>M_PI</name><operator>)</operator><operator>*</operator><name>f0</name><operator>/</operator><name>Fs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>/</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>Q</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name><operator>*</operator><name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name><operator>*</operator><name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>alpha</name><operator>/</operator><name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>alpha</name><operator>/</operator><name>A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b0</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b1</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b2</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a1</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>a2</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CalcShelfEQCoeffs</name><parameter_list>( <parameter><decl><type><name>float</name></type> <name>f0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>slope</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gainDB</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>high</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>Fs</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>A</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f0</name> <operator>&gt;</operator> <name>Fs</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">0.95f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f0</name> <operator>=</operator> <name>Fs</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">0.95f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gainDB</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gainDB</name> <operator>=</operator> <operator>-</operator><literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gainDB</name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gainDB</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>gainDB</name><operator>/</operator><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">3.141593f</literal><operator>*</operator><name>f0</name><operator>/</operator><name>Fs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <call><name>sqrtf</name><argument_list>( <argument><expr><operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>/</operator><name>A</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>/</operator><name>slope</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>high</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>A</name><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>*</operator><name>alpha</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal><operator>*</operator><name>A</name><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <name>A</name><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>*</operator><name>alpha</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>*</operator><name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>*</operator><name>alpha</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>A</name><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>*</operator><name>alpha</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>A</name><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <name>A</name><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>*</operator><name>alpha</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>*</operator><name>alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>(</operator><name>A</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>A</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>*</operator><name>alpha</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b0</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b1</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b2</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>a1</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>a2</name><operator>/</operator><name>a0</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ProcessEQ</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>eqCount</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>chn</name></decl>, <decl><type ref="prev"/><name>eq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dest1</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>state1</name> <init>= <expr><name>state</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>chn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>chn</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>chn</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coeffs1</name> <init>= <expr><name>coeffs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>src1</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>eq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>eq</name> <operator>&lt;</operator> <name>eqCount</name></expr>;</condition> <incr><expr><name>eq</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name><name>coeffs1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <name><name>coeffs1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <name><name>coeffs1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <name><name>coeffs1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <name><name>coeffs1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>coeffs1</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name><operator>*</operator><name>b0</name> <operator>+</operator> <name><name>state1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>b1</name> <operator>+</operator> <name><name>state1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>b2</name> <operator>-</operator> <name><name>state1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>a1</name> <operator>-</operator> <name><name>state1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name>a2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>state1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>state1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>dest1</name><operator>++</operator> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
