<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_filter\resampler\bandlimited.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bandlimited.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Resample</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResampleFloat</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_out_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_out</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_in_end</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>d_factor</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_factor_old</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_bytes_per_frame</name></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>i_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d_old_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_old_wing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_remainder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>end_date</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_RESAMPLER</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Audio filter for band-limited interpolation resampling"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio converter"</literal></argument>, <argument><literal type="number">20</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenFilter</argument>, <argument>CloseFilter</argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio resampler"</literal></argument>, <argument><literal type="number">20</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenFilter</argument>, <argument>CloseFilter</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Resample</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_in_buf</name> <operator>||</operator> <operator>!</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_in_buf</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_out_rate</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_channels</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_out_rate</name> <operator>==</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_in_buf</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>*</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr></argument>,

<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_in_buf</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>+</operator>

<name>i_nb_channels</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>*</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator>

<call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>,

<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>p_in_buf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bytes_per_frame</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>*</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_out_size</name> <init>= <expr><name>i_bytes_per_frame</name> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name><operator>)</operator> <operator>)</operator>

<operator>+</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>i_buf_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out_buf</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out_buf</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_first</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name>i_out_rate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d_old_factor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_in_nb</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_in</name></decl>, <decl><type ref="prev"/><name>i_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d_factor</name></decl>, <decl><type ref="prev"/><name>d_scale_factor</name></decl>, <decl><type ref="prev"/><name>d_old_scale_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_filter_wing</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Err( p_filter, "old rate: %i, old factor: %f, old wing: %i, i_in: %i",

p_sys-&gt;i_old_rate, p_sys-&gt;d_old_factor,

p_sys-&gt;i_old_wing, i_in_nb );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>==</operator> <name>i_bytes_per_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name></expr> )</condition>

<block>{<block_content> 

<expr_stmt><expr><name>p_in_buf</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_bytes_per_frame</name></expr></argument>,

<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_in_buf</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_bytes_per_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_in_nb</name> <operator>+=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p_in_orig</name> <init>= <expr><name>p_in</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d_factor</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_out_rate</name> <operator>/</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_filter_wing</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SMALL_FILTER_NMULT</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2.0</literal><operator>)</operator> <operator>*</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>,<argument><expr><literal type="number">1.0</literal><operator>/</operator><name>d_factor</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d_old_scale_factor</name> <operator>=</operator> <name>SMALL_FILTER_SCALE</name> <operator>*</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>d_old_factor</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d_scale_factor</name> <operator>=</operator> <name>SMALL_FILTER_SCALE</name> <operator>*</operator> <name>d_factor</name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_in</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>*</operator> <name>i_nb_channels</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_old_in_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>&lt;=</operator> <name>i_in_nb</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_old_in_end</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_filter_wing</name></expr></argument>, <argument><expr><name>i_in_nb</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ResampleFloat</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_out_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_in</name></expr></argument>,

<argument><expr><name>i_in</name></expr></argument>, <argument><expr><name>i_old_in_end</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d_old_factor</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>i_nb_channels</name></expr></argument>, <argument><expr><name>i_bytes_per_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_in</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_in</name></expr></argument>, <argument><expr><name>i_old_in_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_in</name> <operator>&lt;</operator> <name>i_in_nb</name> <operator>-</operator> <name>i_filter_wing</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>d_old_factor</name></name> <operator>=</operator> <name>d_factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>=</operator> <name>i_filter_wing</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_out_buf</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ResampleFloat</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_out_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_in</name></expr></argument>,

<argument><expr><name>i_in</name></expr></argument>, <argument><expr><name>i_in_nb</name> <operator>-</operator> <name>i_filter_wing</name></expr></argument>,

<argument><expr><name>d_factor</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name>i_nb_channels</name></expr></argument>, <argument><expr><name>i_bytes_per_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>i_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>

<name><name>p_out_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>end_date</name></name></expr></argument>,

<argument><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_out_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator>

<name>i_nb_channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_bytes_per_frame</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>newsize</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buf_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>newsize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buf_size</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buf_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_out_buf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument>,

<argument><expr><name>p_in_orig</name> <operator>+</operator> <operator>(</operator><name>i_in_nb</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name><operator>)</operator> <operator>*</operator>

<name>i_nb_channels</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name><operator>)</operator> <operator>*</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Err( p_filter, "p_out size: %i, nb bytes out: %i", p_out_buf-&gt;i_buffer,

i_out * p_filter-&gt;fmt_in.audio.i_bytes_per_frame );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_out_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_out_rate</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name>

<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name>

<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name>

<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_FL32</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_old_wing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>Resample</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"%4.4s/%iKHz/%i-&gt;%4.4s/%iKHz/%i"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name>i_out_rate</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterFloatUP</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>Imp</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>ImpD</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Nwing</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ui_remainder</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>ui_output_rate</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>Inc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_nb_channels</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>Hp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Hdp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>End</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ui_linear_remainder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Hp</name> <operator>=</operator> <operator>&amp;</operator><name><name>Imp</name><index>[<expr><operator>(</operator><name>ui_remainder</name><operator>&lt;&lt;</operator><name>Nhc</name><operator>)</operator><operator>/</operator><name>ui_output_rate</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hdp</name> <operator>=</operator> <operator>&amp;</operator><name><name>ImpD</name><index>[<expr><operator>(</operator><name>ui_remainder</name><operator>&lt;&lt;</operator><name>Nhc</name><operator>)</operator><operator>/</operator><name>ui_output_rate</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>End</name> <operator>=</operator> <operator>&amp;</operator><name><name>Imp</name><index>[<expr><name>Nwing</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ui_linear_remainder</name> <operator>=</operator> <operator>(</operator><name>ui_remainder</name><operator>&lt;&lt;</operator><name>Nhc</name><operator>)</operator> <operator>-</operator>

<operator>(</operator><name>ui_remainder</name><operator>&lt;&lt;</operator><name>Nhc</name><operator>)</operator><operator>/</operator><name>ui_output_rate</name><operator>*</operator><name>ui_output_rate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Inc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content> 

<expr_stmt><expr><name>End</name><operator>--</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>ui_remainder</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content> 

<expr_stmt><expr><name>Hp</name> <operator>+=</operator> <name>Npc</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>Hdp</name> <operator>+=</operator> <name>Npc</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>Hp</name> <operator>&lt;</operator> <name>End</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>Hp</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>*</operator><name>Hdp</name> <operator>*</operator> <name>ui_linear_remainder</name> <operator>/</operator> <name>ui_output_rate</name> <operator>/</operator> <name>Npc</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>*=</operator> <operator>*</operator><operator>(</operator><name>p_in</name><operator>+</operator><name>i</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>+</operator><name>i</name><operator>)</operator> <operator>+=</operator> <name>temp</name></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>Hdp</name> <operator>+=</operator> <name>Npc</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>Hp</name> <operator>+=</operator> <name>Npc</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <operator>(</operator><name>Inc</name> <operator>*</operator> <name>i_nb_channels</name><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterFloatUD</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>Imp</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>ImpD</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>Nwing</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ui_remainder</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>ui_output_rate</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ui_input_rate</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name>Inc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_nb_channels</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>Hp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Hdp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>End</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ui_linear_remainder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ui_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>Hp</name> <operator>=</operator> <name>Imp</name> <operator>+</operator> <operator>(</operator><name>ui_remainder</name><operator>&lt;&lt;</operator><name>Nhc</name><operator>)</operator> <operator>/</operator> <name>ui_input_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hdp</name> <operator>=</operator> <name>ImpD</name> <operator>+</operator> <operator>(</operator><name>ui_remainder</name><operator>&lt;&lt;</operator><name>Nhc</name><operator>)</operator> <operator>/</operator> <name>ui_input_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>End</name> <operator>=</operator> <operator>&amp;</operator><name><name>Imp</name><index>[<expr><name>Nwing</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Inc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content> 

<expr_stmt><expr><name>End</name><operator>--</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>ui_remainder</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content> 

<expr_stmt><expr><name>Hp</name> <operator>=</operator> <name>Imp</name> <operator>+</operator> 

<operator>(</operator><name>ui_output_rate</name> <operator>&lt;&lt;</operator> <name>Nhc</name><operator>)</operator> <operator>/</operator> <name>ui_input_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hdp</name> <operator>=</operator> <name>ImpD</name> <operator>+</operator> 

<operator>(</operator><name>ui_output_rate</name> <operator>&lt;&lt;</operator> <name>Nhc</name><operator>)</operator> <operator>/</operator> <name>ui_input_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ui_counter</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>Hp</name> <operator>&lt;</operator> <name>End</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>Hp</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ui_linear_remainder</name> <operator>=</operator>

<operator>(</operator><operator>(</operator><name>ui_output_rate</name> <operator>*</operator> <name>ui_counter</name> <operator>+</operator> <name>ui_remainder</name><operator>)</operator><operator>&lt;&lt;</operator> <name>Nhc</name><operator>)</operator> <operator>-</operator>

<operator>(</operator><operator>(</operator><name>ui_output_rate</name> <operator>*</operator> <name>ui_counter</name> <operator>+</operator> <name>ui_remainder</name><operator>)</operator><operator>&lt;&lt;</operator> <name>Nhc</name><operator>)</operator> <operator>/</operator>

<name>ui_input_rate</name> <operator>*</operator> <name>ui_input_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>*</operator><name>Hdp</name> <operator>*</operator> <name>ui_linear_remainder</name> <operator>/</operator> <name>ui_input_rate</name> <operator>/</operator> <name>Npc</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nb_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>*=</operator> <operator>*</operator><operator>(</operator><name>p_in</name><operator>+</operator><name>i</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>+</operator><name>i</name><operator>)</operator> <operator>+=</operator> <name>temp</name></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>ui_counter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Hp</name> <operator>=</operator> <name>Imp</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ui_output_rate</name> <operator>*</operator> <name>ui_counter</name> <operator>+</operator> <name>ui_remainder</name><operator>)</operator><operator>&lt;&lt;</operator> <name>Nhc</name><operator>)</operator>

<operator>/</operator> <name>ui_input_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Hdp</name> <operator>=</operator> <name>ImpD</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ui_output_rate</name> <operator>*</operator> <name>ui_counter</name> <operator>+</operator> <name>ui_remainder</name><operator>)</operator><operator>&lt;&lt;</operator> <name>Nhc</name><operator>)</operator>

<operator>/</operator> <name>ui_input_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <operator>(</operator><name>Inc</name> <operator>*</operator> <name>i_nb_channels</name><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReallocBuffer</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_out_buf</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_out</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_bytes_per_frame</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_out</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>pp_out_buf</name><operator>)</operator><operator>-&gt;</operator><name>i_buffer</name></name><operator>/</operator><name>i_bytes_per_frame</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_extra_frame</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_out_buf</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><operator>*</operator><name>pp_out_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><operator>(</operator><operator>*</operator><name>pp_out_buf</name><operator>)</operator><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator>

<name>i_extra_frame</name> <operator>*</operator> <name>i_bytes_per_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_out_buf</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_out</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><operator>(</operator><operator>*</operator><name>pp_out_buf</name><operator>)</operator><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_out</name> <operator>*</operator> <name>i_nb_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>*</operator><name>pp_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_extra_frame</name> <operator>*</operator> <name>i_bytes_per_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResampleFloat</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_out_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_out</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_in_end</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>d_factor</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_factor_old</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_bytes_per_frame</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><operator>*</operator><name>pp_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_out</name> <init>= <expr><operator>*</operator><name>pi_out</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><operator>(</operator><operator>*</operator><name>pp_out_buf</name><operator>)</operator><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>i_out</name> <operator>*</operator> <name>i_nb_channels</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_in</name> <operator>&lt;</operator> <name>i_in_end</name></expr>;</condition> <incr><expr><name>i_in</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_factor_old</name> <operator>&amp;&amp;</operator> <name>d_factor</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ReallocBuffer</name><argument_list>( <argument><expr><name>pp_out_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_out</name></expr></argument>,

<argument><expr><name>i_out</name></expr></argument>, <argument><expr><name>i_nb_channels</name></expr></argument>, <argument><expr><name>i_bytes_per_frame</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>i_bytes_per_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_nb_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_nb_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_out</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>&lt;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ReallocBuffer</name><argument_list>( <argument><expr><name>pp_out_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_out</name></expr></argument>,

<argument><expr><name>i_out</name></expr></argument>, <argument><expr><name>i_nb_channels</name></expr></argument>, <argument><expr><name>i_bytes_per_frame</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>d_factor</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FilterFloatUP</name><argument_list>( <argument><expr><name>SMALL_FILTER_FLOAT_IMP</name></expr></argument>, <argument><expr><name>SMALL_FILTER_FLOAT_IMPD</name></expr></argument>,

<argument><expr><name>SMALL_FILTER_NWING</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_remainder</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FilterFloatUP</name><argument_list>( <argument><expr><name>SMALL_FILTER_FLOAT_IMP</name></expr></argument>, <argument><expr><name>SMALL_FILTER_FLOAT_IMPD</name></expr></argument>,

<argument><expr><name>SMALL_FILTER_NWING</name></expr></argument>, <argument><expr><name>p_in</name> <operator>+</operator> <name>i_nb_channels</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>-</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_remainder</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

for( i = 0; i &lt; i_nb_channels; i++ )

{

*(p_out+i) *= d_old_scale_factor;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>FilterFloatUD</name><argument_list>( <argument><expr><name>SMALL_FILTER_FLOAT_IMP</name></expr></argument>, <argument><expr><name>SMALL_FILTER_FLOAT_IMPD</name></expr></argument>,

<argument><expr><name>SMALL_FILTER_NWING</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_remainder</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FilterFloatUD</name><argument_list>( <argument><expr><name>SMALL_FILTER_FLOAT_IMP</name></expr></argument>, <argument><expr><name>SMALL_FILTER_FLOAT_IMPD</name></expr></argument>,

<argument><expr><name>SMALL_FILTER_NWING</name></expr></argument>, <argument><expr><name>p_in</name> <operator>+</operator> <name>i_nb_channels</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>-</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_remainder</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_nb_channels</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_nb_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_out</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>+=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_nb_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_remainder</name></name> <operator>-=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pp_in</name> <operator>=</operator> <name>p_in</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_out</name> <operator>=</operator> <name>i_out</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
