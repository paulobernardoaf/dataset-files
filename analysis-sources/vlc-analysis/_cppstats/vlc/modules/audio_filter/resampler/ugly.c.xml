<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_filter\resampler\ugly.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CreateResampler</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Nearest-neighbor audio resampler"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio converter"</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_RESAMPLER</argument> )</argument_list></macro>

<macro><name>set_callback</name><argument_list>( <argument>Create</argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio resampler"</literal></argument>, <argument><literal type="number">2</literal></argument> )</argument_list></macro>

<macro><name>set_callback</name><argument_list>( <argument>CreateResampler</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>CreateResampler</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CreateResampler</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name>

<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name>

<operator>||</operator> <operator>!</operator><call><name>AOUT_FMT_LINEAR</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_in_buf</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out_buf</name> <init>= <expr><name>p_in_buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_out_nb</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name>

<operator>*</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>framesize</name> <init>= <expr><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator>

<operator>*</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&gt;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_out_buf</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_out_nb</name> <operator>*</operator> <name>framesize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out_buf</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_remainder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>i_out_nb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_out_nb</name> <operator>*</operator> <name>framesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>i_out_nb</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_out</name> <operator>!=</operator> <name>p_in</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>framesize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>framesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_out_nb</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_remainder</name> <operator>+=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>i_remainder</name> <operator>&gt;=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>framesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_remainder</name> <operator>-=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>p_in_buf</name> <operator>!=</operator> <name>p_out_buf</name></expr> )</condition><block type="pseudo"><block_content>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_out_buf</name></expr>;</return>

</block_content>}</block></function>

</unit>
