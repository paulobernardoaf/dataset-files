<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_filter\resampler\soxr.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;soxr.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOXR_QUALITY_TEXT</name></cpp:macro> <cpp:value>N_( "Resampling quality" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOXR_QUALITY_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Resampling quality, from worst to best" )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>soxr_resampler_quality_vlclist</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>soxr_resampler_quality_vlctext</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"Quick cubic interpolation"</literal></expr>,

<expr><literal type="string">"Low 16-bit with larger roll-off"</literal></expr>,

<expr><literal type="string">"Medium 16-bit with medium roll-off"</literal></expr>,

<expr><literal type="string">"High quality"</literal></expr>,

<expr><literal type="string">"Very high quality"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>soxr_datatype_t</name></type> <name><name>soxr_resampler_quality_list</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>SOXR_QQ</name></expr>,

<expr><name>SOXR_LQ</name></expr>,

<expr><name>SOXR_MQ</name></expr>,

<expr><name>SOXR_HQ</name></expr>,

<expr><name>SOXR_VHQ</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SOXR_QUALITY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenConverter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenResampler</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"SoX Resampler"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_RESAMPLER</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"soxr-resampler-quality"</literal></argument>, <argument><literal type="number">2</literal></argument>,

<argument>SOXR_QUALITY_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>soxr_resampler_quality_vlclist</argument>,

<argument>soxr_resampler_quality_vlctext</argument> )</argument_list></macro>

<macro><name>set_capability</name> <argument_list>( <argument><literal type="string">"audio converter"</literal></argument>, <argument><literal type="number">51</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenConverter</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio resampler"</literal></argument>, <argument><literal type="number">51</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenResampler</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"soxr"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>soxr_t</name></type> <name>soxr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soxr_t</name></type> <name>vr_soxr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soxr_t</name></type> <name>last_soxr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_fixed_ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_last_olen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Resample</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Drain</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type>

<name>SoXR_GetFormat</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_format</name></decl></parameter>, <parameter><decl><type><name>soxr_datatype_t</name> <modifier>*</modifier></type><name>p_type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_format</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>p_type</name> <operator>=</operator> <name>SOXR_FLOAT64_I</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>p_type</name> <operator>=</operator> <name>SOXR_FLOAT32_I</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>p_type</name> <operator>=</operator> <name>SOXR_INT32_I</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>p_type</name> <operator>=</operator> <name>SOXR_INT16_I</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_change_ratio</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>soxr_datatype_t</name></type> <name>i_itype</name></decl>, <decl><type ref="prev"/><name>i_otype</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SoXR_GetFormat</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_itype</name></expr></argument> )</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>SoXR_GetFormat</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_otype</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_vlc_q</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"soxr-resampler-quality"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_vlc_q</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_vlc_q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_vlc_q</name> <operator>&gt;</operator> <name>MAX_SOXR_QUALITY</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_vlc_q</name> <operator>=</operator> <name>MAX_SOXR_QUALITY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>i_recipe</name> <init>= <expr><name><name>soxr_resampler_quality_list</name><index>[<expr><name>i_vlc_q</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_channels</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>f_ratio</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name>

<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_fixed_ratio</name></name> <operator>=</operator> <name>f_ratio</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>soxr_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soxr_io_spec_t</name></type> <name>io_spec</name> <init>= <expr><call><name>soxr_io_spec</name><argument_list>( <argument><expr><name>i_itype</name></expr></argument>, <argument><expr><name>i_otype</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soxr_quality_spec_t</name></type> <name>q_spec</name> <init>= <expr><call><name>soxr_quality_spec</name><argument_list>( <argument><expr><name>i_recipe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>soxr</name></name> <operator>=</operator> <call><name>soxr_create</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f_ratio</name></expr></argument>, <argument><expr><name>i_channels</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q_spec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>error</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"soxr_create failed: %s"</literal></expr></argument>, <argument><expr><call><name>soxr_strerror</name><argument_list>( <argument><expr><name>error</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_change_ratio</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>q_spec</name> <operator>=</operator> <call><name>soxr_quality_spec</name><argument_list>( <argument><expr><name>SOXR_LQ</name></expr></argument>, <argument><expr><name>SOXR_VR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vr_soxr</name></name> <operator>=</operator> <call><name>soxr_create</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f_ratio</name></expr></argument>, <argument><expr><name>i_channels</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q_spec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>error</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"soxr_create failed: %s"</literal></expr></argument>, <argument><expr><call><name>soxr_strerror</name><argument_list>( <argument><expr><name>error</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>soxr_delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>soxr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>soxr_set_io_ratio</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vr_soxr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <name>f_ratio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Using SoX Resampler with '%s' engine and '%s' quality "</literal>

<literal type="string">"to convert %4.4s/%dHz to %4.4s/%dHz."</literal></expr></argument>,

<argument><expr><call><name>soxr_engine</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>soxr</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>soxr_resampler_quality_vlctext</name><index>[<expr><name>i_vlc_q</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>Resample</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_drain</name></name> <operator>=</operator> <name>Drain</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>OpenResampler</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>Open</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>OpenConverter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>Open</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>soxr_delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>soxr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>vr_soxr</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>soxr_delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vr_soxr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>

<name>SoXR_Resample</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>soxr_t</name></type> <name>soxr</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_olen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_idone</name></decl>, <decl><type ref="prev"/><name>i_odone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_oframesize</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_ilen</name> <init>= <expr><ternary><condition><expr><name>p_in</name></expr> ?</condition><then> <expr><name><name>p_in</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ilen</name> <operator>&gt;=</operator> <name>i_olen</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_olen</name> <operator>=</operator> <name>i_ilen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name>p_in</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_olen</name> <operator>*</operator> <name>i_oframesize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>soxr_error_t</name></type> <name>error</name> <init>= <expr><call><name>soxr_process</name><argument_list>( <argument><expr><name>soxr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_in</name></expr> ?</condition><then> <expr><name><name>p_in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>i_ilen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_idone</name></expr></argument>, <argument><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name>i_olen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_odone</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>error</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"soxr_process failed: %s"</literal></expr></argument>, <argument><expr><call><name>soxr_strerror</name><argument_list>( <argument><expr><name>error</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>i_idone</name> <operator>&lt;</operator> <name>i_ilen</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"lost %zd of %zd input frames"</literal></expr></argument>,

<argument><expr><name>i_ilen</name> <operator>-</operator> <name>i_idone</name></expr></argument>, <argument><expr><name>i_idone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_odone</name> <operator>*</operator> <name>i_oframesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>i_odone</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i_odone</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_in</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_olen</name></name> <operator>=</operator> <name>i_olen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name> <operator>=</operator> <name>soxr</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>soxr_clear</name><argument_list>( <argument><expr><name>soxr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_olen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_in</name> <operator>&amp;&amp;</operator> <name>p_out</name> <operator>!=</operator> <name>p_in</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>SoXR_GetOutLen</name><parameter_list>( <parameter><decl><type><name>size_t</name></type> <name>i_ilen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f_ratio</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>lrint</name><argument_list>( <argument><expr><operator>(</operator> <name>i_ilen</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>*</operator> <name>f_ratio</name> <operator>*</operator> <literal type="number">11.</literal> <operator>/</operator> <literal type="number">10.</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>

<name>Resample</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_pts</name> <init>= <expr><name><name>p_in</name><operator>-&gt;</operator><name>i_pts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>vr_soxr</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>soxr_t</name></type> <name>soxr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_flushed_out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>f_ratio</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name>

<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_olen</name> <init>= <expr><call><name>SoXR_GetOutLen</name><argument_list>( <argument><expr><name><name>p_in</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>, <argument><expr><name>f_ratio</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>f_ratio</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_fixed_ratio</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>soxr_set_io_ratio</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vr_soxr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <name>f_ratio</name></expr></argument>, <argument><expr><name>i_olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>soxr</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>vr_soxr</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>f_ratio</name> <operator>==</operator> <literal type="number">1.0f</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>soxr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name>p_in</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>soxr</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>soxr</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name> <operator>&amp;&amp;</operator> <name>soxr</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_olen</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_flushed_out</name> <operator>=</operator> <call><name>SoXR_Resample</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_olen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>soxr</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Using '%s' engine"</literal></expr></argument>, <argument><expr><call><name>soxr_engine</name><argument_list>( <argument><expr><name>soxr</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>soxr</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>SoXR_Resample</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>soxr</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>i_olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_flushed_out</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_nb_samples</name> <init>= <expr><name><name>p_flushed_out</name><operator>-&gt;</operator><name>i_nb_samples</name></name>

<operator>+</operator> <name><name>p_out</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_flushed_out</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>block_ChainGather</name><argument_list>( <argument><expr><name>p_flushed_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>i_nb_samples</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>

<return>return <expr><name>p_out</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_olen</name> <init>= <expr><call><name>SoXR_GetOutLen</name><argument_list>( <argument><expr><name><name>p_in</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_fixed_ratio</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><call><name>SoXR_Resample</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>soxr</name></name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>i_olen</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_out</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_out</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>

<name>Drain</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_olen</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>SoXR_Resample</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_olen</name></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Flush</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>soxr_clear</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_olen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_soxr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
