<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_filter\converter\format.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Audio filter for PCM format conversion"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_AUDIO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_AUDIO_MISC</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio converter"</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <function_decl><type><name>block_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>cvt_t</name>)<parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>cvt_t</name></type> <name>FindConversion</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AOUT_FMTS_SIMILAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <call><name>FindConversion</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"%4.4s-&gt;%4.4s, bits per sample: %i-&gt;%i"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>U8toS16</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bdst</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bdst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>bdst</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>bsrc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>bdst</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt></block_content></block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bdst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>U8toFl32</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bdst</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bdst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>bdst</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>bsrc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>bdst</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>-</operator> <literal type="number">128</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">128.f</literal></expr>;</expr_stmt></block_content></block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bdst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>U8toS32</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bdst</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bdst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>bdst</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>bsrc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>bdst</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt></block_content></block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bdst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>U8toFl64</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bdst</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bdst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>bdst</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>bsrc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>bdst</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>-</operator> <literal type="number">128</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">128.</literal></expr>;</expr_stmt></block_content></block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bdst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>S16toU8</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>S16toFl32</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bdst</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bdst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>bdst</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>bsrc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>bdst</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

*dst++ = (float)*src++ / 32768.f;

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content> 

<union>union <block>{ <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>u</name></decl>;</union>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>+</operator> <literal type="number">0x43c00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>u</name><operator>.</operator><name>f</name></name> <operator>-</operator> <literal type="number">384.f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bdst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>S16toS32</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bdst</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bdst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>bdst</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>bsrc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>bdst</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bdst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>S16toFl64</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bdst</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bdst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>bdst</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>bsrc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>bdst</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>*</operator><name>src</name><operator>++</operator> <operator>/</operator> <literal type="number">32768.</literal></expr>;</expr_stmt></block_content></block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bdst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Fl32toU8</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>*</operator> <literal type="number">128.f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <literal type="number">127.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">128.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>lroundf</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Fl32toS16</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (*src &gt;= 1.0) *dst = 32767;

else if (*src &lt; -1.0) *dst = -32768;

else *dst = lroundf(*src * 32768.f);

src++; dst++;

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<union>union <block>{ <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>u</name></decl>;</union>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>+</operator> <literal type="number">384.f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0x43c07fff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0x43bf8000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>u</name><operator>.</operator><name>i</name></name> <operator>-</operator> <literal type="number">0x43c00000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Fl32toS32</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>*</operator> <literal type="number">2147483648.f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <literal type="number">2147483647.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">2147483647</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">2147483648.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">2147483648</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>lroundf</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Fl32toFl64</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bdst</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bdst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>bdst</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>bsrc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>bdst</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bdst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>S32toU8</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>S32toS16</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>S32toFl32</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>/</operator> <literal type="number">2147483648.f</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>S32toFl64</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>bdst</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>bdst</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>bdst</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>bsrc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>bdst</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>bsrc</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>/</operator> <literal type="number">2147483648.</literal></expr>;</expr_stmt></block_content></block></for>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bdst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Fl64toU8</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>*</operator> <literal type="number">128.</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <literal type="number">127.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">128.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>lround</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Fl64toS16</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>v</name> <init>= <expr><operator>*</operator><name>src</name><operator>++</operator> <operator>*</operator> <literal type="number">32768.</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">32767.</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>v</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">32768.</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>lround</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Fl64toFl32</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Fl64toS32</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>*</operator><operator>(</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>*</operator> <literal type="number">2147483648.</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <literal type="number">2147483647.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">2147483647</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">2147483648.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">2147483648</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>lround</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cvt_t</name></type> <name>convert</name></decl>;</decl_stmt>

}</block> <decl><name><name>cvt_directs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_U8</name></expr>, <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>U8toS16</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_U8</name></expr>, <expr><name>VLC_CODEC_FL32</name></expr>, <expr><name>U8toFl32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_U8</name></expr>, <expr><name>VLC_CODEC_S32N</name></expr>, <expr><name>U8toS32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_U8</name></expr>, <expr><name>VLC_CODEC_FL64</name></expr>, <expr><name>U8toFl64</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>VLC_CODEC_U8</name></expr>, <expr><name>S16toU8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>VLC_CODEC_FL32</name></expr>, <expr><name>S16toFl32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>VLC_CODEC_S32N</name></expr>, <expr><name>S16toS32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>VLC_CODEC_FL64</name></expr>, <expr><name>S16toFl64</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_FL32</name></expr>, <expr><name>VLC_CODEC_U8</name></expr>, <expr><name>Fl32toU8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_FL32</name></expr>, <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>Fl32toS16</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_FL32</name></expr>, <expr><name>VLC_CODEC_S32N</name></expr>, <expr><name>Fl32toS32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_FL32</name></expr>, <expr><name>VLC_CODEC_FL64</name></expr>, <expr><name>Fl32toFl64</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S32N</name></expr>, <expr><name>VLC_CODEC_U8</name></expr>, <expr><name>S32toU8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S32N</name></expr>, <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>S32toS16</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S32N</name></expr>, <expr><name>VLC_CODEC_FL32</name></expr>, <expr><name>S32toFl32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_S32N</name></expr>, <expr><name>VLC_CODEC_FL64</name></expr>, <expr><name>S32toFl64</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_FL64</name></expr>, <expr><name>VLC_CODEC_U8</name></expr>, <expr><name>Fl64toU8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_FL64</name></expr>, <expr><name>VLC_CODEC_S16N</name></expr>, <expr><name>Fl64toS16</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_FL64</name></expr>, <expr><name>VLC_CODEC_FL32</name></expr>, <expr><name>Fl64toFl32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_FL64</name></expr>, <expr><name>VLC_CODEC_S32N</name></expr>, <expr><name>Fl64toS32</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>cvt_t</name></type> <name>FindConversion</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>cvt_directs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>convert</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cvt_directs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>src</name> <operator>==</operator> <name>src</name> <operator>&amp;&amp;</operator>

<name><name>cvt_directs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dst</name> <operator>==</operator> <name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>cvt_directs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>convert</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
