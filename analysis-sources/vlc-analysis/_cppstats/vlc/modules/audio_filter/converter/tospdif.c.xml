<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_filter\converter\tospdif.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/a52.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/dts_header.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_MISC</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Audio filter for A/52/DTS-&gt;S/PDIF encapsulation"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio converter"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_out_offset</name></decl>;</decl_stmt>

<union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_blocks</name></decl>;</decl_stmt>

}</block> <decl><name>eac3</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_frame_count</name></decl>;</decl_stmt>

}</block> <decl><name>truehd</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_skip</name></decl>;</decl_stmt>

}</block> <decl><name>dtshd</name></decl>;</struct>

}</block>;</union>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPDIF_HEADER_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61937_AC3</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61937_EAC3</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61937_TRUEHD</name></cpp:macro> <cpp:value>0x16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61937_DTS1</name></cpp:macro> <cpp:value>0x0B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61937_DTS2</name></cpp:macro> <cpp:value>0x0C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61937_DTS3</name></cpp:macro> <cpp:value>0x0D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61937_DTSHD</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPDIF_MORE_DATA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPDIF_SUCCESS</name></cpp:macro> <cpp:value>VLC_SUCCESS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPDIF_ERROR</name></cpp:macro> <cpp:value>VLC_EGENERIC</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_big_endian</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MLP</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_TRUEHD</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DTSHD</name></expr>:</case>

<return>return <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x1F</literal>

<operator>||</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x7F</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_16</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_val</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>==</operator> <name>VLC_CODEC_SPDIFB</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetWLE</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_16</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_val</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name>

<operator>&gt;=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint16_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_16</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>i_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint16_t</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_padding</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>&gt;=</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_data</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_input_big_endian</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_output_big_endian</name> <init>=

<expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>==</operator> <name>VLC_CODEC_SPDIFB</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><name>p_buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>&gt;=</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_input_big_endian</name> <operator>!=</operator> <name>b_output_big_endian</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>swab</name><argument_list>( <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>i_size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>i_size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>+=</operator> <operator>(</operator> <name>i_size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <operator>(</operator> <name>i_size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_16</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name><name>p_in</name><index>[<expr><name>i_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_buffer</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><call><name>is_big_endian</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_init</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_out_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_nb_samples</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_out_size</name> <operator>&gt;</operator> <name>SPDIF_HEADER_SIZE</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_out_size</name> <operator>&amp;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name>i_nb_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>=</operator> <name>SPDIF_HEADER_SIZE</name></expr>;</expr_stmt> 

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_finalize</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_data_type</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_length_mul</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_data_type</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>&gt;</operator> <name>SPDIF_HEADER_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_length_mul</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_length_mul</name> <operator>==</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_16</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xf872</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>set_16</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x4e1f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>set_16</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_data_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>set_16</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>-</operator> <name>SPDIF_HEADER_SIZE</name> <operator>)</operator> <operator>*</operator> <name>i_length_mul</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_padding</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_buffer_ac3</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>a52_size</name> <init>= <expr><name>A52_FRAME_NB</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">6</literal>

<operator>||</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>SPDIF_HEADER_SIZE</name> <operator>&gt;</operator> <name>a52_size</name>

<operator>||</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>!=</operator> <name>A52_FRAME_NB</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_a52_header_t</name></type> <name>a52</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_a52_header_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>a52</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>VLC_SUCCESS</name> <operator>||</operator> <name><name>a52</name><operator>.</operator><name>b_eac3</name></name> <operator>||</operator> <name><name>a52</name><operator>.</operator><name>i_size</name></name> <operator>&gt;</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>a52</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>a52</name><operator>.</operator><name>i_samples</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>SPDIF_HEADER_SIZE</name> <operator>&gt;</operator> <name>a52_size</name>

<operator>||</operator> <call><name>write_init</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument>, <argument><expr><name>a52_size</name></expr></argument>, <argument><expr><name>A52_FRAME_NB</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_buffer</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_finalize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>IEC61937_AC3</name> <operator>|</operator>

<operator>(</operator> <operator>(</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator></expr></argument> ,

<argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>SPDIF_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_buffer_eac3</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_a52_header_t</name></type> <name>a52</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_a52_header_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>a52</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call>

<operator>!=</operator> <name>VLC_SUCCESS</name> <operator>||</operator> <name><name>a52</name><operator>.</operator><name>i_size</name></name> <operator>&gt;</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name><name>a52</name><operator>.</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_a52_header_t</name></type> <name>a52_dep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dep_buf</name> <init>= <expr><operator>&amp;</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>a52</name><operator>.</operator><name>i_size</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>dep_size</name> <init>= <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>a52</name><operator>.</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_a52_header_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>a52_dep</name></expr></argument>, <argument><expr><name>dep_buf</name></expr></argument>, <argument><expr><name>dep_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name>

<operator>||</operator> <name><name>a52_dep</name><operator>.</operator><name>i_size</name></name> <operator>&gt;</operator> <name>dep_size</name>

<operator>||</operator> <operator>!</operator><name><name>a52_dep</name><operator>.</operator><name>b_eac3</name></name> <operator>||</operator> <name><name>a52_dep</name><operator>.</operator><name>bs</name><operator>.</operator><name>eac3</name><operator>.</operator><name>strmtyp</name></name> <operator>!=</operator> <name>EAC3_STRMTYP_DEPENDENT</name>

<operator>||</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name><name>a52</name><operator>.</operator><name>i_size</name></name> <operator>+</operator> <name><name>a52_dep</name><operator>.</operator><name>i_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name>

<operator>&amp;&amp;</operator> <call><name>write_init</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument>, <argument><expr><name>AOUT_SPDIF_SIZE</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>AOUT_SPDIF_SIZE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_buffer</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_nb_blocks</name></name> <operator>+=</operator> <name><name>a52</name><operator>.</operator><name>i_blocks_per_sync_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_nb_blocks</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_MORE_DATA</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_nb_blocks</name></name> <operator>&gt;</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_finalize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>IEC61937_EAC3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_nb_blocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>SPDIF_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_buffer_truehd</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUEHD_FRAME_OFFSET</name></cpp:macro> <cpp:value>2560</cpp:value></cpp:define>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name>

<operator>&amp;&amp;</operator> <call><name>write_init</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument>, <argument><expr><literal type="number">61440</literal></expr></argument>, <argument><expr><literal type="number">61440</literal> <operator>/</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>truehd</name><operator>.</operator><name>i_frame_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>p_mat_start_code</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xE0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_mat_start_code</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_padding</name> <operator>=</operator> <name>TRUEHD_FRAME_OFFSET</name> <operator>-</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">20</literal>

<operator>-</operator> <name>SPDIF_HEADER_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>truehd</name><operator>.</operator><name>i_frame_count</name></name> <operator>==</operator> <literal type="number">11</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_padding</name> <operator>=</operator> <name>TRUEHD_FRAME_OFFSET</name> <operator>-</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>truehd</name><operator>.</operator><name>i_frame_count</name></name> <operator>==</operator> <literal type="number">12</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>p_mat_middle_code</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xFA</literal></expr>,

<expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xE0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_mat_middle_code</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_padding</name> <operator>=</operator> <name>TRUEHD_FRAME_OFFSET</name> <operator>-</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <operator>(</operator> <literal type="number">12</literal> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>truehd</name><operator>.</operator><name>i_frame_count</name></name> <operator>==</operator> <literal type="number">23</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>p_mat_end_code</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x11</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_padding</name> <operator>=</operator> <name>TRUEHD_FRAME_OFFSET</name> <operator>-</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>i_padding</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_padding</name></expr></argument> &gt;</argument_list></name>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_buffer</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_padding</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_padding</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_mat_end_code</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_finalize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>IEC61937_TRUEHD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>truehd</name><operator>.</operator><name>i_frame_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>SPDIF_SUCCESS</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_padding</name> <operator>=</operator> <name>TRUEHD_FRAME_OFFSET</name> <operator>-</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>i_padding</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>i_padding</name></expr></argument> &gt;</argument_list></name>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_buffer</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_padding</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_padding</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>truehd</name><operator>.</operator><name>i_frame_count</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>SPDIF_MORE_DATA</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_buffer_dts</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dts_header_t</name></type> <name>core</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_dts_header_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>core</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>core</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>core</name><operator>.</operator><name>i_frame_size</name></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">512</literal></expr>:</case>

<expr_stmt><expr><name>i_data_type</name> <operator>=</operator> <name>IEC61937_DTS1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1024</literal></expr>:</case>

<expr_stmt><expr><name>i_data_type</name> <operator>=</operator> <name>IEC61937_DTS2</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2048</literal></expr>:</case>

<expr_stmt><expr><name>i_data_type</name> <operator>=</operator> <name>IEC61937_DTS3</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Frame size %d not supported"</literal></expr></argument>,

<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>core</name><operator>.</operator><name>syncword</name></name> <operator>==</operator> <name>DTS_SYNC_CORE_14BITS_BE</name> <operator>||</operator>

<name><name>core</name><operator>.</operator><name>syncword</name></name> <operator>==</operator> <name>DTS_SYNC_CORE_14BITS_LE</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>write_init</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_size</name> <init>= <expr><call><name>vlc_dts_header_Convert14b16b</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr></argument>,

<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>==</operator> <name>VLC_CODEC_SPDIFL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name>SPDIF_HEADER_SIZE</name> <operator>&gt;</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>write_init</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_buffer</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>write_finalize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_data_type</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>SPDIF_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dtshd_get_subtype</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>i_frame_length</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_frame_length</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">512</literal></expr>:</case> <return>return <expr><literal type="number">0x0</literal></expr>;</return>

<case>case <expr><literal type="number">1024</literal></expr>:</case> <return>return <expr><literal type="number">0x1</literal></expr>;</return>

<case>case <expr><literal type="number">2048</literal></expr>:</case> <return>return <expr><literal type="number">0x2</literal></expr>;</return>

<case>case <expr><literal type="number">4096</literal></expr>:</case> <return>return <expr><literal type="number">0x3</literal></expr>;</return>

<case>case <expr><literal type="number">8192</literal></expr>:</case> <return>return <expr><literal type="number">0x4</literal></expr>;</return>

<case>case <expr><literal type="number">16384</literal></expr>:</case> <return>return <expr><literal type="number">0x5</literal></expr>;</return>

<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_buffer_dtshd</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>p_dtshd_start_code</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xfe</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>i_dtshd_start_code</name> <init>= <expr><sizeof>sizeof<argument_list>( <argument><expr><name>p_dtshd_start_code</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dts_header_t</name></type> <name>core</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_dts_header_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>core</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_period</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name>

<operator>*</operator> <name><name>core</name><operator>.</operator><name>i_frame_length</name></name> <operator>/</operator> <name><name>core</name><operator>.</operator><name>i_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_subtype</name> <init>= <expr><call><name>dtshd_get_subtype</name><argument_list>( <argument><expr><name>i_period</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_subtype</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_in_size</name> <init>= <expr><name>i_dtshd_start_code</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_out_size</name> <init>= <expr><name>i_period</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_type</name> <init>= <expr><name>IEC61937_DTSHD</name> <operator>|</operator> <name>i_subtype</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>dtshd</name><operator>.</operator><name>b_skip</name></name>

<operator>||</operator> <name>i_in_size</name> <operator>+</operator> <name>SPDIF_HEADER_SIZE</name> <operator>&gt;</operator> <name>i_out_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name><name>core</name><operator>.</operator><name>i_frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_in_size</name> <operator>=</operator> <name>i_dtshd_start_code</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_in_size</name> <operator>+</operator> <name>SPDIF_HEADER_SIZE</name> <operator>&gt;</operator> <name>i_out_size</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dtshd</name><operator>.</operator><name>b_skip</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>write_init</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument>, <argument><expr><name>i_out_size</name></expr></argument>,

<argument><expr><name>i_out_size</name> <operator>/</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>SPDIF_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_data</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_dtshd_start_code</name></expr></argument>, <argument><expr><name>i_dtshd_start_code</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_16</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_buffer</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_align</name> <init>= <expr><call><name>vlc_align</name><argument_list>( <argument><expr><name>i_in_size</name> <operator>+</operator> <literal type="number">0x8</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">0x8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_align</name> <operator>&gt;</operator> <name>i_in_size</name> <operator>&amp;&amp;</operator> <name>i_align</name> <operator>-</operator> <name>i_in_size</name>

<operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_padding</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_align</name> <operator>-</operator> <name>i_in_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_finalize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_data_type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>SPDIF_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_TRUEHD</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>truehd</name><operator>.</operator><name>i_frame_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_nb_blocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>write_buffer_ac3</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>write_buffer_eac3</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MLP</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_TRUEHD</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>write_buffer_truehd</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DTSHD</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>write_buffer_dtshd</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>write_buffer_dts</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><name>i_ret</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SPDIF_SUCCESS</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_out_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_buf</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_out_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPDIF_MORE_DATA</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>SPDIF_ERROR</name></expr>:</case>

<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_out_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_DTS</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_DTSHD</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_A52</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_EAC3</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_MLP</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_TRUEHD</name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_SPDIFL</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_SPDIFB</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Flush</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
