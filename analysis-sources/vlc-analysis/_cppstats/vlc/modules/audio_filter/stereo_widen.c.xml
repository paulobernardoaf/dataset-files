<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_filter\stereo_widen.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Filter</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>paramCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter> ,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter> , <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_ringbuf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_write</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>f_delay</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>f_feedback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_crossfeed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_dry_mix</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_TEXT</name></cpp:macro> <cpp:value>N_("This filter enhances the stereo effect by ""suppressing mono (signal common to both channels) ""and by delaying the signal of left into right and vice versa, ""thereby widening the stereo effect.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELAY_TEXT</name></cpp:macro> <cpp:value>N_("Delay time")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELAY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Time in ms of the delay of left signal into right ""and vice versa.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEEDBACK_TEXT</name></cpp:macro> <cpp:value>N_("Feedback gain")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEEDBACK_LONGTEXT</name></cpp:macro> <cpp:value>N_("Amount of gain in delayed left signal into ""right and vice versa. Gives a delay effect of left signal in ""right output and vice versa which gives widening effect.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROSSFEED_TEXT</name></cpp:macro> <cpp:value>N_("Crossfeed")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROSSFEED_LONGTEXT</name></cpp:macro> <cpp:value>N_("Cross feed of left into right with inverted ""phase. This helps in suppressing the mono. If the value is 1 it ""will cancel all the signal common to both channels.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRYMIX_TEXT</name></cpp:macro> <cpp:value>N_("Dry mix")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRYMIX_LONGTEXT</name></cpp:macro> <cpp:value>N_("Level of input signal of original channel.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_PREFIX</name></cpp:macro> <cpp:value>"stereowiden-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Stereo Enhancer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Simple stereo widening effect"</literal>)</argument> )</argument_list></macro>

<macro><name>set_help</name><argument_list>( <argument>HELP_TEXT</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AFILTER</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument>CONFIG_PREFIX <literal type="string">"delay"</literal></argument>, <argument><literal type="number">20</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">100</literal></argument>,

<argument>DELAY_TEXT</argument>, <argument>DELAY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument>CONFIG_PREFIX <literal type="string">"feedback"</literal></argument>, <argument><literal type="number">0.3</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">0.9</literal></argument>,

<argument>FEEDBACK_TEXT</argument>, <argument>FEEDBACK_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument>CONFIG_PREFIX <literal type="string">"crossfeed"</literal></argument>, <argument><literal type="number">0.3</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">0.8</literal></argument>,

<argument>CROSSFEED_TEXT</argument>, <argument>CROSSFEED_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument>CONFIG_PREFIX <literal type="string">"dry-mix"</literal></argument>, <argument><literal type="number">0.8</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>,

<argument>DRYMIX_TEXT</argument>, <argument>DRYMIX_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MakeRingBuffer</name><parameter_list>( <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_buffer</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_write</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_delay</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_rate</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_size</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>f_delay</name> <operator>*</operator> <name>i_rate</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>i_size</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><operator>*</operator><name>pp_buffer</name></expr></argument>, <argument><expr><name>i_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_realloc</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_realloc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_write</name> <operator>=</operator> <operator>*</operator><name>pp_buffer</name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_buffer</name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>!=</operator> <name>VLC_CODEC_FL32</name> <operator>||</operator>

<operator>!</operator><call><name>AOUT_FMTS_IDENTICAL</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"stereo enhance requires stereo"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_VAR</name><parameter_list>( <parameter><type><name>stor</name></type></parameter>, <parameter><type><name>var</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>p_sys-&gt;stor = var_CreateGetFloat( p_aout, var ); var_AddCallback( p_aout, var, paramCallback, p_sys );</cpp:value></cpp:define>

<macro><name>CREATE_VAR</name><argument_list>( <argument>f_delay</argument>, <argument>CONFIG_PREFIX <literal type="string">"delay"</literal></argument> )</argument_list></macro>

<macro><name>CREATE_VAR</name><argument_list>( <argument>f_feedback</argument>, <argument>CONFIG_PREFIX <literal type="string">"feedback"</literal></argument> )</argument_list></macro>

<macro><name>CREATE_VAR</name><argument_list>( <argument>f_crossfeed</argument>, <argument>CONFIG_PREFIX <literal type="string">"crossfeed"</literal></argument> )</argument_list></macro>

<macro><name>CREATE_VAR</name><argument_list>( <argument>f_dry_mix</argument>, <argument>CONFIG_PREFIX <literal type="string">"dry-mix"</literal></argument> )</argument_list></macro>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_ringbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>MakeRingBuffer</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pf_ringbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pf_write</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_delay</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_read</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>pf_read</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pf_read</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pf_ringbuf</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_len</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pf_read</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pf_ringbuf</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>left</name> <init>= <expr><name><name>p_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>right</name> <init>= <expr><name><name>p_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_dry_mix</name></name> <operator>*</operator> <name>left</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_crossfeed</name></name> <operator>*</operator> <name>right</name>

<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_feedback</name></name> <operator>*</operator> <name><name>pf_read</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_out</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_dry_mix</name></name> <operator>*</operator> <name>right</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_crossfeed</name></name> <operator>*</operator> <name>left</name>

<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_feedback</name></name> <operator>*</operator> <name><name>pf_read</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pf_write</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>left</name></expr> ;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pf_write</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pf_ringbuf</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_len</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_write</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pf_ringbuf</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_aout</name> <init>= <expr><call><name>vlc_object_parent</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEL_VAR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var_DelCallback( p_aout, var, paramCallback, p_sys ); var_Destroy( p_aout, var );</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DEL_VAR</name><argument_list>( <argument><expr><name>CONFIG_PREFIX</name> <literal type="string">"feedback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEL_VAR</name><argument_list>( <argument><expr><name>CONFIG_PREFIX</name> <literal type="string">"crossfeed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEL_VAR</name><argument_list>( <argument><expr><name>CONFIG_PREFIX</name> <literal type="string">"dry-mix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEL_VAR</name><argument_list>( <argument><expr><name>CONFIG_PREFIX</name> <literal type="string">"delay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_ringbuf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>paramCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CONFIG_PREFIX</name> <literal type="string">"delay"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>MakeRingBuffer</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pf_ringbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pf_write</name></name></expr></argument>,

<argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Couldnt allocate buffer for delay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_delay</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CONFIG_PREFIX</name> <literal type="string">"feedback"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_feedback</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CONFIG_PREFIX</name> <literal type="string">"crossfeed"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_feedback</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>CONFIG_PREFIX</name> <literal type="string">"dry-mix"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_dry_mix</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>f_float</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
