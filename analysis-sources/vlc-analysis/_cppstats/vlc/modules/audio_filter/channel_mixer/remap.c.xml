<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\audio_filter\channel_mixer\remap.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMAP_CFG</name></cpp:macro> <cpp:value>"aout-remap-"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>channel_wg4idx</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>channel_idx</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>channel_name</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>REMAP_CFG</name> <literal type="string">"channel-left"</literal></expr>, <expr><name>REMAP_CFG</name> <literal type="string">"channel-center"</literal></expr>,

<expr><name>REMAP_CFG</name> <literal type="string">"channel-right"</literal></expr>, <expr><name>REMAP_CFG</name> <literal type="string">"channel-rearleft"</literal></expr>,

<expr><name>REMAP_CFG</name> <literal type="string">"channel-rearcenter"</literal></expr>, <expr><name>REMAP_CFG</name> <literal type="string">"channel-rearright"</literal></expr>,

<expr><name>REMAP_CFG</name> <literal type="string">"channel-middleleft"</literal></expr>, <expr><name>REMAP_CFG</name> <literal type="string">"channel-middleright"</literal></expr>,

<expr><name>REMAP_CFG</name> <literal type="string">"channel-lfe"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>channel_desc</name><index>[]</index></name> <init>=

<expr><block>{

<expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Left"</literal></expr></argument> )</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Center"</literal></expr></argument> )</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Right"</literal></expr></argument> )</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Rear left"</literal></expr></argument> )</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Rear center"</literal></expr></argument> )</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Rear right"</literal></expr></argument> )</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Side left"</literal></expr></argument> )</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"Side right"</literal></expr></argument> )</argument_list></call></expr>, <macro><name>N_</name><argument_list>( <argument><literal type="string">"Low-frequency effects"</literal></argument> )</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>channel_flag</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_MIDDLELEFT</name></expr>, <expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr>, <expr><name>AOUT_CHAN_LFE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Audio channel remapper"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"audio filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_AFILTER</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenFilter</argument>, <argument>CloseFilter</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"Remap"</literal></argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHANNEL</name><parameter_list>( <parameter><type><name>idx</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>add_integer( channel_name[idx], idx, channel_desc[idx], channel_desc[idx], false) change_integer_list( channel_idx, channel_desc )</cpp:value></cpp:define>

<macro><name>CHANNEL</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <macro><name>CHANNEL</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>CHANNEL</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>CHANNEL</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>CHANNEL</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro> <macro><name>CHANNEL</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>CHANNEL</name><argument_list>(<argument><literal type="number">6</literal></argument>)</argument_list></macro> <macro><name>CHANNEL</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro> <macro><name>CHANNEL</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHANNEL</name></cpp:undef>

<macro><name>add_bool</name><argument_list>( <argument>REMAP_CFG <literal type="string">"normalize"</literal></argument>, <argument>true</argument>, <argument><literal type="string">"Normalize channels"</literal></argument>,

<argument><literal type="string">"When mapping more than one channel to a single output channel, "</literal>

<literal type="string">"normalize the output accordingly."</literal></argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenFilter</argument>, <argument>CloseFilter</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Remap</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>remap_fun_t</name>)<parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>remap_fun_t</name></type> <name>pf_remap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>nb_in_ch</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>map_ch</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_normalize</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>valid_channels</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AOUT_CHAN_LEFT</name></expr>,

<expr><name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARCENTER</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name>

<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARCENTER</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>CanonicaliseChannels</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_physical_channels</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>valid_channels</name></expr></argument> )</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>( <argument><expr><name><name>valid_channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_physical_channels</name> <operator>&amp;</operator> <operator>~</operator><name><name>valid_channels</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>valid_channels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_REMAP</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>static void RemapCopy##name( filter_t *p_filter, const void *p_srcorig, void *p_destorig, int i_nb_samples, unsigned i_nb_in_channels, unsigned i_nb_out_channels ) { filter_sys_t *p_sys = ( filter_sys_t * )p_filter-&gt;p_sys; const type *p_src = p_srcorig; type *p_dest = p_destorig; for( int i = 0; i &lt; i_nb_samples; i++ ) { for( uint8_t in_ch = 0; in_ch &lt; i_nb_in_channels; in_ch++ ) { int8_t out_ch = p_sys-&gt;map_ch[ in_ch ]; if (out_ch &lt; 0) continue; memcpy( p_dest + out_ch, p_src + in_ch, sizeof( type ) ); } p_src += i_nb_in_channels; p_dest += i_nb_out_channels; } } static void RemapAdd##name( filter_t *p_filter, const void *p_srcorig, void *p_destorig, int i_nb_samples, unsigned i_nb_in_channels, unsigned i_nb_out_channels ) { filter_sys_t *p_sys = ( filter_sys_t * )p_filter-&gt;p_sys; const type *p_src = p_srcorig; type *p_dest = p_destorig; for( int i = 0; i &lt; i_nb_samples; i++ ) { for( uint8_t in_ch = 0; in_ch &lt; i_nb_in_channels; in_ch++ ) { int8_t out_ch = p_sys-&gt;map_ch[ in_ch ]; if (out_ch &lt; 0) continue; if( p_sys-&gt;b_normalize ) p_dest[ out_ch ] += p_src[ in_ch ] / p_sys-&gt;nb_in_ch[ out_ch ]; else p_dest[ out_ch ] += p_src[ in_ch ]; } p_src += i_nb_in_channels; p_dest += i_nb_out_channels; } }</cpp:value></cpp:define>

<macro><name>DEFINE_REMAP</name><argument_list>( <argument>U8</argument>, <argument>uint8_t</argument> )</argument_list></macro>

<macro><name>DEFINE_REMAP</name><argument_list>( <argument>S16N</argument>, <argument>int16_t</argument> )</argument_list></macro>

<macro><name>DEFINE_REMAP</name><argument_list>( <argument>S32N</argument>, <argument>int32_t</argument> )</argument_list></macro>

<macro><name>DEFINE_REMAP</name><argument_list>( <argument>FL32</argument>, <argument>float</argument> )</argument_list></macro>

<macro><name>DEFINE_REMAP</name><argument_list>( <argument>FL64</argument>, <argument>double</argument> )</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFINE_REMAP</name></cpp:undef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>remap_fun_t</name></type> <name>GetRemapFun</name><parameter_list>( <parameter><decl><type><name>audio_format_t</name> <modifier>*</modifier></type><name>p_format</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_add</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_add</name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_format</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>

<return>return <expr><name>RemapAddU8</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>

<return>return <expr><name>RemapAddS16N</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case>

<return>return <expr><name>RemapAddS32N</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>

<return>return <expr><name>RemapAddFL32</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case>

<return>return <expr><name>RemapAddFL64</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_format</name><operator>-&gt;</operator><name>i_format</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>

<return>return <expr><name>RemapCopyU8</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_S16N</name></expr>:</case>

<return>return <expr><name>RemapCopyS16N</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_S32N</name></expr>:</case>

<return>return <expr><name>RemapCopyS32N</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_FL32</name></expr>:</case>

<return>return <expr><name>RemapCopyFL32</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_FL64</name></expr>:</case>

<return>return <expr><name>RemapCopyFL64</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_format_t</name> <modifier>*</modifier></type><name>audio_in</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>audio_format_t</name> <modifier>*</modifier></type><name>audio_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"channel-left"</literal></expr>, <expr><literal type="string">"channel-center"</literal></expr>, <expr><literal type="string">"channel-right"</literal></expr>, <expr><literal type="string">"channel-rearleft"</literal></expr>,

<expr><literal type="string">"channel-rearcenter"</literal></expr>, <expr><literal type="string">"channel-rearright"</literal></expr>, <expr><literal type="string">"channel-middleleft"</literal></expr>,

<expr><literal type="string">"channel-middleright"</literal></expr>, <expr><literal type="string">"channel-lfe"</literal></expr>, <expr><literal type="string">"normalize"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>REMAP_CFG</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_output_physical</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>pi_map_ch</name><index>[ <expr><name>AOUT_CHAN_MAX</name></expr> ]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_normalize</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>REMAP_CFG</name> <literal type="string">"normalize"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>in_ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wg4_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>in_ch</name> <operator>&lt;</operator> <name><name>audio_in</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>in_ch</name><operator>++</operator></expr><operator>,</operator> <expr><name>wg4_i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<while>while<condition>( <expr><operator>(</operator> <name><name>audio_in</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>&amp;</operator> <name><name>pi_vlc_chan_order_wg4</name><index>[ <expr><name>wg4_i</name></expr> ]</index></name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>wg4_i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>wg4_i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>pi_vlc_chan_order_wg4</name></expr></argument> )</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>( <argument><expr><name><name>pi_vlc_chan_order_wg4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>unsigned</name></type> <name>channel_wg4idx_len</name> <init>= <expr><sizeof>sizeof<argument_list>( <argument><expr><name>channel_wg4idx</name></expr></argument> )</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>( <argument><expr><name><name>channel_wg4idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_chnidx</name> <init>= <expr><call><name>memchr</name><argument_list>( <argument><expr><name>channel_wg4idx</name></expr></argument>, <argument><expr><name>wg4_i</name></expr></argument>, <argument><expr><name>channel_wg4idx_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pi_chnidx</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>chnidx</name> <init>= <expr><name>pi_chnidx</name> <operator>-</operator> <name>channel_wg4idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>val</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>channel_name</name><index>[<expr><name>chnidx</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>AOUT_CHAN_MAX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"invalid channel index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pi_map_ch</name><index>[<expr><name>in_ch</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>out_idx</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pi_map_ch</name><index>[<expr><name>in_ch</name></expr>]</index></name> <operator>=</operator> <name><name>channel_wg4idx</name><index>[ <expr><name>out_idx</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_output_physical</name> <operator>|=</operator> <name><name>channel_flag</name><index>[ <expr><name>out_idx</name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_output_physical</name> <operator>=</operator> <call><name>CanonicaliseChannels</name><argument_list>( <argument><expr><name>i_output_physical</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels</name> <init>= <expr><call><name>vlc_popcount</name><argument_list>(<argument><expr><name>i_output_physical</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>out_ch_sorted</name><index>[ <expr><name>AOUT_CHAN_MAX</name></expr> ]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wg4_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>wg4_i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<while>while<condition>( <expr><operator>(</operator> <name>i_output_physical</name> <operator>&amp;</operator> <name><name>pi_vlc_chan_order_wg4</name><index>[ <expr><name>wg4_i</name></expr> ]</index></name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>wg4_i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>wg4_i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>pi_vlc_chan_order_wg4</name></expr></argument> )</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>( <argument><expr><name><name>pi_vlc_chan_order_wg4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>out_ch_sorted</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>wg4_i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>bool</name></type> <name>b_multiple</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>nb_in_ch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>nb_in_ch</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>audio_in</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name>wg4_out_ch</name> <init>= <expr><name><name>pi_map_ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wg4_out_ch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>map_ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_out_ch</name> <init>= <expr><call><name>memchr</name><argument_list>( <argument><expr><name>out_ch_sorted</name></expr></argument>, <argument><expr><name>wg4_out_ch</name></expr></argument>, <argument><expr><name>i_channels</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pi_out_ch</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>map_ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pi_out_ch</name> <operator>-</operator> <name>out_ch_sorted</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>p_sys</name><operator>-&gt;</operator><name>nb_in_ch</name><index>[ <expr><name><name>p_sys</name><operator>-&gt;</operator><name>map_ch</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_multiple</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_remap</name></name> <operator>=</operator> <call><name>GetRemapFun</name><argument_list>( <argument><expr><name>audio_in</name></expr></argument>, <argument><expr><name>b_multiple</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pf_remap</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Could not decide on %s remap function"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_multiple</name></expr> ?</condition><then> <expr><literal type="string">"an add"</literal></expr> </then><else>: <expr><literal type="string">"a copy"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>audio_out</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>audio_in</name><operator>-&gt;</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio_out</name><operator>-&gt;</operator><name>i_format</name></name> <operator>=</operator> <name><name>audio_in</name><operator>-&gt;</operator><name>i_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio_out</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>i_output_physical</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>( <argument><expr><name>audio_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"%s '%4.4s'-&gt;'%4.4s' %d Hz-&gt;%d Hz %s-&gt;%s"</literal></expr></argument>,

<argument><expr><literal type="string">"Remap filter"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>audio_in</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>audio_out</name><operator>-&gt;</operator><name>i_format</name></name></expr></argument>,

<argument><expr><name><name>audio_in</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>, <argument><expr><name><name>audio_out</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><call><name>aout_FormatPrintChannels</name><argument_list>( <argument><expr><name>audio_in</name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>aout_FormatPrintChannels</name><argument_list>( <argument><expr><name>audio_out</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>Remap</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Remap</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name> <operator>||</operator> <operator>!</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_out_size</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_out</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't get output buffer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_out_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_remap</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_out</name></expr>;</return>

</block_content>}</block></function>

</unit>
